
ProgrammerCC_CDRev02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009898  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08009a20  08009a20  00019a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e00  08009e00  0002be48  2**0
                  CONTENTS
  4 .ARM          00000008  08009e00  08009e00  00019e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e08  08009e08  0002be48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e08  08009e08  00019e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e0c  08009e0c  00019e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .reflash_text 00000648  0801b800  0801b800  0002b800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .data         00000004  20000000  08009e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002930  20000004  08009e14  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000404  20002934  08009e14  00022934  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  0002be48  2**0
                  CONTENTS, READONLY
 13 .debug_info   00052532  00000000  00000000  0002be70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000051c2  00000000  00000000  0007e3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000012d8  00000000  00000000  00083568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000010a8  00000000  00000000  00084840  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00020a3a  00000000  00000000  000858e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001b66c  00000000  00000000  000a6322  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00087119  00000000  00000000  000c198e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00148aa7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040d8  00000000  00000000  00148b24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c06      	ldr	r4, [pc, #24]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d107      	bne.n	80001a2 <__do_global_dtors_aux+0x1a>
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <__do_global_dtors_aux+0x16>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x24>)
 800019a:	e000      	b.n	800019e <__do_global_dtors_aux+0x16>
 800019c:	bf00      	nop
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000004 	.word	0x20000004
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009a08 	.word	0x08009a08

080001b0 <frame_dummy>:
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <frame_dummy+0x14>)
 80001b2:	b510      	push	{r4, lr}
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <frame_dummy+0x10>
 80001b8:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	4804      	ldr	r0, [pc, #16]	; (80001cc <frame_dummy+0x1c>)
 80001bc:	e000      	b.n	80001c0 <frame_dummy+0x10>
 80001be:	bf00      	nop
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	46c0      	nop			; (mov r8, r8)
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000008 	.word	0x20000008
 80001cc:	08009a08 	.word	0x08009a08

080001d0 <__udivsi3>:
 80001d0:	2200      	movs	r2, #0
 80001d2:	0843      	lsrs	r3, r0, #1
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d374      	bcc.n	80002c2 <__udivsi3+0xf2>
 80001d8:	0903      	lsrs	r3, r0, #4
 80001da:	428b      	cmp	r3, r1
 80001dc:	d35f      	bcc.n	800029e <__udivsi3+0xce>
 80001de:	0a03      	lsrs	r3, r0, #8
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d344      	bcc.n	800026e <__udivsi3+0x9e>
 80001e4:	0b03      	lsrs	r3, r0, #12
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d328      	bcc.n	800023c <__udivsi3+0x6c>
 80001ea:	0c03      	lsrs	r3, r0, #16
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d30d      	bcc.n	800020c <__udivsi3+0x3c>
 80001f0:	22ff      	movs	r2, #255	; 0xff
 80001f2:	0209      	lsls	r1, r1, #8
 80001f4:	ba12      	rev	r2, r2
 80001f6:	0c03      	lsrs	r3, r0, #16
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d302      	bcc.n	8000202 <__udivsi3+0x32>
 80001fc:	1212      	asrs	r2, r2, #8
 80001fe:	0209      	lsls	r1, r1, #8
 8000200:	d065      	beq.n	80002ce <__udivsi3+0xfe>
 8000202:	0b03      	lsrs	r3, r0, #12
 8000204:	428b      	cmp	r3, r1
 8000206:	d319      	bcc.n	800023c <__udivsi3+0x6c>
 8000208:	e000      	b.n	800020c <__udivsi3+0x3c>
 800020a:	0a09      	lsrs	r1, r1, #8
 800020c:	0bc3      	lsrs	r3, r0, #15
 800020e:	428b      	cmp	r3, r1
 8000210:	d301      	bcc.n	8000216 <__udivsi3+0x46>
 8000212:	03cb      	lsls	r3, r1, #15
 8000214:	1ac0      	subs	r0, r0, r3
 8000216:	4152      	adcs	r2, r2
 8000218:	0b83      	lsrs	r3, r0, #14
 800021a:	428b      	cmp	r3, r1
 800021c:	d301      	bcc.n	8000222 <__udivsi3+0x52>
 800021e:	038b      	lsls	r3, r1, #14
 8000220:	1ac0      	subs	r0, r0, r3
 8000222:	4152      	adcs	r2, r2
 8000224:	0b43      	lsrs	r3, r0, #13
 8000226:	428b      	cmp	r3, r1
 8000228:	d301      	bcc.n	800022e <__udivsi3+0x5e>
 800022a:	034b      	lsls	r3, r1, #13
 800022c:	1ac0      	subs	r0, r0, r3
 800022e:	4152      	adcs	r2, r2
 8000230:	0b03      	lsrs	r3, r0, #12
 8000232:	428b      	cmp	r3, r1
 8000234:	d301      	bcc.n	800023a <__udivsi3+0x6a>
 8000236:	030b      	lsls	r3, r1, #12
 8000238:	1ac0      	subs	r0, r0, r3
 800023a:	4152      	adcs	r2, r2
 800023c:	0ac3      	lsrs	r3, r0, #11
 800023e:	428b      	cmp	r3, r1
 8000240:	d301      	bcc.n	8000246 <__udivsi3+0x76>
 8000242:	02cb      	lsls	r3, r1, #11
 8000244:	1ac0      	subs	r0, r0, r3
 8000246:	4152      	adcs	r2, r2
 8000248:	0a83      	lsrs	r3, r0, #10
 800024a:	428b      	cmp	r3, r1
 800024c:	d301      	bcc.n	8000252 <__udivsi3+0x82>
 800024e:	028b      	lsls	r3, r1, #10
 8000250:	1ac0      	subs	r0, r0, r3
 8000252:	4152      	adcs	r2, r2
 8000254:	0a43      	lsrs	r3, r0, #9
 8000256:	428b      	cmp	r3, r1
 8000258:	d301      	bcc.n	800025e <__udivsi3+0x8e>
 800025a:	024b      	lsls	r3, r1, #9
 800025c:	1ac0      	subs	r0, r0, r3
 800025e:	4152      	adcs	r2, r2
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d301      	bcc.n	800026a <__udivsi3+0x9a>
 8000266:	020b      	lsls	r3, r1, #8
 8000268:	1ac0      	subs	r0, r0, r3
 800026a:	4152      	adcs	r2, r2
 800026c:	d2cd      	bcs.n	800020a <__udivsi3+0x3a>
 800026e:	09c3      	lsrs	r3, r0, #7
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__udivsi3+0xa8>
 8000274:	01cb      	lsls	r3, r1, #7
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0983      	lsrs	r3, r0, #6
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__udivsi3+0xb4>
 8000280:	018b      	lsls	r3, r1, #6
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0943      	lsrs	r3, r0, #5
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__udivsi3+0xc0>
 800028c:	014b      	lsls	r3, r1, #5
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0903      	lsrs	r3, r0, #4
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__udivsi3+0xcc>
 8000298:	010b      	lsls	r3, r1, #4
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	08c3      	lsrs	r3, r0, #3
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__udivsi3+0xd8>
 80002a4:	00cb      	lsls	r3, r1, #3
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0883      	lsrs	r3, r0, #2
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__udivsi3+0xe4>
 80002b0:	008b      	lsls	r3, r1, #2
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0843      	lsrs	r3, r0, #1
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__udivsi3+0xf0>
 80002bc:	004b      	lsls	r3, r1, #1
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	1a41      	subs	r1, r0, r1
 80002c4:	d200      	bcs.n	80002c8 <__udivsi3+0xf8>
 80002c6:	4601      	mov	r1, r0
 80002c8:	4152      	adcs	r2, r2
 80002ca:	4610      	mov	r0, r2
 80002cc:	4770      	bx	lr
 80002ce:	e7ff      	b.n	80002d0 <__udivsi3+0x100>
 80002d0:	b501      	push	{r0, lr}
 80002d2:	2000      	movs	r0, #0
 80002d4:	f000 f8f0 	bl	80004b8 <__aeabi_idiv0>
 80002d8:	bd02      	pop	{r1, pc}
 80002da:	46c0      	nop			; (mov r8, r8)

080002dc <__aeabi_uidivmod>:
 80002dc:	2900      	cmp	r1, #0
 80002de:	d0f7      	beq.n	80002d0 <__udivsi3+0x100>
 80002e0:	e776      	b.n	80001d0 <__udivsi3>
 80002e2:	4770      	bx	lr

080002e4 <__divsi3>:
 80002e4:	4603      	mov	r3, r0
 80002e6:	430b      	orrs	r3, r1
 80002e8:	d47f      	bmi.n	80003ea <__divsi3+0x106>
 80002ea:	2200      	movs	r2, #0
 80002ec:	0843      	lsrs	r3, r0, #1
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d374      	bcc.n	80003dc <__divsi3+0xf8>
 80002f2:	0903      	lsrs	r3, r0, #4
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d35f      	bcc.n	80003b8 <__divsi3+0xd4>
 80002f8:	0a03      	lsrs	r3, r0, #8
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d344      	bcc.n	8000388 <__divsi3+0xa4>
 80002fe:	0b03      	lsrs	r3, r0, #12
 8000300:	428b      	cmp	r3, r1
 8000302:	d328      	bcc.n	8000356 <__divsi3+0x72>
 8000304:	0c03      	lsrs	r3, r0, #16
 8000306:	428b      	cmp	r3, r1
 8000308:	d30d      	bcc.n	8000326 <__divsi3+0x42>
 800030a:	22ff      	movs	r2, #255	; 0xff
 800030c:	0209      	lsls	r1, r1, #8
 800030e:	ba12      	rev	r2, r2
 8000310:	0c03      	lsrs	r3, r0, #16
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__divsi3+0x38>
 8000316:	1212      	asrs	r2, r2, #8
 8000318:	0209      	lsls	r1, r1, #8
 800031a:	d065      	beq.n	80003e8 <__divsi3+0x104>
 800031c:	0b03      	lsrs	r3, r0, #12
 800031e:	428b      	cmp	r3, r1
 8000320:	d319      	bcc.n	8000356 <__divsi3+0x72>
 8000322:	e000      	b.n	8000326 <__divsi3+0x42>
 8000324:	0a09      	lsrs	r1, r1, #8
 8000326:	0bc3      	lsrs	r3, r0, #15
 8000328:	428b      	cmp	r3, r1
 800032a:	d301      	bcc.n	8000330 <__divsi3+0x4c>
 800032c:	03cb      	lsls	r3, r1, #15
 800032e:	1ac0      	subs	r0, r0, r3
 8000330:	4152      	adcs	r2, r2
 8000332:	0b83      	lsrs	r3, r0, #14
 8000334:	428b      	cmp	r3, r1
 8000336:	d301      	bcc.n	800033c <__divsi3+0x58>
 8000338:	038b      	lsls	r3, r1, #14
 800033a:	1ac0      	subs	r0, r0, r3
 800033c:	4152      	adcs	r2, r2
 800033e:	0b43      	lsrs	r3, r0, #13
 8000340:	428b      	cmp	r3, r1
 8000342:	d301      	bcc.n	8000348 <__divsi3+0x64>
 8000344:	034b      	lsls	r3, r1, #13
 8000346:	1ac0      	subs	r0, r0, r3
 8000348:	4152      	adcs	r2, r2
 800034a:	0b03      	lsrs	r3, r0, #12
 800034c:	428b      	cmp	r3, r1
 800034e:	d301      	bcc.n	8000354 <__divsi3+0x70>
 8000350:	030b      	lsls	r3, r1, #12
 8000352:	1ac0      	subs	r0, r0, r3
 8000354:	4152      	adcs	r2, r2
 8000356:	0ac3      	lsrs	r3, r0, #11
 8000358:	428b      	cmp	r3, r1
 800035a:	d301      	bcc.n	8000360 <__divsi3+0x7c>
 800035c:	02cb      	lsls	r3, r1, #11
 800035e:	1ac0      	subs	r0, r0, r3
 8000360:	4152      	adcs	r2, r2
 8000362:	0a83      	lsrs	r3, r0, #10
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x88>
 8000368:	028b      	lsls	r3, r1, #10
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0a43      	lsrs	r3, r0, #9
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x94>
 8000374:	024b      	lsls	r3, r1, #9
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0xa0>
 8000380:	020b      	lsls	r3, r1, #8
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	d2cd      	bcs.n	8000324 <__divsi3+0x40>
 8000388:	09c3      	lsrs	r3, r0, #7
 800038a:	428b      	cmp	r3, r1
 800038c:	d301      	bcc.n	8000392 <__divsi3+0xae>
 800038e:	01cb      	lsls	r3, r1, #7
 8000390:	1ac0      	subs	r0, r0, r3
 8000392:	4152      	adcs	r2, r2
 8000394:	0983      	lsrs	r3, r0, #6
 8000396:	428b      	cmp	r3, r1
 8000398:	d301      	bcc.n	800039e <__divsi3+0xba>
 800039a:	018b      	lsls	r3, r1, #6
 800039c:	1ac0      	subs	r0, r0, r3
 800039e:	4152      	adcs	r2, r2
 80003a0:	0943      	lsrs	r3, r0, #5
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d301      	bcc.n	80003aa <__divsi3+0xc6>
 80003a6:	014b      	lsls	r3, r1, #5
 80003a8:	1ac0      	subs	r0, r0, r3
 80003aa:	4152      	adcs	r2, r2
 80003ac:	0903      	lsrs	r3, r0, #4
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0xd2>
 80003b2:	010b      	lsls	r3, r1, #4
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	08c3      	lsrs	r3, r0, #3
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0xde>
 80003be:	00cb      	lsls	r3, r1, #3
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	0883      	lsrs	r3, r0, #2
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0xea>
 80003ca:	008b      	lsls	r3, r1, #2
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0xf6>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0xfe>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4152      	adcs	r2, r2
 80003e4:	4610      	mov	r0, r2
 80003e6:	4770      	bx	lr
 80003e8:	e05d      	b.n	80004a6 <__divsi3+0x1c2>
 80003ea:	0fca      	lsrs	r2, r1, #31
 80003ec:	d000      	beq.n	80003f0 <__divsi3+0x10c>
 80003ee:	4249      	negs	r1, r1
 80003f0:	1003      	asrs	r3, r0, #32
 80003f2:	d300      	bcc.n	80003f6 <__divsi3+0x112>
 80003f4:	4240      	negs	r0, r0
 80003f6:	4053      	eors	r3, r2
 80003f8:	2200      	movs	r2, #0
 80003fa:	469c      	mov	ip, r3
 80003fc:	0903      	lsrs	r3, r0, #4
 80003fe:	428b      	cmp	r3, r1
 8000400:	d32d      	bcc.n	800045e <__divsi3+0x17a>
 8000402:	0a03      	lsrs	r3, r0, #8
 8000404:	428b      	cmp	r3, r1
 8000406:	d312      	bcc.n	800042e <__divsi3+0x14a>
 8000408:	22fc      	movs	r2, #252	; 0xfc
 800040a:	0189      	lsls	r1, r1, #6
 800040c:	ba12      	rev	r2, r2
 800040e:	0a03      	lsrs	r3, r0, #8
 8000410:	428b      	cmp	r3, r1
 8000412:	d30c      	bcc.n	800042e <__divsi3+0x14a>
 8000414:	0189      	lsls	r1, r1, #6
 8000416:	1192      	asrs	r2, r2, #6
 8000418:	428b      	cmp	r3, r1
 800041a:	d308      	bcc.n	800042e <__divsi3+0x14a>
 800041c:	0189      	lsls	r1, r1, #6
 800041e:	1192      	asrs	r2, r2, #6
 8000420:	428b      	cmp	r3, r1
 8000422:	d304      	bcc.n	800042e <__divsi3+0x14a>
 8000424:	0189      	lsls	r1, r1, #6
 8000426:	d03a      	beq.n	800049e <__divsi3+0x1ba>
 8000428:	1192      	asrs	r2, r2, #6
 800042a:	e000      	b.n	800042e <__divsi3+0x14a>
 800042c:	0989      	lsrs	r1, r1, #6
 800042e:	09c3      	lsrs	r3, r0, #7
 8000430:	428b      	cmp	r3, r1
 8000432:	d301      	bcc.n	8000438 <__divsi3+0x154>
 8000434:	01cb      	lsls	r3, r1, #7
 8000436:	1ac0      	subs	r0, r0, r3
 8000438:	4152      	adcs	r2, r2
 800043a:	0983      	lsrs	r3, r0, #6
 800043c:	428b      	cmp	r3, r1
 800043e:	d301      	bcc.n	8000444 <__divsi3+0x160>
 8000440:	018b      	lsls	r3, r1, #6
 8000442:	1ac0      	subs	r0, r0, r3
 8000444:	4152      	adcs	r2, r2
 8000446:	0943      	lsrs	r3, r0, #5
 8000448:	428b      	cmp	r3, r1
 800044a:	d301      	bcc.n	8000450 <__divsi3+0x16c>
 800044c:	014b      	lsls	r3, r1, #5
 800044e:	1ac0      	subs	r0, r0, r3
 8000450:	4152      	adcs	r2, r2
 8000452:	0903      	lsrs	r3, r0, #4
 8000454:	428b      	cmp	r3, r1
 8000456:	d301      	bcc.n	800045c <__divsi3+0x178>
 8000458:	010b      	lsls	r3, r1, #4
 800045a:	1ac0      	subs	r0, r0, r3
 800045c:	4152      	adcs	r2, r2
 800045e:	08c3      	lsrs	r3, r0, #3
 8000460:	428b      	cmp	r3, r1
 8000462:	d301      	bcc.n	8000468 <__divsi3+0x184>
 8000464:	00cb      	lsls	r3, r1, #3
 8000466:	1ac0      	subs	r0, r0, r3
 8000468:	4152      	adcs	r2, r2
 800046a:	0883      	lsrs	r3, r0, #2
 800046c:	428b      	cmp	r3, r1
 800046e:	d301      	bcc.n	8000474 <__divsi3+0x190>
 8000470:	008b      	lsls	r3, r1, #2
 8000472:	1ac0      	subs	r0, r0, r3
 8000474:	4152      	adcs	r2, r2
 8000476:	d2d9      	bcs.n	800042c <__divsi3+0x148>
 8000478:	0843      	lsrs	r3, r0, #1
 800047a:	428b      	cmp	r3, r1
 800047c:	d301      	bcc.n	8000482 <__divsi3+0x19e>
 800047e:	004b      	lsls	r3, r1, #1
 8000480:	1ac0      	subs	r0, r0, r3
 8000482:	4152      	adcs	r2, r2
 8000484:	1a41      	subs	r1, r0, r1
 8000486:	d200      	bcs.n	800048a <__divsi3+0x1a6>
 8000488:	4601      	mov	r1, r0
 800048a:	4663      	mov	r3, ip
 800048c:	4152      	adcs	r2, r2
 800048e:	105b      	asrs	r3, r3, #1
 8000490:	4610      	mov	r0, r2
 8000492:	d301      	bcc.n	8000498 <__divsi3+0x1b4>
 8000494:	4240      	negs	r0, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d500      	bpl.n	800049c <__divsi3+0x1b8>
 800049a:	4249      	negs	r1, r1
 800049c:	4770      	bx	lr
 800049e:	4663      	mov	r3, ip
 80004a0:	105b      	asrs	r3, r3, #1
 80004a2:	d300      	bcc.n	80004a6 <__divsi3+0x1c2>
 80004a4:	4240      	negs	r0, r0
 80004a6:	b501      	push	{r0, lr}
 80004a8:	2000      	movs	r0, #0
 80004aa:	f000 f805 	bl	80004b8 <__aeabi_idiv0>
 80004ae:	bd02      	pop	{r1, pc}

080004b0 <__aeabi_idivmod>:
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d0f8      	beq.n	80004a6 <__divsi3+0x1c2>
 80004b4:	e716      	b.n	80002e4 <__divsi3>
 80004b6:	4770      	bx	lr

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_ldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d115      	bne.n	80004ec <__aeabi_ldivmod+0x30>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d113      	bne.n	80004ec <__aeabi_ldivmod+0x30>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	db06      	blt.n	80004d6 <__aeabi_ldivmod+0x1a>
 80004c8:	dc01      	bgt.n	80004ce <__aeabi_ldivmod+0x12>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d006      	beq.n	80004dc <__aeabi_ldivmod+0x20>
 80004ce:	2000      	movs	r0, #0
 80004d0:	43c0      	mvns	r0, r0
 80004d2:	0841      	lsrs	r1, r0, #1
 80004d4:	e002      	b.n	80004dc <__aeabi_ldivmod+0x20>
 80004d6:	2180      	movs	r1, #128	; 0x80
 80004d8:	0609      	lsls	r1, r1, #24
 80004da:	2000      	movs	r0, #0
 80004dc:	b407      	push	{r0, r1, r2}
 80004de:	4802      	ldr	r0, [pc, #8]	; (80004e8 <__aeabi_ldivmod+0x2c>)
 80004e0:	a101      	add	r1, pc, #4	; (adr r1, 80004e8 <__aeabi_ldivmod+0x2c>)
 80004e2:	1840      	adds	r0, r0, r1
 80004e4:	9002      	str	r0, [sp, #8]
 80004e6:	bd03      	pop	{r0, r1, pc}
 80004e8:	ffffffd1 	.word	0xffffffd1
 80004ec:	b403      	push	{r0, r1}
 80004ee:	4668      	mov	r0, sp
 80004f0:	b501      	push	{r0, lr}
 80004f2:	9802      	ldr	r0, [sp, #8]
 80004f4:	f000 f830 	bl	8000558 <__gnu_ldivmod_helper>
 80004f8:	9b01      	ldr	r3, [sp, #4]
 80004fa:	469e      	mov	lr, r3
 80004fc:	b002      	add	sp, #8
 80004fe:	bc0c      	pop	{r2, r3}
 8000500:	4770      	bx	lr
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_lmul>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	46ce      	mov	lr, r9
 8000508:	4647      	mov	r7, r8
 800050a:	0415      	lsls	r5, r2, #16
 800050c:	0c2d      	lsrs	r5, r5, #16
 800050e:	002e      	movs	r6, r5
 8000510:	b580      	push	{r7, lr}
 8000512:	0407      	lsls	r7, r0, #16
 8000514:	0c14      	lsrs	r4, r2, #16
 8000516:	0c3f      	lsrs	r7, r7, #16
 8000518:	4699      	mov	r9, r3
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	437e      	muls	r6, r7
 800051e:	435d      	muls	r5, r3
 8000520:	4367      	muls	r7, r4
 8000522:	4363      	muls	r3, r4
 8000524:	197f      	adds	r7, r7, r5
 8000526:	0c34      	lsrs	r4, r6, #16
 8000528:	19e4      	adds	r4, r4, r7
 800052a:	469c      	mov	ip, r3
 800052c:	42a5      	cmp	r5, r4
 800052e:	d903      	bls.n	8000538 <__aeabi_lmul+0x34>
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	025b      	lsls	r3, r3, #9
 8000534:	4698      	mov	r8, r3
 8000536:	44c4      	add	ip, r8
 8000538:	464b      	mov	r3, r9
 800053a:	4343      	muls	r3, r0
 800053c:	4351      	muls	r1, r2
 800053e:	0c25      	lsrs	r5, r4, #16
 8000540:	0436      	lsls	r6, r6, #16
 8000542:	4465      	add	r5, ip
 8000544:	0c36      	lsrs	r6, r6, #16
 8000546:	0424      	lsls	r4, r4, #16
 8000548:	19a4      	adds	r4, r4, r6
 800054a:	195b      	adds	r3, r3, r5
 800054c:	1859      	adds	r1, r3, r1
 800054e:	0020      	movs	r0, r4
 8000550:	bc0c      	pop	{r2, r3}
 8000552:	4690      	mov	r8, r2
 8000554:	4699      	mov	r9, r3
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000558 <__gnu_ldivmod_helper>:
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055a:	b083      	sub	sp, #12
 800055c:	0016      	movs	r6, r2
 800055e:	001f      	movs	r7, r3
 8000560:	9000      	str	r0, [sp, #0]
 8000562:	9101      	str	r1, [sp, #4]
 8000564:	f000 f820 	bl	80005a8 <__divdi3>
 8000568:	0004      	movs	r4, r0
 800056a:	000d      	movs	r5, r1
 800056c:	0002      	movs	r2, r0
 800056e:	000b      	movs	r3, r1
 8000570:	0030      	movs	r0, r6
 8000572:	0039      	movs	r1, r7
 8000574:	f7ff ffc6 	bl	8000504 <__aeabi_lmul>
 8000578:	9a00      	ldr	r2, [sp, #0]
 800057a:	9b01      	ldr	r3, [sp, #4]
 800057c:	1a12      	subs	r2, r2, r0
 800057e:	418b      	sbcs	r3, r1
 8000580:	9908      	ldr	r1, [sp, #32]
 8000582:	0020      	movs	r0, r4
 8000584:	600a      	str	r2, [r1, #0]
 8000586:	604b      	str	r3, [r1, #4]
 8000588:	0029      	movs	r1, r5
 800058a:	b003      	add	sp, #12
 800058c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)

08000590 <__clzdi2>:
 8000590:	b510      	push	{r4, lr}
 8000592:	2900      	cmp	r1, #0
 8000594:	d103      	bne.n	800059e <__clzdi2+0xe>
 8000596:	f000 f8df 	bl	8000758 <__clzsi2>
 800059a:	3020      	adds	r0, #32
 800059c:	e002      	b.n	80005a4 <__clzdi2+0x14>
 800059e:	1c08      	adds	r0, r1, #0
 80005a0:	f000 f8da 	bl	8000758 <__clzsi2>
 80005a4:	bd10      	pop	{r4, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)

080005a8 <__divdi3>:
 80005a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005aa:	464e      	mov	r6, r9
 80005ac:	4657      	mov	r7, sl
 80005ae:	46de      	mov	lr, fp
 80005b0:	4645      	mov	r5, r8
 80005b2:	b5e0      	push	{r5, r6, r7, lr}
 80005b4:	000f      	movs	r7, r1
 80005b6:	2100      	movs	r1, #0
 80005b8:	b083      	sub	sp, #12
 80005ba:	0006      	movs	r6, r0
 80005bc:	4689      	mov	r9, r1
 80005be:	2f00      	cmp	r7, #0
 80005c0:	da06      	bge.n	80005d0 <__divdi3+0x28>
 80005c2:	0039      	movs	r1, r7
 80005c4:	2700      	movs	r7, #0
 80005c6:	4246      	negs	r6, r0
 80005c8:	418f      	sbcs	r7, r1
 80005ca:	2101      	movs	r1, #1
 80005cc:	4249      	negs	r1, r1
 80005ce:	4689      	mov	r9, r1
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	da07      	bge.n	80005e4 <__divdi3+0x3c>
 80005d4:	4649      	mov	r1, r9
 80005d6:	43c9      	mvns	r1, r1
 80005d8:	0010      	movs	r0, r2
 80005da:	4689      	mov	r9, r1
 80005dc:	0019      	movs	r1, r3
 80005de:	2300      	movs	r3, #0
 80005e0:	4242      	negs	r2, r0
 80005e2:	418b      	sbcs	r3, r1
 80005e4:	0034      	movs	r4, r6
 80005e6:	003d      	movs	r5, r7
 80005e8:	4692      	mov	sl, r2
 80005ea:	4698      	mov	r8, r3
 80005ec:	42bb      	cmp	r3, r7
 80005ee:	d869      	bhi.n	80006c4 <__divdi3+0x11c>
 80005f0:	d066      	beq.n	80006c0 <__divdi3+0x118>
 80005f2:	4641      	mov	r1, r8
 80005f4:	4650      	mov	r0, sl
 80005f6:	f7ff ffcb 	bl	8000590 <__clzdi2>
 80005fa:	4683      	mov	fp, r0
 80005fc:	0039      	movs	r1, r7
 80005fe:	0030      	movs	r0, r6
 8000600:	f7ff ffc6 	bl	8000590 <__clzdi2>
 8000604:	465b      	mov	r3, fp
 8000606:	1a1b      	subs	r3, r3, r0
 8000608:	469c      	mov	ip, r3
 800060a:	3b20      	subs	r3, #32
 800060c:	469b      	mov	fp, r3
 800060e:	d500      	bpl.n	8000612 <__divdi3+0x6a>
 8000610:	e075      	b.n	80006fe <__divdi3+0x156>
 8000612:	4651      	mov	r1, sl
 8000614:	4658      	mov	r0, fp
 8000616:	4081      	lsls	r1, r0
 8000618:	000b      	movs	r3, r1
 800061a:	4651      	mov	r1, sl
 800061c:	4660      	mov	r0, ip
 800061e:	4081      	lsls	r1, r0
 8000620:	000a      	movs	r2, r1
 8000622:	42bb      	cmp	r3, r7
 8000624:	d861      	bhi.n	80006ea <__divdi3+0x142>
 8000626:	d05e      	beq.n	80006e6 <__divdi3+0x13e>
 8000628:	0034      	movs	r4, r6
 800062a:	003d      	movs	r5, r7
 800062c:	4659      	mov	r1, fp
 800062e:	1aa4      	subs	r4, r4, r2
 8000630:	419d      	sbcs	r5, r3
 8000632:	2900      	cmp	r1, #0
 8000634:	da00      	bge.n	8000638 <__divdi3+0x90>
 8000636:	e07a      	b.n	800072e <__divdi3+0x186>
 8000638:	2100      	movs	r1, #0
 800063a:	2000      	movs	r0, #0
 800063c:	2601      	movs	r6, #1
 800063e:	9000      	str	r0, [sp, #0]
 8000640:	9101      	str	r1, [sp, #4]
 8000642:	4659      	mov	r1, fp
 8000644:	408e      	lsls	r6, r1
 8000646:	9601      	str	r6, [sp, #4]
 8000648:	4661      	mov	r1, ip
 800064a:	2601      	movs	r6, #1
 800064c:	408e      	lsls	r6, r1
 800064e:	4661      	mov	r1, ip
 8000650:	9600      	str	r6, [sp, #0]
 8000652:	2900      	cmp	r1, #0
 8000654:	d050      	beq.n	80006f8 <__divdi3+0x150>
 8000656:	07d9      	lsls	r1, r3, #31
 8000658:	0856      	lsrs	r6, r2, #1
 800065a:	085f      	lsrs	r7, r3, #1
 800065c:	430e      	orrs	r6, r1
 800065e:	4663      	mov	r3, ip
 8000660:	e00e      	b.n	8000680 <__divdi3+0xd8>
 8000662:	42af      	cmp	r7, r5
 8000664:	d101      	bne.n	800066a <__divdi3+0xc2>
 8000666:	42a6      	cmp	r6, r4
 8000668:	d80c      	bhi.n	8000684 <__divdi3+0xdc>
 800066a:	1ba4      	subs	r4, r4, r6
 800066c:	41bd      	sbcs	r5, r7
 800066e:	2101      	movs	r1, #1
 8000670:	1924      	adds	r4, r4, r4
 8000672:	416d      	adcs	r5, r5
 8000674:	2200      	movs	r2, #0
 8000676:	3b01      	subs	r3, #1
 8000678:	1864      	adds	r4, r4, r1
 800067a:	4155      	adcs	r5, r2
 800067c:	2b00      	cmp	r3, #0
 800067e:	d006      	beq.n	800068e <__divdi3+0xe6>
 8000680:	42af      	cmp	r7, r5
 8000682:	d9ee      	bls.n	8000662 <__divdi3+0xba>
 8000684:	3b01      	subs	r3, #1
 8000686:	1924      	adds	r4, r4, r4
 8000688:	416d      	adcs	r5, r5
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1f8      	bne.n	8000680 <__divdi3+0xd8>
 800068e:	9800      	ldr	r0, [sp, #0]
 8000690:	9901      	ldr	r1, [sp, #4]
 8000692:	465b      	mov	r3, fp
 8000694:	1900      	adds	r0, r0, r4
 8000696:	4169      	adcs	r1, r5
 8000698:	2b00      	cmp	r3, #0
 800069a:	db3d      	blt.n	8000718 <__divdi3+0x170>
 800069c:	002e      	movs	r6, r5
 800069e:	40de      	lsrs	r6, r3
 80006a0:	4663      	mov	r3, ip
 80006a2:	002c      	movs	r4, r5
 80006a4:	40dc      	lsrs	r4, r3
 80006a6:	465b      	mov	r3, fp
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db4b      	blt.n	8000744 <__divdi3+0x19c>
 80006ac:	0034      	movs	r4, r6
 80006ae:	465d      	mov	r5, fp
 80006b0:	40ac      	lsls	r4, r5
 80006b2:	0023      	movs	r3, r4
 80006b4:	4664      	mov	r4, ip
 80006b6:	40a6      	lsls	r6, r4
 80006b8:	0032      	movs	r2, r6
 80006ba:	1a80      	subs	r0, r0, r2
 80006bc:	4199      	sbcs	r1, r3
 80006be:	e003      	b.n	80006c8 <__divdi3+0x120>
 80006c0:	42b2      	cmp	r2, r6
 80006c2:	d996      	bls.n	80005f2 <__divdi3+0x4a>
 80006c4:	2000      	movs	r0, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	464b      	mov	r3, r9
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d004      	beq.n	80006d8 <__divdi3+0x130>
 80006ce:	0003      	movs	r3, r0
 80006d0:	000c      	movs	r4, r1
 80006d2:	2100      	movs	r1, #0
 80006d4:	4258      	negs	r0, r3
 80006d6:	41a1      	sbcs	r1, r4
 80006d8:	b003      	add	sp, #12
 80006da:	bc3c      	pop	{r2, r3, r4, r5}
 80006dc:	4690      	mov	r8, r2
 80006de:	4699      	mov	r9, r3
 80006e0:	46a2      	mov	sl, r4
 80006e2:	46ab      	mov	fp, r5
 80006e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e6:	42b1      	cmp	r1, r6
 80006e8:	d99e      	bls.n	8000628 <__divdi3+0x80>
 80006ea:	2100      	movs	r1, #0
 80006ec:	2000      	movs	r0, #0
 80006ee:	9000      	str	r0, [sp, #0]
 80006f0:	9101      	str	r1, [sp, #4]
 80006f2:	4661      	mov	r1, ip
 80006f4:	2900      	cmp	r1, #0
 80006f6:	d1ae      	bne.n	8000656 <__divdi3+0xae>
 80006f8:	9800      	ldr	r0, [sp, #0]
 80006fa:	9901      	ldr	r1, [sp, #4]
 80006fc:	e7e4      	b.n	80006c8 <__divdi3+0x120>
 80006fe:	2320      	movs	r3, #32
 8000700:	4662      	mov	r2, ip
 8000702:	4651      	mov	r1, sl
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	40d9      	lsrs	r1, r3
 8000708:	4640      	mov	r0, r8
 800070a:	9100      	str	r1, [sp, #0]
 800070c:	4661      	mov	r1, ip
 800070e:	4088      	lsls	r0, r1
 8000710:	0003      	movs	r3, r0
 8000712:	9900      	ldr	r1, [sp, #0]
 8000714:	430b      	orrs	r3, r1
 8000716:	e780      	b.n	800061a <__divdi3+0x72>
 8000718:	4662      	mov	r2, ip
 800071a:	2320      	movs	r3, #32
 800071c:	1a9b      	subs	r3, r3, r2
 800071e:	002a      	movs	r2, r5
 8000720:	409a      	lsls	r2, r3
 8000722:	0026      	movs	r6, r4
 8000724:	0013      	movs	r3, r2
 8000726:	4662      	mov	r2, ip
 8000728:	40d6      	lsrs	r6, r2
 800072a:	431e      	orrs	r6, r3
 800072c:	e7b8      	b.n	80006a0 <__divdi3+0xf8>
 800072e:	4661      	mov	r1, ip
 8000730:	2620      	movs	r6, #32
 8000732:	2701      	movs	r7, #1
 8000734:	1a76      	subs	r6, r6, r1
 8000736:	2000      	movs	r0, #0
 8000738:	2100      	movs	r1, #0
 800073a:	40f7      	lsrs	r7, r6
 800073c:	9000      	str	r0, [sp, #0]
 800073e:	9101      	str	r1, [sp, #4]
 8000740:	9701      	str	r7, [sp, #4]
 8000742:	e781      	b.n	8000648 <__divdi3+0xa0>
 8000744:	4667      	mov	r7, ip
 8000746:	2320      	movs	r3, #32
 8000748:	4662      	mov	r2, ip
 800074a:	0035      	movs	r5, r6
 800074c:	40bc      	lsls	r4, r7
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	40dd      	lsrs	r5, r3
 8000752:	0023      	movs	r3, r4
 8000754:	432b      	orrs	r3, r5
 8000756:	e7ad      	b.n	80006b4 <__divdi3+0x10c>

08000758 <__clzsi2>:
 8000758:	211c      	movs	r1, #28
 800075a:	2301      	movs	r3, #1
 800075c:	041b      	lsls	r3, r3, #16
 800075e:	4298      	cmp	r0, r3
 8000760:	d301      	bcc.n	8000766 <__clzsi2+0xe>
 8000762:	0c00      	lsrs	r0, r0, #16
 8000764:	3910      	subs	r1, #16
 8000766:	0a1b      	lsrs	r3, r3, #8
 8000768:	4298      	cmp	r0, r3
 800076a:	d301      	bcc.n	8000770 <__clzsi2+0x18>
 800076c:	0a00      	lsrs	r0, r0, #8
 800076e:	3908      	subs	r1, #8
 8000770:	091b      	lsrs	r3, r3, #4
 8000772:	4298      	cmp	r0, r3
 8000774:	d301      	bcc.n	800077a <__clzsi2+0x22>
 8000776:	0900      	lsrs	r0, r0, #4
 8000778:	3904      	subs	r1, #4
 800077a:	a202      	add	r2, pc, #8	; (adr r2, 8000784 <__clzsi2+0x2c>)
 800077c:	5c10      	ldrb	r0, [r2, r0]
 800077e:	1840      	adds	r0, r0, r1
 8000780:	4770      	bx	lr
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	02020304 	.word	0x02020304
 8000788:	01010101 	.word	0x01010101
	...

08000794 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <HAL_Init+0x24>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_Init+0x24>)
 800079e:	2110      	movs	r1, #16
 80007a0:	430a      	orrs	r2, r1
 80007a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 f809 	bl	80007bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007aa:	f007 ff87 	bl	80086bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40022000 	.word	0x40022000

080007bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80007c4:	f002 fefe 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 80007c8:	0002      	movs	r2, r0
 80007ca:	23fa      	movs	r3, #250	; 0xfa
 80007cc:	0099      	lsls	r1, r3, #2
 80007ce:	0010      	movs	r0, r2
 80007d0:	f7ff fcfe 	bl	80001d0 <__udivsi3>
 80007d4:	0003      	movs	r3, r0
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 fa33 	bl	8000c42 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	2301      	movs	r3, #1
 80007e0:	425b      	negs	r3, r3
 80007e2:	2200      	movs	r2, #0
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 f9f7 	bl	8000bd8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	0018      	movs	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b002      	add	sp, #8
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  uwTick++;
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <HAL_IncTick+0x14>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	4b02      	ldr	r3, [pc, #8]	; (8000808 <HAL_IncTick+0x14>)
 8000800:	601a      	str	r2, [r3, #0]
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000ec 	.word	0x200000ec

0800080c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;
 8000810:	4b02      	ldr	r3, [pc, #8]	; (800081c <HAL_GetTick+0x10>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	200000ec 	.word	0x200000ec

08000820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000828:	f7ff fff0 	bl	800080c <HAL_GetTick>
 800082c:	0003      	movs	r3, r0
 800082e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	d002      	beq.n	8000840 <HAL_Delay+0x20>
  {
     wait++;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3301      	adds	r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	f7ff ffe3 	bl	800080c <HAL_GetTick>
 8000846:	0002      	movs	r2, r0
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	429a      	cmp	r2, r3
 8000850:	d8f7      	bhi.n	8000842 <HAL_Delay+0x22>
  {
  }
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b004      	add	sp, #16
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b084      	sub	sp, #16
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d101      	bne.n	800086c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e0f0      	b.n	8000a4e <HAL_CAN_Init+0x1f4>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2220      	movs	r2, #32
 8000870:	5c9b      	ldrb	r3, [r3, r2]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d103      	bne.n	8000880 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	0018      	movs	r0, r3
 800087c:	f008 f812 	bl	80088a4 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2102      	movs	r1, #2
 800088c:	438a      	bics	r2, r1
 800088e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000890:	f7ff ffbc 	bl	800080c <HAL_GetTick>
 8000894:	0003      	movs	r3, r0
 8000896:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000898:	e013      	b.n	80008c2 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800089a:	f7ff ffb7 	bl	800080c <HAL_GetTick>
 800089e:	0002      	movs	r2, r0
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	2b0a      	cmp	r3, #10
 80008a6:	d90c      	bls.n	80008c2 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	0292      	lsls	r2, r2, #10
 80008b0:	431a      	orrs	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2220      	movs	r2, #32
 80008ba:	2105      	movs	r1, #5
 80008bc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e0c5      	b.n	8000a4e <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2202      	movs	r2, #2
 80008ca:	4013      	ands	r3, r2
 80008cc:	d1e5      	bne.n	800089a <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2101      	movs	r1, #1
 80008da:	430a      	orrs	r2, r1
 80008dc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008de:	f7ff ff95 	bl	800080c <HAL_GetTick>
 80008e2:	0003      	movs	r3, r0
 80008e4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008e6:	e013      	b.n	8000910 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008e8:	f7ff ff90 	bl	800080c <HAL_GetTick>
 80008ec:	0002      	movs	r2, r0
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	2b0a      	cmp	r3, #10
 80008f4:	d90c      	bls.n	8000910 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	0292      	lsls	r2, r2, #10
 80008fe:	431a      	orrs	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2220      	movs	r2, #32
 8000908:	2105      	movs	r1, #5
 800090a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	e09e      	b.n	8000a4e <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2201      	movs	r2, #1
 8000918:	4013      	ands	r3, r2
 800091a:	d0e5      	beq.n	80008e8 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7e1b      	ldrb	r3, [r3, #24]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d108      	bne.n	8000936 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	430a      	orrs	r2, r1
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	e007      	b.n	8000946 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	438a      	bics	r2, r1
 8000944:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7e5b      	ldrb	r3, [r3, #25]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d108      	bne.n	8000960 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2140      	movs	r1, #64	; 0x40
 800095a:	430a      	orrs	r2, r1
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	e007      	b.n	8000970 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2140      	movs	r1, #64	; 0x40
 800096c:	438a      	bics	r2, r1
 800096e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7e9b      	ldrb	r3, [r3, #26]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d108      	bne.n	800098a <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2120      	movs	r1, #32
 8000984:	430a      	orrs	r2, r1
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	e007      	b.n	800099a <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2120      	movs	r1, #32
 8000996:	438a      	bics	r2, r1
 8000998:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	7edb      	ldrb	r3, [r3, #27]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d108      	bne.n	80009b4 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2110      	movs	r1, #16
 80009ae:	438a      	bics	r2, r1
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	e007      	b.n	80009c4 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2110      	movs	r1, #16
 80009c0:	430a      	orrs	r2, r1
 80009c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7f1b      	ldrb	r3, [r3, #28]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d108      	bne.n	80009de <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2108      	movs	r1, #8
 80009d8:	430a      	orrs	r2, r1
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	e007      	b.n	80009ee <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2108      	movs	r1, #8
 80009ea:	438a      	bics	r2, r1
 80009ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	7f5b      	ldrb	r3, [r3, #29]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d108      	bne.n	8000a08 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2104      	movs	r1, #4
 8000a02:	430a      	orrs	r2, r1
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	e007      	b.n	8000a18 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2104      	movs	r1, #4
 8000a14:	438a      	bics	r2, r1
 8000a16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689a      	ldr	r2, [r3, #8]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	431a      	orrs	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	691b      	ldr	r3, [r3, #16]
 8000a26:	431a      	orrs	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	0011      	movs	r1, r2
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	1e5a      	subs	r2, r3, #1
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2220      	movs	r2, #32
 8000a48:	2101      	movs	r1, #1
 8000a4a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	0018      	movs	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b004      	add	sp, #16
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	0002      	movs	r2, r0
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	001a      	movs	r2, r3
 8000a6a:	231f      	movs	r3, #31
 8000a6c:	401a      	ands	r2, r3
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <NVIC_EnableIRQ+0x28>)
 8000a70:	2101      	movs	r1, #1
 8000a72:	4091      	lsls	r1, r2
 8000a74:	000a      	movs	r2, r1
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b002      	add	sp, #8
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	001a      	movs	r2, r3
 8000a96:	231f      	movs	r3, #31
 8000a98:	4013      	ands	r3, r2
 8000a9a:	4905      	ldr	r1, [pc, #20]	; (8000ab0 <NVIC_DisableIRQ+0x2c>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	508b      	str	r3, [r1, r2]
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	e000e100 	.word	0xe000e100

08000ab4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	0002      	movs	r2, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac8:	d932      	bls.n	8000b30 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aca:	4a2f      	ldr	r2, [pc, #188]	; (8000b88 <NVIC_SetPriority+0xd4>)
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	400b      	ands	r3, r1
 8000ad6:	3b08      	subs	r3, #8
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	3306      	adds	r3, #6
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	18d3      	adds	r3, r2, r3
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	1dfa      	adds	r2, r7, #7
 8000ae6:	7812      	ldrb	r2, [r2, #0]
 8000ae8:	0011      	movs	r1, r2
 8000aea:	2203      	movs	r2, #3
 8000aec:	400a      	ands	r2, r1
 8000aee:	00d2      	lsls	r2, r2, #3
 8000af0:	21ff      	movs	r1, #255	; 0xff
 8000af2:	4091      	lsls	r1, r2
 8000af4:	000a      	movs	r2, r1
 8000af6:	43d2      	mvns	r2, r2
 8000af8:	401a      	ands	r2, r3
 8000afa:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	019b      	lsls	r3, r3, #6
 8000b00:	22ff      	movs	r2, #255	; 0xff
 8000b02:	401a      	ands	r2, r3
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	0018      	movs	r0, r3
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	4003      	ands	r3, r0
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b12:	481d      	ldr	r0, [pc, #116]	; (8000b88 <NVIC_SetPriority+0xd4>)
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	001c      	movs	r4, r3
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	4023      	ands	r3, r4
 8000b1e:	3b08      	subs	r3, #8
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	430a      	orrs	r2, r1
 8000b24:	3306      	adds	r3, #6
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	18c3      	adds	r3, r0, r3
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b2e:	e027      	b.n	8000b80 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b30:	4a16      	ldr	r2, [pc, #88]	; (8000b8c <NVIC_SetPriority+0xd8>)
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	089b      	lsrs	r3, r3, #2
 8000b3a:	33c0      	adds	r3, #192	; 0xc0
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	589b      	ldr	r3, [r3, r2]
 8000b40:	1dfa      	adds	r2, r7, #7
 8000b42:	7812      	ldrb	r2, [r2, #0]
 8000b44:	0011      	movs	r1, r2
 8000b46:	2203      	movs	r2, #3
 8000b48:	400a      	ands	r2, r1
 8000b4a:	00d2      	lsls	r2, r2, #3
 8000b4c:	21ff      	movs	r1, #255	; 0xff
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	000a      	movs	r2, r1
 8000b52:	43d2      	mvns	r2, r2
 8000b54:	401a      	ands	r2, r3
 8000b56:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	019b      	lsls	r3, r3, #6
 8000b5c:	22ff      	movs	r2, #255	; 0xff
 8000b5e:	401a      	ands	r2, r3
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	0018      	movs	r0, r3
 8000b66:	2303      	movs	r3, #3
 8000b68:	4003      	ands	r3, r0
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <NVIC_SetPriority+0xd8>)
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	33c0      	adds	r3, #192	; 0xc0
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	501a      	str	r2, [r3, r0]
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b003      	add	sp, #12
 8000b86:	bd90      	pop	{r4, r7, pc}
 8000b88:	e000ed00 	.word	0xe000ed00
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	; (8000bd0 <SysTick_Config+0x40>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d901      	bls.n	8000ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e010      	b.n	8000bc8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <SysTick_Config+0x44>)
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	3a01      	subs	r2, #1
 8000bac:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	425b      	negs	r3, r3
 8000bb2:	2103      	movs	r1, #3
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f7ff ff7d 	bl	8000ab4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <SysTick_Config+0x44>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SysTick_Config+0x44>)
 8000bc2:	2207      	movs	r2, #7
 8000bc4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b002      	add	sp, #8
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	00ffffff 	.word	0x00ffffff
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	210f      	movs	r1, #15
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	1c02      	adds	r2, r0, #0
 8000be8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff ff5d 	bl	8000ab4 <NVIC_SetPriority>
}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b004      	add	sp, #16
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	0002      	movs	r2, r0
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff ff1f 	bl	8000a58 <NVIC_EnableIRQ>
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b002      	add	sp, #8
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	0002      	movs	r2, r0
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff ff25 	bl	8000a84 <NVIC_DisableIRQ>
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b002      	add	sp, #8
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff ff9f 	bl	8000b90 <SysTick_Config>
 8000c52:	0003      	movs	r3, r0
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d106      	bne.n	8000c78 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000c70:	2104      	movs	r1, #4
 8000c72:	430a      	orrs	r2, r1
 8000c74:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000c76:	e005      	b.n	8000c84 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000c7e:	2104      	movs	r1, #4
 8000c80:	438a      	bics	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b002      	add	sp, #8
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	e000e010 	.word	0xe000e010

08000c90 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c94:	f000 f803 	bl	8000c9e <HAL_SYSTICK_Callback>
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e041      	b.n	8000d3e <HAL_CRC_Init+0x96>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7f5b      	ldrb	r3, [r3, #29]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d106      	bne.n	8000cd2 <HAL_CRC_Init+0x2a>
  {   
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f007 fe65 	bl	800899c <HAL_CRC_MspInit>
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	775a      	strb	r2, [r3, #29]
  /* Extended initialization: if programmable polynomial feature is 
     applicable to device, set default or non-default generating 
     polynomial according to hcrc->Init parameters.
     If feature is non-applicable to device in use, HAL_CRCEx_Init straight 
     away reports HAL_OK. */
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 f834 	bl	8000d48 <HAL_CRCEx_Init>
 8000ce0:	1e03      	subs	r3, r0, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_CRC_Init+0x40>
  {
    return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e02a      	b.n	8000d3e <HAL_CRC_Init+0x96>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	795b      	ldrb	r3, [r3, #5]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d105      	bne.n	8000cfc <HAL_CRC_Init+0x54>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4252      	negs	r2, r2
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	e004      	b.n	8000d06 <HAL_CRC_Init+0x5e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	6912      	ldr	r2, [r2, #16]
 8000d04:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	2260      	movs	r2, #96	; 0x60
 8000d0e:	4393      	bics	r3, r2
 8000d10:	0019      	movs	r1, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	695a      	ldr	r2, [r3, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	4393      	bics	r3, r2
 8000d28:	0019      	movs	r1, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	699a      	ldr	r2, [r3, #24]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_CRCEx_Init>:
  * @brief  Extended initialization to set generating polynomial
  * @param  hcrc CRC handle             
  * @retval HAL status
  */             
HAL_StatusTypeDef HAL_CRCEx_Init(CRC_HandleTypeDef *hcrc)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx)
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	791b      	ldrb	r3, [r3, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10c      	bne.n	8000d72 <HAL_CRCEx_Init+0x2a>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <HAL_CRCEx_Init+0x4c>)
 8000d5e:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2118      	movs	r1, #24
 8000d6c:	438a      	bics	r2, r1
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	e00b      	b.n	8000d8a <HAL_CRCEx_Init+0x42>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6899      	ldr	r1, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f000 f80b 	bl	8000d98 <HAL_CRCEx_Polynomial_Set>
 8000d82:	1e03      	subs	r3, r0, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_CRCEx_Init+0x42>
    {
      return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <HAL_CRCEx_Init+0x44>
    }
  }
#endif /* defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx) */    

   return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b002      	add	sp, #8
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	04c11db7 	.word	0x04c11db7

08000d98 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000da4:	231f      	movs	r3, #31
 8000da6:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0U) && (msb-- > 0U))
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	2201      	movs	r2, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
 8000db0:	0013      	movs	r3, r2
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	4013      	ands	r3, r2
 8000db6:	d104      	bne.n	8000dc2 <HAL_CRCEx_Polynomial_Set+0x2a>
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	1e5a      	subs	r2, r3, #1
 8000dbc:	617a      	str	r2, [r7, #20]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f3      	bne.n	8000daa <HAL_CRCEx_Polynomial_Set+0x12>
  {}

  switch (PolyLength)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d012      	beq.n	8000dee <HAL_CRCEx_Polynomial_Set+0x56>
 8000dc8:	d802      	bhi.n	8000dd0 <HAL_CRCEx_Polynomial_Set+0x38>
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d014      	beq.n	8000df8 <HAL_CRCEx_Polynomial_Set+0x60>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;      
    default:
      break;
 8000dce:	e01a      	b.n	8000e06 <HAL_CRCEx_Polynomial_Set+0x6e>
  switch (PolyLength)
 8000dd0:	2b10      	cmp	r3, #16
 8000dd2:	d007      	beq.n	8000de4 <HAL_CRCEx_Polynomial_Set+0x4c>
 8000dd4:	2b18      	cmp	r3, #24
 8000dd6:	d000      	beq.n	8000dda <HAL_CRCEx_Polynomial_Set+0x42>
      break;
 8000dd8:	e015      	b.n	8000e06 <HAL_CRCEx_Polynomial_Set+0x6e>
      if (msb >= HAL_CRC_LENGTH_7B)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2b06      	cmp	r3, #6
 8000dde:	d90d      	bls.n	8000dfc <HAL_CRCEx_Polynomial_Set+0x64>
        return  HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e020      	b.n	8000e26 <HAL_CRCEx_Polynomial_Set+0x8e>
      if (msb >= HAL_CRC_LENGTH_8B)
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	2b07      	cmp	r3, #7
 8000de8:	d90a      	bls.n	8000e00 <HAL_CRCEx_Polynomial_Set+0x68>
        return  HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e01b      	b.n	8000e26 <HAL_CRCEx_Polynomial_Set+0x8e>
      if (msb >= HAL_CRC_LENGTH_16B)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d907      	bls.n	8000e04 <HAL_CRCEx_Polynomial_Set+0x6c>
        return  HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e016      	b.n	8000e26 <HAL_CRCEx_Polynomial_Set+0x8e>
      break;      
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	e004      	b.n	8000e06 <HAL_CRCEx_Polynomial_Set+0x6e>
      break;
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	e002      	b.n	8000e06 <HAL_CRCEx_Polynomial_Set+0x6e>
      break;
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	e000      	b.n	8000e06 <HAL_CRCEx_Polynomial_Set+0x6e>
      break;
 8000e04:	46c0      	nop			; (mov r8, r8)
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2218      	movs	r2, #24
 8000e16:	4393      	bics	r3, r2
 8000e18:	0019      	movs	r1, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b006      	add	sp, #24
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e042      	b.n	8000ecc <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2221      	movs	r2, #33	; 0x21
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4a1e      	ldr	r2, [pc, #120]	; (8000ed4 <HAL_DMA_Init+0xa4>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 f998 	bl	80011cc <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2221      	movs	r2, #33	; 0x21
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}  
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b004      	add	sp, #16
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	ffffc00f 	.word	0xffffc00f

08000ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000ee6:	2317      	movs	r3, #23
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	5c9b      	ldrb	r3, [r3, r2]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d101      	bne.n	8000efc <HAL_DMA_Start_IT+0x24>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	e04f      	b.n	8000f9c <HAL_DMA_Start_IT+0xc4>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2220      	movs	r2, #32
 8000f00:	2101      	movs	r1, #1
 8000f02:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2221      	movs	r2, #33	; 0x21
 8000f08:	5c9b      	ldrb	r3, [r3, r2]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d13a      	bne.n	8000f86 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2221      	movs	r2, #33	; 0x21
 8000f14:	2102      	movs	r1, #2
 8000f16:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	438a      	bics	r2, r1
 8000f2c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f000 f91d 	bl	8001174 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d008      	beq.n	8000f54 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	210e      	movs	r1, #14
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	e00f      	b.n	8000f74 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	210a      	movs	r1, #10
 8000f60:	430a      	orrs	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2104      	movs	r1, #4
 8000f70:	438a      	bics	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2101      	movs	r1, #1
 8000f80:	430a      	orrs	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	e007      	b.n	8000f96 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2220      	movs	r2, #32
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000f8e:	2317      	movs	r3, #23
 8000f90:	18fb      	adds	r3, r7, r3
 8000f92:	2202      	movs	r2, #2
 8000f94:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000f96:	2317      	movs	r3, #23
 8000f98:	18fb      	adds	r3, r7, r3
 8000f9a:	781b      	ldrb	r3, [r3, #0]
} 
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b006      	add	sp, #24
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fac:	230f      	movs	r3, #15
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2221      	movs	r2, #33	; 0x21
 8000fb8:	5c9b      	ldrb	r3, [r3, r2]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d007      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e028      	b.n	8001022 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	210e      	movs	r1, #14
 8000fdc:	438a      	bics	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2101      	movs	r1, #1
 8000fec:	438a      	bics	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4091      	lsls	r1, r2
 8000ffc:	000a      	movs	r2, r1
 8000ffe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2221      	movs	r2, #33	; 0x21
 8001004:	2101      	movs	r1, #1
 8001006:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2220      	movs	r2, #32
 800100c:	2100      	movs	r1, #0
 800100e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001014:	2b00      	cmp	r3, #0
 8001016:	d004      	beq.n	8001022 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	0010      	movs	r0, r2
 8001020:	4798      	blx	r3
    } 
  }
  return status;
 8001022:	230f      	movs	r3, #15
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	781b      	ldrb	r3, [r3, #0]
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b004      	add	sp, #16
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	2204      	movs	r2, #4
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	4013      	ands	r3, r2
 8001056:	d024      	beq.n	80010a2 <HAL_DMA_IRQHandler+0x72>
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2204      	movs	r2, #4
 800105c:	4013      	ands	r3, r2
 800105e:	d020      	beq.n	80010a2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2220      	movs	r2, #32
 8001068:	4013      	ands	r3, r2
 800106a:	d107      	bne.n	800107c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2104      	movs	r1, #4
 8001078:	438a      	bics	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001084:	2104      	movs	r1, #4
 8001086:	4091      	lsls	r1, r2
 8001088:	000a      	movs	r2, r1
 800108a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	2b00      	cmp	r3, #0
 8001092:	d100      	bne.n	8001096 <HAL_DMA_IRQHandler+0x66>
 8001094:	e06a      	b.n	800116c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	0010      	movs	r0, r2
 800109e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80010a0:	e064      	b.n	800116c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	2202      	movs	r2, #2
 80010a8:	409a      	lsls	r2, r3
 80010aa:	0013      	movs	r3, r2
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	4013      	ands	r3, r2
 80010b0:	d02b      	beq.n	800110a <HAL_DMA_IRQHandler+0xda>
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2202      	movs	r2, #2
 80010b6:	4013      	ands	r3, r2
 80010b8:	d027      	beq.n	800110a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2220      	movs	r2, #32
 80010c2:	4013      	ands	r3, r2
 80010c4:	d10b      	bne.n	80010de <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	210a      	movs	r1, #10
 80010d2:	438a      	bics	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2221      	movs	r2, #33	; 0x21
 80010da:	2101      	movs	r1, #1
 80010dc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e6:	2102      	movs	r1, #2
 80010e8:	4091      	lsls	r1, r2
 80010ea:	000a      	movs	r2, r1
 80010ec:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2220      	movs	r2, #32
 80010f2:	2100      	movs	r1, #0
 80010f4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d036      	beq.n	800116c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	0010      	movs	r0, r2
 8001106:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001108:	e030      	b.n	800116c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	2208      	movs	r2, #8
 8001110:	409a      	lsls	r2, r3
 8001112:	0013      	movs	r3, r2
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	4013      	ands	r3, r2
 8001118:	d028      	beq.n	800116c <HAL_DMA_IRQHandler+0x13c>
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	2208      	movs	r2, #8
 800111e:	4013      	ands	r3, r2
 8001120:	d024      	beq.n	800116c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	210e      	movs	r1, #14
 800112e:	438a      	bics	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113a:	2101      	movs	r1, #1
 800113c:	4091      	lsls	r1, r2
 800113e:	000a      	movs	r2, r1
 8001140:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2221      	movs	r2, #33	; 0x21
 800114c:	2101      	movs	r1, #1
 800114e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2220      	movs	r2, #32
 8001154:	2100      	movs	r1, #0
 8001156:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	0010      	movs	r0, r2
 8001168:	4798      	blx	r3
    }
   }
}  
 800116a:	e7ff      	b.n	800116c <HAL_DMA_IRQHandler+0x13c>
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	b004      	add	sp, #16
 8001172:	bd80      	pop	{r7, pc}

08001174 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118a:	2101      	movs	r1, #1
 800118c:	4091      	lsls	r1, r2
 800118e:	000a      	movs	r2, r1
 8001190:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b10      	cmp	r3, #16
 80011a0:	d108      	bne.n	80011b4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011b2:	e007      	b.n	80011c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	60da      	str	r2, [r3, #12]
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b004      	add	sp, #16
 80011ca:	bd80      	pop	{r7, pc}

080011cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a08      	ldr	r2, [pc, #32]	; (80011fc <DMA_CalcBaseAndBitshift+0x30>)
 80011da:	4694      	mov	ip, r2
 80011dc:	4463      	add	r3, ip
 80011de:	2114      	movs	r1, #20
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7fe fff5 	bl	80001d0 <__udivsi3>
 80011e6:	0003      	movs	r3, r0
 80011e8:	009a      	lsls	r2, r3, #2
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a03      	ldr	r2, [pc, #12]	; (8001200 <DMA_CalcBaseAndBitshift+0x34>)
 80011f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b002      	add	sp, #8
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	bffdfff8 	.word	0xbffdfff8
 8001200:	40020000 	.word	0x40020000

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800121a:	e155      	b.n	80014c8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4091      	lsls	r1, r2
 8001226:	000a      	movs	r2, r1
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d100      	bne.n	8001234 <HAL_GPIO_Init+0x30>
 8001232:	e146      	b.n	80014c2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x40>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b12      	cmp	r3, #18
 8001242:	d123      	bne.n	800128c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	58d3      	ldr	r3, [r2, r3]
 8001250:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2207      	movs	r2, #7
 8001256:	4013      	ands	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	220f      	movs	r2, #15
 800125c:	409a      	lsls	r2, r3
 800125e:	0013      	movs	r3, r2
 8001260:	43da      	mvns	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	2107      	movs	r1, #7
 8001270:	400b      	ands	r3, r1
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	409a      	lsls	r2, r3
 8001276:	0013      	movs	r3, r2
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	6939      	ldr	r1, [r7, #16]
 800128a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	409a      	lsls	r2, r3
 800129a:	0013      	movs	r3, r2
 800129c:	43da      	mvns	r2, r3
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2203      	movs	r2, #3
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	409a      	lsls	r2, r3
 80012b2:	0013      	movs	r3, r2
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d00b      	beq.n	80012e0 <HAL_GPIO_Init+0xdc>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d007      	beq.n	80012e0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d4:	2b11      	cmp	r3, #17
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b12      	cmp	r3, #18
 80012de:	d130      	bne.n	8001342 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	409a      	lsls	r2, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	43da      	mvns	r2, r3
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	409a      	lsls	r2, r3
 8001302:	0013      	movs	r3, r2
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001316:	2201      	movs	r2, #1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
 800131c:	0013      	movs	r3, r2
 800131e:	43da      	mvns	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	2201      	movs	r2, #1
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	43da      	mvns	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	055b      	lsls	r3, r3, #21
 800137a:	4013      	ands	r3, r2
 800137c:	d100      	bne.n	8001380 <HAL_GPIO_Init+0x17c>
 800137e:	e0a0      	b.n	80014c2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001380:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <HAL_GPIO_Init+0x2dc>)
 8001382:	699a      	ldr	r2, [r3, #24]
 8001384:	4b56      	ldr	r3, [pc, #344]	; (80014e0 <HAL_GPIO_Init+0x2dc>)
 8001386:	2101      	movs	r1, #1
 8001388:	430a      	orrs	r2, r1
 800138a:	619a      	str	r2, [r3, #24]
 800138c:	4b54      	ldr	r3, [pc, #336]	; (80014e0 <HAL_GPIO_Init+0x2dc>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	2201      	movs	r2, #1
 8001392:	4013      	ands	r3, r2
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001398:	4a52      	ldr	r2, [pc, #328]	; (80014e4 <HAL_GPIO_Init+0x2e0>)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	589b      	ldr	r3, [r3, r2]
 80013a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	2203      	movs	r2, #3
 80013aa:	4013      	ands	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	220f      	movs	r2, #15
 80013b0:	409a      	lsls	r2, r3
 80013b2:	0013      	movs	r3, r2
 80013b4:	43da      	mvns	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	2390      	movs	r3, #144	; 0x90
 80013c0:	05db      	lsls	r3, r3, #23
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x1f6>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a47      	ldr	r2, [pc, #284]	; (80014e8 <HAL_GPIO_Init+0x2e4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x1f2>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a46      	ldr	r2, [pc, #280]	; (80014ec <HAL_GPIO_Init+0x2e8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x1ee>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a45      	ldr	r2, [pc, #276]	; (80014f0 <HAL_GPIO_Init+0x2ec>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x1ea>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a44      	ldr	r2, [pc, #272]	; (80014f4 <HAL_GPIO_Init+0x2f0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x1e6>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e008      	b.n	80013fc <HAL_GPIO_Init+0x1f8>
 80013ea:	2305      	movs	r3, #5
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x1f8>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x1f8>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x1f8>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x1f8>
 80013fa:	2300      	movs	r3, #0
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	2103      	movs	r1, #3
 8001400:	400a      	ands	r2, r1
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800140c:	4935      	ldr	r1, [pc, #212]	; (80014e4 <HAL_GPIO_Init+0x2e0>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141a:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <HAL_GPIO_Init+0x2f4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	025b      	lsls	r3, r3, #9
 8001432:	4013      	ands	r3, r2
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800143e:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <HAL_GPIO_Init+0x2f4>)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_GPIO_Init+0x2f4>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43da      	mvns	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	029b      	lsls	r3, r3, #10
 800145c:	4013      	ands	r3, r2
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <HAL_GPIO_Init+0x2f4>)
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HAL_GPIO_Init+0x2f4>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43da      	mvns	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	035b      	lsls	r3, r3, #13
 8001486:	4013      	ands	r3, r2
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_GPIO_Init+0x2f4>)
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_GPIO_Init+0x2f4>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43da      	mvns	r2, r3
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	039b      	lsls	r3, r3, #14
 80014b0:	4013      	ands	r3, r2
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_GPIO_Init+0x2f4>)
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	40da      	lsrs	r2, r3
 80014d0:	1e13      	subs	r3, r2, #0
 80014d2:	d000      	beq.n	80014d6 <HAL_GPIO_Init+0x2d2>
 80014d4:	e6a2      	b.n	800121c <HAL_GPIO_Init+0x18>
  } 
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b006      	add	sp, #24
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	48000800 	.word	0x48000800
 80014f0:	48000c00 	.word	0x48000c00
 80014f4:	48001000 	.word	0x48001000
 80014f8:	40010400 	.word	0x40010400

080014fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	000a      	movs	r2, r1
 8001506:	1cbb      	adds	r3, r7, #2
 8001508:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	1cba      	adds	r2, r7, #2
 8001510:	8812      	ldrh	r2, [r2, #0]
 8001512:	4013      	ands	r3, r2
 8001514:	d004      	beq.n	8001520 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001516:	230f      	movs	r3, #15
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	e003      	b.n	8001528 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001520:	230f      	movs	r3, #15
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001528:	230f      	movs	r3, #15
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	781b      	ldrb	r3, [r3, #0]
  }
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	b004      	add	sp, #16
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	0008      	movs	r0, r1
 8001540:	0011      	movs	r1, r2
 8001542:	1cbb      	adds	r3, r7, #2
 8001544:	1c02      	adds	r2, r0, #0
 8001546:	801a      	strh	r2, [r3, #0]
 8001548:	1c7b      	adds	r3, r7, #1
 800154a:	1c0a      	adds	r2, r1, #0
 800154c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800154e:	1c7b      	adds	r3, r7, #1
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d004      	beq.n	8001560 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001556:	1cbb      	adds	r3, r7, #2
 8001558:	881a      	ldrh	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800155e:	e003      	b.n	8001568 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001560:	1cbb      	adds	r3, r7, #2
 8001562:	881a      	ldrh	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b002      	add	sp, #8
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	000a      	movs	r2, r1
 800157a:	1cbb      	adds	r3, r7, #2
 800157c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695a      	ldr	r2, [r3, #20]
 8001582:	1cbb      	adds	r3, r7, #2
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	405a      	eors	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	615a      	str	r2, [r3, #20]
}
 800158c:	46c0      	nop			; (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	b002      	add	sp, #8
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	0002      	movs	r2, r0
 800159c:	1dbb      	adds	r3, r7, #6
 800159e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */

  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	1dba      	adds	r2, r7, #6
 80015a6:	8812      	ldrh	r2, [r2, #0]
 80015a8:	4013      	ands	r3, r2
 80015aa:	d008      	beq.n	80015be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015ae:	1dba      	adds	r2, r7, #6
 80015b0:	8812      	ldrh	r2, [r2, #0]
 80015b2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015b4:	1dbb      	adds	r3, r7, #6
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	0018      	movs	r0, r3
 80015ba:	f005 f95f 	bl	800687c <HAL_GPIO_EXTI_Callback>
  }
}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b002      	add	sp, #8
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	40010400 	.word	0x40010400

080015cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e082      	b.n	80016e4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2241      	movs	r2, #65	; 0x41
 80015e2:	5c9b      	ldrb	r3, [r3, r2]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d107      	bne.n	80015fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2240      	movs	r2, #64	; 0x40
 80015ee:	2100      	movs	r1, #0
 80015f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f007 fc69 	bl	8008ecc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2241      	movs	r2, #65	; 0x41
 80015fe:	2124      	movs	r1, #36	; 0x24
 8001600:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2101      	movs	r1, #1
 800160e:	438a      	bics	r2, r1
 8001610:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4934      	ldr	r1, [pc, #208]	; (80016ec <HAL_I2C_Init+0x120>)
 800161c:	400a      	ands	r2, r1
 800161e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4931      	ldr	r1, [pc, #196]	; (80016f0 <HAL_I2C_Init+0x124>)
 800162c:	400a      	ands	r2, r1
 800162e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d108      	bne.n	800164a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	0209      	lsls	r1, r1, #8
 8001644:	430a      	orrs	r2, r1
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	e007      	b.n	800165a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2184      	movs	r1, #132	; 0x84
 8001654:	0209      	lsls	r1, r1, #8
 8001656:	430a      	orrs	r2, r1
 8001658:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d104      	bne.n	800166c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	491f      	ldr	r1, [pc, #124]	; (80016f4 <HAL_I2C_Init+0x128>)
 8001678:	430a      	orrs	r2, r1
 800167a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	491a      	ldr	r1, [pc, #104]	; (80016f0 <HAL_I2C_Init+0x124>)
 8001688:	400a      	ands	r2, r1
 800168a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	431a      	orrs	r2, r3
 8001696:	0011      	movs	r1, r2
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	021a      	lsls	r2, r3, #8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69d9      	ldr	r1, [r3, #28]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1a      	ldr	r2, [r3, #32]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2101      	movs	r1, #1
 80016c2:	430a      	orrs	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2241      	movs	r2, #65	; 0x41
 80016d0:	2120      	movs	r1, #32
 80016d2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2242      	movs	r2, #66	; 0x42
 80016de:	2100      	movs	r1, #0
 80016e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	f0ffffff 	.word	0xf0ffffff
 80016f0:	ffff7fff 	.word	0xffff7fff
 80016f4:	02008000 	.word	0x02008000

080016f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	000c      	movs	r4, r1
 8001702:	0010      	movs	r0, r2
 8001704:	0019      	movs	r1, r3
 8001706:	230a      	movs	r3, #10
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	1c22      	adds	r2, r4, #0
 800170c:	801a      	strh	r2, [r3, #0]
 800170e:	2308      	movs	r3, #8
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	1c02      	adds	r2, r0, #0
 8001714:	801a      	strh	r2, [r3, #0]
 8001716:	1dbb      	adds	r3, r7, #6
 8001718:	1c0a      	adds	r2, r1, #0
 800171a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2241      	movs	r2, #65	; 0x41
 8001724:	5c9b      	ldrb	r3, [r3, r2]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b20      	cmp	r3, #32
 800172a:	d000      	beq.n	800172e <HAL_I2C_Mem_Write+0x36>
 800172c:	e11c      	b.n	8001968 <HAL_I2C_Mem_Write+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <HAL_I2C_Mem_Write+0x46>
 8001734:	232c      	movs	r3, #44	; 0x2c
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_I2C_Mem_Write+0x4a>
    {
      return  HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e113      	b.n	800196a <HAL_I2C_Mem_Write+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2240      	movs	r2, #64	; 0x40
 8001746:	5c9b      	ldrb	r3, [r3, r2]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_I2C_Mem_Write+0x58>
 800174c:	2302      	movs	r3, #2
 800174e:	e10c      	b.n	800196a <HAL_I2C_Mem_Write+0x272>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	2101      	movs	r1, #1
 8001756:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001758:	f7ff f858 	bl	800080c <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	0219      	lsls	r1, r3, #8
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2319      	movs	r3, #25
 800176c:	2201      	movs	r2, #1
 800176e:	f000 fff4 	bl	800275a <I2C_WaitOnFlagUntilTimeout>
 8001772:	1e03      	subs	r3, r0, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Mem_Write+0x82>
    {
      return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0f7      	b.n	800196a <HAL_I2C_Mem_Write+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2241      	movs	r2, #65	; 0x41
 800177e:	2121      	movs	r1, #33	; 0x21
 8001780:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2242      	movs	r2, #66	; 0x42
 8001786:	2140      	movs	r1, #64	; 0x40
 8001788:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	222c      	movs	r2, #44	; 0x2c
 800179a:	18ba      	adds	r2, r7, r2
 800179c:	8812      	ldrh	r2, [r2, #0]
 800179e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017a6:	1dbb      	adds	r3, r7, #6
 80017a8:	881c      	ldrh	r4, [r3, #0]
 80017aa:	2308      	movs	r3, #8
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	881a      	ldrh	r2, [r3, #0]
 80017b0:	230a      	movs	r3, #10
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	8819      	ldrh	r1, [r3, #0]
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	0023      	movs	r3, r4
 80017c2:	f000 fbb3 	bl	8001f2c <I2C_RequestMemoryWrite>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d00f      	beq.n	80017ea <HAL_I2C_Mem_Write+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d105      	bne.n	80017de <HAL_I2C_Mem_Write+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2240      	movs	r2, #64	; 0x40
 80017d6:	2100      	movs	r1, #0
 80017d8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0c5      	b.n	800196a <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2240      	movs	r2, #64	; 0x40
 80017e2:	2100      	movs	r1, #0
 80017e4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0bf      	b.n	800196a <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	2bff      	cmp	r3, #255	; 0xff
 80017f2:	d911      	bls.n	8001818 <HAL_I2C_Mem_Write+0x120>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	22ff      	movs	r2, #255	; 0xff
 80017f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	045c      	lsls	r4, r3, #17
 8001804:	230a      	movs	r3, #10
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	8819      	ldrh	r1, [r3, #0]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	2300      	movs	r3, #0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	0023      	movs	r3, r4
 8001812:	f001 f8b5 	bl	8002980 <I2C_TransferConfig>
 8001816:	e012      	b.n	800183e <HAL_I2C_Mem_Write+0x146>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001826:	b2da      	uxtb	r2, r3
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	049c      	lsls	r4, r3, #18
 800182c:	230a      	movs	r3, #10
 800182e:	18fb      	adds	r3, r7, r3
 8001830:	8819      	ldrh	r1, [r3, #0]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	2300      	movs	r3, #0
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	0023      	movs	r3, r4
 800183a:	f001 f8a1 	bl	8002980 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	0018      	movs	r0, r3
 8001846:	f000 ffc1 	bl	80027cc <I2C_WaitOnTXISFlagUntilTimeout>
 800184a:	1e03      	subs	r3, r0, #0
 800184c:	d007      	beq.n	800185e <HAL_I2C_Mem_Write+0x166>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	2b04      	cmp	r3, #4
 8001854:	d101      	bne.n	800185a <HAL_I2C_Mem_Write+0x162>
        {
          return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e087      	b.n	800196a <HAL_I2C_Mem_Write+0x272>
        }
        else
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e085      	b.n	800196a <HAL_I2C_Mem_Write+0x272>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	1c59      	adds	r1, r3, #1
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	6251      	str	r1, [r2, #36]	; 0x24
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001874:	b29b      	uxth	r3, r3
 8001876:	3b01      	subs	r3, #1
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001882:	3b01      	subs	r3, #1
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188e:	2b00      	cmp	r3, #0
 8001890:	d13b      	bne.n	800190a <HAL_I2C_Mem_Write+0x212>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001896:	b29b      	uxth	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d036      	beq.n	800190a <HAL_I2C_Mem_Write+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800189c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	0013      	movs	r3, r2
 80018a6:	2200      	movs	r2, #0
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	f000 ff56 	bl	800275a <I2C_WaitOnFlagUntilTimeout>
 80018ae:	1e03      	subs	r3, r0, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_I2C_Mem_Write+0x1be>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e059      	b.n	800196a <HAL_I2C_Mem_Write+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	2bff      	cmp	r3, #255	; 0xff
 80018be:	d911      	bls.n	80018e4 <HAL_I2C_Mem_Write+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	22ff      	movs	r2, #255	; 0xff
 80018c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	045c      	lsls	r4, r3, #17
 80018d0:	230a      	movs	r3, #10
 80018d2:	18fb      	adds	r3, r7, r3
 80018d4:	8819      	ldrh	r1, [r3, #0]
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	2300      	movs	r3, #0
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	0023      	movs	r3, r4
 80018de:	f001 f84f 	bl	8002980 <I2C_TransferConfig>
 80018e2:	e012      	b.n	800190a <HAL_I2C_Mem_Write+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	049c      	lsls	r4, r3, #18
 80018f8:	230a      	movs	r3, #10
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	8819      	ldrh	r1, [r3, #0]
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	2300      	movs	r3, #0
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	0023      	movs	r3, r4
 8001906:	f001 f83b 	bl	8002980 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190e:	b29b      	uxth	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d194      	bne.n	800183e <HAL_I2C_Mem_Write+0x146>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	0018      	movs	r0, r3
 800191c:	f000 ff95 	bl	800284a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001920:	1e03      	subs	r3, r0, #0
 8001922:	d007      	beq.n	8001934 <HAL_I2C_Mem_Write+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	2b04      	cmp	r3, #4
 800192a:	d101      	bne.n	8001930 <HAL_I2C_Mem_Write+0x238>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e01c      	b.n	800196a <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e01a      	b.n	800196a <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2220      	movs	r2, #32
 800193a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	490b      	ldr	r1, [pc, #44]	; (8001974 <HAL_I2C_Mem_Write+0x27c>)
 8001948:	400a      	ands	r2, r1
 800194a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2241      	movs	r2, #65	; 0x41
 8001950:	2120      	movs	r1, #32
 8001952:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2242      	movs	r2, #66	; 0x42
 8001958:	2100      	movs	r1, #0
 800195a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2240      	movs	r2, #64	; 0x40
 8001960:	2100      	movs	r1, #0
 8001962:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	e000      	b.n	800196a <HAL_I2C_Mem_Write+0x272>
  }
  else
  {
    return HAL_BUSY;
 8001968:	2302      	movs	r3, #2
  }
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b007      	add	sp, #28
 8001970:	bd90      	pop	{r4, r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	fe00e800 	.word	0xfe00e800

08001978 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af02      	add	r7, sp, #8
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	000c      	movs	r4, r1
 8001982:	0010      	movs	r0, r2
 8001984:	0019      	movs	r1, r3
 8001986:	230a      	movs	r3, #10
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	1c22      	adds	r2, r4, #0
 800198c:	801a      	strh	r2, [r3, #0]
 800198e:	2308      	movs	r3, #8
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	1c02      	adds	r2, r0, #0
 8001994:	801a      	strh	r2, [r3, #0]
 8001996:	1dbb      	adds	r3, r7, #6
 8001998:	1c0a      	adds	r2, r1, #0
 800199a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2241      	movs	r2, #65	; 0x41
 80019a4:	5c9b      	ldrb	r3, [r3, r2]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b20      	cmp	r3, #32
 80019aa:	d000      	beq.n	80019ae <HAL_I2C_Mem_Read+0x36>
 80019ac:	e11c      	b.n	8001be8 <HAL_I2C_Mem_Read+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 80019ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d004      	beq.n	80019be <HAL_I2C_Mem_Read+0x46>
 80019b4:	232c      	movs	r3, #44	; 0x2c
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_I2C_Mem_Read+0x4a>
    {
      return  HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e113      	b.n	8001bea <HAL_I2C_Mem_Read+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2240      	movs	r2, #64	; 0x40
 80019c6:	5c9b      	ldrb	r3, [r3, r2]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_I2C_Mem_Read+0x58>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e10c      	b.n	8001bea <HAL_I2C_Mem_Read+0x272>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2240      	movs	r2, #64	; 0x40
 80019d4:	2101      	movs	r1, #1
 80019d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019d8:	f7fe ff18 	bl	800080c <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	0219      	lsls	r1, r3, #8
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2319      	movs	r3, #25
 80019ec:	2201      	movs	r2, #1
 80019ee:	f000 feb4 	bl	800275a <I2C_WaitOnFlagUntilTimeout>
 80019f2:	1e03      	subs	r3, r0, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_Mem_Read+0x82>
    {
      return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e0f7      	b.n	8001bea <HAL_I2C_Mem_Read+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2241      	movs	r2, #65	; 0x41
 80019fe:	2122      	movs	r1, #34	; 0x22
 8001a00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2242      	movs	r2, #66	; 0x42
 8001a06:	2140      	movs	r1, #64	; 0x40
 8001a08:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	222c      	movs	r2, #44	; 0x2c
 8001a1a:	18ba      	adds	r2, r7, r2
 8001a1c:	8812      	ldrh	r2, [r2, #0]
 8001a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a26:	1dbb      	adds	r3, r7, #6
 8001a28:	881c      	ldrh	r4, [r3, #0]
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	881a      	ldrh	r2, [r3, #0]
 8001a30:	230a      	movs	r3, #10
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	8819      	ldrh	r1, [r3, #0]
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	0023      	movs	r3, r4
 8001a42:	f000 fae1 	bl	8002008 <I2C_RequestMemoryRead>
 8001a46:	1e03      	subs	r3, r0, #0
 8001a48:	d00f      	beq.n	8001a6a <HAL_I2C_Mem_Read+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d105      	bne.n	8001a5e <HAL_I2C_Mem_Read+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2240      	movs	r2, #64	; 0x40
 8001a56:	2100      	movs	r1, #0
 8001a58:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0c5      	b.n	8001bea <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2240      	movs	r2, #64	; 0x40
 8001a62:	2100      	movs	r1, #0
 8001a64:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0bf      	b.n	8001bea <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	2bff      	cmp	r3, #255	; 0xff
 8001a72:	d912      	bls.n	8001a9a <HAL_I2C_Mem_Read+0x122>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	22ff      	movs	r2, #255	; 0xff
 8001a78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	045c      	lsls	r4, r3, #17
 8001a84:	230a      	movs	r3, #10
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	8819      	ldrh	r1, [r3, #0]
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	2390      	movs	r3, #144	; 0x90
 8001a8e:	019b      	lsls	r3, r3, #6
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	0023      	movs	r3, r4
 8001a94:	f000 ff74 	bl	8002980 <I2C_TransferConfig>
 8001a98:	e013      	b.n	8001ac2 <HAL_I2C_Mem_Read+0x14a>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	049c      	lsls	r4, r3, #18
 8001aae:	230a      	movs	r3, #10
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	8819      	ldrh	r1, [r3, #0]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	2390      	movs	r3, #144	; 0x90
 8001ab8:	019b      	lsls	r3, r3, #6
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	0023      	movs	r3, r4
 8001abe:	f000 ff5f 	bl	8002980 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	0013      	movs	r3, r2
 8001acc:	2200      	movs	r2, #0
 8001ace:	2104      	movs	r1, #4
 8001ad0:	f000 fe43 	bl	800275a <I2C_WaitOnFlagUntilTimeout>
 8001ad4:	1e03      	subs	r3, r0, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_Mem_Read+0x164>
      {
        return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e086      	b.n	8001bea <HAL_I2C_Mem_Read+0x272>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	1c59      	adds	r1, r3, #1
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	6251      	str	r1, [r2, #36]	; 0x24
 8001aec:	b2c2      	uxtb	r2, r0
 8001aee:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d13b      	bne.n	8001b8a <HAL_I2C_Mem_Read+0x212>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d036      	beq.n	8001b8a <HAL_I2C_Mem_Read+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	0013      	movs	r3, r2
 8001b26:	2200      	movs	r2, #0
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	f000 fe16 	bl	800275a <I2C_WaitOnFlagUntilTimeout>
 8001b2e:	1e03      	subs	r3, r0, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_I2C_Mem_Read+0x1be>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e059      	b.n	8001bea <HAL_I2C_Mem_Read+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2bff      	cmp	r3, #255	; 0xff
 8001b3e:	d911      	bls.n	8001b64 <HAL_I2C_Mem_Read+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	22ff      	movs	r2, #255	; 0xff
 8001b44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	045c      	lsls	r4, r3, #17
 8001b50:	230a      	movs	r3, #10
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	8819      	ldrh	r1, [r3, #0]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	0023      	movs	r3, r4
 8001b5e:	f000 ff0f 	bl	8002980 <I2C_TransferConfig>
 8001b62:	e012      	b.n	8001b8a <HAL_I2C_Mem_Read+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	049c      	lsls	r4, r3, #18
 8001b78:	230a      	movs	r3, #10
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	8819      	ldrh	r1, [r3, #0]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	2300      	movs	r3, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	0023      	movs	r3, r4
 8001b86:	f000 fefb 	bl	8002980 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d196      	bne.n	8001ac2 <HAL_I2C_Mem_Read+0x14a>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f000 fe55 	bl	800284a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ba0:	1e03      	subs	r3, r0, #0
 8001ba2:	d007      	beq.n	8001bb4 <HAL_I2C_Mem_Read+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d101      	bne.n	8001bb0 <HAL_I2C_Mem_Read+0x238>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e01c      	b.n	8001bea <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e01a      	b.n	8001bea <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	490b      	ldr	r1, [pc, #44]	; (8001bf4 <HAL_I2C_Mem_Read+0x27c>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2241      	movs	r2, #65	; 0x41
 8001bd0:	2120      	movs	r1, #32
 8001bd2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2242      	movs	r2, #66	; 0x42
 8001bd8:	2100      	movs	r1, #0
 8001bda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	2100      	movs	r1, #0
 8001be2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	e000      	b.n	8001bea <HAL_I2C_Mem_Read+0x272>
  }
  else
  {
    return HAL_BUSY;
 8001be8:	2302      	movs	r3, #2
  }
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b007      	add	sp, #28
 8001bf0:	bd90      	pop	{r4, r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	fe00e800 	.word	0xfe00e800

08001bf8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	68f9      	ldr	r1, [r7, #12]
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
  }
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b004      	add	sp, #16
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60bb      	str	r3, [r7, #8]

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d00e      	beq.n	8001c6c <HAL_I2C_ER_IRQHandler+0x40>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2280      	movs	r2, #128	; 0x80
 8001c52:	4013      	ands	r3, r2
 8001c54:	d00a      	beq.n	8001c6c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	0052      	lsls	r2, r2, #1
 8001c6a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4013      	ands	r3, r2
 8001c74:	d00e      	beq.n	8001c94 <HAL_I2C_ER_IRQHandler+0x68>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d00a      	beq.n	8001c94 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	2208      	movs	r2, #8
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	00d2      	lsls	r2, r2, #3
 8001c92:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d00e      	beq.n	8001cbc <HAL_I2C_ER_IRQHandler+0x90>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d00a      	beq.n	8001cbc <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	2202      	movs	r2, #2
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2280      	movs	r2, #128	; 0x80
 8001cb8:	0092      	lsls	r2, r2, #2
 8001cba:	61da      	str	r2, [r3, #28]
  }

  /* Call the Error Callback in case of Error detected */
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc0:	220b      	movs	r2, #11
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d006      	beq.n	8001cd4 <HAL_I2C_ER_IRQHandler+0xa8>
  {
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0011      	movs	r1, r2
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 fc2a 	bl	8002528 <I2C_ITError>
  }
}
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b004      	add	sp, #16
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	0008      	movs	r0, r1
 8001d06:	0011      	movs	r1, r2
 8001d08:	1cfb      	adds	r3, r7, #3
 8001d0a:	1c02      	adds	r2, r0, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
 8001d0e:	003b      	movs	r3, r7
 8001d10:	1c0a      	adds	r2, r1, #0
 8001d12:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2240      	movs	r2, #64	; 0x40
 8001d5c:	5c9b      	ldrb	r3, [r3, r2]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <I2C_Slave_ISR_IT+0x1a>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e0db      	b.n	8001f1e <I2C_Slave_ISR_IT+0x1d2>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2240      	movs	r2, #64	; 0x40
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]

  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2210      	movs	r2, #16
 8001d72:	4013      	ands	r3, r2
 8001d74:	d04a      	beq.n	8001e0c <I2C_Slave_ISR_IT+0xc0>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2210      	movs	r2, #16
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d046      	beq.n	8001e0c <I2C_Slave_ISR_IT+0xc0>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d135      	bne.n	8001df4 <I2C_Slave_ISR_IT+0xa8>
    {
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	049b      	lsls	r3, r3, #18
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d005      	beq.n	8001da0 <I2C_Slave_ISR_IT+0x54>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	049b      	lsls	r3, r3, #18
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d10c      	bne.n	8001dba <I2C_Slave_ISR_IT+0x6e>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2241      	movs	r2, #65	; 0x41
 8001da4:	5c9b      	ldrb	r3, [r3, r2]
 8001da6:	b2db      	uxtb	r3, r3
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8001da8:	2b28      	cmp	r3, #40	; 0x28
 8001daa:	d106      	bne.n	8001dba <I2C_Slave_ISR_IT+0x6e>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, ITFlags);
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	0011      	movs	r1, r2
 8001db2:	0018      	movs	r0, r3
 8001db4:	f000 fb66 	bl	8002484 <I2C_ITListenCplt>
 8001db8:	e027      	b.n	8001e0a <I2C_Slave_ISR_IT+0xbe>
      }
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	4a5a      	ldr	r2, [pc, #360]	; (8001f28 <I2C_Slave_ISR_IT+0x1dc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d012      	beq.n	8001dea <I2C_Slave_ISR_IT+0x9e>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2241      	movs	r2, #65	; 0x41
 8001dc8:	5c9b      	ldrb	r3, [r3, r2]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b29      	cmp	r3, #41	; 0x29
 8001dce:	d10c      	bne.n	8001dea <I2C_Slave_ISR_IT+0x9e>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 fc6c 	bl	80026b8 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSequentialCplt(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	0018      	movs	r0, r3
 8001de4:	f000 fa31 	bl	800224a <I2C_ITSlaveSequentialCplt>
 8001de8:	e00f      	b.n	8001e0a <I2C_Slave_ISR_IT+0xbe>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2210      	movs	r2, #16
 8001df0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001df2:	e081      	b.n	8001ef8 <I2C_Slave_ISR_IT+0x1ac>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	2204      	movs	r2, #4
 8001e02:	431a      	orrs	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	645a      	str	r2, [r3, #68]	; 0x44
    if (hi2c->XferCount == 0U)
 8001e08:	e076      	b.n	8001ef8 <I2C_Slave_ISR_IT+0x1ac>
 8001e0a:	e075      	b.n	8001ef8 <I2C_Slave_ISR_IT+0x1ac>
    }
  }
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2204      	movs	r2, #4
 8001e10:	4013      	ands	r3, r2
 8001e12:	d02e      	beq.n	8001e72 <I2C_Slave_ISR_IT+0x126>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2204      	movs	r2, #4
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d02a      	beq.n	8001e72 <I2C_Slave_ISR_IT+0x126>
  {
    if (hi2c->XferCount > 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d016      	beq.n	8001e54 <I2C_Slave_ISR_IT+0x108>
    {
      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	1c59      	adds	r1, r3, #1
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	6251      	str	r1, [r2, #36]	; 0x24
 8001e36:	b2c2      	uxtb	r2, r0
 8001e38:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d14b      	bne.n	8001ef6 <I2C_Slave_ISR_IT+0x1aa>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 8001e62:	4a31      	ldr	r2, [pc, #196]	; (8001f28 <I2C_Slave_ISR_IT+0x1dc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d046      	beq.n	8001ef6 <I2C_Slave_ISR_IT+0x1aa>
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSequentialCplt(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f000 f9ed 	bl	800224a <I2C_ITSlaveSequentialCplt>
    if ((hi2c->XferCount == 0U) && \
 8001e70:	e041      	b.n	8001ef6 <I2C_Slave_ISR_IT+0x1aa>
    }
  }
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2208      	movs	r2, #8
 8001e76:	4013      	ands	r3, r2
 8001e78:	d00a      	beq.n	8001e90 <I2C_Slave_ISR_IT+0x144>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d006      	beq.n	8001e90 <I2C_Slave_ISR_IT+0x144>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	0011      	movs	r1, r2
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 f929 	bl	80020e0 <I2C_ITAddrCplt>
 8001e8e:	e033      	b.n	8001ef8 <I2C_Slave_ISR_IT+0x1ac>
  }
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2202      	movs	r2, #2
 8001e94:	4013      	ands	r3, r2
 8001e96:	d02f      	beq.n	8001ef8 <I2C_Slave_ISR_IT+0x1ac>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d02b      	beq.n	8001ef8 <I2C_Slave_ISR_IT+0x1ac>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d016      	beq.n	8001ed8 <I2C_Slave_ISR_IT+0x18c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	1c59      	adds	r1, r3, #1
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	6251      	str	r1, [r2, #36]	; 0x24
 8001eb4:	781a      	ldrb	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	851a      	strh	r2, [r3, #40]	; 0x28
 8001ed6:	e00f      	b.n	8001ef8 <I2C_Slave_ISR_IT+0x1ac>
    }
    else
    {
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	045b      	lsls	r3, r3, #17
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d003      	beq.n	8001eec <I2C_Slave_ISR_IT+0x1a0>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d105      	bne.n	8001ef8 <I2C_Slave_ISR_IT+0x1ac>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSequentialCplt(hi2c);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f000 f9ab 	bl	800224a <I2C_ITSlaveSequentialCplt>
 8001ef4:	e000      	b.n	8001ef8 <I2C_Slave_ISR_IT+0x1ac>
    if ((hi2c->XferCount == 0U) && \
 8001ef6:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Check if STOPF is set */
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2220      	movs	r2, #32
 8001efc:	4013      	ands	r3, r2
 8001efe:	d009      	beq.n	8001f14 <I2C_Slave_ISR_IT+0x1c8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2220      	movs	r2, #32
 8001f04:	4013      	ands	r3, r2
 8001f06:	d005      	beq.n	8001f14 <I2C_Slave_ISR_IT+0x1c8>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	0011      	movs	r1, r2
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 f9dc 	bl	80022cc <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2240      	movs	r2, #64	; 0x40
 8001f18:	2100      	movs	r1, #0
 8001f1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	0018      	movs	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b004      	add	sp, #16
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	ffff0000 	.word	0xffff0000

08001f2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b5b0      	push	{r4, r5, r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	000c      	movs	r4, r1
 8001f36:	0010      	movs	r0, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	250a      	movs	r5, #10
 8001f3c:	197b      	adds	r3, r7, r5
 8001f3e:	1c22      	adds	r2, r4, #0
 8001f40:	801a      	strh	r2, [r3, #0]
 8001f42:	2308      	movs	r3, #8
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	1c02      	adds	r2, r0, #0
 8001f48:	801a      	strh	r2, [r3, #0]
 8001f4a:	1dbb      	adds	r3, r7, #6
 8001f4c:	1c0a      	adds	r2, r1, #0
 8001f4e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f50:	1dbb      	adds	r3, r7, #6
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	045c      	lsls	r4, r3, #17
 8001f5a:	197b      	adds	r3, r7, r5
 8001f5c:	8819      	ldrh	r1, [r3, #0]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	019b      	lsls	r3, r3, #6
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	0023      	movs	r3, r4
 8001f68:	f000 fd0a 	bl	8002980 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6e:	6a39      	ldr	r1, [r7, #32]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	0018      	movs	r0, r3
 8001f74:	f000 fc2a 	bl	80027cc <I2C_WaitOnTXISFlagUntilTimeout>
 8001f78:	1e03      	subs	r3, r0, #0
 8001f7a:	d007      	beq.n	8001f8c <I2C_RequestMemoryWrite+0x60>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d101      	bne.n	8001f88 <I2C_RequestMemoryWrite+0x5c>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e03b      	b.n	8002000 <I2C_RequestMemoryWrite+0xd4>
    }
    else
    {
      return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e039      	b.n	8002000 <I2C_RequestMemoryWrite+0xd4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f8c:	1dbb      	adds	r3, r7, #6
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d107      	bne.n	8001fa4 <I2C_RequestMemoryWrite+0x78>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f94:	2308      	movs	r3, #8
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28
 8001fa2:	e01f      	b.n	8001fe4 <I2C_RequestMemoryWrite+0xb8>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	0a1b      	lsrs	r3, r3, #8
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb8:	6a39      	ldr	r1, [r7, #32]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f000 fc05 	bl	80027cc <I2C_WaitOnTXISFlagUntilTimeout>
 8001fc2:	1e03      	subs	r3, r0, #0
 8001fc4:	d007      	beq.n	8001fd6 <I2C_RequestMemoryWrite+0xaa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d101      	bne.n	8001fd2 <I2C_RequestMemoryWrite+0xa6>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e016      	b.n	8002000 <I2C_RequestMemoryWrite+0xd4>
      }
      else
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e014      	b.n	8002000 <I2C_RequestMemoryWrite+0xd4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001fe4:	6a3a      	ldr	r2, [r7, #32]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	0013      	movs	r3, r2
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	f000 fbb2 	bl	800275a <I2C_WaitOnFlagUntilTimeout>
 8001ff6:	1e03      	subs	r3, r0, #0
 8001ff8:	d001      	beq.n	8001ffe <I2C_RequestMemoryWrite+0xd2>
  {
    return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e000      	b.n	8002000 <I2C_RequestMemoryWrite+0xd4>
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b004      	add	sp, #16
 8002006:	bdb0      	pop	{r4, r5, r7, pc}

08002008 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002008:	b5b0      	push	{r4, r5, r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af02      	add	r7, sp, #8
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	000c      	movs	r4, r1
 8002012:	0010      	movs	r0, r2
 8002014:	0019      	movs	r1, r3
 8002016:	250a      	movs	r5, #10
 8002018:	197b      	adds	r3, r7, r5
 800201a:	1c22      	adds	r2, r4, #0
 800201c:	801a      	strh	r2, [r3, #0]
 800201e:	2308      	movs	r3, #8
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	1c02      	adds	r2, r0, #0
 8002024:	801a      	strh	r2, [r3, #0]
 8002026:	1dbb      	adds	r3, r7, #6
 8002028:	1c0a      	adds	r2, r1, #0
 800202a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800202c:	1dbb      	adds	r3, r7, #6
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	197b      	adds	r3, r7, r5
 8002034:	8819      	ldrh	r1, [r3, #0]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	019b      	lsls	r3, r3, #6
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	2300      	movs	r3, #0
 8002040:	f000 fc9e 	bl	8002980 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002046:	6a39      	ldr	r1, [r7, #32]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	0018      	movs	r0, r3
 800204c:	f000 fbbe 	bl	80027cc <I2C_WaitOnTXISFlagUntilTimeout>
 8002050:	1e03      	subs	r3, r0, #0
 8002052:	d007      	beq.n	8002064 <I2C_RequestMemoryRead+0x5c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	2b04      	cmp	r3, #4
 800205a:	d101      	bne.n	8002060 <I2C_RequestMemoryRead+0x58>
    {
      return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e03b      	b.n	80020d8 <I2C_RequestMemoryRead+0xd0>
    }
    else
    {
      return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e039      	b.n	80020d8 <I2C_RequestMemoryRead+0xd0>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002064:	1dbb      	adds	r3, r7, #6
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <I2C_RequestMemoryRead+0x74>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800206c:	2308      	movs	r3, #8
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	629a      	str	r2, [r3, #40]	; 0x28
 800207a:	e01f      	b.n	80020bc <I2C_RequestMemoryRead+0xb4>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800207c:	2308      	movs	r3, #8
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	b29b      	uxth	r3, r3
 8002086:	b2da      	uxtb	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800208e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002090:	6a39      	ldr	r1, [r7, #32]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	0018      	movs	r0, r3
 8002096:	f000 fb99 	bl	80027cc <I2C_WaitOnTXISFlagUntilTimeout>
 800209a:	1e03      	subs	r3, r0, #0
 800209c:	d007      	beq.n	80020ae <I2C_RequestMemoryRead+0xa6>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d101      	bne.n	80020aa <I2C_RequestMemoryRead+0xa2>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e016      	b.n	80020d8 <I2C_RequestMemoryRead+0xd0>
      }
      else
      {
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e014      	b.n	80020d8 <I2C_RequestMemoryRead+0xd0>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020ae:	2308      	movs	r3, #8
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80020bc:	6a3a      	ldr	r2, [r7, #32]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	0013      	movs	r3, r2
 80020c6:	2200      	movs	r2, #0
 80020c8:	2140      	movs	r1, #64	; 0x40
 80020ca:	f000 fb46 	bl	800275a <I2C_WaitOnFlagUntilTimeout>
 80020ce:	1e03      	subs	r3, r0, #0
 80020d0:	d001      	beq.n	80020d6 <I2C_RequestMemoryRead+0xce>
  {
    return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e000      	b.n	80020d8 <I2C_RequestMemoryRead+0xd0>
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bdb0      	pop	{r4, r5, r7, pc}

080020e0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint8_t transferdirection = 0U;
 80020ea:	230f      	movs	r3, #15
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
  uint16_t slaveaddrcode = 0U;
 80020f2:	230c      	movs	r3, #12
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	2200      	movs	r2, #0
 80020f8:	801a      	strh	r2, [r3, #0]
  uint16_t ownadd1code = 0U;
 80020fa:	230a      	movs	r3, #10
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	2200      	movs	r2, #0
 8002100:	801a      	strh	r2, [r3, #0]
  uint16_t ownadd2code = 0U;
 8002102:	2308      	movs	r3, #8
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	2200      	movs	r2, #0
 8002108:	801a      	strh	r2, [r3, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2241      	movs	r2, #65	; 0x41
 800210e:	5c9b      	ldrb	r3, [r3, r2]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	001a      	movs	r2, r3
 8002114:	2328      	movs	r3, #40	; 0x28
 8002116:	4013      	ands	r3, r2
 8002118:	2b28      	cmp	r3, #40	; 0x28
 800211a:	d000      	beq.n	800211e <I2C_ITAddrCplt+0x3e>
 800211c:	e089      	b.n	8002232 <I2C_ITAddrCplt+0x152>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	b2da      	uxtb	r2, r3
 8002128:	230f      	movs	r3, #15
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	2101      	movs	r1, #1
 800212e:	400a      	ands	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	0c1b      	lsrs	r3, r3, #16
 800213a:	b29a      	uxth	r2, r3
 800213c:	230c      	movs	r3, #12
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	21fe      	movs	r1, #254	; 0xfe
 8002142:	400a      	ands	r2, r1
 8002144:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	b29a      	uxth	r2, r3
 800214e:	230a      	movs	r3, #10
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	0592      	lsls	r2, r2, #22
 8002154:	0d92      	lsrs	r2, r2, #22
 8002156:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	b29a      	uxth	r2, r3
 8002160:	2308      	movs	r3, #8
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	21fe      	movs	r1, #254	; 0xfe
 8002166:	400a      	ands	r2, r1
 8002168:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d14b      	bne.n	800220a <I2C_ITAddrCplt+0x12a>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002172:	230a      	movs	r3, #10
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	09db      	lsrs	r3, r3, #7
 800217a:	b29a      	uxth	r2, r3
 800217c:	230c      	movs	r3, #12
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	4053      	eors	r3, r2
 8002184:	b29b      	uxth	r3, r3
 8002186:	001a      	movs	r2, r3
 8002188:	2306      	movs	r3, #6
 800218a:	4013      	ands	r3, r2
 800218c:	d124      	bne.n	80021d8 <I2C_ITAddrCplt+0xf8>
      {
        slaveaddrcode = ownadd1code;
 800218e:	230c      	movs	r3, #12
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	220a      	movs	r2, #10
 8002194:	18ba      	adds	r2, r7, r2
 8002196:	8812      	ldrh	r2, [r2, #0]
 8002198:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d14a      	bne.n	8002242 <I2C_ITAddrCplt+0x162>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2208      	movs	r2, #8
 80021b8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2240      	movs	r2, #64	; 0x40
 80021be:	2100      	movs	r1, #0
 80021c0:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80021c2:	230c      	movs	r3, #12
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	881a      	ldrh	r2, [r3, #0]
 80021c8:	230f      	movs	r3, #15
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	7819      	ldrb	r1, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7ff fd93 	bl	8001cfc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80021d6:	e034      	b.n	8002242 <I2C_ITAddrCplt+0x162>
        slaveaddrcode = ownadd2code;
 80021d8:	240c      	movs	r4, #12
 80021da:	193b      	adds	r3, r7, r4
 80021dc:	2208      	movs	r2, #8
 80021de:	18ba      	adds	r2, r7, r2
 80021e0:	8812      	ldrh	r2, [r2, #0]
 80021e2:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2104      	movs	r1, #4
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 fbff 	bl	80029ec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2240      	movs	r2, #64	; 0x40
 80021f2:	2100      	movs	r1, #0
 80021f4:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80021f6:	193b      	adds	r3, r7, r4
 80021f8:	881a      	ldrh	r2, [r3, #0]
 80021fa:	230f      	movs	r3, #15
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	7819      	ldrb	r1, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	0018      	movs	r0, r3
 8002204:	f7ff fd7a 	bl	8001cfc <HAL_I2C_AddrCallback>
}
 8002208:	e01b      	b.n	8002242 <I2C_ITAddrCplt+0x162>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2104      	movs	r1, #4
 800220e:	0018      	movs	r0, r3
 8002210:	f000 fbec 	bl	80029ec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2240      	movs	r2, #64	; 0x40
 8002218:	2100      	movs	r1, #0
 800221a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800221c:	230c      	movs	r3, #12
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	881a      	ldrh	r2, [r3, #0]
 8002222:	230f      	movs	r3, #15
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	7819      	ldrb	r1, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	0018      	movs	r0, r3
 800222c:	f7ff fd66 	bl	8001cfc <HAL_I2C_AddrCallback>
}
 8002230:	e007      	b.n	8002242 <I2C_ITAddrCplt+0x162>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2208      	movs	r2, #8
 8002238:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2240      	movs	r2, #64	; 0x40
 800223e:	2100      	movs	r1, #0
 8002240:	5499      	strb	r1, [r3, r2]
}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	46bd      	mov	sp, r7
 8002246:	b005      	add	sp, #20
 8002248:	bd90      	pop	{r4, r7, pc}

0800224a <I2C_ITSlaveSequentialCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSequentialCplt(I2C_HandleTypeDef *hi2c)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2242      	movs	r2, #66	; 0x42
 8002256:	2100      	movs	r1, #0
 8002258:	5499      	strb	r1, [r3, r2]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2241      	movs	r2, #65	; 0x41
 800225e:	5c9b      	ldrb	r3, [r3, r2]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b29      	cmp	r3, #41	; 0x29
 8002264:	d114      	bne.n	8002290 <I2C_ITSlaveSequentialCplt+0x46>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2241      	movs	r2, #65	; 0x41
 800226a:	2128      	movs	r1, #40	; 0x28
 800226c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2221      	movs	r2, #33	; 0x21
 8002272:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2101      	movs	r1, #1
 8002278:	0018      	movs	r0, r3
 800227a:	f000 fbb7 	bl	80029ec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2240      	movs	r2, #64	; 0x40
 8002282:	2100      	movs	r1, #0
 8002284:	5499      	strb	r1, [r3, r2]

    /* Call the Tx complete callback to inform upper layer of the end of transmit process */
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0018      	movs	r0, r3
 800228a:	f7ff fd27 	bl	8001cdc <HAL_I2C_SlaveTxCpltCallback>
    __HAL_UNLOCK(hi2c);

    /* Call the Rx complete callback to inform upper layer of the end of receive process */
    HAL_I2C_SlaveRxCpltCallback(hi2c);
  }
}
 800228e:	e019      	b.n	80022c4 <I2C_ITSlaveSequentialCplt+0x7a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2241      	movs	r2, #65	; 0x41
 8002294:	5c9b      	ldrb	r3, [r3, r2]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b2a      	cmp	r3, #42	; 0x2a
 800229a:	d113      	bne.n	80022c4 <I2C_ITSlaveSequentialCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2241      	movs	r2, #65	; 0x41
 80022a0:	2128      	movs	r1, #40	; 0x28
 80022a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2222      	movs	r2, #34	; 0x22
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2102      	movs	r1, #2
 80022ae:	0018      	movs	r0, r3
 80022b0:	f000 fb9c 	bl	80029ec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2240      	movs	r2, #64	; 0x40
 80022b8:	2100      	movs	r1, #0
 80022ba:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	0018      	movs	r0, r3
 80022c0:	f7ff fd14 	bl	8001cec <HAL_I2C_SlaveRxCpltCallback>
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b002      	add	sp, #8
 80022ca:	bd80      	pop	{r7, pc}

080022cc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2220      	movs	r2, #32
 80022dc:	61da      	str	r2, [r3, #28]

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2208      	movs	r2, #8
 80022e4:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2107      	movs	r1, #7
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 fb7e 	bl	80029ec <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2180      	movs	r1, #128	; 0x80
 80022fc:	0209      	lsls	r1, r1, #8
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	495b      	ldr	r1, [pc, #364]	; (800247c <I2C_ITSlaveCplt+0x1b0>)
 800230e:	400a      	ands	r2, r1
 8002310:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	0018      	movs	r0, r3
 8002316:	f000 f9cf 	bl	80026b8 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	01db      	lsls	r3, r3, #7
 8002324:	401a      	ands	r2, r3
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	01db      	lsls	r3, r3, #7
 800232a:	429a      	cmp	r2, r3
 800232c:	d009      	beq.n	8002342 <I2C_ITSlaveCplt+0x76>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	401a      	ands	r2, r3
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	429a      	cmp	r2, r3
 8002340:	d112      	bne.n	8002368 <I2C_ITSlaveCplt+0x9c>
  {
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2241      	movs	r2, #65	; 0x41
 8002346:	5c9b      	ldrb	r3, [r3, r2]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b21      	cmp	r3, #33	; 0x21
 800234c:	d105      	bne.n	800235a <I2C_ITSlaveCplt+0x8e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	b29b      	uxth	r3, r3
 8002358:	e004      	b.n	8002364 <I2C_ITSlaveCplt+0x98>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	b29b      	uxth	r3, r3
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	8553      	strh	r3, [r2, #42]	; 0x2a
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <I2C_ITSlaveCplt+0xb2>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	2204      	movs	r2, #4
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Store Last receive data if any */
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2204      	movs	r2, #4
 8002382:	4013      	ands	r3, r2
 8002384:	d020      	beq.n	80023c8 <I2C_ITSlaveCplt+0xfc>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	1c59      	adds	r1, r3, #1
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6251      	str	r1, [r2, #36]	; 0x24
 8002396:	b2c2      	uxtb	r2, r0
 8002398:	701a      	strb	r2, [r3, #0]

    if ((hi2c->XferSize > 0U))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d012      	beq.n	80023c8 <I2C_ITSlaveCplt+0xfc>
    {
      hi2c->XferSize--;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	2204      	movs	r2, #4
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2242      	movs	r2, #66	; 0x42
 80023d2:	2100      	movs	r1, #0
 80023d4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <I2C_ITSlaveCplt+0x140>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0011      	movs	r1, r2
 80023ec:	0018      	movs	r0, r3
 80023ee:	f000 f89b 	bl	8002528 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2241      	movs	r2, #65	; 0x41
 80023f6:	5c9b      	ldrb	r3, [r3, r2]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b28      	cmp	r3, #40	; 0x28
 80023fc:	d13a      	bne.n	8002474 <I2C_ITSlaveCplt+0x1a8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, ITFlags);
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	0011      	movs	r1, r2
 8002404:	0018      	movs	r0, r3
 8002406:	f000 f83d 	bl	8002484 <I2C_ITListenCplt>
    __HAL_UNLOCK(hi2c);

    /* Call the Slave Tx Complete callback */
    HAL_I2C_SlaveTxCpltCallback(hi2c);
  }
}
 800240a:	e033      	b.n	8002474 <I2C_ITSlaveCplt+0x1a8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <I2C_ITSlaveCplt+0x1b4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00f      	beq.n	8002436 <I2C_ITSlaveCplt+0x16a>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a19      	ldr	r2, [pc, #100]	; (8002480 <I2C_ITSlaveCplt+0x1b4>)
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2241      	movs	r2, #65	; 0x41
 8002420:	2120      	movs	r1, #32
 8002422:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2240      	movs	r2, #64	; 0x40
 8002428:	2100      	movs	r1, #0
 800242a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	0018      	movs	r0, r3
 8002430:	f7ff fc74 	bl	8001d1c <HAL_I2C_ListenCpltCallback>
}
 8002434:	e01e      	b.n	8002474 <I2C_ITSlaveCplt+0x1a8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2241      	movs	r2, #65	; 0x41
 800243a:	5c9b      	ldrb	r3, [r3, r2]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b22      	cmp	r3, #34	; 0x22
 8002440:	d10c      	bne.n	800245c <I2C_ITSlaveCplt+0x190>
    hi2c->State = HAL_I2C_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2241      	movs	r2, #65	; 0x41
 8002446:	2120      	movs	r1, #32
 8002448:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2240      	movs	r2, #64	; 0x40
 800244e:	2100      	movs	r1, #0
 8002450:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f7ff fc49 	bl	8001cec <HAL_I2C_SlaveRxCpltCallback>
}
 800245a:	e00b      	b.n	8002474 <I2C_ITSlaveCplt+0x1a8>
    hi2c->State = HAL_I2C_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2241      	movs	r2, #65	; 0x41
 8002460:	2120      	movs	r1, #32
 8002462:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	2100      	movs	r1, #0
 800246a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f7ff fc34 	bl	8001cdc <HAL_I2C_SlaveTxCpltCallback>
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b002      	add	sp, #8
 800247a:	bd80      	pop	{r7, pc}
 800247c:	fe00e800 	.word	0xfe00e800
 8002480:	ffff0000 	.word	0xffff0000

08002484 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a24      	ldr	r2, [pc, #144]	; (8002524 <I2C_ITListenCplt+0xa0>)
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2241      	movs	r2, #65	; 0x41
 800249e:	2120      	movs	r1, #32
 80024a0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2242      	movs	r2, #66	; 0x42
 80024a6:	2100      	movs	r1, #0
 80024a8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2204      	movs	r2, #4
 80024b4:	4013      	ands	r3, r2
 80024b6:	d020      	beq.n	80024fa <I2C_ITListenCplt+0x76>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	1c59      	adds	r1, r3, #1
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6251      	str	r1, [r2, #36]	; 0x24
 80024c8:	b2c2      	uxtb	r2, r0
 80024ca:	701a      	strb	r2, [r3, #0]

    if ((hi2c->XferSize > 0U))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d012      	beq.n	80024fa <I2C_ITListenCplt+0x76>
    {
      hi2c->XferSize--;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	2204      	movs	r2, #4
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2107      	movs	r1, #7
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 fa74 	bl	80029ec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2210      	movs	r2, #16
 800250a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2240      	movs	r2, #64	; 0x40
 8002510:	2100      	movs	r1, #0
 8002512:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
  HAL_I2C_ListenCpltCallback(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	0018      	movs	r0, r3
 8002518:	f7ff fc00 	bl	8001d1c <HAL_I2C_ListenCpltCallback>
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b002      	add	sp, #8
 8002522:	bd80      	pop	{r7, pc}
 8002524:	ffff0000 	.word	0xffff0000

08002528 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2242      	movs	r2, #66	; 0x42
 8002536:	2100      	movs	r1, #0
 8002538:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a59      	ldr	r2, [pc, #356]	; (80026a4 <I2C_ITError+0x17c>)
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2241      	movs	r2, #65	; 0x41
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b28      	cmp	r3, #40	; 0x28
 800255c:	d00b      	beq.n	8002576 <I2C_ITError+0x4e>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2241      	movs	r2, #65	; 0x41
 8002562:	5c9b      	ldrb	r3, [r3, r2]
 8002564:	b2db      	uxtb	r3, r3
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8002566:	2b29      	cmp	r3, #41	; 0x29
 8002568:	d005      	beq.n	8002576 <I2C_ITError+0x4e>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2241      	movs	r2, #65	; 0x41
 800256e:	5c9b      	ldrb	r3, [r3, r2]
 8002570:	b2db      	uxtb	r3, r3
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002572:	2b2a      	cmp	r3, #42	; 0x2a
 8002574:	d10f      	bne.n	8002596 <I2C_ITError+0x6e>
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2103      	movs	r1, #3
 800257a:	0018      	movs	r0, r3
 800257c:	f000 fa36 	bl	80029ec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2241      	movs	r2, #65	; 0x41
 8002584:	2128      	movs	r1, #40	; 0x28
 8002586:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a45      	ldr	r2, [pc, #276]	; (80026a8 <I2C_ITError+0x180>)
 8002592:	635a      	str	r2, [r3, #52]	; 0x34
 8002594:	e014      	b.n	80025c0 <I2C_ITError+0x98>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2107      	movs	r1, #7
 800259a:	0018      	movs	r0, r3
 800259c:	f000 fa26 	bl	80029ec <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2241      	movs	r2, #65	; 0x41
 80025a4:	5c9b      	ldrb	r3, [r3, r2]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b60      	cmp	r3, #96	; 0x60
 80025aa:	d003      	beq.n	80025b4 <I2C_ITError+0x8c>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2241      	movs	r2, #65	; 0x41
 80025b0:	2120      	movs	r1, #32
 80025b2:	5499      	strb	r1, [r3, r2]
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	01db      	lsls	r3, r3, #7
 80025ca:	401a      	ands	r2, r3
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	01db      	lsls	r3, r3, #7
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d11e      	bne.n	8002612 <I2C_ITError+0xea>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4933      	ldr	r1, [pc, #204]	; (80026ac <I2C_ITError+0x184>)
 80025e0:	400a      	ands	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

    /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	4a31      	ldr	r2, [pc, #196]	; (80026b0 <I2C_ITError+0x188>)
 80025ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2240      	movs	r2, #64	; 0x40
 80025f0:	2100      	movs	r1, #0
 80025f2:	5499      	strb	r1, [r3, r2]

    /* Abort DMA TX */
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7fe fcd3 	bl	8000fa4 <HAL_DMA_Abort_IT>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d04b      	beq.n	800269a <I2C_ITError+0x172>
    {
      /* Call Directly XferAbortCallback function in case of error */
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260c:	0018      	movs	r0, r3
 800260e:	4790      	blx	r2
    __HAL_UNLOCK(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 8002610:	e043      	b.n	800269a <I2C_ITError+0x172>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	401a      	ands	r2, r3
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	429a      	cmp	r2, r3
 8002624:	d11e      	bne.n	8002664 <I2C_ITError+0x13c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4920      	ldr	r1, [pc, #128]	; (80026b4 <I2C_ITError+0x18c>)
 8002632:	400a      	ands	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263a:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <I2C_ITError+0x188>)
 800263c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2240      	movs	r2, #64	; 0x40
 8002642:	2100      	movs	r1, #0
 8002644:	5499      	strb	r1, [r3, r2]
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	0018      	movs	r0, r3
 800264c:	f7fe fcaa 	bl	8000fa4 <HAL_DMA_Abort_IT>
 8002650:	1e03      	subs	r3, r0, #0
 8002652:	d022      	beq.n	800269a <I2C_ITError+0x172>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	0018      	movs	r0, r3
 8002660:	4790      	blx	r2
}
 8002662:	e01a      	b.n	800269a <I2C_ITError+0x172>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2241      	movs	r2, #65	; 0x41
 8002668:	5c9b      	ldrb	r3, [r3, r2]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b60      	cmp	r3, #96	; 0x60
 800266e:	d10c      	bne.n	800268a <I2C_ITError+0x162>
    hi2c->State = HAL_I2C_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2241      	movs	r2, #65	; 0x41
 8002674:	2120      	movs	r1, #32
 8002676:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2240      	movs	r2, #64	; 0x40
 800267c:	2100      	movs	r1, #0
 800267e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	0018      	movs	r0, r3
 8002684:	f7ff fb5a 	bl	8001d3c <HAL_I2C_AbortCpltCallback>
}
 8002688:	e007      	b.n	800269a <I2C_ITError+0x172>
    __HAL_UNLOCK(hi2c);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2240      	movs	r2, #64	; 0x40
 800268e:	2100      	movs	r1, #0
 8002690:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	0018      	movs	r0, r3
 8002696:	f7ff fb49 	bl	8001d2c <HAL_I2C_ErrorCallback>
}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b002      	add	sp, #8
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	ffff0000 	.word	0xffff0000
 80026a8:	08001d4d 	.word	0x08001d4d
 80026ac:	ffffbfff 	.word	0xffffbfff
 80026b0:	080026fd 	.word	0x080026fd
 80026b4:	ffff7fff 	.word	0xffff7fff

080026b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2202      	movs	r2, #2
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d103      	bne.n	80026d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2200      	movs	r2, #0
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	2201      	movs	r2, #1
 80026de:	4013      	ands	r3, r2
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d007      	beq.n	80026f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2101      	movs	r1, #1
 80026f0:	430a      	orrs	r2, r1
 80026f2:	619a      	str	r2, [r3, #24]
  }
}
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b002      	add	sp, #8
 80026fa:	bd80      	pop	{r7, pc}

080026fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	0209      	lsls	r1, r1, #8
 8002718:	430a      	orrs	r2, r1
 800271a:	605a      	str	r2, [r3, #4]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	2200      	movs	r2, #0
 8002722:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002728:	2200      	movs	r2, #0
 800272a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2241      	movs	r2, #65	; 0x41
 8002730:	5c9b      	ldrb	r3, [r3, r2]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b60      	cmp	r3, #96	; 0x60
 8002736:	d108      	bne.n	800274a <I2C_DMAAbort+0x4e>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2241      	movs	r2, #65	; 0x41
 800273c:	2120      	movs	r1, #32
 800273e:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	0018      	movs	r0, r3
 8002744:	f7ff fafa 	bl	8001d3c <HAL_I2C_AbortCpltCallback>
  else
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 8002748:	e003      	b.n	8002752 <I2C_DMAAbort+0x56>
    HAL_I2C_ErrorCallback(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	0018      	movs	r0, r3
 800274e:	f7ff faed 	bl	8001d2c <HAL_I2C_ErrorCallback>
}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b004      	add	sp, #16
 8002758:	bd80      	pop	{r7, pc}

0800275a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	1dfb      	adds	r3, r7, #7
 8002768:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800276a:	e01b      	b.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	d018      	beq.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002778:	f7fe f848 	bl	800080c <HAL_GetTick>
 800277c:	0002      	movs	r2, r0
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d20d      	bcs.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2241      	movs	r2, #65	; 0x41
 800278c:	2120      	movs	r1, #32
 800278e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2242      	movs	r2, #66	; 0x42
 8002794:	2100      	movs	r1, #0
 8002796:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2240      	movs	r2, #64	; 0x40
 800279c:	2100      	movs	r1, #0
 800279e:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e00f      	b.n	80027c4 <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	4013      	ands	r3, r2
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	425a      	negs	r2, r3
 80027b4:	4153      	adcs	r3, r2
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	001a      	movs	r2, r3
 80027ba:	1dfb      	adds	r3, r7, #7
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d0d4      	beq.n	800276c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b004      	add	sp, #16
 80027ca:	bd80      	pop	{r7, pc}

080027cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027d8:	e02b      	b.n	8002832 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 f86f 	bl	80028c4 <I2C_IsAcknowledgeFailed>
 80027e6:	1e03      	subs	r3, r0, #0
 80027e8:	d001      	beq.n	80027ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e029      	b.n	8002842 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3301      	adds	r3, #1
 80027f2:	d01e      	beq.n	8002832 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80027fa:	f7fe f807 	bl	800080c <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	429a      	cmp	r2, r3
 8002808:	d213      	bcs.n	8002832 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	2220      	movs	r2, #32
 8002810:	431a      	orrs	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2241      	movs	r2, #65	; 0x41
 800281a:	2120      	movs	r1, #32
 800281c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2242      	movs	r2, #66	; 0x42
 8002822:	2100      	movs	r1, #0
 8002824:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2240      	movs	r2, #64	; 0x40
 800282a:	2100      	movs	r1, #0
 800282c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e007      	b.n	8002842 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	2b02      	cmp	r3, #2
 800283e:	d1cc      	bne.n	80027da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	0018      	movs	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	b004      	add	sp, #16
 8002848:	bd80      	pop	{r7, pc}

0800284a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002856:	e028      	b.n	80028aa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	0018      	movs	r0, r3
 8002860:	f000 f830 	bl	80028c4 <I2C_IsAcknowledgeFailed>
 8002864:	1e03      	subs	r3, r0, #0
 8002866:	d001      	beq.n	800286c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e026      	b.n	80028ba <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d007      	beq.n	8002882 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002872:	f7fd ffcb 	bl	800080c <HAL_GetTick>
 8002876:	0002      	movs	r2, r0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	429a      	cmp	r2, r3
 8002880:	d213      	bcs.n	80028aa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	2220      	movs	r2, #32
 8002888:	431a      	orrs	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2241      	movs	r2, #65	; 0x41
 8002892:	2120      	movs	r1, #32
 8002894:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2242      	movs	r2, #66	; 0x42
 800289a:	2100      	movs	r1, #0
 800289c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2240      	movs	r2, #64	; 0x40
 80028a2:	2100      	movs	r1, #0
 80028a4:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e007      	b.n	80028ba <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2220      	movs	r2, #32
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d1cf      	bne.n	8002858 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b004      	add	sp, #16
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2210      	movs	r2, #16
 80028d8:	4013      	ands	r3, r2
 80028da:	2b10      	cmp	r3, #16
 80028dc:	d148      	bne.n	8002970 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028de:	e01b      	b.n	8002918 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	3301      	adds	r3, #1
 80028e4:	d018      	beq.n	8002918 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <I2C_IsAcknowledgeFailed+0x38>
 80028ec:	f7fd ff8e 	bl	800080c <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d20d      	bcs.n	8002918 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2241      	movs	r2, #65	; 0x41
 8002900:	2120      	movs	r1, #32
 8002902:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2242      	movs	r2, #66	; 0x42
 8002908:	2100      	movs	r1, #0
 800290a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2240      	movs	r2, #64	; 0x40
 8002910:	2100      	movs	r1, #0
 8002912:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e02c      	b.n	8002972 <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2220      	movs	r2, #32
 8002920:	4013      	ands	r3, r2
 8002922:	2b20      	cmp	r3, #32
 8002924:	d1dc      	bne.n	80028e0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2210      	movs	r2, #16
 800292c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2220      	movs	r2, #32
 8002934:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	0018      	movs	r0, r3
 800293a:	f7ff febd 	bl	80026b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	490c      	ldr	r1, [pc, #48]	; (800297c <I2C_IsAcknowledgeFailed+0xb8>)
 800294a:	400a      	ands	r2, r1
 800294c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2204      	movs	r2, #4
 8002952:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2241      	movs	r2, #65	; 0x41
 8002958:	2120      	movs	r1, #32
 800295a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2242      	movs	r2, #66	; 0x42
 8002960:	2100      	movs	r1, #0
 8002962:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2240      	movs	r2, #64	; 0x40
 8002968:	2100      	movs	r1, #0
 800296a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	b004      	add	sp, #16
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	fe00e800 	.word	0xfe00e800

08002980 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	0008      	movs	r0, r1
 800298a:	0011      	movs	r1, r2
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	240a      	movs	r4, #10
 8002990:	193b      	adds	r3, r7, r4
 8002992:	1c02      	adds	r2, r0, #0
 8002994:	801a      	strh	r2, [r3, #0]
 8002996:	2009      	movs	r0, #9
 8002998:	183b      	adds	r3, r7, r0
 800299a:	1c0a      	adds	r2, r1, #0
 800299c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	4a0e      	ldr	r2, [pc, #56]	; (80029e8 <I2C_TransferConfig+0x68>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80029b2:	193b      	adds	r3, r7, r4
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	059b      	lsls	r3, r3, #22
 80029b8:	0d9a      	lsrs	r2, r3, #22
 80029ba:	183b      	adds	r3, r7, r0
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	0419      	lsls	r1, r3, #16
 80029c0:	23ff      	movs	r3, #255	; 0xff
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	400b      	ands	r3, r1
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ce:	4313      	orrs	r3, r2
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	605a      	str	r2, [r3, #4]
}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b007      	add	sp, #28
 80029e4:	bd90      	pop	{r4, r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	fc009800 	.word	0xfc009800

080029ec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	000a      	movs	r2, r1
 80029f6:	1cbb      	adds	r3, r7, #2
 80029f8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80029fe:	1cbb      	adds	r3, r7, #2
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	2201      	movs	r2, #1
 8002a04:	4013      	ands	r3, r2
 8002a06:	d010      	beq.n	8002a2a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2242      	movs	r2, #66	; 0x42
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2241      	movs	r2, #65	; 0x41
 8002a14:	5c9b      	ldrb	r3, [r3, r2]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	001a      	movs	r2, r3
 8002a1a:	2328      	movs	r3, #40	; 0x28
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b28      	cmp	r3, #40	; 0x28
 8002a20:	d003      	beq.n	8002a2a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	22b0      	movs	r2, #176	; 0xb0
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002a2a:	1cbb      	adds	r3, r7, #2
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	4013      	ands	r3, r2
 8002a32:	d010      	beq.n	8002a56 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2244      	movs	r2, #68	; 0x44
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2241      	movs	r2, #65	; 0x41
 8002a40:	5c9b      	ldrb	r3, [r3, r2]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	001a      	movs	r2, r3
 8002a46:	2328      	movs	r3, #40	; 0x28
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b28      	cmp	r3, #40	; 0x28
 8002a4c:	d003      	beq.n	8002a56 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	22b0      	movs	r2, #176	; 0xb0
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002a56:	1cbb      	adds	r3, r7, #2
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d003      	beq.n	8002a68 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	22b8      	movs	r2, #184	; 0xb8
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002a68:	1cbb      	adds	r3, r7, #2
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	2211      	movs	r2, #17
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b11      	cmp	r3, #17
 8002a72:	d103      	bne.n	8002a7c <I2C_Disable_IRQ+0x90>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2290      	movs	r2, #144	; 0x90
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002a7c:	1cbb      	adds	r3, r7, #2
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	2212      	movs	r2, #18
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b12      	cmp	r3, #18
 8002a86:	d103      	bne.n	8002a90 <I2C_Disable_IRQ+0xa4>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8002a90:	1cbb      	adds	r3, r7, #2
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	2212      	movs	r2, #18
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b12      	cmp	r3, #18
 8002a9a:	d103      	bne.n	8002aa4 <I2C_Disable_IRQ+0xb8>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2240      	movs	r2, #64	; 0x40
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	43d9      	mvns	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b004      	add	sp, #16
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2241      	movs	r2, #65	; 0x41
 8002ace:	5c9b      	ldrb	r3, [r3, r2]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	d138      	bne.n	8002b48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2240      	movs	r2, #64	; 0x40
 8002ada:	5c9b      	ldrb	r3, [r3, r2]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e032      	b.n	8002b4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2240      	movs	r2, #64	; 0x40
 8002ae8:	2101      	movs	r1, #1
 8002aea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2241      	movs	r2, #65	; 0x41
 8002af0:	2124      	movs	r1, #36	; 0x24
 8002af2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2101      	movs	r1, #1
 8002b00:	438a      	bics	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4911      	ldr	r1, [pc, #68]	; (8002b54 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002b10:	400a      	ands	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6819      	ldr	r1, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2101      	movs	r1, #1
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2241      	movs	r2, #65	; 0x41
 8002b38:	2120      	movs	r1, #32
 8002b3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2240      	movs	r2, #64	; 0x40
 8002b40:	2100      	movs	r1, #0
 8002b42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b002      	add	sp, #8
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	ffffefff 	.word	0xffffefff

08002b58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2241      	movs	r2, #65	; 0x41
 8002b6a:	5c9b      	ldrb	r3, [r3, r2]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d139      	bne.n	8002be6 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2240      	movs	r2, #64	; 0x40
 8002b76:	5c9b      	ldrb	r3, [r3, r2]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e033      	b.n	8002be8 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2240      	movs	r2, #64	; 0x40
 8002b84:	2101      	movs	r1, #1
 8002b86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2241      	movs	r2, #65	; 0x41
 8002b8c:	2124      	movs	r1, #36	; 0x24
 8002b8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	438a      	bics	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2241      	movs	r2, #65	; 0x41
 8002bd6:	2120      	movs	r1, #32
 8002bd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2240      	movs	r2, #64	; 0x40
 8002bde:	2100      	movs	r1, #0
 8002be0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e000      	b.n	8002be8 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
  }
}
 8002be8:	0018      	movs	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b004      	add	sp, #16
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	fffff0ff 	.word	0xfffff0ff

08002bf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2201      	movs	r2, #1
 8002c06:	4013      	ands	r3, r2
 8002c08:	d100      	bne.n	8002c0c <HAL_RCC_OscConfig+0x18>
 8002c0a:	e08d      	b.n	8002d28 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c0c:	4bc5      	ldr	r3, [pc, #788]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	220c      	movs	r2, #12
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d00e      	beq.n	8002c36 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c18:	4bc2      	ldr	r3, [pc, #776]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	220c      	movs	r2, #12
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d116      	bne.n	8002c52 <HAL_RCC_OscConfig+0x5e>
 8002c24:	4bbf      	ldr	r3, [pc, #764]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	23c0      	movs	r3, #192	; 0xc0
 8002c2a:	025b      	lsls	r3, r3, #9
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	025b      	lsls	r3, r3, #9
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d10d      	bne.n	8002c52 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c36:	4bbb      	ldr	r3, [pc, #748]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	029b      	lsls	r3, r3, #10
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d100      	bne.n	8002c44 <HAL_RCC_OscConfig+0x50>
 8002c42:	e070      	b.n	8002d26 <HAL_RCC_OscConfig+0x132>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d000      	beq.n	8002c4e <HAL_RCC_OscConfig+0x5a>
 8002c4c:	e06b      	b.n	8002d26 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e329      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_OscConfig+0x76>
 8002c5a:	4bb2      	ldr	r3, [pc, #712]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4bb1      	ldr	r3, [pc, #708]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	0249      	lsls	r1, r1, #9
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e02f      	b.n	8002cca <HAL_RCC_OscConfig+0xd6>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x98>
 8002c72:	4bac      	ldr	r3, [pc, #688]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4bab      	ldr	r3, [pc, #684]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002c78:	49ab      	ldr	r1, [pc, #684]	; (8002f28 <HAL_RCC_OscConfig+0x334>)
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	4ba9      	ldr	r3, [pc, #676]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4ba8      	ldr	r3, [pc, #672]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002c84:	49a9      	ldr	r1, [pc, #676]	; (8002f2c <HAL_RCC_OscConfig+0x338>)
 8002c86:	400a      	ands	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e01e      	b.n	8002cca <HAL_RCC_OscConfig+0xd6>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d10e      	bne.n	8002cb2 <HAL_RCC_OscConfig+0xbe>
 8002c94:	4ba3      	ldr	r3, [pc, #652]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4ba2      	ldr	r3, [pc, #648]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	02c9      	lsls	r1, r1, #11
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	4ba0      	ldr	r3, [pc, #640]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4b9f      	ldr	r3, [pc, #636]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002ca8:	2180      	movs	r1, #128	; 0x80
 8002caa:	0249      	lsls	r1, r1, #9
 8002cac:	430a      	orrs	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	e00b      	b.n	8002cca <HAL_RCC_OscConfig+0xd6>
 8002cb2:	4b9c      	ldr	r3, [pc, #624]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4b9b      	ldr	r3, [pc, #620]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002cb8:	499b      	ldr	r1, [pc, #620]	; (8002f28 <HAL_RCC_OscConfig+0x334>)
 8002cba:	400a      	ands	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	4b99      	ldr	r3, [pc, #612]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4b98      	ldr	r3, [pc, #608]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002cc4:	4999      	ldr	r1, [pc, #612]	; (8002f2c <HAL_RCC_OscConfig+0x338>)
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d014      	beq.n	8002cfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7fd fd9b 	bl	800080c <HAL_GetTick>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7fd fd96 	bl	800080c <HAL_GetTick>
 8002ce0:	0002      	movs	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	; 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e2db      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b8d      	ldr	r3, [pc, #564]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	029b      	lsls	r3, r3, #10
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0xe8>
 8002cfa:	e015      	b.n	8002d28 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fd fd86 	bl	800080c <HAL_GetTick>
 8002d00:	0003      	movs	r3, r0
 8002d02:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d06:	f7fd fd81 	bl	800080c <HAL_GetTick>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b64      	cmp	r3, #100	; 0x64
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e2c6      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d18:	4b82      	ldr	r3, [pc, #520]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	029b      	lsls	r3, r3, #10
 8002d20:	4013      	ands	r3, r2
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0x112>
 8002d24:	e000      	b.n	8002d28 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d100      	bne.n	8002d34 <HAL_RCC_OscConfig+0x140>
 8002d32:	e06c      	b.n	8002e0e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d34:	4b7b      	ldr	r3, [pc, #492]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	220c      	movs	r2, #12
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d00e      	beq.n	8002d5c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d3e:	4b79      	ldr	r3, [pc, #484]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	220c      	movs	r2, #12
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d11f      	bne.n	8002d8a <HAL_RCC_OscConfig+0x196>
 8002d4a:	4b76      	ldr	r3, [pc, #472]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	23c0      	movs	r3, #192	; 0xc0
 8002d50:	025b      	lsls	r3, r3, #9
 8002d52:	401a      	ands	r2, r3
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d116      	bne.n	8002d8a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5c:	4b71      	ldr	r3, [pc, #452]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2202      	movs	r2, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	d005      	beq.n	8002d72 <HAL_RCC_OscConfig+0x17e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e299      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d72:	4b6c      	ldr	r3, [pc, #432]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	22f8      	movs	r2, #248	; 0xf8
 8002d78:	4393      	bics	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	00da      	lsls	r2, r3, #3
 8002d82:	4b68      	ldr	r3, [pc, #416]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d88:	e041      	b.n	8002e0e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d024      	beq.n	8002ddc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d92:	4b64      	ldr	r3, [pc, #400]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b63      	ldr	r3, [pc, #396]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002d98:	2101      	movs	r1, #1
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fd fd35 	bl	800080c <HAL_GetTick>
 8002da2:	0003      	movs	r3, r0
 8002da4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da8:	f7fd fd30 	bl	800080c <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e275      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dba:	4b5a      	ldr	r3, [pc, #360]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d0f1      	beq.n	8002da8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc4:	4b57      	ldr	r3, [pc, #348]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	22f8      	movs	r2, #248	; 0xf8
 8002dca:	4393      	bics	r3, r2
 8002dcc:	0019      	movs	r1, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00da      	lsls	r2, r3, #3
 8002dd4:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e018      	b.n	8002e0e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ddc:	4b51      	ldr	r3, [pc, #324]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	438a      	bics	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fd fd10 	bl	800080c <HAL_GetTick>
 8002dec:	0003      	movs	r3, r0
 8002dee:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df2:	f7fd fd0b 	bl	800080c <HAL_GetTick>
 8002df6:	0002      	movs	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e250      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e04:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d1f1      	bne.n	8002df2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2208      	movs	r2, #8
 8002e14:	4013      	ands	r3, r2
 8002e16:	d036      	beq.n	8002e86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d019      	beq.n	8002e54 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e20:	4b40      	ldr	r3, [pc, #256]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e24:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002e26:	2101      	movs	r1, #1
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2c:	f7fd fcee 	bl	800080c <HAL_GetTick>
 8002e30:	0003      	movs	r3, r0
 8002e32:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e36:	f7fd fce9 	bl	800080c <HAL_GetTick>
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e22e      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e48:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d0f1      	beq.n	8002e36 <HAL_RCC_OscConfig+0x242>
 8002e52:	e018      	b.n	8002e86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e54:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e58:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	438a      	bics	r2, r1
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e60:	f7fd fcd4 	bl	800080c <HAL_GetTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e6a:	f7fd fccf 	bl	800080c <HAL_GetTick>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e214      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e7c:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	2202      	movs	r2, #2
 8002e82:	4013      	ands	r3, r2
 8002e84:	d1f1      	bne.n	8002e6a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <HAL_RCC_OscConfig+0x29e>
 8002e90:	e0b6      	b.n	8003000 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e92:	2317      	movs	r3, #23
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e9a:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	055b      	lsls	r3, r3, #21
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d111      	bne.n	8002eca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea6:	4b1f      	ldr	r3, [pc, #124]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	0549      	lsls	r1, r1, #21
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	61da      	str	r2, [r3, #28]
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002eb6:	69da      	ldr	r2, [r3, #28]
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	055b      	lsls	r3, r3, #21
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ec2:	2317      	movs	r3, #23
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eca:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_RCC_OscConfig+0x33c>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d11a      	bne.n	8002f0c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed6:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <HAL_RCC_OscConfig+0x33c>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <HAL_RCC_OscConfig+0x33c>)
 8002edc:	2180      	movs	r1, #128	; 0x80
 8002ede:	0049      	lsls	r1, r1, #1
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee4:	f7fd fc92 	bl	800080c <HAL_GetTick>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eee:	f7fd fc8d 	bl	800080c <HAL_GetTick>
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b64      	cmp	r3, #100	; 0x64
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e1d2      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_OscConfig+0x33c>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d10f      	bne.n	8002f34 <HAL_RCC_OscConfig+0x340>
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002f16:	6a1a      	ldr	r2, [r3, #32]
 8002f18:	4b02      	ldr	r3, [pc, #8]	; (8002f24 <HAL_RCC_OscConfig+0x330>)
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	621a      	str	r2, [r3, #32]
 8002f20:	e036      	b.n	8002f90 <HAL_RCC_OscConfig+0x39c>
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	40021000 	.word	0x40021000
 8002f28:	fffeffff 	.word	0xfffeffff
 8002f2c:	fffbffff 	.word	0xfffbffff
 8002f30:	40007000 	.word	0x40007000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10c      	bne.n	8002f56 <HAL_RCC_OscConfig+0x362>
 8002f3c:	4bca      	ldr	r3, [pc, #808]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002f3e:	6a1a      	ldr	r2, [r3, #32]
 8002f40:	4bc9      	ldr	r3, [pc, #804]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002f42:	2101      	movs	r1, #1
 8002f44:	438a      	bics	r2, r1
 8002f46:	621a      	str	r2, [r3, #32]
 8002f48:	4bc7      	ldr	r3, [pc, #796]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002f4a:	6a1a      	ldr	r2, [r3, #32]
 8002f4c:	4bc6      	ldr	r3, [pc, #792]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002f4e:	2104      	movs	r1, #4
 8002f50:	438a      	bics	r2, r1
 8002f52:	621a      	str	r2, [r3, #32]
 8002f54:	e01c      	b.n	8002f90 <HAL_RCC_OscConfig+0x39c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b05      	cmp	r3, #5
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x384>
 8002f5e:	4bc2      	ldr	r3, [pc, #776]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002f60:	6a1a      	ldr	r2, [r3, #32]
 8002f62:	4bc1      	ldr	r3, [pc, #772]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002f64:	2104      	movs	r1, #4
 8002f66:	430a      	orrs	r2, r1
 8002f68:	621a      	str	r2, [r3, #32]
 8002f6a:	4bbf      	ldr	r3, [pc, #764]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002f6c:	6a1a      	ldr	r2, [r3, #32]
 8002f6e:	4bbe      	ldr	r3, [pc, #760]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002f70:	2101      	movs	r1, #1
 8002f72:	430a      	orrs	r2, r1
 8002f74:	621a      	str	r2, [r3, #32]
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_OscConfig+0x39c>
 8002f78:	4bbb      	ldr	r3, [pc, #748]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002f7a:	6a1a      	ldr	r2, [r3, #32]
 8002f7c:	4bba      	ldr	r3, [pc, #744]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002f7e:	2101      	movs	r1, #1
 8002f80:	438a      	bics	r2, r1
 8002f82:	621a      	str	r2, [r3, #32]
 8002f84:	4bb8      	ldr	r3, [pc, #736]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002f86:	6a1a      	ldr	r2, [r3, #32]
 8002f88:	4bb7      	ldr	r3, [pc, #732]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002f8a:	2104      	movs	r1, #4
 8002f8c:	438a      	bics	r2, r1
 8002f8e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d014      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f98:	f7fd fc38 	bl	800080c <HAL_GetTick>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa0:	e009      	b.n	8002fb6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fd fc33 	bl	800080c <HAL_GetTick>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	4aaf      	ldr	r2, [pc, #700]	; (800326c <HAL_RCC_OscConfig+0x678>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e177      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb6:	4bac      	ldr	r3, [pc, #688]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x3ae>
 8002fc0:	e013      	b.n	8002fea <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc2:	f7fd fc23 	bl	800080c <HAL_GetTick>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fca:	e009      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fcc:	f7fd fc1e 	bl	800080c <HAL_GetTick>
 8002fd0:	0002      	movs	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	4aa5      	ldr	r2, [pc, #660]	; (800326c <HAL_RCC_OscConfig+0x678>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e162      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe0:	4ba1      	ldr	r3, [pc, #644]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fea:	2317      	movs	r3, #23
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d105      	bne.n	8003000 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff4:	4b9c      	ldr	r3, [pc, #624]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	4b9b      	ldr	r3, [pc, #620]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8002ffa:	499d      	ldr	r1, [pc, #628]	; (8003270 <HAL_RCC_OscConfig+0x67c>)
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2210      	movs	r2, #16
 8003006:	4013      	ands	r3, r2
 8003008:	d063      	beq.n	80030d2 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d12a      	bne.n	8003068 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003012:	4b95      	ldr	r3, [pc, #596]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003016:	4b94      	ldr	r3, [pc, #592]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003018:	2104      	movs	r1, #4
 800301a:	430a      	orrs	r2, r1
 800301c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800301e:	4b92      	ldr	r3, [pc, #584]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003022:	4b91      	ldr	r3, [pc, #580]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003024:	2101      	movs	r1, #1
 8003026:	430a      	orrs	r2, r1
 8003028:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302a:	f7fd fbef 	bl	800080c <HAL_GetTick>
 800302e:	0003      	movs	r3, r0
 8003030:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003034:	f7fd fbea 	bl	800080c <HAL_GetTick>
 8003038:	0002      	movs	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e12f      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003046:	4b88      	ldr	r3, [pc, #544]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	2202      	movs	r2, #2
 800304c:	4013      	ands	r3, r2
 800304e:	d0f1      	beq.n	8003034 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003050:	4b85      	ldr	r3, [pc, #532]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003054:	22f8      	movs	r2, #248	; 0xf8
 8003056:	4393      	bics	r3, r2
 8003058:	0019      	movs	r1, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	00da      	lsls	r2, r3, #3
 8003060:	4b81      	ldr	r3, [pc, #516]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003062:	430a      	orrs	r2, r1
 8003064:	635a      	str	r2, [r3, #52]	; 0x34
 8003066:	e034      	b.n	80030d2 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	3305      	adds	r3, #5
 800306e:	d111      	bne.n	8003094 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003070:	4b7d      	ldr	r3, [pc, #500]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003074:	4b7c      	ldr	r3, [pc, #496]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003076:	2104      	movs	r1, #4
 8003078:	438a      	bics	r2, r1
 800307a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800307c:	4b7a      	ldr	r3, [pc, #488]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 800307e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003080:	22f8      	movs	r2, #248	; 0xf8
 8003082:	4393      	bics	r3, r2
 8003084:	0019      	movs	r1, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	00da      	lsls	r2, r3, #3
 800308c:	4b76      	ldr	r3, [pc, #472]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 800308e:	430a      	orrs	r2, r1
 8003090:	635a      	str	r2, [r3, #52]	; 0x34
 8003092:	e01e      	b.n	80030d2 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003094:	4b74      	ldr	r3, [pc, #464]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003098:	4b73      	ldr	r3, [pc, #460]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 800309a:	2104      	movs	r1, #4
 800309c:	430a      	orrs	r2, r1
 800309e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80030a0:	4b71      	ldr	r3, [pc, #452]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 80030a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a4:	4b70      	ldr	r3, [pc, #448]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 80030a6:	2101      	movs	r1, #1
 80030a8:	438a      	bics	r2, r1
 80030aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ac:	f7fd fbae 	bl	800080c <HAL_GetTick>
 80030b0:	0003      	movs	r3, r0
 80030b2:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80030b6:	f7fd fba9 	bl	800080c <HAL_GetTick>
 80030ba:	0002      	movs	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0ee      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80030c8:	4b67      	ldr	r3, [pc, #412]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 80030ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030cc:	2202      	movs	r2, #2
 80030ce:	4013      	ands	r3, r2
 80030d0:	d1f1      	bne.n	80030b6 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2220      	movs	r2, #32
 80030d8:	4013      	ands	r3, r2
 80030da:	d05c      	beq.n	8003196 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80030dc:	4b62      	ldr	r3, [pc, #392]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	220c      	movs	r2, #12
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	d00e      	beq.n	8003106 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80030e8:	4b5f      	ldr	r3, [pc, #380]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	220c      	movs	r2, #12
 80030ee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d114      	bne.n	800311e <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80030f4:	4b5c      	ldr	r3, [pc, #368]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	23c0      	movs	r3, #192	; 0xc0
 80030fa:	025b      	lsls	r3, r3, #9
 80030fc:	401a      	ands	r2, r3
 80030fe:	23c0      	movs	r3, #192	; 0xc0
 8003100:	025b      	lsls	r3, r3, #9
 8003102:	429a      	cmp	r2, r3
 8003104:	d10b      	bne.n	800311e <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003106:	4b58      	ldr	r3, [pc, #352]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	025b      	lsls	r3, r3, #9
 800310e:	4013      	ands	r3, r2
 8003110:	d040      	beq.n	8003194 <HAL_RCC_OscConfig+0x5a0>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d03c      	beq.n	8003194 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0c3      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01b      	beq.n	800315e <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003126:	4b50      	ldr	r3, [pc, #320]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312a:	4b4f      	ldr	r3, [pc, #316]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 800312c:	2180      	movs	r1, #128	; 0x80
 800312e:	0249      	lsls	r1, r1, #9
 8003130:	430a      	orrs	r2, r1
 8003132:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fd fb6a 	bl	800080c <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800313e:	f7fd fb65 	bl	800080c <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e0aa      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003150:	4b45      	ldr	r3, [pc, #276]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	025b      	lsls	r3, r3, #9
 8003158:	4013      	ands	r3, r2
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x54a>
 800315c:	e01b      	b.n	8003196 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800315e:	4b42      	ldr	r3, [pc, #264]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003162:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003164:	4943      	ldr	r1, [pc, #268]	; (8003274 <HAL_RCC_OscConfig+0x680>)
 8003166:	400a      	ands	r2, r1
 8003168:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fd fb4f 	bl	800080c <HAL_GetTick>
 800316e:	0003      	movs	r3, r0
 8003170:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003174:	f7fd fb4a 	bl	800080c <HAL_GetTick>
 8003178:	0002      	movs	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e08f      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003186:	4b38      	ldr	r3, [pc, #224]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	025b      	lsls	r3, r3, #9
 800318e:	4013      	ands	r3, r2
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x580>
 8003192:	e000      	b.n	8003196 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003194:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	2b00      	cmp	r3, #0
 800319c:	d100      	bne.n	80031a0 <HAL_RCC_OscConfig+0x5ac>
 800319e:	e081      	b.n	80032a4 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a0:	4b31      	ldr	r3, [pc, #196]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	220c      	movs	r2, #12
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d100      	bne.n	80031ae <HAL_RCC_OscConfig+0x5ba>
 80031ac:	e078      	b.n	80032a0 <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d14c      	bne.n	8003250 <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b6:	4b2c      	ldr	r3, [pc, #176]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 80031bc:	492e      	ldr	r1, [pc, #184]	; (8003278 <HAL_RCC_OscConfig+0x684>)
 80031be:	400a      	ands	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c2:	f7fd fb23 	bl	800080c <HAL_GetTick>
 80031c6:	0003      	movs	r3, r0
 80031c8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fd fb1e 	bl	800080c <HAL_GetTick>
 80031d0:	0002      	movs	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e063      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031de:	4b22      	ldr	r3, [pc, #136]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	049b      	lsls	r3, r3, #18
 80031e6:	4013      	ands	r3, r2
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ea:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	220f      	movs	r2, #15
 80031f0:	4393      	bics	r3, r2
 80031f2:	0019      	movs	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 80031fa:	430a      	orrs	r2, r1
 80031fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80031fe:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_RCC_OscConfig+0x688>)
 8003204:	4013      	ands	r3, r2
 8003206:	0019      	movs	r1, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	431a      	orrs	r2, r3
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003218:	4b13      	ldr	r3, [pc, #76]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 800321e:	2180      	movs	r1, #128	; 0x80
 8003220:	0449      	lsls	r1, r1, #17
 8003222:	430a      	orrs	r2, r1
 8003224:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7fd faf1 	bl	800080c <HAL_GetTick>
 800322a:	0003      	movs	r3, r0
 800322c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003230:	f7fd faec 	bl	800080c <HAL_GetTick>
 8003234:	0002      	movs	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e031      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	049b      	lsls	r3, r3, #18
 800324a:	4013      	ands	r3, r2
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x63c>
 800324e:	e029      	b.n	80032a4 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <HAL_RCC_OscConfig+0x674>)
 8003256:	4908      	ldr	r1, [pc, #32]	; (8003278 <HAL_RCC_OscConfig+0x684>)
 8003258:	400a      	ands	r2, r1
 800325a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fd fad6 	bl	800080c <HAL_GetTick>
 8003260:	0003      	movs	r3, r0
 8003262:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003264:	e015      	b.n	8003292 <HAL_RCC_OscConfig+0x69e>
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	40021000 	.word	0x40021000
 800326c:	00001388 	.word	0x00001388
 8003270:	efffffff 	.word	0xefffffff
 8003274:	fffeffff 	.word	0xfffeffff
 8003278:	feffffff 	.word	0xfeffffff
 800327c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003280:	f7fd fac4 	bl	800080c <HAL_GetTick>
 8003284:	0002      	movs	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e009      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003292:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <HAL_RCC_OscConfig+0x6bc>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	049b      	lsls	r3, r3, #18
 800329a:	4013      	ands	r3, r2
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x68c>
 800329e:	e001      	b.n	80032a4 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	0018      	movs	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b006      	add	sp, #24
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	40021000 	.word	0x40021000

080032b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80032c2:	4b7b      	ldr	r3, [pc, #492]	; (80034b0 <HAL_RCC_ClockConfig+0x1fc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2201      	movs	r2, #1
 80032c8:	4013      	ands	r3, r2
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d911      	bls.n	80032f4 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d0:	4b77      	ldr	r3, [pc, #476]	; (80034b0 <HAL_RCC_ClockConfig+0x1fc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2201      	movs	r2, #1
 80032d6:	4393      	bics	r3, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	4b75      	ldr	r3, [pc, #468]	; (80034b0 <HAL_RCC_ClockConfig+0x1fc>)
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032e2:	4b73      	ldr	r3, [pc, #460]	; (80034b0 <HAL_RCC_ClockConfig+0x1fc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2201      	movs	r2, #1
 80032e8:	4013      	ands	r3, r2
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0d8      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2202      	movs	r2, #2
 80032fa:	4013      	ands	r3, r2
 80032fc:	d009      	beq.n	8003312 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fe:	4b6d      	ldr	r3, [pc, #436]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	22f0      	movs	r2, #240	; 0xf0
 8003304:	4393      	bics	r3, r2
 8003306:	0019      	movs	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	4b69      	ldr	r3, [pc, #420]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2201      	movs	r2, #1
 8003318:	4013      	ands	r3, r2
 800331a:	d100      	bne.n	800331e <HAL_RCC_ClockConfig+0x6a>
 800331c:	e089      	b.n	8003432 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	4b63      	ldr	r3, [pc, #396]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	029b      	lsls	r3, r3, #10
 800332e:	4013      	ands	r3, r2
 8003330:	d120      	bne.n	8003374 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0b7      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	4b5d      	ldr	r3, [pc, #372]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	049b      	lsls	r3, r3, #18
 8003346:	4013      	ands	r3, r2
 8003348:	d114      	bne.n	8003374 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0ab      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003356:	4b57      	ldr	r3, [pc, #348]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 8003358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	025b      	lsls	r3, r3, #9
 800335e:	4013      	ands	r3, r2
 8003360:	d108      	bne.n	8003374 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e09f      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003366:	4b53      	ldr	r3, [pc, #332]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2202      	movs	r2, #2
 800336c:	4013      	ands	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e098      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003374:	4b4f      	ldr	r3, [pc, #316]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2203      	movs	r2, #3
 800337a:	4393      	bics	r3, r2
 800337c:	0019      	movs	r1, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	4b4c      	ldr	r3, [pc, #304]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003388:	f7fd fa40 	bl	800080c <HAL_GetTick>
 800338c:	0003      	movs	r3, r0
 800338e:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d111      	bne.n	80033bc <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003398:	e009      	b.n	80033ae <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339a:	f7fd fa37 	bl	800080c <HAL_GetTick>
 800339e:	0002      	movs	r2, r0
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	4a44      	ldr	r2, [pc, #272]	; (80034b8 <HAL_RCC_ClockConfig+0x204>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e07b      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033ae:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	220c      	movs	r2, #12
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d1ef      	bne.n	800339a <HAL_RCC_ClockConfig+0xe6>
 80033ba:	e03a      	b.n	8003432 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d111      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c4:	e009      	b.n	80033da <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c6:	f7fd fa21 	bl	800080c <HAL_GetTick>
 80033ca:	0002      	movs	r2, r0
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	4a39      	ldr	r2, [pc, #228]	; (80034b8 <HAL_RCC_ClockConfig+0x204>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e065      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033da:	4b36      	ldr	r3, [pc, #216]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	220c      	movs	r2, #12
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d1ef      	bne.n	80033c6 <HAL_RCC_ClockConfig+0x112>
 80033e6:	e024      	b.n	8003432 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d11b      	bne.n	8003428 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80033f0:	e009      	b.n	8003406 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f2:	f7fd fa0b 	bl	800080c <HAL_GetTick>
 80033f6:	0002      	movs	r2, r0
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	4a2e      	ldr	r2, [pc, #184]	; (80034b8 <HAL_RCC_ClockConfig+0x204>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e04f      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8003406:	4b2b      	ldr	r3, [pc, #172]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	220c      	movs	r2, #12
 800340c:	4013      	ands	r3, r2
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d1ef      	bne.n	80033f2 <HAL_RCC_ClockConfig+0x13e>
 8003412:	e00e      	b.n	8003432 <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003414:	f7fd f9fa 	bl	800080c <HAL_GetTick>
 8003418:	0002      	movs	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	4a26      	ldr	r2, [pc, #152]	; (80034b8 <HAL_RCC_ClockConfig+0x204>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e03e      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003428:	4b22      	ldr	r3, [pc, #136]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	220c      	movs	r2, #12
 800342e:	4013      	ands	r3, r2
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003432:	4b1f      	ldr	r3, [pc, #124]	; (80034b0 <HAL_RCC_ClockConfig+0x1fc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2201      	movs	r2, #1
 8003438:	4013      	ands	r3, r2
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d211      	bcs.n	8003464 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003440:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <HAL_RCC_ClockConfig+0x1fc>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2201      	movs	r2, #1
 8003446:	4393      	bics	r3, r2
 8003448:	0019      	movs	r1, r3
 800344a:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_ClockConfig+0x1fc>)
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003452:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <HAL_RCC_ClockConfig+0x1fc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2201      	movs	r2, #1
 8003458:	4013      	ands	r3, r2
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e020      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2204      	movs	r2, #4
 800346a:	4013      	ands	r3, r2
 800346c:	d009      	beq.n	8003482 <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800346e:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4a12      	ldr	r2, [pc, #72]	; (80034bc <HAL_RCC_ClockConfig+0x208>)
 8003474:	4013      	ands	r3, r2
 8003476:	0019      	movs	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003482:	f000 f821 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 8003486:	0001      	movs	r1, r0
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x200>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	220f      	movs	r2, #15
 8003490:	4013      	ands	r3, r2
 8003492:	4a0b      	ldr	r2, [pc, #44]	; (80034c0 <HAL_RCC_ClockConfig+0x20c>)
 8003494:	5cd3      	ldrb	r3, [r2, r3]
 8003496:	000a      	movs	r2, r1
 8003498:	40da      	lsrs	r2, r3
 800349a:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <HAL_RCC_ClockConfig+0x210>)
 800349c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800349e:	2000      	movs	r0, #0
 80034a0:	f7fd f98c 	bl	80007bc <HAL_InitTick>
  
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	0018      	movs	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b004      	add	sp, #16
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	40022000 	.word	0x40022000
 80034b4:	40021000 	.word	0x40021000
 80034b8:	00001388 	.word	0x00001388
 80034bc:	fffff8ff 	.word	0xfffff8ff
 80034c0:	08009de8 	.word	0x08009de8
 80034c4:	20000000 	.word	0x20000000

080034c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c8:	b590      	push	{r4, r7, lr}
 80034ca:	b08f      	sub	sp, #60	; 0x3c
 80034cc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80034ce:	2314      	movs	r3, #20
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	4a37      	ldr	r2, [pc, #220]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xe8>)
 80034d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80034d6:	c313      	stmia	r3!, {r0, r1, r4}
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	4a35      	ldr	r2, [pc, #212]	; (80035b4 <HAL_RCC_GetSysClockFreq+0xec>)
 80034e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80034e2:	c313      	stmia	r3!, {r0, r1, r4}
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ec:	2300      	movs	r3, #0
 80034ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f0:	2300      	movs	r3, #0
 80034f2:	637b      	str	r3, [r7, #52]	; 0x34
 80034f4:	2300      	movs	r3, #0
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80034fc:	4b2e      	ldr	r3, [pc, #184]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	220c      	movs	r2, #12
 8003506:	4013      	ands	r3, r2
 8003508:	2b08      	cmp	r3, #8
 800350a:	d006      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0x52>
 800350c:	2b0c      	cmp	r3, #12
 800350e:	d043      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0xd0>
 8003510:	2b04      	cmp	r3, #4
 8003512:	d144      	bne.n	800359e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003514:	4b29      	ldr	r3, [pc, #164]	; (80035bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8003516:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003518:	e044      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	0c9b      	lsrs	r3, r3, #18
 800351e:	220f      	movs	r2, #15
 8003520:	4013      	ands	r3, r2
 8003522:	2214      	movs	r2, #20
 8003524:	18ba      	adds	r2, r7, r2
 8003526:	5cd3      	ldrb	r3, [r2, r3]
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	220f      	movs	r2, #15
 8003530:	4013      	ands	r3, r2
 8003532:	1d3a      	adds	r2, r7, #4
 8003534:	5cd3      	ldrb	r3, [r2, r3]
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800353a:	23c0      	movs	r3, #192	; 0xc0
 800353c:	025b      	lsls	r3, r3, #9
 800353e:	401a      	ands	r2, r3
 8003540:	2380      	movs	r3, #128	; 0x80
 8003542:	025b      	lsls	r3, r3, #9
 8003544:	429a      	cmp	r2, r3
 8003546:	d109      	bne.n	800355c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800354a:	481c      	ldr	r0, [pc, #112]	; (80035bc <HAL_RCC_GetSysClockFreq+0xf4>)
 800354c:	f7fc fe40 	bl	80001d0 <__udivsi3>
 8003550:	0003      	movs	r3, r0
 8003552:	001a      	movs	r2, r3
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	4353      	muls	r3, r2
 8003558:	637b      	str	r3, [r7, #52]	; 0x34
 800355a:	e01a      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800355c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800355e:	23c0      	movs	r3, #192	; 0xc0
 8003560:	025b      	lsls	r3, r3, #9
 8003562:	401a      	ands	r2, r3
 8003564:	23c0      	movs	r3, #192	; 0xc0
 8003566:	025b      	lsls	r3, r3, #9
 8003568:	429a      	cmp	r2, r3
 800356a:	d109      	bne.n	8003580 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 800356c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800356e:	4814      	ldr	r0, [pc, #80]	; (80035c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003570:	f7fc fe2e 	bl	80001d0 <__udivsi3>
 8003574:	0003      	movs	r3, r0
 8003576:	001a      	movs	r2, r3
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	4353      	muls	r3, r2
 800357c:	637b      	str	r3, [r7, #52]	; 0x34
 800357e:	e008      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8003580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003582:	480e      	ldr	r0, [pc, #56]	; (80035bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8003584:	f7fc fe24 	bl	80001d0 <__udivsi3>
 8003588:	0003      	movs	r3, r0
 800358a:	001a      	movs	r2, r3
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	4353      	muls	r3, r2
 8003590:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8003592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003596:	e005      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800359a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800359c:	e002      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <HAL_RCC_GetSysClockFreq+0xf4>)
 80035a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b00f      	add	sp, #60	; 0x3c
 80035ac:	bd90      	pop	{r4, r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	08009a20 	.word	0x08009a20
 80035b4:	08009a30 	.word	0x08009a30
 80035b8:	40021000 	.word	0x40021000
 80035bc:	007a1200 	.word	0x007a1200
 80035c0:	02dc6c00 	.word	0x02dc6c00

080035c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c8:	4b02      	ldr	r3, [pc, #8]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	0018      	movs	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	20000000 	.word	0x20000000

080035d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80035dc:	f7ff fff2 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 80035e0:	0001      	movs	r1, r0
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	2207      	movs	r2, #7
 80035ea:	4013      	ands	r3, r2
 80035ec:	4a04      	ldr	r2, [pc, #16]	; (8003600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ee:	5cd3      	ldrb	r3, [r2, r3]
 80035f0:	40d9      	lsrs	r1, r3
 80035f2:	000b      	movs	r3, r1
}    
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	40021000 	.word	0x40021000
 8003600:	08009df8 	.word	0x08009df8

08003604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	025b      	lsls	r3, r3, #9
 800361c:	4013      	ands	r3, r2
 800361e:	d100      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003620:	e08f      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003622:	2317      	movs	r3, #23
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362a:	4b6f      	ldr	r3, [pc, #444]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800362c:	69da      	ldr	r2, [r3, #28]
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	055b      	lsls	r3, r3, #21
 8003632:	4013      	ands	r3, r2
 8003634:	d111      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	4b6c      	ldr	r3, [pc, #432]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	4b6b      	ldr	r3, [pc, #428]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800363c:	2180      	movs	r1, #128	; 0x80
 800363e:	0549      	lsls	r1, r1, #21
 8003640:	430a      	orrs	r2, r1
 8003642:	61da      	str	r2, [r3, #28]
 8003644:	4b68      	ldr	r3, [pc, #416]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	055b      	lsls	r3, r3, #21
 800364c:	4013      	ands	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003652:	2317      	movs	r3, #23
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	2201      	movs	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4b64      	ldr	r3, [pc, #400]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4013      	ands	r3, r2
 8003664:	d11a      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003666:	4b61      	ldr	r3, [pc, #388]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4b60      	ldr	r3, [pc, #384]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800366c:	2180      	movs	r1, #128	; 0x80
 800366e:	0049      	lsls	r1, r1, #1
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003674:	f7fd f8ca 	bl	800080c <HAL_GetTick>
 8003678:	0003      	movs	r3, r0
 800367a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	e008      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367e:	f7fd f8c5 	bl	800080c <HAL_GetTick>
 8003682:	0002      	movs	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b64      	cmp	r3, #100	; 0x64
 800368a:	d901      	bls.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0a6      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	4b56      	ldr	r3, [pc, #344]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4013      	ands	r3, r2
 800369a:	d0f0      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800369c:	4b52      	ldr	r3, [pc, #328]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800369e:	6a1a      	ldr	r2, [r3, #32]
 80036a0:	23c0      	movs	r3, #192	; 0xc0
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4013      	ands	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d034      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	23c0      	movs	r3, #192	; 0xc0
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4013      	ands	r3, r2
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d02c      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036be:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4a4b      	ldr	r2, [pc, #300]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036c8:	4b47      	ldr	r3, [pc, #284]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	4b46      	ldr	r3, [pc, #280]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036ce:	2180      	movs	r1, #128	; 0x80
 80036d0:	0249      	lsls	r1, r1, #9
 80036d2:	430a      	orrs	r2, r1
 80036d4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036d6:	4b44      	ldr	r3, [pc, #272]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036d8:	6a1a      	ldr	r2, [r3, #32]
 80036da:	4b43      	ldr	r3, [pc, #268]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036dc:	4945      	ldr	r1, [pc, #276]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80036de:	400a      	ands	r2, r1
 80036e0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036e2:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	4013      	ands	r3, r2
 80036ee:	d013      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fd f88c 	bl	800080c <HAL_GetTick>
 80036f4:	0003      	movs	r3, r0
 80036f6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f8:	e009      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fd f887 	bl	800080c <HAL_GetTick>
 80036fe:	0002      	movs	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	4a3c      	ldr	r2, [pc, #240]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e067      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370e:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	2202      	movs	r2, #2
 8003714:	4013      	ands	r3, r2
 8003716:	d0f0      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003718:	4b33      	ldr	r3, [pc, #204]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4a34      	ldr	r2, [pc, #208]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800371e:	4013      	ands	r3, r2
 8003720:	0019      	movs	r1, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	4b30      	ldr	r3, [pc, #192]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003728:	430a      	orrs	r2, r1
 800372a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800372c:	2317      	movs	r3, #23
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003736:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800373c:	492f      	ldr	r1, [pc, #188]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800373e:	400a      	ands	r2, r1
 8003740:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2201      	movs	r2, #1
 8003748:	4013      	ands	r3, r2
 800374a:	d009      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800374c:	4b26      	ldr	r3, [pc, #152]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	2203      	movs	r2, #3
 8003752:	4393      	bics	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800375c:	430a      	orrs	r2, r1
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2202      	movs	r2, #2
 8003766:	4013      	ands	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800376a:	4b1f      	ldr	r3, [pc, #124]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a24      	ldr	r2, [pc, #144]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003770:	4013      	ands	r3, r2
 8003772:	0019      	movs	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800377a:	430a      	orrs	r2, r1
 800377c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2220      	movs	r2, #32
 8003784:	4013      	ands	r3, r2
 8003786:	d009      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	2210      	movs	r2, #16
 800378e:	4393      	bics	r3, r2
 8003790:	0019      	movs	r1, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003798:	430a      	orrs	r2, r1
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	029b      	lsls	r3, r3, #10
 80037a4:	4013      	ands	r3, r2
 80037a6:	d009      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	2280      	movs	r2, #128	; 0x80
 80037ae:	4393      	bics	r3, r2
 80037b0:	0019      	movs	r1, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037b8:	430a      	orrs	r2, r1
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4013      	ands	r3, r2
 80037c6:	d009      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037c8:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	2240      	movs	r2, #64	; 0x40
 80037ce:	4393      	bics	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037d8:	430a      	orrs	r2, r1
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b006      	add	sp, #24
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40007000 	.word	0x40007000
 80037f0:	fffffcff 	.word	0xfffffcff
 80037f4:	fffeffff 	.word	0xfffeffff
 80037f8:	00001388 	.word	0x00001388
 80037fc:	efffffff 	.word	0xefffffff
 8003800:	fffcffff 	.word	0xfffcffff

08003804 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e01e      	b.n	8003854 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	223d      	movs	r2, #61	; 0x3d
 800381a:	5c9b      	ldrb	r3, [r3, r2]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d107      	bne.n	8003832 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	223c      	movs	r2, #60	; 0x3c
 8003826:	2100      	movs	r1, #0
 8003828:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0018      	movs	r0, r3
 800382e:	f005 ff0b 	bl	8009648 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	223d      	movs	r2, #61	; 0x3d
 8003836:	2102      	movs	r1, #2
 8003838:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	0019      	movs	r1, r3
 8003844:	0010      	movs	r0, r2
 8003846:	f000 f91f 	bl	8003a88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	223d      	movs	r2, #61	; 0x3d
 800384e:	2101      	movs	r1, #1
 8003850:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b002      	add	sp, #8
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	223d      	movs	r2, #61	; 0x3d
 8003868:	2102      	movs	r1, #2
 800386a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2101      	movs	r1, #1
 8003878:	430a      	orrs	r2, r1
 800387a:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	223d      	movs	r2, #61	; 0x3d
 8003880:	2101      	movs	r1, #1
 8003882:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	0018      	movs	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	b002      	add	sp, #8
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6839      	ldr	r1, [r7, #0]
 80038a0:	2201      	movs	r2, #1
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 fb86 	bl	8003fb4 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a16      	ldr	r2, [pc, #88]	; (8003908 <HAL_TIM_PWM_Start+0x78>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00e      	beq.n	80038d0 <HAL_TIM_PWM_Start+0x40>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a15      	ldr	r2, [pc, #84]	; (800390c <HAL_TIM_PWM_Start+0x7c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d009      	beq.n	80038d0 <HAL_TIM_PWM_Start+0x40>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a13      	ldr	r2, [pc, #76]	; (8003910 <HAL_TIM_PWM_Start+0x80>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_TIM_PWM_Start+0x40>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a12      	ldr	r2, [pc, #72]	; (8003914 <HAL_TIM_PWM_Start+0x84>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d101      	bne.n	80038d4 <HAL_TIM_PWM_Start+0x44>
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_TIM_PWM_Start+0x46>
 80038d4:	2300      	movs	r3, #0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2180      	movs	r1, #128	; 0x80
 80038e6:	0209      	lsls	r1, r1, #8
 80038e8:	430a      	orrs	r2, r1
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2101      	movs	r1, #1
 80038f8:	430a      	orrs	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b002      	add	sp, #8
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	40012c00 	.word	0x40012c00
 800390c:	40014000 	.word	0x40014000
 8003910:	40014400 	.word	0x40014400
 8003914:	40014800 	.word	0x40014800

08003918 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	223c      	movs	r2, #60	; 0x3c
 8003928:	5c9b      	ldrb	r3, [r3, r2]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800392e:	2302      	movs	r3, #2
 8003930:	e0a4      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x164>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	223c      	movs	r2, #60	; 0x3c
 8003936:	2101      	movs	r1, #1
 8003938:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	223d      	movs	r2, #61	; 0x3d
 800393e:	2102      	movs	r1, #2
 8003940:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b04      	cmp	r3, #4
 8003946:	d029      	beq.n	800399c <HAL_TIM_PWM_ConfigChannel+0x84>
 8003948:	d802      	bhi.n	8003950 <HAL_TIM_PWM_ConfigChannel+0x38>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 800394e:	e08c      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8003950:	2b08      	cmp	r3, #8
 8003952:	d046      	beq.n	80039e2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8003954:	2b0c      	cmp	r3, #12
 8003956:	d065      	beq.n	8003a24 <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 8003958:	e087      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	0011      	movs	r1, r2
 8003962:	0018      	movs	r0, r3
 8003964:	f000 f912 	bl	8003b8c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2108      	movs	r1, #8
 8003974:	430a      	orrs	r2, r1
 8003976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2104      	movs	r1, #4
 8003984:	438a      	bics	r2, r1
 8003986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6999      	ldr	r1, [r3, #24]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	619a      	str	r2, [r3, #24]
    break;
 800399a:	e066      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	0011      	movs	r1, r2
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 f97f 	bl	8003ca8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2180      	movs	r1, #128	; 0x80
 80039b6:	0109      	lsls	r1, r1, #4
 80039b8:	430a      	orrs	r2, r1
 80039ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	492f      	ldr	r1, [pc, #188]	; (8003a84 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80039c8:	400a      	ands	r2, r1
 80039ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6999      	ldr	r1, [r3, #24]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	021a      	lsls	r2, r3, #8
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	619a      	str	r2, [r3, #24]
    break;
 80039e0:	e043      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	0011      	movs	r1, r2
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 f9e6 	bl	8003dbc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69da      	ldr	r2, [r3, #28]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2108      	movs	r1, #8
 80039fc:	430a      	orrs	r2, r1
 80039fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2104      	movs	r1, #4
 8003a0c:	438a      	bics	r2, r1
 8003a0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69d9      	ldr	r1, [r3, #28]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	61da      	str	r2, [r3, #28]
    break;
 8003a22:	e022      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	0011      	movs	r1, r2
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f000 fa51 	bl	8003ed4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69da      	ldr	r2, [r3, #28]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2180      	movs	r1, #128	; 0x80
 8003a3e:	0109      	lsls	r1, r1, #4
 8003a40:	430a      	orrs	r2, r1
 8003a42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69da      	ldr	r2, [r3, #28]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	490d      	ldr	r1, [pc, #52]	; (8003a84 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003a50:	400a      	ands	r2, r1
 8003a52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69d9      	ldr	r1, [r3, #28]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	021a      	lsls	r2, r3, #8
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	61da      	str	r2, [r3, #28]
    break;
 8003a68:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	223d      	movs	r2, #61	; 0x3d
 8003a6e:	2101      	movs	r1, #1
 8003a70:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	223c      	movs	r2, #60	; 0x3c
 8003a76:	2100      	movs	r1, #0
 8003a78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b004      	add	sp, #16
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	fffffbff 	.word	0xfffffbff

08003a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a34      	ldr	r2, [pc, #208]	; (8003b70 <TIM_Base_SetConfig+0xe8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d008      	beq.n	8003ab6 <TIM_Base_SetConfig+0x2e>
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	05db      	lsls	r3, r3, #23
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d003      	beq.n	8003ab6 <TIM_Base_SetConfig+0x2e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a30      	ldr	r2, [pc, #192]	; (8003b74 <TIM_Base_SetConfig+0xec>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d108      	bne.n	8003ac8 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2270      	movs	r2, #112	; 0x70
 8003aba:	4393      	bics	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <TIM_Base_SetConfig+0xe8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d018      	beq.n	8003b02 <TIM_Base_SetConfig+0x7a>
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	05db      	lsls	r3, r3, #23
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d013      	beq.n	8003b02 <TIM_Base_SetConfig+0x7a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a25      	ldr	r2, [pc, #148]	; (8003b74 <TIM_Base_SetConfig+0xec>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00f      	beq.n	8003b02 <TIM_Base_SetConfig+0x7a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a24      	ldr	r2, [pc, #144]	; (8003b78 <TIM_Base_SetConfig+0xf0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_Base_SetConfig+0x7a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a23      	ldr	r2, [pc, #140]	; (8003b7c <TIM_Base_SetConfig+0xf4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d007      	beq.n	8003b02 <TIM_Base_SetConfig+0x7a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a22      	ldr	r2, [pc, #136]	; (8003b80 <TIM_Base_SetConfig+0xf8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_Base_SetConfig+0x7a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a21      	ldr	r2, [pc, #132]	; (8003b84 <TIM_Base_SetConfig+0xfc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d108      	bne.n	8003b14 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4a20      	ldr	r2, [pc, #128]	; (8003b88 <TIM_Base_SetConfig+0x100>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2280      	movs	r2, #128	; 0x80
 8003b18:	4393      	bics	r3, r2
 8003b1a:	001a      	movs	r2, r3
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a0c      	ldr	r2, [pc, #48]	; (8003b70 <TIM_Base_SetConfig+0xe8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00b      	beq.n	8003b5a <TIM_Base_SetConfig+0xd2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <TIM_Base_SetConfig+0xf4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d007      	beq.n	8003b5a <TIM_Base_SetConfig+0xd2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a0c      	ldr	r2, [pc, #48]	; (8003b80 <TIM_Base_SetConfig+0xf8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_Base_SetConfig+0xd2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a0b      	ldr	r2, [pc, #44]	; (8003b84 <TIM_Base_SetConfig+0xfc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d103      	bne.n	8003b62 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	615a      	str	r2, [r3, #20]
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b004      	add	sp, #16
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40002000 	.word	0x40002000
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400
 8003b84:	40014800 	.word	0x40014800
 8003b88:	fffffcff 	.word	0xfffffcff

08003b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	4393      	bics	r3, r2
 8003baa:	001a      	movs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2270      	movs	r2, #112	; 0x70
 8003bc6:	4393      	bics	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2203      	movs	r2, #3
 8003bce:	4393      	bics	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2202      	movs	r2, #2
 8003be0:	4393      	bics	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <TIM_OC1_SetConfig+0x104>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00b      	beq.n	8003c0e <TIM_OC1_SetConfig+0x82>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a26      	ldr	r2, [pc, #152]	; (8003c94 <TIM_OC1_SetConfig+0x108>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d007      	beq.n	8003c0e <TIM_OC1_SetConfig+0x82>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a25      	ldr	r2, [pc, #148]	; (8003c98 <TIM_OC1_SetConfig+0x10c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d003      	beq.n	8003c0e <TIM_OC1_SetConfig+0x82>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a24      	ldr	r2, [pc, #144]	; (8003c9c <TIM_OC1_SetConfig+0x110>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10c      	bne.n	8003c28 <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2208      	movs	r2, #8
 8003c12:	4393      	bics	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2204      	movs	r2, #4
 8003c24:	4393      	bics	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a19      	ldr	r2, [pc, #100]	; (8003c90 <TIM_OC1_SetConfig+0x104>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00b      	beq.n	8003c48 <TIM_OC1_SetConfig+0xbc>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <TIM_OC1_SetConfig+0x108>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d007      	beq.n	8003c48 <TIM_OC1_SetConfig+0xbc>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a17      	ldr	r2, [pc, #92]	; (8003c98 <TIM_OC1_SetConfig+0x10c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d003      	beq.n	8003c48 <TIM_OC1_SetConfig+0xbc>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a16      	ldr	r2, [pc, #88]	; (8003c9c <TIM_OC1_SetConfig+0x110>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d111      	bne.n	8003c6c <TIM_OC1_SetConfig+0xe0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4a15      	ldr	r2, [pc, #84]	; (8003ca0 <TIM_OC1_SetConfig+0x114>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4a14      	ldr	r2, [pc, #80]	; (8003ca4 <TIM_OC1_SetConfig+0x118>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b006      	add	sp, #24
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	40012c00 	.word	0x40012c00
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800
 8003ca0:	fffffeff 	.word	0xfffffeff
 8003ca4:	fffffdff 	.word	0xfffffdff

08003ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	2210      	movs	r2, #16
 8003cc4:	4393      	bics	r3, r2
 8003cc6:	001a      	movs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4a2e      	ldr	r2, [pc, #184]	; (8003d9c <TIM_OC2_SetConfig+0xf4>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4a2d      	ldr	r2, [pc, #180]	; (8003da0 <TIM_OC2_SetConfig+0xf8>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	4393      	bics	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a24      	ldr	r2, [pc, #144]	; (8003da4 <TIM_OC2_SetConfig+0xfc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d10d      	bne.n	8003d32 <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2280      	movs	r2, #128	; 0x80
 8003d1a:	4393      	bics	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2240      	movs	r2, #64	; 0x40
 8003d2e:	4393      	bics	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <TIM_OC2_SetConfig+0xfc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <TIM_OC2_SetConfig+0xaa>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a1a      	ldr	r2, [pc, #104]	; (8003da8 <TIM_OC2_SetConfig+0x100>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <TIM_OC2_SetConfig+0xaa>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a19      	ldr	r2, [pc, #100]	; (8003dac <TIM_OC2_SetConfig+0x104>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d003      	beq.n	8003d52 <TIM_OC2_SetConfig+0xaa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <TIM_OC2_SetConfig+0x108>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d113      	bne.n	8003d7a <TIM_OC2_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <TIM_OC2_SetConfig+0x10c>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4a16      	ldr	r2, [pc, #88]	; (8003db8 <TIM_OC2_SetConfig+0x110>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	621a      	str	r2, [r3, #32]
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b006      	add	sp, #24
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	ffff8fff 	.word	0xffff8fff
 8003da0:	fffffcff 	.word	0xfffffcff
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	40014000 	.word	0x40014000
 8003dac:	40014400 	.word	0x40014400
 8003db0:	40014800 	.word	0x40014800
 8003db4:	fffffbff 	.word	0xfffffbff
 8003db8:	fffff7ff 	.word	0xfffff7ff

08003dbc <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	4a35      	ldr	r2, [pc, #212]	; (8003eac <TIM_OC3_SetConfig+0xf0>)
 8003dd8:	401a      	ands	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2270      	movs	r2, #112	; 0x70
 8003df4:	4393      	bics	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	4393      	bics	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	4a28      	ldr	r2, [pc, #160]	; (8003eb0 <TIM_OC3_SetConfig+0xf4>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a24      	ldr	r2, [pc, #144]	; (8003eb4 <TIM_OC3_SetConfig+0xf8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d10d      	bne.n	8003e42 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	4a23      	ldr	r2, [pc, #140]	; (8003eb8 <TIM_OC3_SetConfig+0xfc>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	4a1f      	ldr	r2, [pc, #124]	; (8003ebc <TIM_OC3_SetConfig+0x100>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a1b      	ldr	r2, [pc, #108]	; (8003eb4 <TIM_OC3_SetConfig+0xf8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00b      	beq.n	8003e62 <TIM_OC3_SetConfig+0xa6>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ec0 <TIM_OC3_SetConfig+0x104>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d007      	beq.n	8003e62 <TIM_OC3_SetConfig+0xa6>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a1b      	ldr	r2, [pc, #108]	; (8003ec4 <TIM_OC3_SetConfig+0x108>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d003      	beq.n	8003e62 <TIM_OC3_SetConfig+0xa6>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a1a      	ldr	r2, [pc, #104]	; (8003ec8 <TIM_OC3_SetConfig+0x10c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d113      	bne.n	8003e8a <TIM_OC3_SetConfig+0xce>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4a19      	ldr	r2, [pc, #100]	; (8003ecc <TIM_OC3_SetConfig+0x110>)
 8003e66:	4013      	ands	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <TIM_OC3_SetConfig+0x114>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	621a      	str	r2, [r3, #32]
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b006      	add	sp, #24
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	fffffeff 	.word	0xfffffeff
 8003eb0:	fffffdff 	.word	0xfffffdff
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	fffff7ff 	.word	0xfffff7ff
 8003ebc:	fffffbff 	.word	0xfffffbff
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40014400 	.word	0x40014400
 8003ec8:	40014800 	.word	0x40014800
 8003ecc:	ffffefff 	.word	0xffffefff
 8003ed0:	ffffdfff 	.word	0xffffdfff

08003ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	4a28      	ldr	r2, [pc, #160]	; (8003f90 <TIM_OC4_SetConfig+0xbc>)
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <TIM_OC4_SetConfig+0xc0>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4a21      	ldr	r2, [pc, #132]	; (8003f98 <TIM_OC4_SetConfig+0xc4>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <TIM_OC4_SetConfig+0xc8>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	031b      	lsls	r3, r3, #12
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <TIM_OC4_SetConfig+0xcc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_OC4_SetConfig+0x84>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <TIM_OC4_SetConfig+0xd0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_OC4_SetConfig+0x84>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <TIM_OC4_SetConfig+0xd4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_OC4_SetConfig+0x84>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a16      	ldr	r2, [pc, #88]	; (8003fac <TIM_OC4_SetConfig+0xd8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d109      	bne.n	8003f6c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <TIM_OC4_SetConfig+0xdc>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	019b      	lsls	r3, r3, #6
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	621a      	str	r2, [r3, #32]
}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b006      	add	sp, #24
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	ffffefff 	.word	0xffffefff
 8003f94:	ffff8fff 	.word	0xffff8fff
 8003f98:	fffffcff 	.word	0xfffffcff
 8003f9c:	ffffdfff 	.word	0xffffdfff
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800
 8003fb0:	ffffbfff 	.word	0xffffbfff

08003fb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	0013      	movs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	43d2      	mvns	r2, r2
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a1a      	ldr	r2, [r3, #32]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4099      	lsls	r1, r3
 8003fe6:	000b      	movs	r3, r1
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b006      	add	sp, #24
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	223c      	movs	r2, #60	; 0x3c
 8004004:	5c9b      	ldrb	r3, [r3, r2]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800400a:	2302      	movs	r3, #2
 800400c:	e032      	b.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	223c      	movs	r2, #60	; 0x3c
 8004012:	2101      	movs	r1, #1
 8004014:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	223d      	movs	r2, #61	; 0x3d
 800401a:	2102      	movs	r1, #2
 800401c:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2170      	movs	r1, #112	; 0x70
 800402a:	438a      	bics	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	438a      	bics	r2, r1
 800404e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6899      	ldr	r1, [r3, #8]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	223d      	movs	r2, #61	; 0x3d
 8004066:	2101      	movs	r1, #1
 8004068:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	223c      	movs	r2, #60	; 0x3c
 800406e:	2100      	movs	r1, #0
 8004070:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	0018      	movs	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	b002      	add	sp, #8
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e047      	b.n	800411e <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2269      	movs	r2, #105	; 0x69
 8004092:	5c9b      	ldrb	r3, [r3, r2]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d107      	bne.n	80040aa <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2268      	movs	r2, #104	; 0x68
 800409e:	2100      	movs	r1, #0
 80040a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	0018      	movs	r0, r3
 80040a6:	f005 f903 	bl	80092b0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2269      	movs	r2, #105	; 0x69
 80040ae:	2124      	movs	r1, #36	; 0x24
 80040b0:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2101      	movs	r1, #1
 80040be:	438a      	bics	r2, r1
 80040c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	0018      	movs	r0, r3
 80040c6:	f000 f9f1 	bl	80044ac <UART_SetConfig>
 80040ca:	0003      	movs	r3, r0
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e024      	b.n	800411e <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	0018      	movs	r0, r3
 80040e0:	f000 fba0 	bl	8004824 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	490e      	ldr	r1, [pc, #56]	; (8004128 <HAL_UART_Init+0xac>)
 80040f0:	400a      	ands	r2, r1
 80040f2:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	212a      	movs	r1, #42	; 0x2a
 8004100:	438a      	bics	r2, r1
 8004102:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2101      	movs	r1, #1
 8004110:	430a      	orrs	r2, r1
 8004112:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	0018      	movs	r0, r3
 8004118:	f000 fc38 	bl	800498c <UART_CheckIdleState>
 800411c:	0003      	movs	r3, r0
}
 800411e:	0018      	movs	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	b002      	add	sp, #8
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	ffffb7ff 	.word	0xffffb7ff

0800412c <HAL_UART_Transmit_IT>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	1dbb      	adds	r3, r7, #6
 8004138:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2269      	movs	r2, #105	; 0x69
 800413e:	5c9b      	ldrb	r3, [r3, r2]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b20      	cmp	r3, #32
 8004144:	d145      	bne.n	80041d2 <HAL_UART_Transmit_IT+0xa6>
  {
    if((pData == NULL ) || (Size == 0U))
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_UART_Transmit_IT+0x28>
 800414c:	1dbb      	adds	r3, r7, #6
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e03d      	b.n	80041d4 <HAL_UART_Transmit_IT+0xa8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	015b      	lsls	r3, r3, #5
 8004160:	429a      	cmp	r2, r3
 8004162:	d109      	bne.n	8004178 <HAL_UART_Transmit_IT+0x4c>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <HAL_UART_Transmit_IT+0x4c>
    {
      if((((uint32_t)pData)&1U) != 0U)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2201      	movs	r2, #1
 8004170:	4013      	ands	r3, r2
 8004172:	d001      	beq.n	8004178 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e02d      	b.n	80041d4 <HAL_UART_Transmit_IT+0xa8>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2268      	movs	r2, #104	; 0x68
 800417c:	5c9b      	ldrb	r3, [r3, r2]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_UART_Transmit_IT+0x5a>
 8004182:	2302      	movs	r3, #2
 8004184:	e026      	b.n	80041d4 <HAL_UART_Transmit_IT+0xa8>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2268      	movs	r2, #104	; 0x68
 800418a:	2101      	movs	r1, #1
 800418c:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr = pData;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	1dba      	adds	r2, r7, #6
 8004198:	2150      	movs	r1, #80	; 0x50
 800419a:	8812      	ldrh	r2, [r2, #0]
 800419c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1dba      	adds	r2, r7, #6
 80041a2:	2152      	movs	r1, #82	; 0x52
 80041a4:	8812      	ldrh	r2, [r2, #0]
 80041a6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2269      	movs	r2, #105	; 0x69
 80041b2:	2121      	movs	r1, #33	; 0x21
 80041b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2268      	movs	r2, #104	; 0x68
 80041ba:	2100      	movs	r1, #0
 80041bc:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2180      	movs	r1, #128	; 0x80
 80041ca:	430a      	orrs	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e000      	b.n	80041d4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80041d2:	2302      	movs	r3, #2
  }
}
 80041d4:	0018      	movs	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b004      	add	sp, #16
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_UART_Receive_IT>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	1dbb      	adds	r3, r7, #6
 80041e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	226a      	movs	r2, #106	; 0x6a
 80041ee:	5c9b      	ldrb	r3, [r3, r2]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d000      	beq.n	80041f8 <HAL_UART_Receive_IT+0x1c>
 80041f6:	e087      	b.n	8004308 <HAL_UART_Receive_IT+0x12c>
  {
    if((pData == NULL ) || (Size == 0U))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_UART_Receive_IT+0x2a>
 80041fe:	1dbb      	adds	r3, r7, #6
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_UART_Receive_IT+0x2e>
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e07f      	b.n	800430a <HAL_UART_Receive_IT+0x12e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	2380      	movs	r3, #128	; 0x80
 8004210:	015b      	lsls	r3, r3, #5
 8004212:	429a      	cmp	r2, r3
 8004214:	d109      	bne.n	800422a <HAL_UART_Receive_IT+0x4e>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d105      	bne.n	800422a <HAL_UART_Receive_IT+0x4e>
    {
      if((((uint32_t)pData)&1U) != 0U)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2201      	movs	r2, #1
 8004222:	4013      	ands	r3, r2
 8004224:	d001      	beq.n	800422a <HAL_UART_Receive_IT+0x4e>
      {
        return  HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e06f      	b.n	800430a <HAL_UART_Receive_IT+0x12e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2268      	movs	r2, #104	; 0x68
 800422e:	5c9b      	ldrb	r3, [r3, r2]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_UART_Receive_IT+0x5c>
 8004234:	2302      	movs	r3, #2
 8004236:	e068      	b.n	800430a <HAL_UART_Receive_IT+0x12e>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2268      	movs	r2, #104	; 0x68
 800423c:	2101      	movs	r1, #1
 800423e:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1dba      	adds	r2, r7, #6
 800424a:	2158      	movs	r1, #88	; 0x58
 800424c:	8812      	ldrh	r2, [r2, #0]
 800424e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1dba      	adds	r2, r7, #6
 8004254:	215a      	movs	r1, #90	; 0x5a
 8004256:	8812      	ldrh	r2, [r2, #0]
 8004258:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	2380      	movs	r3, #128	; 0x80
 8004260:	015b      	lsls	r3, r3, #5
 8004262:	429a      	cmp	r2, r3
 8004264:	d10d      	bne.n	8004282 <HAL_UART_Receive_IT+0xa6>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d104      	bne.n	8004278 <HAL_UART_Receive_IT+0x9c>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	225c      	movs	r2, #92	; 0x5c
 8004272:	4928      	ldr	r1, [pc, #160]	; (8004314 <HAL_UART_Receive_IT+0x138>)
 8004274:	5299      	strh	r1, [r3, r2]
 8004276:	e029      	b.n	80042cc <HAL_UART_Receive_IT+0xf0>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	225c      	movs	r2, #92	; 0x5c
 800427c:	21ff      	movs	r1, #255	; 0xff
 800427e:	5299      	strh	r1, [r3, r2]
 8004280:	e024      	b.n	80042cc <HAL_UART_Receive_IT+0xf0>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10d      	bne.n	80042a6 <HAL_UART_Receive_IT+0xca>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d104      	bne.n	800429c <HAL_UART_Receive_IT+0xc0>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	225c      	movs	r2, #92	; 0x5c
 8004296:	21ff      	movs	r1, #255	; 0xff
 8004298:	5299      	strh	r1, [r3, r2]
 800429a:	e017      	b.n	80042cc <HAL_UART_Receive_IT+0xf0>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	225c      	movs	r2, #92	; 0x5c
 80042a0:	217f      	movs	r1, #127	; 0x7f
 80042a2:	5299      	strh	r1, [r3, r2]
 80042a4:	e012      	b.n	80042cc <HAL_UART_Receive_IT+0xf0>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	055b      	lsls	r3, r3, #21
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d10c      	bne.n	80042cc <HAL_UART_Receive_IT+0xf0>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d104      	bne.n	80042c4 <HAL_UART_Receive_IT+0xe8>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	225c      	movs	r2, #92	; 0x5c
 80042be:	217f      	movs	r1, #127	; 0x7f
 80042c0:	5299      	strh	r1, [r3, r2]
 80042c2:	e003      	b.n	80042cc <HAL_UART_Receive_IT+0xf0>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	225c      	movs	r2, #92	; 0x5c
 80042c8:	213f      	movs	r1, #63	; 0x3f
 80042ca:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	226a      	movs	r2, #106	; 0x6a
 80042d6:	2122      	movs	r1, #34	; 0x22
 80042d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2268      	movs	r2, #104	; 0x68
 80042de:	2100      	movs	r1, #0
 80042e0:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2101      	movs	r1, #1
 80042ee:	430a      	orrs	r2, r1
 80042f0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2190      	movs	r1, #144	; 0x90
 80042fe:	0049      	lsls	r1, r1, #1
 8004300:	430a      	orrs	r2, r1
 8004302:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	e000      	b.n	800430a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004308:	2302      	movs	r3, #2
  }
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b004      	add	sp, #16
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	000001ff 	.word	0x000001ff

08004318 <HAL_UART_Transmit_DMA>:
  *         (as sent data will be handled by DMA from halfword frontier). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	1dbb      	adds	r3, r7, #6
 8004324:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2269      	movs	r2, #105	; 0x69
 800432a:	5c9b      	ldrb	r3, [r3, r2]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b20      	cmp	r3, #32
 8004330:	d166      	bne.n	8004400 <HAL_UART_Transmit_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0U))
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_UART_Transmit_DMA+0x28>
 8004338:	1dbb      	adds	r3, r7, #6
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e05e      	b.n	8004402 <HAL_UART_Transmit_DMA+0xea>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data copy into TDR will be 
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	015b      	lsls	r3, r3, #5
 800434c:	429a      	cmp	r2, r3
 800434e:	d109      	bne.n	8004364 <HAL_UART_Transmit_DMA+0x4c>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <HAL_UART_Transmit_DMA+0x4c>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2201      	movs	r2, #1
 800435c:	4013      	ands	r3, r2
 800435e:	d001      	beq.n	8004364 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e04e      	b.n	8004402 <HAL_UART_Transmit_DMA+0xea>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2268      	movs	r2, #104	; 0x68
 8004368:	5c9b      	ldrb	r3, [r3, r2]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_UART_Transmit_DMA+0x5a>
 800436e:	2302      	movs	r3, #2
 8004370:	e047      	b.n	8004402 <HAL_UART_Transmit_DMA+0xea>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2268      	movs	r2, #104	; 0x68
 8004376:	2101      	movs	r1, #1
 8004378:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr = pData;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1dba      	adds	r2, r7, #6
 8004384:	2150      	movs	r1, #80	; 0x50
 8004386:	8812      	ldrh	r2, [r2, #0]
 8004388:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1dba      	adds	r2, r7, #6
 800438e:	2152      	movs	r1, #82	; 0x52
 8004390:	8812      	ldrh	r2, [r2, #0]
 8004392:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2269      	movs	r2, #105	; 0x69
 800439e:	2121      	movs	r1, #33	; 0x21
 80043a0:	5499      	strb	r1, [r3, r2]

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a6:	4a19      	ldr	r2, [pc, #100]	; (800440c <HAL_UART_Transmit_DMA+0xf4>)
 80043a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ae:	4a18      	ldr	r2, [pc, #96]	; (8004410 <HAL_UART_Transmit_DMA+0xf8>)
 80043b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b6:	4a17      	ldr	r2, [pc, #92]	; (8004414 <HAL_UART_Transmit_DMA+0xfc>)
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043be:	2200      	movs	r2, #0
 80043c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ca:	0019      	movs	r1, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3328      	adds	r3, #40	; 0x28
 80043d2:	001a      	movs	r2, r3
 80043d4:	1dbb      	adds	r3, r7, #6
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	f7fc fd7e 	bl	8000ed8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2240      	movs	r2, #64	; 0x40
 80043e2:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2268      	movs	r2, #104	; 0x68
 80043e8:	2100      	movs	r1, #0
 80043ea:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2180      	movs	r1, #128	; 0x80
 80043f8:	430a      	orrs	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	e000      	b.n	8004402 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004400:	2302      	movs	r3, #2
  }
}
 8004402:	0018      	movs	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	b004      	add	sp, #16
 8004408:	bd80      	pop	{r7, pc}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	08004b39 	.word	0x08004b39
 8004410:	08004b8d 	.word	0x08004b8d
 8004414:	08004bab 	.word	0x08004bab

08004418 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	60fb      	str	r3, [r7, #12]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60bb      	str	r3, [r7, #8]
  //
  // Clear Errors - even if there aren't any
  //
  huart->Instance->ICR = UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	220f      	movs	r2, #15
 8004436:	621a      	str	r2, [r3, #32]

  /* UART in mode Receiver ---------------------------------------------------*/
  if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	4013      	ands	r3, r2
 800443e:	d008      	beq.n	8004452 <HAL_UART_IRQHandler+0x3a>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2220      	movs	r2, #32
 8004444:	4013      	ands	r3, r2
 8004446:	d004      	beq.n	8004452 <HAL_UART_IRQHandler+0x3a>
  {
    UART_Receive_IT(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	0018      	movs	r0, r3
 800444c:	f000 fc5a 	bl	8004d04 <UART_Receive_IT>
    return;
 8004450:	e019      	b.n	8004486 <HAL_UART_IRQHandler+0x6e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2280      	movs	r2, #128	; 0x80
 8004456:	4013      	ands	r3, r2
 8004458:	d008      	beq.n	800446c <HAL_UART_IRQHandler+0x54>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2280      	movs	r2, #128	; 0x80
 800445e:	4013      	ands	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_UART_IRQHandler+0x54>
  {
    UART_Transmit_IT(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	0018      	movs	r0, r3
 8004466:	f000 fbdd 	bl	8004c24 <UART_Transmit_IT>
    return;
 800446a:	e00c      	b.n	8004486 <HAL_UART_IRQHandler+0x6e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2240      	movs	r2, #64	; 0x40
 8004470:	4013      	ands	r3, r2
 8004472:	d008      	beq.n	8004486 <HAL_UART_IRQHandler+0x6e>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2240      	movs	r2, #64	; 0x40
 8004478:	4013      	ands	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_UART_IRQHandler+0x6e>
  {
    UART_EndTransmit_IT(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	0018      	movs	r0, r3
 8004480:	f000 fc27 	bl	8004cd2 <UART_EndTransmit_IT>
    return;
 8004484:	46c0      	nop			; (mov r8, r8)
  }

}
 8004486:	46bd      	mov	sp, r7
 8004488:	b004      	add	sp, #16
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b002      	add	sp, #8
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044a4:	46c0      	nop			; (mov r8, r8)
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b002      	add	sp, #8
 80044aa:	bd80      	pop	{r7, pc}

080044ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80044b8:	2317      	movs	r3, #23
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	2210      	movs	r2, #16
 80044be:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 80044c0:	230a      	movs	r3, #10
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	2200      	movs	r2, #0
 80044c6:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 80044c8:	2314      	movs	r3, #20
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	2200      	movs	r2, #0
 80044ce:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80044d0:	2313      	movs	r3, #19
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	2200      	movs	r2, #0
 80044d6:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4ac1      	ldr	r2, [pc, #772]	; (80047fc <UART_SetConfig+0x350>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	0019      	movs	r1, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	430a      	orrs	r2, r1
 8004504:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4abc      	ldr	r2, [pc, #752]	; (8004800 <UART_SetConfig+0x354>)
 800450e:	4013      	ands	r3, r2
 8004510:	0019      	movs	r1, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699a      	ldr	r2, [r3, #24]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4ab4      	ldr	r2, [pc, #720]	; (8004804 <UART_SetConfig+0x358>)
 8004532:	4013      	ands	r3, r2
 8004534:	0019      	movs	r1, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4ab0      	ldr	r2, [pc, #704]	; (8004808 <UART_SetConfig+0x35c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d125      	bne.n	8004596 <UART_SetConfig+0xea>
 800454a:	4bb0      	ldr	r3, [pc, #704]	; (800480c <UART_SetConfig+0x360>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	2203      	movs	r2, #3
 8004550:	4013      	ands	r3, r2
 8004552:	2b01      	cmp	r3, #1
 8004554:	d00f      	beq.n	8004576 <UART_SetConfig+0xca>
 8004556:	d304      	bcc.n	8004562 <UART_SetConfig+0xb6>
 8004558:	2b02      	cmp	r3, #2
 800455a:	d011      	beq.n	8004580 <UART_SetConfig+0xd4>
 800455c:	2b03      	cmp	r3, #3
 800455e:	d005      	beq.n	800456c <UART_SetConfig+0xc0>
 8004560:	e013      	b.n	800458a <UART_SetConfig+0xde>
 8004562:	2317      	movs	r3, #23
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	2200      	movs	r2, #0
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	e064      	b.n	8004636 <UART_SetConfig+0x18a>
 800456c:	2317      	movs	r3, #23
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	2202      	movs	r2, #2
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	e05f      	b.n	8004636 <UART_SetConfig+0x18a>
 8004576:	2317      	movs	r3, #23
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	2204      	movs	r2, #4
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	e05a      	b.n	8004636 <UART_SetConfig+0x18a>
 8004580:	2317      	movs	r3, #23
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	2208      	movs	r2, #8
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	e055      	b.n	8004636 <UART_SetConfig+0x18a>
 800458a:	2317      	movs	r3, #23
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	2210      	movs	r2, #16
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	e04f      	b.n	8004636 <UART_SetConfig+0x18a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a9d      	ldr	r2, [pc, #628]	; (8004810 <UART_SetConfig+0x364>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d132      	bne.n	8004606 <UART_SetConfig+0x15a>
 80045a0:	4b9a      	ldr	r3, [pc, #616]	; (800480c <UART_SetConfig+0x360>)
 80045a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a4:	23c0      	movs	r3, #192	; 0xc0
 80045a6:	029b      	lsls	r3, r3, #10
 80045a8:	4013      	ands	r3, r2
 80045aa:	2280      	movs	r2, #128	; 0x80
 80045ac:	0252      	lsls	r2, r2, #9
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d019      	beq.n	80045e6 <UART_SetConfig+0x13a>
 80045b2:	2280      	movs	r2, #128	; 0x80
 80045b4:	0252      	lsls	r2, r2, #9
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d802      	bhi.n	80045c0 <UART_SetConfig+0x114>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <UART_SetConfig+0x126>
 80045be:	e01c      	b.n	80045fa <UART_SetConfig+0x14e>
 80045c0:	2280      	movs	r2, #128	; 0x80
 80045c2:	0292      	lsls	r2, r2, #10
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d013      	beq.n	80045f0 <UART_SetConfig+0x144>
 80045c8:	22c0      	movs	r2, #192	; 0xc0
 80045ca:	0292      	lsls	r2, r2, #10
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d005      	beq.n	80045dc <UART_SetConfig+0x130>
 80045d0:	e013      	b.n	80045fa <UART_SetConfig+0x14e>
 80045d2:	2317      	movs	r3, #23
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	2200      	movs	r2, #0
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	e02c      	b.n	8004636 <UART_SetConfig+0x18a>
 80045dc:	2317      	movs	r3, #23
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	2202      	movs	r2, #2
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	e027      	b.n	8004636 <UART_SetConfig+0x18a>
 80045e6:	2317      	movs	r3, #23
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	2204      	movs	r2, #4
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e022      	b.n	8004636 <UART_SetConfig+0x18a>
 80045f0:	2317      	movs	r3, #23
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	2208      	movs	r2, #8
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	e01d      	b.n	8004636 <UART_SetConfig+0x18a>
 80045fa:	2317      	movs	r3, #23
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	2210      	movs	r2, #16
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	e017      	b.n	8004636 <UART_SetConfig+0x18a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a82      	ldr	r2, [pc, #520]	; (8004814 <UART_SetConfig+0x368>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d104      	bne.n	800461a <UART_SetConfig+0x16e>
 8004610:	2317      	movs	r3, #23
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]
 8004618:	e00d      	b.n	8004636 <UART_SetConfig+0x18a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a7e      	ldr	r2, [pc, #504]	; (8004818 <UART_SetConfig+0x36c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d104      	bne.n	800462e <UART_SetConfig+0x182>
 8004624:	2317      	movs	r3, #23
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	e003      	b.n	8004636 <UART_SetConfig+0x18a>
 800462e:	2317      	movs	r3, #23
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	2210      	movs	r2, #16
 8004634:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	429a      	cmp	r2, r3
 8004640:	d000      	beq.n	8004644 <UART_SetConfig+0x198>
 8004642:	e077      	b.n	8004734 <UART_SetConfig+0x288>
  {
    switch (clocksource)
 8004644:	2317      	movs	r3, #23
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d01c      	beq.n	8004688 <UART_SetConfig+0x1dc>
 800464e:	dc02      	bgt.n	8004656 <UART_SetConfig+0x1aa>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <UART_SetConfig+0x1b4>
 8004654:	e04f      	b.n	80046f6 <UART_SetConfig+0x24a>
 8004656:	2b04      	cmp	r3, #4
 8004658:	d027      	beq.n	80046aa <UART_SetConfig+0x1fe>
 800465a:	2b08      	cmp	r3, #8
 800465c:	d039      	beq.n	80046d2 <UART_SetConfig+0x226>
 800465e:	e04a      	b.n	80046f6 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004660:	f7fe ffba 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 8004664:	0003      	movs	r3, r0
 8004666:	005a      	lsls	r2, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	18d2      	adds	r2, r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	0019      	movs	r1, r3
 8004676:	0010      	movs	r0, r2
 8004678:	f7fb fdaa 	bl	80001d0 <__udivsi3>
 800467c:	0003      	movs	r3, r0
 800467e:	001a      	movs	r2, r3
 8004680:	2314      	movs	r3, #20
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	801a      	strh	r2, [r3, #0]
        break;
 8004686:	e03b      	b.n	8004700 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	4a63      	ldr	r2, [pc, #396]	; (800481c <UART_SetConfig+0x370>)
 8004690:	189a      	adds	r2, r3, r2
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	0019      	movs	r1, r3
 8004698:	0010      	movs	r0, r2
 800469a:	f7fb fd99 	bl	80001d0 <__udivsi3>
 800469e:	0003      	movs	r3, r0
 80046a0:	001a      	movs	r2, r3
 80046a2:	2314      	movs	r3, #20
 80046a4:	18fb      	adds	r3, r7, r3
 80046a6:	801a      	strh	r2, [r3, #0]
        break;
 80046a8:	e02a      	b.n	8004700 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80046aa:	f7fe ff0d 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 80046ae:	0003      	movs	r3, r0
 80046b0:	005a      	lsls	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	085b      	lsrs	r3, r3, #1
 80046b8:	18d2      	adds	r2, r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	0019      	movs	r1, r3
 80046c0:	0010      	movs	r0, r2
 80046c2:	f7fb fd85 	bl	80001d0 <__udivsi3>
 80046c6:	0003      	movs	r3, r0
 80046c8:	001a      	movs	r2, r3
 80046ca:	2314      	movs	r3, #20
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	801a      	strh	r2, [r3, #0]
        break;
 80046d0:	e016      	b.n	8004700 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	085b      	lsrs	r3, r3, #1
 80046d8:	2280      	movs	r2, #128	; 0x80
 80046da:	0252      	lsls	r2, r2, #9
 80046dc:	189a      	adds	r2, r3, r2
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	0019      	movs	r1, r3
 80046e4:	0010      	movs	r0, r2
 80046e6:	f7fb fd73 	bl	80001d0 <__udivsi3>
 80046ea:	0003      	movs	r3, r0
 80046ec:	001a      	movs	r2, r3
 80046ee:	2314      	movs	r3, #20
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	801a      	strh	r2, [r3, #0]
        break;
 80046f4:	e004      	b.n	8004700 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80046f6:	2313      	movs	r3, #19
 80046f8:	18fb      	adds	r3, r7, r3
 80046fa:	2201      	movs	r2, #1
 80046fc:	701a      	strb	r2, [r3, #0]
        break;
 80046fe:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8004700:	200a      	movs	r0, #10
 8004702:	183b      	adds	r3, r7, r0
 8004704:	2414      	movs	r4, #20
 8004706:	193a      	adds	r2, r7, r4
 8004708:	8812      	ldrh	r2, [r2, #0]
 800470a:	210f      	movs	r1, #15
 800470c:	438a      	bics	r2, r1
 800470e:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004710:	193b      	adds	r3, r7, r4
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	105b      	asrs	r3, r3, #1
 8004716:	b29b      	uxth	r3, r3
 8004718:	2207      	movs	r2, #7
 800471a:	4013      	ands	r3, r2
 800471c:	b299      	uxth	r1, r3
 800471e:	183b      	adds	r3, r7, r0
 8004720:	183a      	adds	r2, r7, r0
 8004722:	8812      	ldrh	r2, [r2, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	183a      	adds	r2, r7, r0
 800472e:	8812      	ldrh	r2, [r2, #0]
 8004730:	60da      	str	r2, [r3, #12]
 8004732:	e05b      	b.n	80047ec <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 8004734:	2317      	movs	r3, #23
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d01b      	beq.n	8004776 <UART_SetConfig+0x2ca>
 800473e:	dc02      	bgt.n	8004746 <UART_SetConfig+0x29a>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <UART_SetConfig+0x2a4>
 8004744:	e04d      	b.n	80047e2 <UART_SetConfig+0x336>
 8004746:	2b04      	cmp	r3, #4
 8004748:	d026      	beq.n	8004798 <UART_SetConfig+0x2ec>
 800474a:	2b08      	cmp	r3, #8
 800474c:	d037      	beq.n	80047be <UART_SetConfig+0x312>
 800474e:	e048      	b.n	80047e2 <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004750:	f7fe ff42 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 8004754:	0002      	movs	r2, r0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	18d2      	adds	r2, r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	0019      	movs	r1, r3
 8004764:	0010      	movs	r0, r2
 8004766:	f7fb fd33 	bl	80001d0 <__udivsi3>
 800476a:	0003      	movs	r3, r0
 800476c:	b29a      	uxth	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60da      	str	r2, [r3, #12]
        break;
 8004774:	e03a      	b.n	80047ec <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	4a28      	ldr	r2, [pc, #160]	; (8004820 <UART_SetConfig+0x374>)
 800477e:	189a      	adds	r2, r3, r2
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	0019      	movs	r1, r3
 8004786:	0010      	movs	r0, r2
 8004788:	f7fb fd22 	bl	80001d0 <__udivsi3>
 800478c:	0003      	movs	r3, r0
 800478e:	b29a      	uxth	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	60da      	str	r2, [r3, #12]
        break;
 8004796:	e029      	b.n	80047ec <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004798:	f7fe fe96 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 800479c:	0002      	movs	r2, r0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	18d2      	adds	r2, r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	0019      	movs	r1, r3
 80047ac:	0010      	movs	r0, r2
 80047ae:	f7fb fd0f 	bl	80001d0 <__udivsi3>
 80047b2:	0003      	movs	r3, r0
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60da      	str	r2, [r3, #12]
        break;
 80047bc:	e016      	b.n	80047ec <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	2280      	movs	r2, #128	; 0x80
 80047c6:	0212      	lsls	r2, r2, #8
 80047c8:	189a      	adds	r2, r3, r2
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	0019      	movs	r1, r3
 80047d0:	0010      	movs	r0, r2
 80047d2:	f7fb fcfd 	bl	80001d0 <__udivsi3>
 80047d6:	0003      	movs	r3, r0
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60da      	str	r2, [r3, #12]
        break;
 80047e0:	e004      	b.n	80047ec <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80047e2:	2313      	movs	r3, #19
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	2201      	movs	r2, #1
 80047e8:	701a      	strb	r2, [r3, #0]
        break;
 80047ea:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 80047ec:	2313      	movs	r3, #19
 80047ee:	18fb      	adds	r3, r7, r3
 80047f0:	781b      	ldrb	r3, [r3, #0]

}
 80047f2:	0018      	movs	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b007      	add	sp, #28
 80047f8:	bd90      	pop	{r4, r7, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	efff69f3 	.word	0xefff69f3
 8004800:	ffffcfff 	.word	0xffffcfff
 8004804:	fffff4ff 	.word	0xfffff4ff
 8004808:	40013800 	.word	0x40013800
 800480c:	40021000 	.word	0x40021000
 8004810:	40004400 	.word	0x40004400
 8004814:	40004800 	.word	0x40004800
 8004818:	40004c00 	.word	0x40004c00
 800481c:	00f42400 	.word	0x00f42400
 8004820:	007a1200 	.word	0x007a1200

08004824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	2201      	movs	r2, #1
 8004832:	4013      	ands	r3, r2
 8004834:	d00b      	beq.n	800484e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4a4a      	ldr	r2, [pc, #296]	; (8004968 <UART_AdvFeatureConfig+0x144>)
 800483e:	4013      	ands	r3, r2
 8004840:	0019      	movs	r1, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	2202      	movs	r2, #2
 8004854:	4013      	ands	r3, r2
 8004856:	d00b      	beq.n	8004870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4a43      	ldr	r2, [pc, #268]	; (800496c <UART_AdvFeatureConfig+0x148>)
 8004860:	4013      	ands	r3, r2
 8004862:	0019      	movs	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	2204      	movs	r2, #4
 8004876:	4013      	ands	r3, r2
 8004878:	d00b      	beq.n	8004892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4a3b      	ldr	r2, [pc, #236]	; (8004970 <UART_AdvFeatureConfig+0x14c>)
 8004882:	4013      	ands	r3, r2
 8004884:	0019      	movs	r1, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	2208      	movs	r2, #8
 8004898:	4013      	ands	r3, r2
 800489a:	d00b      	beq.n	80048b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4a34      	ldr	r2, [pc, #208]	; (8004974 <UART_AdvFeatureConfig+0x150>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	0019      	movs	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	2210      	movs	r2, #16
 80048ba:	4013      	ands	r3, r2
 80048bc:	d00b      	beq.n	80048d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4a2c      	ldr	r2, [pc, #176]	; (8004978 <UART_AdvFeatureConfig+0x154>)
 80048c6:	4013      	ands	r3, r2
 80048c8:	0019      	movs	r1, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	2220      	movs	r2, #32
 80048dc:	4013      	ands	r3, r2
 80048de:	d00b      	beq.n	80048f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	4a25      	ldr	r2, [pc, #148]	; (800497c <UART_AdvFeatureConfig+0x158>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	0019      	movs	r1, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	2240      	movs	r2, #64	; 0x40
 80048fe:	4013      	ands	r3, r2
 8004900:	d01d      	beq.n	800493e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4a1d      	ldr	r2, [pc, #116]	; (8004980 <UART_AdvFeatureConfig+0x15c>)
 800490a:	4013      	ands	r3, r2
 800490c:	0019      	movs	r1, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	035b      	lsls	r3, r3, #13
 8004922:	429a      	cmp	r2, r3
 8004924:	d10b      	bne.n	800493e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4a15      	ldr	r2, [pc, #84]	; (8004984 <UART_AdvFeatureConfig+0x160>)
 800492e:	4013      	ands	r3, r2
 8004930:	0019      	movs	r1, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2280      	movs	r2, #128	; 0x80
 8004944:	4013      	ands	r3, r2
 8004946:	d00b      	beq.n	8004960 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <UART_AdvFeatureConfig+0x164>)
 8004950:	4013      	ands	r3, r2
 8004952:	0019      	movs	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	605a      	str	r2, [r3, #4]
  }
}
 8004960:	46c0      	nop			; (mov r8, r8)
 8004962:	46bd      	mov	sp, r7
 8004964:	b002      	add	sp, #8
 8004966:	bd80      	pop	{r7, pc}
 8004968:	fffdffff 	.word	0xfffdffff
 800496c:	fffeffff 	.word	0xfffeffff
 8004970:	fffbffff 	.word	0xfffbffff
 8004974:	ffff7fff 	.word	0xffff7fff
 8004978:	ffffefff 	.word	0xffffefff
 800497c:	ffffdfff 	.word	0xffffdfff
 8004980:	ffefffff 	.word	0xffefffff
 8004984:	ff9fffff 	.word	0xff9fffff
 8004988:	fff7ffff 	.word	0xfff7ffff

0800498c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af02      	add	r7, sp, #8
 8004992:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800499e:	f7fb ff35 	bl	800080c <HAL_GetTick>
 80049a2:	0003      	movs	r3, r0
 80049a4:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a21      	ldr	r2, [pc, #132]	; (8004a30 <UART_CheckIdleState+0xa4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <UART_CheckIdleState+0x2e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <UART_CheckIdleState+0xa8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d129      	bne.n	8004a0e <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2208      	movs	r2, #8
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d10d      	bne.n	80049e4 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	2380      	movs	r3, #128	; 0x80
 80049cc:	0399      	lsls	r1, r3, #14
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <UART_CheckIdleState+0xac>)
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	0013      	movs	r3, r2
 80049d6:	2200      	movs	r2, #0
 80049d8:	f000 f830 	bl	8004a3c <UART_WaitOnFlagUntilTimeout>
 80049dc:	1e03      	subs	r3, r0, #0
 80049de:	d001      	beq.n	80049e4 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e021      	b.n	8004a28 <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2204      	movs	r2, #4
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d10d      	bne.n	8004a0e <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	03d9      	lsls	r1, r3, #15
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <UART_CheckIdleState+0xac>)
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	0013      	movs	r3, r2
 8004a00:	2200      	movs	r2, #0
 8004a02:	f000 f81b 	bl	8004a3c <UART_WaitOnFlagUntilTimeout>
 8004a06:	1e03      	subs	r3, r0, #0
 8004a08:	d001      	beq.n	8004a0e <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e00c      	b.n	8004a28 <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2269      	movs	r2, #105	; 0x69
 8004a12:	2120      	movs	r1, #32
 8004a14:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	226a      	movs	r2, #106	; 0x6a
 8004a1a:	2120      	movs	r1, #32
 8004a1c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2268      	movs	r2, #104	; 0x68
 8004a22:	2100      	movs	r1, #0
 8004a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b004      	add	sp, #16
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40013800 	.word	0x40013800
 8004a34:	40004400 	.word	0x40004400
 8004a38:	01ffffff 	.word	0x01ffffff

08004a3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	1dfb      	adds	r3, r7, #7
 8004a4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4c:	e02b      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	3301      	adds	r3, #1
 8004a52:	d028      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004a5a:	f7fb fed7 	bl	800080c <HAL_GetTick>
 8004a5e:	0002      	movs	r2, r0
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d21d      	bcs.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4916      	ldr	r1, [pc, #88]	; (8004ad0 <UART_WaitOnFlagUntilTimeout+0x94>)
 8004a76:	400a      	ands	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2101      	movs	r1, #1
 8004a86:	438a      	bics	r2, r1
 8004a88:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2269      	movs	r2, #105	; 0x69
 8004a8e:	2120      	movs	r1, #32
 8004a90:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	226a      	movs	r2, #106	; 0x6a
 8004a96:	2120      	movs	r1, #32
 8004a98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2268      	movs	r2, #104	; 0x68
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e00f      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	425a      	negs	r2, r3
 8004ab6:	4153      	adcs	r3, r2
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	001a      	movs	r2, r3
 8004abc:	1dfb      	adds	r3, r7, #7
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d0c4      	beq.n	8004a4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b004      	add	sp, #16
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	fffffe5f 	.word	0xfffffe5f

08004ad4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	21c0      	movs	r1, #192	; 0xc0
 8004ae8:	438a      	bics	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2269      	movs	r2, #105	; 0x69
 8004af0:	2120      	movs	r1, #32
 8004af2:	5499      	strb	r1, [r3, r2]
}
 8004af4:	46c0      	nop			; (mov r8, r8)
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b002      	add	sp, #8
 8004afa:	bd80      	pop	{r7, pc}

08004afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4909      	ldr	r1, [pc, #36]	; (8004b34 <UART_EndRxTransfer+0x38>)
 8004b10:	400a      	ands	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2101      	movs	r1, #1
 8004b20:	438a      	bics	r2, r1
 8004b22:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	226a      	movs	r2, #106	; 0x6a
 8004b28:	2120      	movs	r1, #32
 8004b2a:	5499      	strb	r1, [r3, r2]
}
 8004b2c:	46c0      	nop			; (mov r8, r8)
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b002      	add	sp, #8
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	fffffedf 	.word	0xfffffedf

08004b38 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	60fb      	str	r3, [r7, #12]
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d114      	bne.n	8004b7c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2252      	movs	r2, #82	; 0x52
 8004b56:	2100      	movs	r1, #0
 8004b58:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2180      	movs	r1, #128	; 0x80
 8004b66:	438a      	bics	r2, r1
 8004b68:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2140      	movs	r1, #64	; 0x40
 8004b76:	430a      	orrs	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8004b7a:	e003      	b.n	8004b84 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f003 f812 	bl	8007ba8 <HAL_UART_TxCpltCallback>
}
 8004b84:	46c0      	nop			; (mov r8, r8)
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b004      	add	sp, #16
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f7ff fc75 	bl	800448c <HAL_UART_TxHalfCpltCallback>
}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	b004      	add	sp, #16
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2269      	movs	r2, #105	; 0x69
 8004bbc:	5c9b      	ldrb	r3, [r3, r2]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b21      	cmp	r3, #33	; 0x21
 8004bc2:	d10d      	bne.n	8004be0 <UART_DMAError+0x36>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2280      	movs	r2, #128	; 0x80
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d007      	beq.n	8004be0 <UART_DMAError+0x36>
  {
    huart->TxXferCount = 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2252      	movs	r2, #82	; 0x52
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f7ff ff7a 	bl	8004ad4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	226a      	movs	r2, #106	; 0x6a
 8004be4:	5c9b      	ldrb	r3, [r3, r2]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b22      	cmp	r3, #34	; 0x22
 8004bea:	d10d      	bne.n	8004c08 <UART_DMAError+0x5e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2240      	movs	r2, #64	; 0x40
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <UART_DMAError+0x5e>
  {
    huart->RxXferCount = 0U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	225a      	movs	r2, #90	; 0x5a
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	0018      	movs	r0, r3
 8004c04:	f7ff ff7a 	bl	8004afc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0c:	2210      	movs	r2, #16
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	0018      	movs	r0, r3
 8004c18:	f7ff fc40 	bl	800449c <HAL_UART_ErrorCallback>
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b004      	add	sp, #16
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2269      	movs	r2, #105	; 0x69
 8004c30:	5c9b      	ldrb	r3, [r3, r2]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b21      	cmp	r3, #33	; 0x21
 8004c36:	d147      	bne.n	8004cc8 <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2252      	movs	r2, #82	; 0x52
 8004c3c:	5a9b      	ldrh	r3, [r3, r2]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d111      	bne.n	8004c68 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2180      	movs	r1, #128	; 0x80
 8004c50:	438a      	bics	r2, r1
 8004c52:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2140      	movs	r1, #64	; 0x40
 8004c60:	430a      	orrs	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	e030      	b.n	8004cca <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	015b      	lsls	r3, r3, #5
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d114      	bne.n	8004c9e <UART_Transmit_IT+0x7a>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d110      	bne.n	8004c9e <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c80:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	881a      	ldrh	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	05d2      	lsls	r2, r2, #23
 8004c8c:	0dd2      	lsrs	r2, r2, #23
 8004c8e:	b292      	uxth	r2, r2
 8004c90:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c96:	1c9a      	adds	r2, r3, #2
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c9c:	e009      	b.n	8004cb2 <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca2:	1c59      	adds	r1, r3, #1
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	64d1      	str	r1, [r2, #76]	; 0x4c
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	b292      	uxth	r2, r2
 8004cb0:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2252      	movs	r2, #82	; 0x52
 8004cb6:	5a9b      	ldrh	r3, [r3, r2]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b299      	uxth	r1, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2252      	movs	r2, #82	; 0x52
 8004cc2:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e000      	b.n	8004cca <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004cc8:	2302      	movs	r3, #2
  }
}
 8004cca:	0018      	movs	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b004      	add	sp, #16
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2140      	movs	r1, #64	; 0x40
 8004ce6:	438a      	bics	r2, r1
 8004ce8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2269      	movs	r2, #105	; 0x69
 8004cee:	2120      	movs	r1, #32
 8004cf0:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f002 ff57 	bl	8007ba8 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b002      	add	sp, #8
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8004d0c:	230e      	movs	r3, #14
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	215c      	movs	r1, #92	; 0x5c
 8004d14:	5a52      	ldrh	r2, [r2, r1]
 8004d16:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	226a      	movs	r2, #106	; 0x6a
 8004d1c:	5c9b      	ldrb	r3, [r3, r2]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b22      	cmp	r3, #34	; 0x22
 8004d22:	d15b      	bne.n	8004ddc <UART_Receive_IT+0xd8>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	230c      	movs	r3, #12
 8004d2a:	18fb      	adds	r3, r7, r3
 8004d2c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004d2e:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	2380      	movs	r3, #128	; 0x80
 8004d36:	015b      	lsls	r3, r3, #5
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d116      	bne.n	8004d6a <UART_Receive_IT+0x66>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d112      	bne.n	8004d6a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d48:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8004d4a:	230c      	movs	r3, #12
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	220e      	movs	r2, #14
 8004d50:	18ba      	adds	r2, r7, r2
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	8812      	ldrh	r2, [r2, #0]
 8004d56:	4013      	ands	r3, r2
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	1c9a      	adds	r2, r3, #2
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
 8004d68:	e010      	b.n	8004d8c <UART_Receive_IT+0x88>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d6a:	230c      	movs	r3, #12
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	b2d9      	uxtb	r1, r3
 8004d72:	230e      	movs	r3, #14
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b2d8      	uxtb	r0, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	1c5c      	adds	r4, r3, #1
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6554      	str	r4, [r2, #84]	; 0x54
 8004d84:	0002      	movs	r2, r0
 8004d86:	400a      	ands	r2, r1
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	225a      	movs	r2, #90	; 0x5a
 8004d90:	5a9b      	ldrh	r3, [r3, r2]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	215a      	movs	r1, #90	; 0x5a
 8004d9c:	1c18      	adds	r0, r3, #0
 8004d9e:	5250      	strh	r0, [r2, r1]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d119      	bne.n	8004dd8 <UART_Receive_IT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4912      	ldr	r1, [pc, #72]	; (8004df8 <UART_Receive_IT+0xf4>)
 8004db0:	400a      	ands	r2, r1
 8004db2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	438a      	bics	r2, r1
 8004dc2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	226a      	movs	r2, #106	; 0x6a
 8004dc8:	2120      	movs	r1, #32
 8004dca:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f002 ff42 	bl	8007c58 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e00a      	b.n	8004dee <UART_Receive_IT+0xea>
    }

    return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e008      	b.n	8004dee <UART_Receive_IT+0xea>
  } else {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2108      	movs	r1, #8
 8004de8:	430a      	orrs	r2, r1
 8004dea:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8004dec:	2302      	movs	r3, #2
  }
}
 8004dee:	0018      	movs	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	b005      	add	sp, #20
 8004df4:	bd90      	pop	{r4, r7, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	fffffedf 	.word	0xfffffedf

08004dfc <CalcCrc>:
  0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8, 0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0};

// ******************************************************************************
// ******************************************************************************
//
uint16_t CalcCrc(uint8_t Char, uint16_t Crc1) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	0002      	movs	r2, r0
 8004e04:	1dfb      	adds	r3, r7, #7
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	1d3b      	adds	r3, r7, #4
 8004e0a:	1c0a      	adds	r2, r1, #0
 8004e0c:	801a      	strh	r2, [r3, #0]
  uint16_t TableValue;

  TableValue = CrcTable[(Crc1 >> 8) ^ Char];
 8004e0e:	1d3b      	adds	r3, r7, #4
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	0a1b      	lsrs	r3, r3, #8
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	001a      	movs	r2, r3
 8004e18:	1dfb      	adds	r3, r7, #7
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	405a      	eors	r2, r3
 8004e1e:	0011      	movs	r1, r2
 8004e20:	200e      	movs	r0, #14
 8004e22:	183b      	adds	r3, r7, r0
 8004e24:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <CalcCrc+0x54>)
 8004e26:	0049      	lsls	r1, r1, #1
 8004e28:	5a8a      	ldrh	r2, [r1, r2]
 8004e2a:	801a      	strh	r2, [r3, #0]
  Crc1 = (Crc1 << 8) ^ TableValue;
 8004e2c:	1d3b      	adds	r3, r7, #4
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	b21a      	sxth	r2, r3
 8004e34:	183b      	adds	r3, r7, r0
 8004e36:	2100      	movs	r1, #0
 8004e38:	5e5b      	ldrsh	r3, [r3, r1]
 8004e3a:	4053      	eors	r3, r2
 8004e3c:	b21a      	sxth	r2, r3
 8004e3e:	1d3b      	adds	r3, r7, #4
 8004e40:	801a      	strh	r2, [r3, #0]
  return Crc1;
 8004e42:	1d3b      	adds	r3, r7, #4
 8004e44:	881b      	ldrh	r3, [r3, #0]
}
 8004e46:	0018      	movs	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b004      	add	sp, #16
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	08009a40 	.word	0x08009a40

08004e54 <CalcCrcArray>:

// ******************************************************************************
// ******************************************************************************
//
uint16_t CalcCrcArray(uint8_t *Buffer, int32_t Length) {
 8004e54:	b590      	push	{r4, r7, lr}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]

  int32_t i;
  uint16_t Crc16;

  Crc16 = 0x0;
 8004e5e:	230a      	movs	r3, #10
 8004e60:	18fb      	adds	r3, r7, r3
 8004e62:	2200      	movs	r2, #0
 8004e64:	801a      	strh	r2, [r3, #0]
  for ( i = 0; i < Length; i++ ) {
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e01a      	b.n	8004ea2 <CalcCrcArray+0x4e>
    Crc16 = (Crc16 << 8) ^ CrcTable[(Crc16 >> 8) ^ Buffer[i]];
 8004e6c:	240a      	movs	r4, #10
 8004e6e:	193b      	adds	r3, r7, r4
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	021b      	lsls	r3, r3, #8
 8004e74:	b21a      	sxth	r2, r3
 8004e76:	193b      	adds	r3, r7, r4
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	0a1b      	lsrs	r3, r3, #8
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	0018      	movs	r0, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	18cb      	adds	r3, r1, r3
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	0001      	movs	r1, r0
 8004e8a:	4059      	eors	r1, r3
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <CalcCrcArray+0x64>)
 8004e8e:	0049      	lsls	r1, r1, #1
 8004e90:	5acb      	ldrh	r3, [r1, r3]
 8004e92:	b21b      	sxth	r3, r3
 8004e94:	4053      	eors	r3, r2
 8004e96:	b21a      	sxth	r2, r3
 8004e98:	193b      	adds	r3, r7, r4
 8004e9a:	801a      	strh	r2, [r3, #0]
  for ( i = 0; i < Length; i++ ) {
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	dbe0      	blt.n	8004e6c <CalcCrcArray+0x18>
  }
  return Crc16;
 8004eaa:	230a      	movs	r3, #10
 8004eac:	18fb      	adds	r3, r7, r3
 8004eae:	881b      	ldrh	r3, [r3, #0]
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b005      	add	sp, #20
 8004eb6:	bd90      	pop	{r4, r7, pc}
 8004eb8:	08009a40 	.word	0x08009a40

08004ebc <DIG_Init>:
// Ch:  0 to 5
//
// HLR-xxxx
// LLR-xxxx
//
int32_t DIG_Init(int32_t Ch, DIG_InitTypeDef DIG_InitStruct) {
 8004ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ebe:	b0a9      	sub	sp, #164	; 0xa4
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6378      	str	r0, [r7, #52]	; 0x34
 8004ec4:	232c      	movs	r3, #44	; 0x2c
 8004ec6:	18fb      	adds	r3, r7, r3
 8004ec8:	6019      	str	r1, [r3, #0]
 8004eca:	605a      	str	r2, [r3, #4]

  GPIO_InitTypeDef    GPIO_InitStruct;
  TIM_OC_InitTypeDef  sConfigOC;
  int32_t             MinPeriod;

  if (Ch == 0) {
 8004ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d102      	bne.n	8004ed8 <DIG_Init+0x1c>
      HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004ed2:	201c      	movs	r0, #28
 8004ed4:	f7fb fea5 	bl	8000c22 <HAL_NVIC_DisableIRQ>
  }

  switch ( Ch ) {
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d900      	bls.n	8004ee0 <DIG_Init+0x24>
 8004ede:	e1e4      	b.n	80052aa <DIG_Init+0x3ee>
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee2:	009a      	lsls	r2, r3, #2
 8004ee4:	4bf3      	ldr	r3, [pc, #972]	; (80052b4 <DIG_Init+0x3f8>)
 8004ee6:	18d3      	adds	r3, r2, r3
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	469f      	mov	pc, r3
  case 0:
    DIG_HandleStruct[Ch].Handle = &htim15;
 8004eec:	49f2      	ldr	r1, [pc, #968]	; (80052b8 <DIG_Init+0x3fc>)
 8004eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ef0:	0013      	movs	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	189b      	adds	r3, r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	18cb      	adds	r3, r1, r3
 8004efa:	3308      	adds	r3, #8
 8004efc:	001a      	movs	r2, r3
 8004efe:	4bef      	ldr	r3, [pc, #956]	; (80052bc <DIG_Init+0x400>)
 8004f00:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Handle->Instance = TIM15;
 8004f02:	49ed      	ldr	r1, [pc, #948]	; (80052b8 <DIG_Init+0x3fc>)
 8004f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f06:	0013      	movs	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	18cb      	adds	r3, r1, r3
 8004f10:	3308      	adds	r3, #8
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	4bea      	ldr	r3, [pc, #936]	; (80052c0 <DIG_Init+0x404>)
 8004f16:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].TIM_Channel = TIM_CHANNEL_2;
 8004f18:	49e7      	ldr	r1, [pc, #924]	; (80052b8 <DIG_Init+0x3fc>)
 8004f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f1c:	2040      	movs	r0, #64	; 0x40
 8004f1e:	0013      	movs	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	18cb      	adds	r3, r1, r3
 8004f28:	181a      	adds	r2, r3, r0
 8004f2a:	2304      	movs	r3, #4
 8004f2c:	8013      	strh	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dir_Port = DIR1_GPIO_Port;
 8004f2e:	49e2      	ldr	r1, [pc, #904]	; (80052b8 <DIG_Init+0x3fc>)
 8004f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f32:	0013      	movs	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	189b      	adds	r3, r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	18cb      	adds	r3, r1, r3
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	001a      	movs	r2, r3
 8004f40:	2390      	movs	r3, #144	; 0x90
 8004f42:	05db      	lsls	r3, r3, #23
 8004f44:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dir_Pin = DIR1_Pin;
 8004f46:	49dc      	ldr	r1, [pc, #880]	; (80052b8 <DIG_Init+0x3fc>)
 8004f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f4a:	0013      	movs	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	189b      	adds	r3, r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	18cb      	adds	r3, r1, r3
 8004f54:	333c      	adds	r3, #60	; 0x3c
 8004f56:	001a      	movs	r2, r3
 8004f58:	2310      	movs	r3, #16
 8004f5a:	8013      	strh	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dig_IO_Port = DIG_IO1_GPIO_Port;
 8004f5c:	49d6      	ldr	r1, [pc, #856]	; (80052b8 <DIG_Init+0x3fc>)
 8004f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f60:	0013      	movs	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	189b      	adds	r3, r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	18cb      	adds	r3, r1, r3
 8004f6a:	3310      	adds	r3, #16
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	2390      	movs	r3, #144	; 0x90
 8004f70:	05db      	lsls	r3, r3, #23
 8004f72:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dig_IO_Pin = DIG_IO1_Pin;
 8004f74:	49d0      	ldr	r1, [pc, #832]	; (80052b8 <DIG_Init+0x3fc>)
 8004f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f78:	0013      	movs	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	189b      	adds	r3, r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	18cb      	adds	r3, r1, r3
 8004f82:	333e      	adds	r3, #62	; 0x3e
 8004f84:	001a      	movs	r2, r3
 8004f86:	2308      	movs	r3, #8
 8004f88:	8013      	strh	r3, [r2, #0]
    break;
 8004f8a:	e1af      	b.n	80052ec <DIG_Init+0x430>
  case 1:
    DIG_HandleStruct[Ch].Handle = &htim16;
 8004f8c:	49ca      	ldr	r1, [pc, #808]	; (80052b8 <DIG_Init+0x3fc>)
 8004f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f90:	0013      	movs	r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	189b      	adds	r3, r3, r2
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	18cb      	adds	r3, r1, r3
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	001a      	movs	r2, r3
 8004f9e:	4bc9      	ldr	r3, [pc, #804]	; (80052c4 <DIG_Init+0x408>)
 8004fa0:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Handle->Instance = TIM16;
 8004fa2:	49c5      	ldr	r1, [pc, #788]	; (80052b8 <DIG_Init+0x3fc>)
 8004fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa6:	0013      	movs	r3, r2
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	189b      	adds	r3, r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	18cb      	adds	r3, r1, r3
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4bc4      	ldr	r3, [pc, #784]	; (80052c8 <DIG_Init+0x40c>)
 8004fb6:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].TIM_Channel = TIM_CHANNEL_1;
 8004fb8:	49bf      	ldr	r1, [pc, #764]	; (80052b8 <DIG_Init+0x3fc>)
 8004fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fbc:	2040      	movs	r0, #64	; 0x40
 8004fbe:	0013      	movs	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	189b      	adds	r3, r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	18cb      	adds	r3, r1, r3
 8004fc8:	181a      	adds	r2, r3, r0
 8004fca:	2300      	movs	r3, #0
 8004fcc:	8013      	strh	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dir_Port = DIR2_GPIO_Port;
 8004fce:	49ba      	ldr	r1, [pc, #744]	; (80052b8 <DIG_Init+0x3fc>)
 8004fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd2:	0013      	movs	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	18cb      	adds	r3, r1, r3
 8004fdc:	330c      	adds	r3, #12
 8004fde:	001a      	movs	r2, r3
 8004fe0:	2390      	movs	r3, #144	; 0x90
 8004fe2:	05db      	lsls	r3, r3, #23
 8004fe4:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dir_Pin = DIR2_Pin;
 8004fe6:	49b4      	ldr	r1, [pc, #720]	; (80052b8 <DIG_Init+0x3fc>)
 8004fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fea:	0013      	movs	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	189b      	adds	r3, r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	18cb      	adds	r3, r1, r3
 8004ff4:	333c      	adds	r3, #60	; 0x3c
 8004ff6:	001a      	movs	r2, r3
 8004ff8:	2320      	movs	r3, #32
 8004ffa:	8013      	strh	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dig_IO_Port = DIG_IO2_GPIO_Port;
 8004ffc:	49ae      	ldr	r1, [pc, #696]	; (80052b8 <DIG_Init+0x3fc>)
 8004ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005000:	0013      	movs	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	189b      	adds	r3, r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	18cb      	adds	r3, r1, r3
 800500a:	3310      	adds	r3, #16
 800500c:	001a      	movs	r2, r3
 800500e:	4baf      	ldr	r3, [pc, #700]	; (80052cc <DIG_Init+0x410>)
 8005010:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dig_IO_Pin = DIG_IO2_Pin;
 8005012:	49a9      	ldr	r1, [pc, #676]	; (80052b8 <DIG_Init+0x3fc>)
 8005014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005016:	0013      	movs	r3, r2
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	189b      	adds	r3, r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	18cb      	adds	r3, r1, r3
 8005020:	333e      	adds	r3, #62	; 0x3e
 8005022:	001a      	movs	r2, r3
 8005024:	2380      	movs	r3, #128	; 0x80
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	8013      	strh	r3, [r2, #0]
    break;
 800502a:	e15f      	b.n	80052ec <DIG_Init+0x430>
  case 2:
    DIG_HandleStruct[Ch].Handle = &htim17;
 800502c:	49a2      	ldr	r1, [pc, #648]	; (80052b8 <DIG_Init+0x3fc>)
 800502e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005030:	0013      	movs	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	189b      	adds	r3, r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	18cb      	adds	r3, r1, r3
 800503a:	3308      	adds	r3, #8
 800503c:	001a      	movs	r2, r3
 800503e:	4ba4      	ldr	r3, [pc, #656]	; (80052d0 <DIG_Init+0x414>)
 8005040:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Handle->Instance = TIM17;
 8005042:	499d      	ldr	r1, [pc, #628]	; (80052b8 <DIG_Init+0x3fc>)
 8005044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005046:	0013      	movs	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	189b      	adds	r3, r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	18cb      	adds	r3, r1, r3
 8005050:	3308      	adds	r3, #8
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	4b9f      	ldr	r3, [pc, #636]	; (80052d4 <DIG_Init+0x418>)
 8005056:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].TIM_Channel = TIM_CHANNEL_1;
 8005058:	4997      	ldr	r1, [pc, #604]	; (80052b8 <DIG_Init+0x3fc>)
 800505a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800505c:	2040      	movs	r0, #64	; 0x40
 800505e:	0013      	movs	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	189b      	adds	r3, r3, r2
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	18cb      	adds	r3, r1, r3
 8005068:	181a      	adds	r2, r3, r0
 800506a:	2300      	movs	r3, #0
 800506c:	8013      	strh	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dir_Port = DIR3_GPIO_Port;
 800506e:	4992      	ldr	r1, [pc, #584]	; (80052b8 <DIG_Init+0x3fc>)
 8005070:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005072:	0013      	movs	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	189b      	adds	r3, r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	18cb      	adds	r3, r1, r3
 800507c:	330c      	adds	r3, #12
 800507e:	001a      	movs	r2, r3
 8005080:	2390      	movs	r3, #144	; 0x90
 8005082:	05db      	lsls	r3, r3, #23
 8005084:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dir_Pin = DIR3_Pin;
 8005086:	498c      	ldr	r1, [pc, #560]	; (80052b8 <DIG_Init+0x3fc>)
 8005088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800508a:	0013      	movs	r3, r2
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	189b      	adds	r3, r3, r2
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	18cb      	adds	r3, r1, r3
 8005094:	333c      	adds	r3, #60	; 0x3c
 8005096:	001a      	movs	r2, r3
 8005098:	2340      	movs	r3, #64	; 0x40
 800509a:	8013      	strh	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dig_IO_Port = DIG_IO3_GPIO_Port;
 800509c:	4986      	ldr	r1, [pc, #536]	; (80052b8 <DIG_Init+0x3fc>)
 800509e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050a0:	0013      	movs	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	189b      	adds	r3, r3, r2
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	18cb      	adds	r3, r1, r3
 80050aa:	3310      	adds	r3, #16
 80050ac:	001a      	movs	r2, r3
 80050ae:	2390      	movs	r3, #144	; 0x90
 80050b0:	05db      	lsls	r3, r3, #23
 80050b2:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dig_IO_Pin = DIG_IO3_Pin;
 80050b4:	4980      	ldr	r1, [pc, #512]	; (80052b8 <DIG_Init+0x3fc>)
 80050b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050b8:	0013      	movs	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	189b      	adds	r3, r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	18cb      	adds	r3, r1, r3
 80050c2:	333e      	adds	r3, #62	; 0x3e
 80050c4:	001a      	movs	r2, r3
 80050c6:	2380      	movs	r3, #128	; 0x80
 80050c8:	8013      	strh	r3, [r2, #0]
    break;
 80050ca:	e10f      	b.n	80052ec <DIG_Init+0x430>
  case 3:
    DIG_HandleStruct[Ch].Handle = &htim3;
 80050cc:	497a      	ldr	r1, [pc, #488]	; (80052b8 <DIG_Init+0x3fc>)
 80050ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050d0:	0013      	movs	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	189b      	adds	r3, r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	18cb      	adds	r3, r1, r3
 80050da:	3308      	adds	r3, #8
 80050dc:	001a      	movs	r2, r3
 80050de:	4b7e      	ldr	r3, [pc, #504]	; (80052d8 <DIG_Init+0x41c>)
 80050e0:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Handle->Instance = TIM3;
 80050e2:	4975      	ldr	r1, [pc, #468]	; (80052b8 <DIG_Init+0x3fc>)
 80050e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050e6:	0013      	movs	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	189b      	adds	r3, r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	18cb      	adds	r3, r1, r3
 80050f0:	3308      	adds	r3, #8
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	4b79      	ldr	r3, [pc, #484]	; (80052dc <DIG_Init+0x420>)
 80050f6:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].TIM_Channel = TIM_CHANNEL_4;
 80050f8:	496f      	ldr	r1, [pc, #444]	; (80052b8 <DIG_Init+0x3fc>)
 80050fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050fc:	2040      	movs	r0, #64	; 0x40
 80050fe:	0013      	movs	r3, r2
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	189b      	adds	r3, r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	18cb      	adds	r3, r1, r3
 8005108:	181a      	adds	r2, r3, r0
 800510a:	230c      	movs	r3, #12
 800510c:	8013      	strh	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dir_Port = DIR4_GPIO_Port;
 800510e:	496a      	ldr	r1, [pc, #424]	; (80052b8 <DIG_Init+0x3fc>)
 8005110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005112:	0013      	movs	r3, r2
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	189b      	adds	r3, r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	18cb      	adds	r3, r1, r3
 800511c:	330c      	adds	r3, #12
 800511e:	001a      	movs	r2, r3
 8005120:	4b6a      	ldr	r3, [pc, #424]	; (80052cc <DIG_Init+0x410>)
 8005122:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dir_Pin = DIR4_Pin;
 8005124:	4964      	ldr	r1, [pc, #400]	; (80052b8 <DIG_Init+0x3fc>)
 8005126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005128:	0013      	movs	r3, r2
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	189b      	adds	r3, r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	18cb      	adds	r3, r1, r3
 8005132:	333c      	adds	r3, #60	; 0x3c
 8005134:	001a      	movs	r2, r3
 8005136:	2301      	movs	r3, #1
 8005138:	8013      	strh	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dig_IO_Port = DIG_IO4_GPIO_Port;
 800513a:	495f      	ldr	r1, [pc, #380]	; (80052b8 <DIG_Init+0x3fc>)
 800513c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800513e:	0013      	movs	r3, r2
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	189b      	adds	r3, r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	18cb      	adds	r3, r1, r3
 8005148:	3310      	adds	r3, #16
 800514a:	001a      	movs	r2, r3
 800514c:	4b5f      	ldr	r3, [pc, #380]	; (80052cc <DIG_Init+0x410>)
 800514e:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dig_IO_Pin = DIG_IO4_Pin;
 8005150:	4959      	ldr	r1, [pc, #356]	; (80052b8 <DIG_Init+0x3fc>)
 8005152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005154:	0013      	movs	r3, r2
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	189b      	adds	r3, r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	18cb      	adds	r3, r1, r3
 800515e:	333e      	adds	r3, #62	; 0x3e
 8005160:	001a      	movs	r2, r3
 8005162:	2302      	movs	r3, #2
 8005164:	8013      	strh	r3, [r2, #0]
    break;
 8005166:	e0c1      	b.n	80052ec <DIG_Init+0x430>
  case 4:
    DIG_HandleStruct[Ch].Handle = &htim2;
 8005168:	4953      	ldr	r1, [pc, #332]	; (80052b8 <DIG_Init+0x3fc>)
 800516a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800516c:	0013      	movs	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	189b      	adds	r3, r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	18cb      	adds	r3, r1, r3
 8005176:	3308      	adds	r3, #8
 8005178:	001a      	movs	r2, r3
 800517a:	4b59      	ldr	r3, [pc, #356]	; (80052e0 <DIG_Init+0x424>)
 800517c:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Handle->Instance = TIM2;
 800517e:	494e      	ldr	r1, [pc, #312]	; (80052b8 <DIG_Init+0x3fc>)
 8005180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005182:	0013      	movs	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	189b      	adds	r3, r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	18cb      	adds	r3, r1, r3
 800518c:	3308      	adds	r3, #8
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	05db      	lsls	r3, r3, #23
 8005194:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].TIM_Channel = TIM_CHANNEL_3;
 8005196:	4948      	ldr	r1, [pc, #288]	; (80052b8 <DIG_Init+0x3fc>)
 8005198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800519a:	2040      	movs	r0, #64	; 0x40
 800519c:	0013      	movs	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	189b      	adds	r3, r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	18cb      	adds	r3, r1, r3
 80051a6:	181a      	adds	r2, r3, r0
 80051a8:	2308      	movs	r3, #8
 80051aa:	8013      	strh	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dir_Port = DIR5_GPIO_Port;
 80051ac:	4942      	ldr	r1, [pc, #264]	; (80052b8 <DIG_Init+0x3fc>)
 80051ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051b0:	0013      	movs	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	189b      	adds	r3, r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	18cb      	adds	r3, r1, r3
 80051ba:	330c      	adds	r3, #12
 80051bc:	001a      	movs	r2, r3
 80051be:	4b43      	ldr	r3, [pc, #268]	; (80052cc <DIG_Init+0x410>)
 80051c0:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dir_Pin = DIR5_Pin;
 80051c2:	493d      	ldr	r1, [pc, #244]	; (80052b8 <DIG_Init+0x3fc>)
 80051c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051c6:	0013      	movs	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	189b      	adds	r3, r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	18cb      	adds	r3, r1, r3
 80051d0:	333c      	adds	r3, #60	; 0x3c
 80051d2:	001a      	movs	r2, r3
 80051d4:	2304      	movs	r3, #4
 80051d6:	8013      	strh	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dig_IO_Port = DIG_IO5_GPIO_Port;
 80051d8:	4937      	ldr	r1, [pc, #220]	; (80052b8 <DIG_Init+0x3fc>)
 80051da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051dc:	0013      	movs	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	189b      	adds	r3, r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	18cb      	adds	r3, r1, r3
 80051e6:	3310      	adds	r3, #16
 80051e8:	001a      	movs	r2, r3
 80051ea:	4b38      	ldr	r3, [pc, #224]	; (80052cc <DIG_Init+0x410>)
 80051ec:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dig_IO_Pin = DIG_IO5_Pin;
 80051ee:	4932      	ldr	r1, [pc, #200]	; (80052b8 <DIG_Init+0x3fc>)
 80051f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051f2:	0013      	movs	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	189b      	adds	r3, r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	18cb      	adds	r3, r1, r3
 80051fc:	333e      	adds	r3, #62	; 0x3e
 80051fe:	001a      	movs	r2, r3
 8005200:	2380      	movs	r3, #128	; 0x80
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	8013      	strh	r3, [r2, #0]
    break;
 8005206:	e071      	b.n	80052ec <DIG_Init+0x430>
  case 5:
    DIG_HandleStruct[Ch].Handle = &htim1;
 8005208:	492b      	ldr	r1, [pc, #172]	; (80052b8 <DIG_Init+0x3fc>)
 800520a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800520c:	0013      	movs	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	189b      	adds	r3, r3, r2
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	18cb      	adds	r3, r1, r3
 8005216:	3308      	adds	r3, #8
 8005218:	001a      	movs	r2, r3
 800521a:	4b32      	ldr	r3, [pc, #200]	; (80052e4 <DIG_Init+0x428>)
 800521c:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Handle->Instance = TIM1;
 800521e:	4926      	ldr	r1, [pc, #152]	; (80052b8 <DIG_Init+0x3fc>)
 8005220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005222:	0013      	movs	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	189b      	adds	r3, r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	18cb      	adds	r3, r1, r3
 800522c:	3308      	adds	r3, #8
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	4b2d      	ldr	r3, [pc, #180]	; (80052e8 <DIG_Init+0x42c>)
 8005232:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].TIM_Channel = TIM_CHANNEL_1;
 8005234:	4920      	ldr	r1, [pc, #128]	; (80052b8 <DIG_Init+0x3fc>)
 8005236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005238:	2040      	movs	r0, #64	; 0x40
 800523a:	0013      	movs	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	189b      	adds	r3, r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	18cb      	adds	r3, r1, r3
 8005244:	181a      	adds	r2, r3, r0
 8005246:	2300      	movs	r3, #0
 8005248:	8013      	strh	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dir_Port = DIR6_GPIO_Port;
 800524a:	491b      	ldr	r1, [pc, #108]	; (80052b8 <DIG_Init+0x3fc>)
 800524c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800524e:	0013      	movs	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	189b      	adds	r3, r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	18cb      	adds	r3, r1, r3
 8005258:	330c      	adds	r3, #12
 800525a:	001a      	movs	r2, r3
 800525c:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <DIG_Init+0x410>)
 800525e:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dir_Pin = DIR6_Pin;
 8005260:	4915      	ldr	r1, [pc, #84]	; (80052b8 <DIG_Init+0x3fc>)
 8005262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005264:	0013      	movs	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	189b      	adds	r3, r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	18cb      	adds	r3, r1, r3
 800526e:	333c      	adds	r3, #60	; 0x3c
 8005270:	001a      	movs	r2, r3
 8005272:	2380      	movs	r3, #128	; 0x80
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	8013      	strh	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dig_IO_Port = DIG_IO6_GPIO_Port;
 8005278:	490f      	ldr	r1, [pc, #60]	; (80052b8 <DIG_Init+0x3fc>)
 800527a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800527c:	0013      	movs	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	189b      	adds	r3, r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	18cb      	adds	r3, r1, r3
 8005286:	3310      	adds	r3, #16
 8005288:	001a      	movs	r2, r3
 800528a:	2390      	movs	r3, #144	; 0x90
 800528c:	05db      	lsls	r3, r3, #23
 800528e:	6013      	str	r3, [r2, #0]
    DIG_HandleStruct[Ch].Dig_IO_Pin = DIG_IO6_Pin;
 8005290:	4909      	ldr	r1, [pc, #36]	; (80052b8 <DIG_Init+0x3fc>)
 8005292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005294:	0013      	movs	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	189b      	adds	r3, r3, r2
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	18cb      	adds	r3, r1, r3
 800529e:	333e      	adds	r3, #62	; 0x3e
 80052a0:	001a      	movs	r2, r3
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	8013      	strh	r3, [r2, #0]
    break;
 80052a8:	e020      	b.n	80052ec <DIG_Init+0x430>
  default:
    return -1;         // ERROR  (Invalid Ch Number)
 80052aa:	2301      	movs	r3, #1
 80052ac:	425b      	negs	r3, r3
 80052ae:	f000 fd7c 	bl	8005daa <DIG_Init+0xeee>
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	08009c40 	.word	0x08009c40
 80052b8:	20001f14 	.word	0x20001f14
 80052bc:	200012c8 	.word	0x200012c8
 80052c0:	40014000 	.word	0x40014000
 80052c4:	2000275c 	.word	0x2000275c
 80052c8:	40014400 	.word	0x40014400
 80052cc:	48000400 	.word	0x48000400
 80052d0:	20001370 	.word	0x20001370
 80052d4:	40014800 	.word	0x40014800
 80052d8:	20001450 	.word	0x20001450
 80052dc:	40000400 	.word	0x40000400
 80052e0:	2000269c 	.word	0x2000269c
 80052e4:	20001ed4 	.word	0x20001ed4
 80052e8:	40012c00 	.word	0x40012c00
    break;
  }

  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ec:	205c      	movs	r0, #92	; 0x5c
 80052ee:	2428      	movs	r4, #40	; 0x28
 80052f0:	193b      	adds	r3, r7, r4
 80052f2:	181a      	adds	r2, r3, r0
 80052f4:	2300      	movs	r3, #0
 80052f6:	6093      	str	r3, [r2, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052f8:	193b      	adds	r3, r7, r4
 80052fa:	181a      	adds	r2, r3, r0
 80052fc:	2300      	movs	r3, #0
 80052fe:	60d3      	str	r3, [r2, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005300:	193b      	adds	r3, r7, r4
 8005302:	181a      	adds	r2, r3, r0
 8005304:	2300      	movs	r3, #0
 8005306:	6053      	str	r3, [r2, #4]
  GPIO_InitStruct.Pin = DIG_HandleStruct[Ch].Dig_IO_Pin;
 8005308:	49ed      	ldr	r1, [pc, #948]	; (80056c0 <DIG_Init+0x804>)
 800530a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800530c:	0013      	movs	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	189b      	adds	r3, r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	18cb      	adds	r3, r1, r3
 8005316:	333e      	adds	r3, #62	; 0x3e
 8005318:	2200      	movs	r2, #0
 800531a:	5e9b      	ldrsh	r3, [r3, r2]
 800531c:	001a      	movs	r2, r3
 800531e:	193b      	adds	r3, r7, r4
 8005320:	181b      	adds	r3, r3, r0
 8005322:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DIG_HandleStruct[Ch].Dig_IO_Port, &GPIO_InitStruct);
 8005324:	49e6      	ldr	r1, [pc, #920]	; (80056c0 <DIG_Init+0x804>)
 8005326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005328:	0013      	movs	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	189b      	adds	r3, r3, r2
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	18cb      	adds	r3, r1, r3
 8005332:	3310      	adds	r3, #16
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	193b      	adds	r3, r7, r4
 8005338:	181b      	adds	r3, r3, r0
 800533a:	0019      	movs	r1, r3
 800533c:	0010      	movs	r0, r2
 800533e:	f7fb ff61 	bl	8001204 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(DIG_HandleStruct[Ch].Dir_Port, DIG_HandleStruct[Ch].Dir_Pin, GPIO_PIN_RESET);
 8005342:	49df      	ldr	r1, [pc, #892]	; (80056c0 <DIG_Init+0x804>)
 8005344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005346:	0013      	movs	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	189b      	adds	r3, r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	18cb      	adds	r3, r1, r3
 8005350:	330c      	adds	r3, #12
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	49da      	ldr	r1, [pc, #872]	; (80056c0 <DIG_Init+0x804>)
 8005356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005358:	0013      	movs	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	189b      	adds	r3, r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	18cb      	adds	r3, r1, r3
 8005362:	333c      	adds	r3, #60	; 0x3c
 8005364:	2200      	movs	r2, #0
 8005366:	5e9b      	ldrsh	r3, [r3, r2]
 8005368:	b29b      	uxth	r3, r3
 800536a:	2200      	movs	r2, #0
 800536c:	0019      	movs	r1, r3
 800536e:	f7fc f8e2 	bl	8001536 <HAL_GPIO_WritePin>
  DIG_HandleStruct[Ch].DIG_InitStruct = DIG_InitStruct;
 8005372:	48d3      	ldr	r0, [pc, #844]	; (80056c0 <DIG_Init+0x804>)
 8005374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005376:	0013      	movs	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	189b      	adds	r3, r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	222c      	movs	r2, #44	; 0x2c
 8005380:	18b9      	adds	r1, r7, r2
 8005382:	18c2      	adds	r2, r0, r3
 8005384:	000b      	movs	r3, r1
 8005386:	cb03      	ldmia	r3!, {r0, r1}
 8005388:	c203      	stmia	r2!, {r0, r1}

  switch ( DIG_HandleStruct[Ch].DIG_InitStruct.Mode ) {
 800538a:	49cd      	ldr	r1, [pc, #820]	; (80056c0 <DIG_Init+0x804>)
 800538c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800538e:	0013      	movs	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	189b      	adds	r3, r3, r2
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	18cb      	adds	r3, r1, r3
 8005398:	3306      	adds	r3, #6
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d901      	bls.n	80053a4 <DIG_Init+0x4e8>
 80053a0:	f000 fd01 	bl	8005da6 <DIG_Init+0xeea>
 80053a4:	009a      	lsls	r2, r3, #2
 80053a6:	4bc7      	ldr	r3, [pc, #796]	; (80056c4 <DIG_Init+0x808>)
 80053a8:	18d3      	adds	r3, r2, r3
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	469f      	mov	pc, r3

  case DIG_IN:
    return 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	f000 fcfb 	bl	8005daa <DIG_Init+0xeee>
    break;

  case DIG_OUT:
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b4:	245c      	movs	r4, #92	; 0x5c
 80053b6:	2528      	movs	r5, #40	; 0x28
 80053b8:	197b      	adds	r3, r7, r5
 80053ba:	191b      	adds	r3, r3, r4
 80053bc:	2200      	movs	r2, #0
 80053be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053c0:	197b      	adds	r3, r7, r5
 80053c2:	191b      	adds	r3, r3, r4
 80053c4:	2200      	movs	r2, #0
 80053c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053c8:	197b      	adds	r3, r7, r5
 80053ca:	191b      	adds	r3, r3, r4
 80053cc:	2201      	movs	r2, #1
 80053ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pin = DIG_HandleStruct[Ch].Dig_IO_Pin;
 80053d0:	49bb      	ldr	r1, [pc, #748]	; (80056c0 <DIG_Init+0x804>)
 80053d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053d4:	0013      	movs	r3, r2
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	189b      	adds	r3, r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	18cb      	adds	r3, r1, r3
 80053de:	333e      	adds	r3, #62	; 0x3e
 80053e0:	2200      	movs	r2, #0
 80053e2:	5e9b      	ldrsh	r3, [r3, r2]
 80053e4:	001a      	movs	r2, r3
 80053e6:	197b      	adds	r3, r7, r5
 80053e8:	191b      	adds	r3, r3, r4
 80053ea:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(DIG_HandleStruct[Ch].Dir_Port, DIG_HandleStruct[Ch].Dir_Pin, GPIO_PIN_SET);
 80053ec:	49b4      	ldr	r1, [pc, #720]	; (80056c0 <DIG_Init+0x804>)
 80053ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053f0:	0013      	movs	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	189b      	adds	r3, r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	18cb      	adds	r3, r1, r3
 80053fa:	330c      	adds	r3, #12
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	49b0      	ldr	r1, [pc, #704]	; (80056c0 <DIG_Init+0x804>)
 8005400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005402:	0013      	movs	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	189b      	adds	r3, r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	18cb      	adds	r3, r1, r3
 800540c:	333c      	adds	r3, #60	; 0x3c
 800540e:	2200      	movs	r2, #0
 8005410:	5e9b      	ldrsh	r3, [r3, r2]
 8005412:	b29b      	uxth	r3, r3
 8005414:	2201      	movs	r2, #1
 8005416:	0019      	movs	r1, r3
 8005418:	f7fc f88d 	bl	8001536 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(DIG_HandleStruct[Ch].Dig_IO_Port, &GPIO_InitStruct);
 800541c:	49a8      	ldr	r1, [pc, #672]	; (80056c0 <DIG_Init+0x804>)
 800541e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005420:	0013      	movs	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	189b      	adds	r3, r3, r2
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	18cb      	adds	r3, r1, r3
 800542a:	3310      	adds	r3, #16
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	197a      	adds	r2, r7, r5
 8005430:	1912      	adds	r2, r2, r4
 8005432:	0011      	movs	r1, r2
 8005434:	0018      	movs	r0, r3
 8005436:	f7fb fee5 	bl	8001204 <HAL_GPIO_Init>
    return 0;
 800543a:	2300      	movs	r3, #0
 800543c:	f000 fcb5 	bl	8005daa <DIG_Init+0xeee>
  case DIG_SERIAL_IN:
  case DIG_SERIAL_INOUT:
    //
    //  This Mode is only valid on DIG_IO1
    //
    if ( Ch == 0 ) {
 8005440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005442:	2b00      	cmp	r3, #0
 8005444:	d137      	bne.n	80054b6 <DIG_Init+0x5fa>
      //
      // Assign PA3 as USART2_RX and enable Interrupts
      //
      GPIO_InitStruct.Pin = DIG_HandleStruct[Ch].Dig_IO_Pin;
 8005446:	499e      	ldr	r1, [pc, #632]	; (80056c0 <DIG_Init+0x804>)
 8005448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800544a:	0013      	movs	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	189b      	adds	r3, r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	18cb      	adds	r3, r1, r3
 8005454:	333e      	adds	r3, #62	; 0x3e
 8005456:	2200      	movs	r2, #0
 8005458:	5e9b      	ldrsh	r3, [r3, r2]
 800545a:	001a      	movs	r2, r3
 800545c:	205c      	movs	r0, #92	; 0x5c
 800545e:	2428      	movs	r4, #40	; 0x28
 8005460:	193b      	adds	r3, r7, r4
 8005462:	181b      	adds	r3, r3, r0
 8005464:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005466:	193b      	adds	r3, r7, r4
 8005468:	181b      	adds	r3, r3, r0
 800546a:	2202      	movs	r2, #2
 800546c:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800546e:	193b      	adds	r3, r7, r4
 8005470:	181b      	adds	r3, r3, r0
 8005472:	2201      	movs	r2, #1
 8005474:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005476:	193b      	adds	r3, r7, r4
 8005478:	181b      	adds	r3, r3, r0
 800547a:	2203      	movs	r2, #3
 800547c:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800547e:	193b      	adds	r3, r7, r4
 8005480:	181b      	adds	r3, r3, r0
 8005482:	2201      	movs	r2, #1
 8005484:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init(DIG_HandleStruct[Ch].Dig_IO_Port, &GPIO_InitStruct);
 8005486:	498e      	ldr	r1, [pc, #568]	; (80056c0 <DIG_Init+0x804>)
 8005488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800548a:	0013      	movs	r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	189b      	adds	r3, r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	18cb      	adds	r3, r1, r3
 8005494:	3310      	adds	r3, #16
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	193a      	adds	r2, r7, r4
 800549a:	1812      	adds	r2, r2, r0
 800549c:	0011      	movs	r1, r2
 800549e:	0018      	movs	r0, r3
 80054a0:	f7fb feb0 	bl	8001204 <HAL_GPIO_Init>
      HAL_UART_Receive_IT(&huart2, &SerialUsart2.RxChar, 1);
 80054a4:	4988      	ldr	r1, [pc, #544]	; (80056c8 <DIG_Init+0x80c>)
 80054a6:	4b89      	ldr	r3, [pc, #548]	; (80056cc <DIG_Init+0x810>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	0018      	movs	r0, r3
 80054ac:	f7fe fe96 	bl	80041dc <HAL_UART_Receive_IT>
      HAL_NVIC_EnableIRQ(USART2_IRQn);
 80054b0:	201c      	movs	r0, #28
 80054b2:	f7fb fba6 	bl	8000c02 <HAL_NVIC_EnableIRQ>
    }
    return 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	f000 fc77 	bl	8005daa <DIG_Init+0xeee>

  case DIG_SERIAL_OUT:
    //
    //  DIG_SERIAL_OUT is only valid on DIG_IO2
    //
    if ( Ch == 1 ) {
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d142      	bne.n	8005548 <DIG_Init+0x68c>
      // NOTE:  The DIG_IO2 port pin (PB8) must be set as an input
      //          the Buffer is then set as an output.  The DIG_IO2
      //          signal wire is then driven by the USART2_TX (PA2)
      //          signal through a 4.7K resistor (R6).
      //
      GPIO_InitStruct.Pin = DIG_HandleStruct[Ch].Dig_IO_Pin;
 80054c2:	497f      	ldr	r1, [pc, #508]	; (80056c0 <DIG_Init+0x804>)
 80054c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054c6:	0013      	movs	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	189b      	adds	r3, r3, r2
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	18cb      	adds	r3, r1, r3
 80054d0:	333e      	adds	r3, #62	; 0x3e
 80054d2:	2200      	movs	r2, #0
 80054d4:	5e9b      	ldrsh	r3, [r3, r2]
 80054d6:	001a      	movs	r2, r3
 80054d8:	205c      	movs	r0, #92	; 0x5c
 80054da:	2428      	movs	r4, #40	; 0x28
 80054dc:	193b      	adds	r3, r7, r4
 80054de:	181b      	adds	r3, r3, r0
 80054e0:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e2:	193b      	adds	r3, r7, r4
 80054e4:	181b      	adds	r3, r3, r0
 80054e6:	2200      	movs	r2, #0
 80054e8:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ea:	193b      	adds	r3, r7, r4
 80054ec:	181b      	adds	r3, r3, r0
 80054ee:	2200      	movs	r2, #0
 80054f0:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054f2:	193b      	adds	r3, r7, r4
 80054f4:	181b      	adds	r3, r3, r0
 80054f6:	2200      	movs	r2, #0
 80054f8:	605a      	str	r2, [r3, #4]
      HAL_GPIO_Init(DIG_HandleStruct[Ch].Dig_IO_Port, &GPIO_InitStruct);
 80054fa:	4971      	ldr	r1, [pc, #452]	; (80056c0 <DIG_Init+0x804>)
 80054fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054fe:	0013      	movs	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	189b      	adds	r3, r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	18cb      	adds	r3, r1, r3
 8005508:	3310      	adds	r3, #16
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	193a      	adds	r2, r7, r4
 800550e:	1812      	adds	r2, r2, r0
 8005510:	0011      	movs	r1, r2
 8005512:	0018      	movs	r0, r3
 8005514:	f7fb fe76 	bl	8001204 <HAL_GPIO_Init>
      //
      // Finally, configure Buffer as an output
      //
      HAL_GPIO_WritePin(DIG_HandleStruct[Ch].Dir_Port, DIG_HandleStruct[Ch].Dir_Pin, GPIO_PIN_SET);        // Set as an output
 8005518:	4969      	ldr	r1, [pc, #420]	; (80056c0 <DIG_Init+0x804>)
 800551a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800551c:	0013      	movs	r3, r2
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	189b      	adds	r3, r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	18cb      	adds	r3, r1, r3
 8005526:	330c      	adds	r3, #12
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	4965      	ldr	r1, [pc, #404]	; (80056c0 <DIG_Init+0x804>)
 800552c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800552e:	0013      	movs	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	189b      	adds	r3, r3, r2
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	18cb      	adds	r3, r1, r3
 8005538:	333c      	adds	r3, #60	; 0x3c
 800553a:	2200      	movs	r2, #0
 800553c:	5e9b      	ldrsh	r3, [r3, r2]
 800553e:	b29b      	uxth	r3, r3
 8005540:	2201      	movs	r2, #1
 8005542:	0019      	movs	r1, r3
 8005544:	f7fb fff7 	bl	8001536 <HAL_GPIO_WritePin>
    }
    return 0;
 8005548:	2300      	movs	r3, #0
 800554a:	f000 fc2e 	bl	8005daa <DIG_Init+0xeee>
    break;

  case DIG_FREQ_IN:

     if (Ch == 5) {
 800554e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005550:	2b05      	cmp	r3, #5
 8005552:	d103      	bne.n	800555c <DIG_Init+0x6a0>
         return -1;
 8005554:	2301      	movs	r3, #1
 8005556:	425b      	negs	r3, r3
 8005558:	f000 fc27 	bl	8005daa <DIG_Init+0xeee>
     }
     //
     // Setup Port pin to generate an interrupt on Rising Edges
     //
    GPIO_InitStruct.Pin = DIG_HandleStruct[Ch].Dig_IO_Pin;
 800555c:	4958      	ldr	r1, [pc, #352]	; (80056c0 <DIG_Init+0x804>)
 800555e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005560:	0013      	movs	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	189b      	adds	r3, r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	18cb      	adds	r3, r1, r3
 800556a:	333e      	adds	r3, #62	; 0x3e
 800556c:	2200      	movs	r2, #0
 800556e:	5e9b      	ldrsh	r3, [r3, r2]
 8005570:	001a      	movs	r2, r3
 8005572:	205c      	movs	r0, #92	; 0x5c
 8005574:	2428      	movs	r4, #40	; 0x28
 8005576:	193b      	adds	r3, r7, r4
 8005578:	181b      	adds	r3, r3, r0
 800557a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800557c:	193b      	adds	r3, r7, r4
 800557e:	181b      	adds	r3, r3, r0
 8005580:	4a53      	ldr	r2, [pc, #332]	; (80056d0 <DIG_Init+0x814>)
 8005582:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005584:	193b      	adds	r3, r7, r4
 8005586:	181b      	adds	r3, r3, r0
 8005588:	2200      	movs	r2, #0
 800558a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(DIG_HandleStruct[Ch].Dig_IO_Port, &GPIO_InitStruct);
 800558c:	494c      	ldr	r1, [pc, #304]	; (80056c0 <DIG_Init+0x804>)
 800558e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005590:	0013      	movs	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	189b      	adds	r3, r3, r2
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	18cb      	adds	r3, r1, r3
 800559a:	3310      	adds	r3, #16
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	193a      	adds	r2, r7, r4
 80055a0:	1812      	adds	r2, r2, r0
 80055a2:	0011      	movs	r1, r2
 80055a4:	0018      	movs	r0, r3
 80055a6:	f7fb fe2d 	bl	8001204 <HAL_GPIO_Init>

    switch ( Ch ) {
 80055aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ac:	2b05      	cmp	r3, #5
 80055ae:	d833      	bhi.n	8005618 <DIG_Init+0x75c>
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	009a      	lsls	r2, r3, #2
 80055b4:	4b47      	ldr	r3, [pc, #284]	; (80056d4 <DIG_Init+0x818>)
 80055b6:	18d3      	adds	r3, r2, r3
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	469f      	mov	pc, r3
    case 0:
      HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);               // GPIO_PIN_3
 80055bc:	2200      	movs	r2, #0
 80055be:	2100      	movs	r1, #0
 80055c0:	2006      	movs	r0, #6
 80055c2:	f7fb fb09 	bl	8000bd8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80055c6:	2006      	movs	r0, #6
 80055c8:	f7fb fb1b 	bl	8000c02 <HAL_NVIC_EnableIRQ>
      break;
 80055cc:	e024      	b.n	8005618 <DIG_Init+0x75c>
    case 1:
      HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);               // GPIO_PIN_8
 80055ce:	2200      	movs	r2, #0
 80055d0:	2100      	movs	r1, #0
 80055d2:	2007      	movs	r0, #7
 80055d4:	f7fb fb00 	bl	8000bd8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80055d8:	2007      	movs	r0, #7
 80055da:	f7fb fb12 	bl	8000c02 <HAL_NVIC_EnableIRQ>
      break;
 80055de:	e01b      	b.n	8005618 <DIG_Init+0x75c>
    case 2:
      HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);               // GPIO_PIN_9
 80055e0:	2200      	movs	r2, #0
 80055e2:	2100      	movs	r1, #0
 80055e4:	2007      	movs	r0, #7
 80055e6:	f7fb faf7 	bl	8000bd8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80055ea:	2007      	movs	r0, #7
 80055ec:	f7fb fb09 	bl	8000c02 <HAL_NVIC_EnableIRQ>
      break;
 80055f0:	e012      	b.n	8005618 <DIG_Init+0x75c>
    case 3:
      HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);               // GPIO_PIN_4
 80055f2:	2200      	movs	r2, #0
 80055f4:	2100      	movs	r1, #0
 80055f6:	2007      	movs	r0, #7
 80055f8:	f7fb faee 	bl	8000bd8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80055fc:	2007      	movs	r0, #7
 80055fe:	f7fb fb00 	bl	8000c02 <HAL_NVIC_EnableIRQ>
      break;
 8005602:	e009      	b.n	8005618 <DIG_Init+0x75c>
    case 4:
      HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);               // GPIO_PIN_10
 8005604:	2200      	movs	r2, #0
 8005606:	2100      	movs	r1, #0
 8005608:	2007      	movs	r0, #7
 800560a:	f7fb fae5 	bl	8000bd8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800560e:	2007      	movs	r0, #7
 8005610:	f7fb faf7 	bl	8000c02 <HAL_NVIC_EnableIRQ>
      break;
 8005614:	e000      	b.n	8005618 <DIG_Init+0x75c>
    case 5:
      break;
 8005616:	46c0      	nop			; (mov r8, r8)
    }
    return 0;
 8005618:	2300      	movs	r3, #0
 800561a:	f000 fbc6 	bl	8005daa <DIG_Init+0xeee>
    //
    // Frequency must be > 0 and less than 200KHz
    // MinFrequency must be >= 0 and less than Frequency
    //

    switch ( Ch ) {
 800561e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005620:	2b05      	cmp	r3, #5
 8005622:	d86c      	bhi.n	80056fe <DIG_Init+0x842>
 8005624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005626:	009a      	lsls	r2, r3, #2
 8005628:	4b2b      	ldr	r3, [pc, #172]	; (80056d8 <DIG_Init+0x81c>)
 800562a:	18d3      	adds	r3, r2, r3
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	469f      	mov	pc, r3
    case 0:
      __HAL_RCC_TIM15_CLK_ENABLE();
 8005630:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <DIG_Init+0x820>)
 8005632:	699a      	ldr	r2, [r3, #24]
 8005634:	4b29      	ldr	r3, [pc, #164]	; (80056dc <DIG_Init+0x820>)
 8005636:	2180      	movs	r1, #128	; 0x80
 8005638:	0249      	lsls	r1, r1, #9
 800563a:	430a      	orrs	r2, r1
 800563c:	619a      	str	r2, [r3, #24]
 800563e:	4b27      	ldr	r3, [pc, #156]	; (80056dc <DIG_Init+0x820>)
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	2380      	movs	r3, #128	; 0x80
 8005644:	025b      	lsls	r3, r3, #9
 8005646:	4013      	ands	r3, r2
 8005648:	667b      	str	r3, [r7, #100]	; 0x64
 800564a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      break;
 800564c:	e057      	b.n	80056fe <DIG_Init+0x842>
    case 1:
      __HAL_RCC_TIM16_CLK_ENABLE();
 800564e:	4b23      	ldr	r3, [pc, #140]	; (80056dc <DIG_Init+0x820>)
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	4b22      	ldr	r3, [pc, #136]	; (80056dc <DIG_Init+0x820>)
 8005654:	2180      	movs	r1, #128	; 0x80
 8005656:	0289      	lsls	r1, r1, #10
 8005658:	430a      	orrs	r2, r1
 800565a:	619a      	str	r2, [r3, #24]
 800565c:	4b1f      	ldr	r3, [pc, #124]	; (80056dc <DIG_Init+0x820>)
 800565e:	699a      	ldr	r2, [r3, #24]
 8005660:	2380      	movs	r3, #128	; 0x80
 8005662:	029b      	lsls	r3, r3, #10
 8005664:	4013      	ands	r3, r2
 8005666:	663b      	str	r3, [r7, #96]	; 0x60
 8005668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
      break;
 800566a:	e048      	b.n	80056fe <DIG_Init+0x842>
    case 2:
      __HAL_RCC_TIM17_CLK_ENABLE();
 800566c:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <DIG_Init+0x820>)
 800566e:	699a      	ldr	r2, [r3, #24]
 8005670:	4b1a      	ldr	r3, [pc, #104]	; (80056dc <DIG_Init+0x820>)
 8005672:	2180      	movs	r1, #128	; 0x80
 8005674:	02c9      	lsls	r1, r1, #11
 8005676:	430a      	orrs	r2, r1
 8005678:	619a      	str	r2, [r3, #24]
 800567a:	4b18      	ldr	r3, [pc, #96]	; (80056dc <DIG_Init+0x820>)
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	02db      	lsls	r3, r3, #11
 8005682:	4013      	ands	r3, r2
 8005684:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
      break;
 8005688:	e039      	b.n	80056fe <DIG_Init+0x842>
    case 3:
      __HAL_RCC_TIM3_CLK_ENABLE();
 800568a:	4b14      	ldr	r3, [pc, #80]	; (80056dc <DIG_Init+0x820>)
 800568c:	69da      	ldr	r2, [r3, #28]
 800568e:	4b13      	ldr	r3, [pc, #76]	; (80056dc <DIG_Init+0x820>)
 8005690:	2102      	movs	r1, #2
 8005692:	430a      	orrs	r2, r1
 8005694:	61da      	str	r2, [r3, #28]
 8005696:	4b11      	ldr	r3, [pc, #68]	; (80056dc <DIG_Init+0x820>)
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	2202      	movs	r2, #2
 800569c:	4013      	ands	r3, r2
 800569e:	65bb      	str	r3, [r7, #88]	; 0x58
 80056a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
      break;
 80056a2:	e02c      	b.n	80056fe <DIG_Init+0x842>
    case 4:
      __HAL_RCC_TIM2_CLK_ENABLE();
 80056a4:	4b0d      	ldr	r3, [pc, #52]	; (80056dc <DIG_Init+0x820>)
 80056a6:	69da      	ldr	r2, [r3, #28]
 80056a8:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <DIG_Init+0x820>)
 80056aa:	2101      	movs	r1, #1
 80056ac:	430a      	orrs	r2, r1
 80056ae:	61da      	str	r2, [r3, #28]
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <DIG_Init+0x820>)
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	2201      	movs	r2, #1
 80056b6:	4013      	ands	r3, r2
 80056b8:	657b      	str	r3, [r7, #84]	; 0x54
 80056ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
      break;
 80056bc:	e01f      	b.n	80056fe <DIG_Init+0x842>
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	20001f14 	.word	0x20001f14
 80056c4:	08009c58 	.word	0x08009c58
 80056c8:	200013e8 	.word	0x200013e8
 80056cc:	200026e0 	.word	0x200026e0
 80056d0:	10110000 	.word	0x10110000
 80056d4:	08009c7c 	.word	0x08009c7c
 80056d8:	08009c94 	.word	0x08009c94
 80056dc:	40021000 	.word	0x40021000
    case 5:
      __HAL_RCC_TIM1_CLK_ENABLE();
 80056e0:	4be8      	ldr	r3, [pc, #928]	; (8005a84 <DIG_Init+0xbc8>)
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	4be7      	ldr	r3, [pc, #924]	; (8005a84 <DIG_Init+0xbc8>)
 80056e6:	2180      	movs	r1, #128	; 0x80
 80056e8:	0109      	lsls	r1, r1, #4
 80056ea:	430a      	orrs	r2, r1
 80056ec:	619a      	str	r2, [r3, #24]
 80056ee:	4be5      	ldr	r3, [pc, #916]	; (8005a84 <DIG_Init+0xbc8>)
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	2380      	movs	r3, #128	; 0x80
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	4013      	ands	r3, r2
 80056f8:	653b      	str	r3, [r7, #80]	; 0x50
 80056fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
      break;
 80056fc:	46c0      	nop			; (mov r8, r8)
    }
    int32_t Freq = DIG_HandleStruct[Ch].DIG_InitStruct.Frequency;
 80056fe:	49e2      	ldr	r1, [pc, #904]	; (8005a88 <DIG_Init+0xbcc>)
 8005700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005702:	0013      	movs	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	189b      	adds	r3, r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	585b      	ldr	r3, [r3, r1]
 800570c:	2298      	movs	r2, #152	; 0x98
 800570e:	18b9      	adds	r1, r7, r2
 8005710:	600b      	str	r3, [r1, #0]
    if ( (Freq <= 0) || (Freq > 20000000) ) {
 8005712:	18bb      	adds	r3, r7, r2
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	dd05      	ble.n	8005726 <DIG_Init+0x86a>
 800571a:	2398      	movs	r3, #152	; 0x98
 800571c:	18fb      	adds	r3, r7, r3
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4ada      	ldr	r2, [pc, #872]	; (8005a8c <DIG_Init+0xbd0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	dd02      	ble.n	800572c <DIG_Init+0x870>
      return -1;
 8005726:	2301      	movs	r3, #1
 8005728:	425b      	negs	r3, r3
 800572a:	e33e      	b.n	8005daa <DIG_Init+0xeee>
    }
    //
    // Calculate a Prescaler value
    //
    MinPeriod = 2400000000 / Freq;
 800572c:	2398      	movs	r3, #152	; 0x98
 800572e:	18fb      	adds	r3, r7, r3
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	623b      	str	r3, [r7, #32]
 8005734:	17db      	asrs	r3, r3, #31
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
 8005738:	6a3a      	ldr	r2, [r7, #32]
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	48d4      	ldr	r0, [pc, #848]	; (8005a90 <DIG_Init+0xbd4>)
 800573e:	2100      	movs	r1, #0
 8005740:	f7fa febc 	bl	80004bc <__aeabi_ldivmod>
 8005744:	0003      	movs	r3, r0
 8005746:	000c      	movs	r4, r1
 8005748:	229c      	movs	r2, #156	; 0x9c
 800574a:	18b9      	adds	r1, r7, r2
 800574c:	600b      	str	r3, [r1, #0]
    DIG_HandleStruct[Ch].Prescaler = MinPeriod / 65000;
 800574e:	18bb      	adds	r3, r7, r2
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	49d0      	ldr	r1, [pc, #832]	; (8005a94 <DIG_Init+0xbd8>)
 8005754:	0018      	movs	r0, r3
 8005756:	f7fa fdc5 	bl	80002e4 <__divsi3>
 800575a:	0003      	movs	r3, r0
 800575c:	0018      	movs	r0, r3
 800575e:	49ca      	ldr	r1, [pc, #808]	; (8005a88 <DIG_Init+0xbcc>)
 8005760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005762:	0013      	movs	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	189b      	adds	r3, r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	18cb      	adds	r3, r1, r3
 800576c:	3314      	adds	r3, #20
 800576e:	6018      	str	r0, [r3, #0]
    DIG_HandleStruct[Ch].Period = (2400000000 / (DIG_HandleStruct[Ch].Prescaler + 1)) / DIG_HandleStruct[Ch].DIG_InitStruct.Frequency;
 8005770:	49c5      	ldr	r1, [pc, #788]	; (8005a88 <DIG_Init+0xbcc>)
 8005772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005774:	0013      	movs	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	189b      	adds	r3, r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	18cb      	adds	r3, r1, r3
 800577e:	3314      	adds	r3, #20
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3301      	adds	r3, #1
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	48c0      	ldr	r0, [pc, #768]	; (8005a90 <DIG_Init+0xbd4>)
 8005790:	2100      	movs	r1, #0
 8005792:	f7fa fe93 	bl	80004bc <__aeabi_ldivmod>
 8005796:	0003      	movs	r3, r0
 8005798:	000c      	movs	r4, r1
 800579a:	0025      	movs	r5, r4
 800579c:	001c      	movs	r4, r3
 800579e:	49ba      	ldr	r1, [pc, #744]	; (8005a88 <DIG_Init+0xbcc>)
 80057a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057a2:	0013      	movs	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	189b      	adds	r3, r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	585b      	ldr	r3, [r3, r1]
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	17db      	asrs	r3, r3, #31
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	0020      	movs	r0, r4
 80057b8:	0029      	movs	r1, r5
 80057ba:	f7fa fe7f 	bl	80004bc <__aeabi_ldivmod>
 80057be:	0003      	movs	r3, r0
 80057c0:	000c      	movs	r4, r1
 80057c2:	0018      	movs	r0, r3
 80057c4:	49b0      	ldr	r1, [pc, #704]	; (8005a88 <DIG_Init+0xbcc>)
 80057c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057c8:	0013      	movs	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	189b      	adds	r3, r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	18cb      	adds	r3, r1, r3
 80057d2:	3318      	adds	r3, #24
 80057d4:	6018      	str	r0, [r3, #0]
    //
    // Set Buffer Direction to Output
    //
    HAL_GPIO_WritePin(DIG_HandleStruct[Ch].Dir_Port, DIG_HandleStruct[Ch].Dir_Pin, GPIO_PIN_SET);
 80057d6:	49ac      	ldr	r1, [pc, #688]	; (8005a88 <DIG_Init+0xbcc>)
 80057d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057da:	0013      	movs	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	189b      	adds	r3, r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	18cb      	adds	r3, r1, r3
 80057e4:	330c      	adds	r3, #12
 80057e6:	6818      	ldr	r0, [r3, #0]
 80057e8:	49a7      	ldr	r1, [pc, #668]	; (8005a88 <DIG_Init+0xbcc>)
 80057ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057ec:	0013      	movs	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	189b      	adds	r3, r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	18cb      	adds	r3, r1, r3
 80057f6:	333c      	adds	r3, #60	; 0x3c
 80057f8:	2200      	movs	r2, #0
 80057fa:	5e9b      	ldrsh	r3, [r3, r2]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2201      	movs	r2, #1
 8005800:	0019      	movs	r1, r3
 8005802:	f7fb fe98 	bl	8001536 <HAL_GPIO_WritePin>
    //
    // Initialize Timer Base
    //
    DIG_HandleStruct[Ch].Handle->Init.Prescaler         = DIG_HandleStruct[Ch].Prescaler;
 8005806:	49a0      	ldr	r1, [pc, #640]	; (8005a88 <DIG_Init+0xbcc>)
 8005808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800580a:	0013      	movs	r3, r2
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	189b      	adds	r3, r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	18cb      	adds	r3, r1, r3
 8005814:	3308      	adds	r3, #8
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	489b      	ldr	r0, [pc, #620]	; (8005a88 <DIG_Init+0xbcc>)
 800581a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800581c:	000b      	movs	r3, r1
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	185b      	adds	r3, r3, r1
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	18c3      	adds	r3, r0, r3
 8005826:	3314      	adds	r3, #20
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6053      	str	r3, [r2, #4]
    DIG_HandleStruct[Ch].Handle->Init.CounterMode       = TIM_COUNTERMODE_DOWN;
 800582c:	4996      	ldr	r1, [pc, #600]	; (8005a88 <DIG_Init+0xbcc>)
 800582e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005830:	0013      	movs	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	189b      	adds	r3, r3, r2
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	18cb      	adds	r3, r1, r3
 800583a:	3308      	adds	r3, #8
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2210      	movs	r2, #16
 8005840:	609a      	str	r2, [r3, #8]
    DIG_HandleStruct[Ch].Handle->Init.Period            = DIG_HandleStruct[Ch].Period - 1;
 8005842:	4991      	ldr	r1, [pc, #580]	; (8005a88 <DIG_Init+0xbcc>)
 8005844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005846:	0013      	movs	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	189b      	adds	r3, r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	18cb      	adds	r3, r1, r3
 8005850:	3318      	adds	r3, #24
 8005852:	6819      	ldr	r1, [r3, #0]
 8005854:	488c      	ldr	r0, [pc, #560]	; (8005a88 <DIG_Init+0xbcc>)
 8005856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005858:	0013      	movs	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	189b      	adds	r3, r3, r2
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	18c3      	adds	r3, r0, r3
 8005862:	3308      	adds	r3, #8
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	1e4a      	subs	r2, r1, #1
 8005868:	60da      	str	r2, [r3, #12]
    DIG_HandleStruct[Ch].Handle->Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800586a:	4987      	ldr	r1, [pc, #540]	; (8005a88 <DIG_Init+0xbcc>)
 800586c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800586e:	0013      	movs	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	189b      	adds	r3, r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	18cb      	adds	r3, r1, r3
 8005878:	3308      	adds	r3, #8
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2200      	movs	r2, #0
 800587e:	611a      	str	r2, [r3, #16]
    DIG_HandleStruct[Ch].Handle->Init.RepetitionCounter = 0;
 8005880:	4981      	ldr	r1, [pc, #516]	; (8005a88 <DIG_Init+0xbcc>)
 8005882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005884:	0013      	movs	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	189b      	adds	r3, r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	18cb      	adds	r3, r1, r3
 800588e:	3308      	adds	r3, #8
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2200      	movs	r2, #0
 8005894:	615a      	str	r2, [r3, #20]
    DIG_HandleStruct[Ch].Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005896:	497c      	ldr	r1, [pc, #496]	; (8005a88 <DIG_Init+0xbcc>)
 8005898:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800589a:	0013      	movs	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	189b      	adds	r3, r3, r2
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	18cb      	adds	r3, r1, r3
 80058a4:	3308      	adds	r3, #8
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2200      	movs	r2, #0
 80058aa:	619a      	str	r2, [r3, #24]
    if ( HAL_TIM_Base_Init(DIG_HandleStruct[Ch].Handle) != HAL_OK ) {
 80058ac:	4976      	ldr	r1, [pc, #472]	; (8005a88 <DIG_Init+0xbcc>)
 80058ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b0:	0013      	movs	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	189b      	adds	r3, r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	18cb      	adds	r3, r1, r3
 80058ba:	3308      	adds	r3, #8
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	0018      	movs	r0, r3
 80058c0:	f7fd ffa0 	bl	8003804 <HAL_TIM_Base_Init>
 80058c4:	1e03      	subs	r3, r0, #0
 80058c6:	d002      	beq.n	80058ce <DIG_Init+0xa12>
      return -1;
 80058c8:	2301      	movs	r3, #1
 80058ca:	425b      	negs	r3, r3
 80058cc:	e26d      	b.n	8005daa <DIG_Init+0xeee>
    }
    //
    // Initialize Timer Channel
    //
    sConfigOC.OCMode        = TIM_OCMODE_TOGGLE;
 80058ce:	2540      	movs	r5, #64	; 0x40
 80058d0:	2628      	movs	r6, #40	; 0x28
 80058d2:	19bb      	adds	r3, r7, r6
 80058d4:	195b      	adds	r3, r3, r5
 80058d6:	2230      	movs	r2, #48	; 0x30
 80058d8:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse         = 0;
 80058da:	19bb      	adds	r3, r7, r6
 80058dc:	195b      	adds	r3, r3, r5
 80058de:	2200      	movs	r2, #0
 80058e0:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity    = TIM_OCPOLARITY_HIGH;
 80058e2:	19bb      	adds	r3, r7, r6
 80058e4:	195b      	adds	r3, r3, r5
 80058e6:	2200      	movs	r2, #0
 80058e8:	609a      	str	r2, [r3, #8]
    sConfigOC.OCNPolarity   = TIM_OCNPOLARITY_HIGH;
 80058ea:	19bb      	adds	r3, r7, r6
 80058ec:	195b      	adds	r3, r3, r5
 80058ee:	2200      	movs	r2, #0
 80058f0:	60da      	str	r2, [r3, #12]
    sConfigOC.OCFastMode    = TIM_OCFAST_DISABLE;
 80058f2:	19bb      	adds	r3, r7, r6
 80058f4:	195b      	adds	r3, r3, r5
 80058f6:	2200      	movs	r2, #0
 80058f8:	611a      	str	r2, [r3, #16]
    sConfigOC.OCIdleState   = TIM_OCIDLESTATE_RESET;
 80058fa:	19bb      	adds	r3, r7, r6
 80058fc:	195b      	adds	r3, r3, r5
 80058fe:	2200      	movs	r2, #0
 8005900:	615a      	str	r2, [r3, #20]
    sConfigOC.OCNIdleState  = TIM_OCNIDLESTATE_RESET;
 8005902:	19bb      	adds	r3, r7, r6
 8005904:	195b      	adds	r3, r3, r5
 8005906:	2200      	movs	r2, #0
 8005908:	619a      	str	r2, [r3, #24]
    if ( HAL_TIM_PWM_ConfigChannel(DIG_HandleStruct[Ch].Handle, &sConfigOC, DIG_HandleStruct[Ch].TIM_Channel) != HAL_OK ) {
 800590a:	495f      	ldr	r1, [pc, #380]	; (8005a88 <DIG_Init+0xbcc>)
 800590c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800590e:	0013      	movs	r3, r2
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	189b      	adds	r3, r3, r2
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	18cb      	adds	r3, r1, r3
 8005918:	3308      	adds	r3, #8
 800591a:	681c      	ldr	r4, [r3, #0]
 800591c:	495a      	ldr	r1, [pc, #360]	; (8005a88 <DIG_Init+0xbcc>)
 800591e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005920:	2040      	movs	r0, #64	; 0x40
 8005922:	0013      	movs	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	189b      	adds	r3, r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	18cb      	adds	r3, r1, r3
 800592c:	181b      	adds	r3, r3, r0
 800592e:	2200      	movs	r2, #0
 8005930:	5e9b      	ldrsh	r3, [r3, r2]
 8005932:	001a      	movs	r2, r3
 8005934:	19bb      	adds	r3, r7, r6
 8005936:	195b      	adds	r3, r3, r5
 8005938:	0019      	movs	r1, r3
 800593a:	0020      	movs	r0, r4
 800593c:	f7fd ffec 	bl	8003918 <HAL_TIM_PWM_ConfigChannel>
 8005940:	1e03      	subs	r3, r0, #0
 8005942:	d002      	beq.n	800594a <DIG_Init+0xa8e>
      return -1;
 8005944:	2301      	movs	r3, #1
 8005946:	425b      	negs	r3, r3
 8005948:	e22f      	b.n	8005daa <DIG_Init+0xeee>
    }
    HAL_TIM_MspPostInit(DIG_HandleStruct[Ch].Handle);
 800594a:	494f      	ldr	r1, [pc, #316]	; (8005a88 <DIG_Init+0xbcc>)
 800594c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800594e:	0013      	movs	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	189b      	adds	r3, r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	18cb      	adds	r3, r1, r3
 8005958:	3308      	adds	r3, #8
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	0018      	movs	r0, r3
 800595e:	f003 fb55 	bl	800900c <HAL_TIM_MspPostInit>
    if ( HAL_TIM_PWM_Start(DIG_HandleStruct[Ch].Handle, DIG_HandleStruct[Ch].TIM_Channel) != HAL_OK ) {
 8005962:	4949      	ldr	r1, [pc, #292]	; (8005a88 <DIG_Init+0xbcc>)
 8005964:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005966:	0013      	movs	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	189b      	adds	r3, r3, r2
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	18cb      	adds	r3, r1, r3
 8005970:	3308      	adds	r3, #8
 8005972:	681c      	ldr	r4, [r3, #0]
 8005974:	4944      	ldr	r1, [pc, #272]	; (8005a88 <DIG_Init+0xbcc>)
 8005976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005978:	2040      	movs	r0, #64	; 0x40
 800597a:	0013      	movs	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	189b      	adds	r3, r3, r2
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	18cb      	adds	r3, r1, r3
 8005984:	181b      	adds	r3, r3, r0
 8005986:	2200      	movs	r2, #0
 8005988:	5e9b      	ldrsh	r3, [r3, r2]
 800598a:	0019      	movs	r1, r3
 800598c:	0020      	movs	r0, r4
 800598e:	f7fd ff7f 	bl	8003890 <HAL_TIM_PWM_Start>
 8005992:	1e03      	subs	r3, r0, #0
 8005994:	d002      	beq.n	800599c <DIG_Init+0xae0>
      return -1;
 8005996:	2301      	movs	r3, #1
 8005998:	425b      	negs	r3, r3
 800599a:	e206      	b.n	8005daa <DIG_Init+0xeee>
    }
    DIG_HandleStruct[Ch].bTimerUsed = 1;
 800599c:	493a      	ldr	r1, [pc, #232]	; (8005a88 <DIG_Init+0xbcc>)
 800599e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059a0:	2042      	movs	r0, #66	; 0x42
 80059a2:	0013      	movs	r3, r2
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	189b      	adds	r3, r3, r2
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	18cb      	adds	r3, r1, r3
 80059ac:	181b      	adds	r3, r3, r0
 80059ae:	2201      	movs	r2, #1
 80059b0:	801a      	strh	r2, [r3, #0]
    return 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e1f9      	b.n	8005daa <DIG_Init+0xeee>

  case DIG_PWM_OUT:
    //
    // Freq must be > 0 and less than 200KHz
    //
    if ( (DIG_HandleStruct[Ch].DIG_InitStruct.Frequency <= 0) || (DIG_HandleStruct[Ch].DIG_InitStruct.Frequency > 20000000) ) {
 80059b6:	4934      	ldr	r1, [pc, #208]	; (8005a88 <DIG_Init+0xbcc>)
 80059b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ba:	0013      	movs	r3, r2
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	189b      	adds	r3, r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	585b      	ldr	r3, [r3, r1]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	dd09      	ble.n	80059dc <DIG_Init+0xb20>
 80059c8:	492f      	ldr	r1, [pc, #188]	; (8005a88 <DIG_Init+0xbcc>)
 80059ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059cc:	0013      	movs	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	189b      	adds	r3, r3, r2
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	585b      	ldr	r3, [r3, r1]
 80059d6:	4a2d      	ldr	r2, [pc, #180]	; (8005a8c <DIG_Init+0xbd0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	dd02      	ble.n	80059e2 <DIG_Init+0xb26>
      return -1;
 80059dc:	2301      	movs	r3, #1
 80059de:	425b      	negs	r3, r3
 80059e0:	e1e3      	b.n	8005daa <DIG_Init+0xeee>
    }
    switch ( Ch ) {
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e4:	2b05      	cmp	r3, #5
 80059e6:	d868      	bhi.n	8005aba <DIG_Init+0xbfe>
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	009a      	lsls	r2, r3, #2
 80059ec:	4b2a      	ldr	r3, [pc, #168]	; (8005a98 <DIG_Init+0xbdc>)
 80059ee:	18d3      	adds	r3, r2, r3
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	469f      	mov	pc, r3
    case 0:
      __HAL_RCC_TIM15_CLK_ENABLE();
 80059f4:	4b23      	ldr	r3, [pc, #140]	; (8005a84 <DIG_Init+0xbc8>)
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	4b22      	ldr	r3, [pc, #136]	; (8005a84 <DIG_Init+0xbc8>)
 80059fa:	2180      	movs	r1, #128	; 0x80
 80059fc:	0249      	lsls	r1, r1, #9
 80059fe:	430a      	orrs	r2, r1
 8005a00:	619a      	str	r2, [r3, #24]
 8005a02:	4b20      	ldr	r3, [pc, #128]	; (8005a84 <DIG_Init+0xbc8>)
 8005a04:	699a      	ldr	r2, [r3, #24]
 8005a06:	2380      	movs	r3, #128	; 0x80
 8005a08:	025b      	lsls	r3, r3, #9
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
      break;
 8005a10:	e053      	b.n	8005aba <DIG_Init+0xbfe>
    case 1:
      __HAL_RCC_TIM16_CLK_ENABLE();
 8005a12:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <DIG_Init+0xbc8>)
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <DIG_Init+0xbc8>)
 8005a18:	2180      	movs	r1, #128	; 0x80
 8005a1a:	0289      	lsls	r1, r1, #10
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	619a      	str	r2, [r3, #24]
 8005a20:	4b18      	ldr	r3, [pc, #96]	; (8005a84 <DIG_Init+0xbc8>)
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	2380      	movs	r3, #128	; 0x80
 8005a26:	029b      	lsls	r3, r3, #10
 8005a28:	4013      	ands	r3, r2
 8005a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
      break;
 8005a2e:	e044      	b.n	8005aba <DIG_Init+0xbfe>
    case 2:
      __HAL_RCC_TIM17_CLK_ENABLE();
 8005a30:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <DIG_Init+0xbc8>)
 8005a32:	699a      	ldr	r2, [r3, #24]
 8005a34:	4b13      	ldr	r3, [pc, #76]	; (8005a84 <DIG_Init+0xbc8>)
 8005a36:	2180      	movs	r1, #128	; 0x80
 8005a38:	02c9      	lsls	r1, r1, #11
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	619a      	str	r2, [r3, #24]
 8005a3e:	4b11      	ldr	r3, [pc, #68]	; (8005a84 <DIG_Init+0xbc8>)
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	2380      	movs	r3, #128	; 0x80
 8005a44:	02db      	lsls	r3, r3, #11
 8005a46:	4013      	ands	r3, r2
 8005a48:	647b      	str	r3, [r7, #68]	; 0x44
 8005a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
      break;
 8005a4c:	e035      	b.n	8005aba <DIG_Init+0xbfe>
    case 3:
      __HAL_RCC_TIM3_CLK_ENABLE();
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <DIG_Init+0xbc8>)
 8005a50:	69da      	ldr	r2, [r3, #28]
 8005a52:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <DIG_Init+0xbc8>)
 8005a54:	2102      	movs	r1, #2
 8005a56:	430a      	orrs	r2, r1
 8005a58:	61da      	str	r2, [r3, #28]
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <DIG_Init+0xbc8>)
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	4013      	ands	r3, r2
 8005a62:	643b      	str	r3, [r7, #64]	; 0x40
 8005a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
      break;
 8005a66:	e028      	b.n	8005aba <DIG_Init+0xbfe>
    case 4:
      __HAL_RCC_TIM2_CLK_ENABLE();
 8005a68:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <DIG_Init+0xbc8>)
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <DIG_Init+0xbc8>)
 8005a6e:	2101      	movs	r1, #1
 8005a70:	430a      	orrs	r2, r1
 8005a72:	61da      	str	r2, [r3, #28]
 8005a74:	4b03      	ldr	r3, [pc, #12]	; (8005a84 <DIG_Init+0xbc8>)
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      break;
 8005a80:	e01b      	b.n	8005aba <DIG_Init+0xbfe>
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	40021000 	.word	0x40021000
 8005a88:	20001f14 	.word	0x20001f14
 8005a8c:	01312d00 	.word	0x01312d00
 8005a90:	8f0d1800 	.word	0x8f0d1800
 8005a94:	0000fde8 	.word	0x0000fde8
 8005a98:	08009cac 	.word	0x08009cac
    case 5:
      __HAL_RCC_TIM1_CLK_ENABLE();
 8005a9c:	4bc5      	ldr	r3, [pc, #788]	; (8005db4 <DIG_Init+0xef8>)
 8005a9e:	699a      	ldr	r2, [r3, #24]
 8005aa0:	4bc4      	ldr	r3, [pc, #784]	; (8005db4 <DIG_Init+0xef8>)
 8005aa2:	2180      	movs	r1, #128	; 0x80
 8005aa4:	0109      	lsls	r1, r1, #4
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	619a      	str	r2, [r3, #24]
 8005aaa:	4bc2      	ldr	r3, [pc, #776]	; (8005db4 <DIG_Init+0xef8>)
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	2380      	movs	r3, #128	; 0x80
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      break;
 8005ab8:	46c0      	nop			; (mov r8, r8)
    }

    MinPeriod = 4800000000 / DIG_HandleStruct[Ch].DIG_InitStruct.Frequency;
 8005aba:	49bf      	ldr	r1, [pc, #764]	; (8005db8 <DIG_Init+0xefc>)
 8005abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005abe:	0013      	movs	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	189b      	adds	r3, r3, r2
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	585b      	ldr	r3, [r3, r1]
 8005ac8:	60bb      	str	r3, [r7, #8]
 8005aca:	17db      	asrs	r3, r3, #31
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	48ba      	ldr	r0, [pc, #744]	; (8005dbc <DIG_Init+0xf00>)
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	f7fa fcf1 	bl	80004bc <__aeabi_ldivmod>
 8005ada:	0003      	movs	r3, r0
 8005adc:	000c      	movs	r4, r1
 8005ade:	229c      	movs	r2, #156	; 0x9c
 8005ae0:	18b9      	adds	r1, r7, r2
 8005ae2:	600b      	str	r3, [r1, #0]
    DIG_HandleStruct[Ch].Prescaler = MinPeriod / 65000;
 8005ae4:	18bb      	adds	r3, r7, r2
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	49b5      	ldr	r1, [pc, #724]	; (8005dc0 <DIG_Init+0xf04>)
 8005aea:	0018      	movs	r0, r3
 8005aec:	f7fa fbfa 	bl	80002e4 <__divsi3>
 8005af0:	0003      	movs	r3, r0
 8005af2:	0018      	movs	r0, r3
 8005af4:	49b0      	ldr	r1, [pc, #704]	; (8005db8 <DIG_Init+0xefc>)
 8005af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005af8:	0013      	movs	r3, r2
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	189b      	adds	r3, r3, r2
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	18cb      	adds	r3, r1, r3
 8005b02:	3314      	adds	r3, #20
 8005b04:	6018      	str	r0, [r3, #0]
    DIG_HandleStruct[Ch].Period = (4800000000 / (DIG_HandleStruct[Ch].Prescaler + 1)) / DIG_HandleStruct[Ch].DIG_InitStruct.Frequency;
 8005b06:	49ac      	ldr	r1, [pc, #688]	; (8005db8 <DIG_Init+0xefc>)
 8005b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b0a:	0013      	movs	r3, r2
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	189b      	adds	r3, r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	18cb      	adds	r3, r1, r3
 8005b14:	3314      	adds	r3, #20
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	001d      	movs	r5, r3
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	001e      	movs	r6, r3
 8005b20:	002a      	movs	r2, r5
 8005b22:	0033      	movs	r3, r6
 8005b24:	48a5      	ldr	r0, [pc, #660]	; (8005dbc <DIG_Init+0xf00>)
 8005b26:	2101      	movs	r1, #1
 8005b28:	f7fa fcc8 	bl	80004bc <__aeabi_ldivmod>
 8005b2c:	0003      	movs	r3, r0
 8005b2e:	000c      	movs	r4, r1
 8005b30:	0025      	movs	r5, r4
 8005b32:	001c      	movs	r4, r3
 8005b34:	49a0      	ldr	r1, [pc, #640]	; (8005db8 <DIG_Init+0xefc>)
 8005b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b38:	0013      	movs	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	189b      	adds	r3, r3, r2
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	585b      	ldr	r3, [r3, r1]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	17db      	asrs	r3, r3, #31
 8005b46:	607b      	str	r3, [r7, #4]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	0020      	movs	r0, r4
 8005b4e:	0029      	movs	r1, r5
 8005b50:	f7fa fcb4 	bl	80004bc <__aeabi_ldivmod>
 8005b54:	0003      	movs	r3, r0
 8005b56:	000c      	movs	r4, r1
 8005b58:	0018      	movs	r0, r3
 8005b5a:	4997      	ldr	r1, [pc, #604]	; (8005db8 <DIG_Init+0xefc>)
 8005b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b5e:	0013      	movs	r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	189b      	adds	r3, r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	18cb      	adds	r3, r1, r3
 8005b68:	3318      	adds	r3, #24
 8005b6a:	6018      	str	r0, [r3, #0]
    DIG_HandleStruct[Ch].Pulse = (DIG_HandleStruct[Ch].Period * DIG_HandleStruct[Ch].DIG_InitStruct.DutyCycle) / 10000;
 8005b6c:	4992      	ldr	r1, [pc, #584]	; (8005db8 <DIG_Init+0xefc>)
 8005b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b70:	0013      	movs	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	189b      	adds	r3, r3, r2
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	18cb      	adds	r3, r1, r3
 8005b7a:	3318      	adds	r3, #24
 8005b7c:	6819      	ldr	r1, [r3, #0]
 8005b7e:	488e      	ldr	r0, [pc, #568]	; (8005db8 <DIG_Init+0xefc>)
 8005b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b82:	0013      	movs	r3, r2
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	189b      	adds	r3, r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	18c3      	adds	r3, r0, r3
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	2200      	movs	r2, #0
 8005b90:	5e9b      	ldrsh	r3, [r3, r2]
 8005b92:	434b      	muls	r3, r1
 8005b94:	498b      	ldr	r1, [pc, #556]	; (8005dc4 <DIG_Init+0xf08>)
 8005b96:	0018      	movs	r0, r3
 8005b98:	f7fa fb1a 	bl	80001d0 <__udivsi3>
 8005b9c:	0003      	movs	r3, r0
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	4985      	ldr	r1, [pc, #532]	; (8005db8 <DIG_Init+0xefc>)
 8005ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ba4:	0013      	movs	r3, r2
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	189b      	adds	r3, r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	18cb      	adds	r3, r1, r3
 8005bae:	331c      	adds	r3, #28
 8005bb0:	6018      	str	r0, [r3, #0]
    //
    // Set Buffer Direction to Output
    //
    HAL_GPIO_WritePin(DIG_HandleStruct[Ch].Dir_Port, DIG_HandleStruct[Ch].Dir_Pin, GPIO_PIN_SET);
 8005bb2:	4981      	ldr	r1, [pc, #516]	; (8005db8 <DIG_Init+0xefc>)
 8005bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb6:	0013      	movs	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	189b      	adds	r3, r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	18cb      	adds	r3, r1, r3
 8005bc0:	330c      	adds	r3, #12
 8005bc2:	6818      	ldr	r0, [r3, #0]
 8005bc4:	497c      	ldr	r1, [pc, #496]	; (8005db8 <DIG_Init+0xefc>)
 8005bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bc8:	0013      	movs	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	189b      	adds	r3, r3, r2
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	18cb      	adds	r3, r1, r3
 8005bd2:	333c      	adds	r3, #60	; 0x3c
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	5e9b      	ldrsh	r3, [r3, r2]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2201      	movs	r2, #1
 8005bdc:	0019      	movs	r1, r3
 8005bde:	f7fb fcaa 	bl	8001536 <HAL_GPIO_WritePin>
    //
    // Initialize Timer Base
    //
    DIG_HandleStruct[Ch].Handle->Init.Prescaler = DIG_HandleStruct[Ch].Prescaler;
 8005be2:	4975      	ldr	r1, [pc, #468]	; (8005db8 <DIG_Init+0xefc>)
 8005be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005be6:	0013      	movs	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	189b      	adds	r3, r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	18cb      	adds	r3, r1, r3
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	4870      	ldr	r0, [pc, #448]	; (8005db8 <DIG_Init+0xefc>)
 8005bf6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bf8:	000b      	movs	r3, r1
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	185b      	adds	r3, r3, r1
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	18c3      	adds	r3, r0, r3
 8005c02:	3314      	adds	r3, #20
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6053      	str	r3, [r2, #4]
    DIG_HandleStruct[Ch].Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c08:	496b      	ldr	r1, [pc, #428]	; (8005db8 <DIG_Init+0xefc>)
 8005c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c0c:	0013      	movs	r3, r2
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	189b      	adds	r3, r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	18cb      	adds	r3, r1, r3
 8005c16:	3308      	adds	r3, #8
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	609a      	str	r2, [r3, #8]
    DIG_HandleStruct[Ch].Handle->Init.Period = DIG_HandleStruct[Ch].Period - 1;
 8005c1e:	4966      	ldr	r1, [pc, #408]	; (8005db8 <DIG_Init+0xefc>)
 8005c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c22:	0013      	movs	r3, r2
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	189b      	adds	r3, r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	18cb      	adds	r3, r1, r3
 8005c2c:	3318      	adds	r3, #24
 8005c2e:	6819      	ldr	r1, [r3, #0]
 8005c30:	4861      	ldr	r0, [pc, #388]	; (8005db8 <DIG_Init+0xefc>)
 8005c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c34:	0013      	movs	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	189b      	adds	r3, r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	18c3      	adds	r3, r0, r3
 8005c3e:	3308      	adds	r3, #8
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	1e4a      	subs	r2, r1, #1
 8005c44:	60da      	str	r2, [r3, #12]
    DIG_HandleStruct[Ch].Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c46:	495c      	ldr	r1, [pc, #368]	; (8005db8 <DIG_Init+0xefc>)
 8005c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c4a:	0013      	movs	r3, r2
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	189b      	adds	r3, r3, r2
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	18cb      	adds	r3, r1, r3
 8005c54:	3308      	adds	r3, #8
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	611a      	str	r2, [r3, #16]
    DIG_HandleStruct[Ch].Handle->Init.RepetitionCounter = 0;
 8005c5c:	4956      	ldr	r1, [pc, #344]	; (8005db8 <DIG_Init+0xefc>)
 8005c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c60:	0013      	movs	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	189b      	adds	r3, r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	18cb      	adds	r3, r1, r3
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	615a      	str	r2, [r3, #20]
    DIG_HandleStruct[Ch].Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c72:	4951      	ldr	r1, [pc, #324]	; (8005db8 <DIG_Init+0xefc>)
 8005c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c76:	0013      	movs	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	18cb      	adds	r3, r1, r3
 8005c80:	3308      	adds	r3, #8
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2200      	movs	r2, #0
 8005c86:	619a      	str	r2, [r3, #24]
    if ( HAL_TIM_Base_Init(DIG_HandleStruct[Ch].Handle) != HAL_OK ) {
 8005c88:	494b      	ldr	r1, [pc, #300]	; (8005db8 <DIG_Init+0xefc>)
 8005c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c8c:	0013      	movs	r3, r2
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	189b      	adds	r3, r3, r2
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	18cb      	adds	r3, r1, r3
 8005c96:	3308      	adds	r3, #8
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f7fd fdb2 	bl	8003804 <HAL_TIM_Base_Init>
 8005ca0:	1e03      	subs	r3, r0, #0
 8005ca2:	d002      	beq.n	8005caa <DIG_Init+0xdee>
      return -1;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	425b      	negs	r3, r3
 8005ca8:	e07f      	b.n	8005daa <DIG_Init+0xeee>
    }
    //
    // Initialize Timer Channel
    //
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005caa:	2040      	movs	r0, #64	; 0x40
 8005cac:	2428      	movs	r4, #40	; 0x28
 8005cae:	193b      	adds	r3, r7, r4
 8005cb0:	181b      	adds	r3, r3, r0
 8005cb2:	2260      	movs	r2, #96	; 0x60
 8005cb4:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = DIG_HandleStruct[Ch].Pulse;
 8005cb6:	4940      	ldr	r1, [pc, #256]	; (8005db8 <DIG_Init+0xefc>)
 8005cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cba:	0013      	movs	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	189b      	adds	r3, r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	18cb      	adds	r3, r1, r3
 8005cc4:	331c      	adds	r3, #28
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	0005      	movs	r5, r0
 8005cca:	0026      	movs	r6, r4
 8005ccc:	19bb      	adds	r3, r7, r6
 8005cce:	195b      	adds	r3, r3, r5
 8005cd0:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cd2:	19bb      	adds	r3, r7, r6
 8005cd4:	195b      	adds	r3, r3, r5
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	609a      	str	r2, [r3, #8]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005cda:	19bb      	adds	r3, r7, r6
 8005cdc:	195b      	adds	r3, r3, r5
 8005cde:	2200      	movs	r2, #0
 8005ce0:	60da      	str	r2, [r3, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ce2:	19bb      	adds	r3, r7, r6
 8005ce4:	195b      	adds	r3, r3, r5
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	611a      	str	r2, [r3, #16]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005cea:	19bb      	adds	r3, r7, r6
 8005cec:	195b      	adds	r3, r3, r5
 8005cee:	2200      	movs	r2, #0
 8005cf0:	615a      	str	r2, [r3, #20]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005cf2:	19bb      	adds	r3, r7, r6
 8005cf4:	195b      	adds	r3, r3, r5
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	619a      	str	r2, [r3, #24]
    if ( HAL_TIM_PWM_ConfigChannel(DIG_HandleStruct[Ch].Handle, &sConfigOC, DIG_HandleStruct[Ch].TIM_Channel) != HAL_OK ) {
 8005cfa:	492f      	ldr	r1, [pc, #188]	; (8005db8 <DIG_Init+0xefc>)
 8005cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cfe:	0013      	movs	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	189b      	adds	r3, r3, r2
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	18cb      	adds	r3, r1, r3
 8005d08:	3308      	adds	r3, #8
 8005d0a:	681c      	ldr	r4, [r3, #0]
 8005d0c:	492a      	ldr	r1, [pc, #168]	; (8005db8 <DIG_Init+0xefc>)
 8005d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d10:	2040      	movs	r0, #64	; 0x40
 8005d12:	0013      	movs	r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	189b      	adds	r3, r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	18cb      	adds	r3, r1, r3
 8005d1c:	181b      	adds	r3, r3, r0
 8005d1e:	2200      	movs	r2, #0
 8005d20:	5e9b      	ldrsh	r3, [r3, r2]
 8005d22:	001a      	movs	r2, r3
 8005d24:	19bb      	adds	r3, r7, r6
 8005d26:	195b      	adds	r3, r3, r5
 8005d28:	0019      	movs	r1, r3
 8005d2a:	0020      	movs	r0, r4
 8005d2c:	f7fd fdf4 	bl	8003918 <HAL_TIM_PWM_ConfigChannel>
 8005d30:	1e03      	subs	r3, r0, #0
 8005d32:	d002      	beq.n	8005d3a <DIG_Init+0xe7e>
      return -1;
 8005d34:	2301      	movs	r3, #1
 8005d36:	425b      	negs	r3, r3
 8005d38:	e037      	b.n	8005daa <DIG_Init+0xeee>
    }
    HAL_TIM_MspPostInit(DIG_HandleStruct[Ch].Handle);
 8005d3a:	491f      	ldr	r1, [pc, #124]	; (8005db8 <DIG_Init+0xefc>)
 8005d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d3e:	0013      	movs	r3, r2
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	189b      	adds	r3, r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	18cb      	adds	r3, r1, r3
 8005d48:	3308      	adds	r3, #8
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f003 f95d 	bl	800900c <HAL_TIM_MspPostInit>
    if ( HAL_TIM_PWM_Start(DIG_HandleStruct[Ch].Handle, DIG_HandleStruct[Ch].TIM_Channel) != HAL_OK ) {
 8005d52:	4919      	ldr	r1, [pc, #100]	; (8005db8 <DIG_Init+0xefc>)
 8005d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d56:	0013      	movs	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	189b      	adds	r3, r3, r2
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	18cb      	adds	r3, r1, r3
 8005d60:	3308      	adds	r3, #8
 8005d62:	681c      	ldr	r4, [r3, #0]
 8005d64:	4914      	ldr	r1, [pc, #80]	; (8005db8 <DIG_Init+0xefc>)
 8005d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d68:	2040      	movs	r0, #64	; 0x40
 8005d6a:	0013      	movs	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	189b      	adds	r3, r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	18cb      	adds	r3, r1, r3
 8005d74:	181b      	adds	r3, r3, r0
 8005d76:	2200      	movs	r2, #0
 8005d78:	5e9b      	ldrsh	r3, [r3, r2]
 8005d7a:	0019      	movs	r1, r3
 8005d7c:	0020      	movs	r0, r4
 8005d7e:	f7fd fd87 	bl	8003890 <HAL_TIM_PWM_Start>
 8005d82:	1e03      	subs	r3, r0, #0
 8005d84:	d002      	beq.n	8005d8c <DIG_Init+0xed0>
      return -1;
 8005d86:	2301      	movs	r3, #1
 8005d88:	425b      	negs	r3, r3
 8005d8a:	e00e      	b.n	8005daa <DIG_Init+0xeee>
    }
    DIG_HandleStruct[Ch].bTimerUsed = 1;
 8005d8c:	490a      	ldr	r1, [pc, #40]	; (8005db8 <DIG_Init+0xefc>)
 8005d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d90:	2042      	movs	r0, #66	; 0x42
 8005d92:	0013      	movs	r3, r2
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	189b      	adds	r3, r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	18cb      	adds	r3, r1, r3
 8005d9c:	181b      	adds	r3, r3, r0
 8005d9e:	2201      	movs	r2, #1
 8005da0:	801a      	strh	r2, [r3, #0]
    return 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	e001      	b.n	8005daa <DIG_Init+0xeee>
    break;

  default:
    return -1;
 8005da6:	2301      	movs	r3, #1
 8005da8:	425b      	negs	r3, r3
  }
}
 8005daa:	0018      	movs	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	b029      	add	sp, #164	; 0xa4
 8005db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db2:	46c0      	nop			; (mov r8, r8)
 8005db4:	40021000 	.word	0x40021000
 8005db8:	20001f14 	.word	0x20001f14
 8005dbc:	1e1a3000 	.word	0x1e1a3000
 8005dc0:	0000fde8 	.word	0x0000fde8
 8005dc4:	00002710 	.word	0x00002710

08005dc8 <DIG_SetPin>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
int32_t DIG_SetPin(int32_t Ch) {
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]

  if ( DIG_HandleStruct[Ch].DIG_InitStruct.Mode != DIG_OUT ) {           // Function is only valid if Channel is set to DIG_OUT
 8005dd0:	4915      	ldr	r1, [pc, #84]	; (8005e28 <DIG_SetPin+0x60>)
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	0013      	movs	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	189b      	adds	r3, r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	18cb      	adds	r3, r1, r3
 8005dde:	3306      	adds	r3, #6
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d002      	beq.n	8005dec <DIG_SetPin+0x24>
    return -1;
 8005de6:	2301      	movs	r3, #1
 8005de8:	425b      	negs	r3, r3
 8005dea:	e018      	b.n	8005e1e <DIG_SetPin+0x56>
  }
  HAL_GPIO_WritePin(DIG_HandleStruct[Ch].Dig_IO_Port, DIG_HandleStruct[Ch].Dig_IO_Pin, GPIO_PIN_SET);
 8005dec:	490e      	ldr	r1, [pc, #56]	; (8005e28 <DIG_SetPin+0x60>)
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	0013      	movs	r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	189b      	adds	r3, r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	18cb      	adds	r3, r1, r3
 8005dfa:	3310      	adds	r3, #16
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	490a      	ldr	r1, [pc, #40]	; (8005e28 <DIG_SetPin+0x60>)
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	0013      	movs	r3, r2
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	189b      	adds	r3, r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	18cb      	adds	r3, r1, r3
 8005e0c:	333e      	adds	r3, #62	; 0x3e
 8005e0e:	2200      	movs	r2, #0
 8005e10:	5e9b      	ldrsh	r3, [r3, r2]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2201      	movs	r2, #1
 8005e16:	0019      	movs	r1, r3
 8005e18:	f7fb fb8d 	bl	8001536 <HAL_GPIO_WritePin>
  return 0;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	0018      	movs	r0, r3
 8005e20:	46bd      	mov	sp, r7
 8005e22:	b002      	add	sp, #8
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	20001f14 	.word	0x20001f14

08005e2c <DIG_ResetPin>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
int32_t DIG_ResetPin(int32_t Ch) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]

  if ( DIG_HandleStruct[Ch].DIG_InitStruct.Mode != DIG_OUT ) {           // Function is only valid if Channel is set to DIG_OUT
 8005e34:	4915      	ldr	r1, [pc, #84]	; (8005e8c <DIG_ResetPin+0x60>)
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	0013      	movs	r3, r2
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	189b      	adds	r3, r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	18cb      	adds	r3, r1, r3
 8005e42:	3306      	adds	r3, #6
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d002      	beq.n	8005e50 <DIG_ResetPin+0x24>
    return -1;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	425b      	negs	r3, r3
 8005e4e:	e018      	b.n	8005e82 <DIG_ResetPin+0x56>
  }
  HAL_GPIO_WritePin(DIG_HandleStruct[Ch].Dig_IO_Port, DIG_HandleStruct[Ch].Dig_IO_Pin, GPIO_PIN_RESET);
 8005e50:	490e      	ldr	r1, [pc, #56]	; (8005e8c <DIG_ResetPin+0x60>)
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	0013      	movs	r3, r2
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	189b      	adds	r3, r3, r2
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	18cb      	adds	r3, r1, r3
 8005e5e:	3310      	adds	r3, #16
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	490a      	ldr	r1, [pc, #40]	; (8005e8c <DIG_ResetPin+0x60>)
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	0013      	movs	r3, r2
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	18cb      	adds	r3, r1, r3
 8005e70:	333e      	adds	r3, #62	; 0x3e
 8005e72:	2200      	movs	r2, #0
 8005e74:	5e9b      	ldrsh	r3, [r3, r2]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2200      	movs	r2, #0
 8005e7a:	0019      	movs	r1, r3
 8005e7c:	f7fb fb5b 	bl	8001536 <HAL_GPIO_WritePin>
  return 0;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	0018      	movs	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b002      	add	sp, #8
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	20001f14 	.word	0x20001f14

08005e90 <DIG_ReadPin>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
int32_t DIG_ReadPin(int32_t Ch) {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]

  return HAL_GPIO_ReadPin(DIG_HandleStruct[Ch].Dig_IO_Port, DIG_HandleStruct[Ch].Dig_IO_Pin);
 8005e98:	490d      	ldr	r1, [pc, #52]	; (8005ed0 <DIG_ReadPin+0x40>)
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	0013      	movs	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	189b      	adds	r3, r3, r2
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	18cb      	adds	r3, r1, r3
 8005ea6:	3310      	adds	r3, #16
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	4909      	ldr	r1, [pc, #36]	; (8005ed0 <DIG_ReadPin+0x40>)
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	0013      	movs	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	189b      	adds	r3, r3, r2
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	18cb      	adds	r3, r1, r3
 8005eb8:	333e      	adds	r3, #62	; 0x3e
 8005eba:	2200      	movs	r2, #0
 8005ebc:	5e9b      	ldrsh	r3, [r3, r2]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	0019      	movs	r1, r3
 8005ec2:	f7fb fb1b 	bl	80014fc <HAL_GPIO_ReadPin>
 8005ec6:	0003      	movs	r3, r0
}
 8005ec8:	0018      	movs	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	b002      	add	sp, #8
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20001f14 	.word	0x20001f14

08005ed4 <InitializeDigitalIO>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
void InitializeDigitalIO(int8_t Mode) {
 8005ed4:	b590      	push	{r4, r7, lr}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	0002      	movs	r2, r0
 8005edc:	1dfb      	adds	r3, r7, #7
 8005ede:	701a      	strb	r2, [r3, #0]

    DIG_InitTypeDef   DIG_InitStruct;

  DIG_InitStruct.Mode = DIG_IN;
 8005ee0:	2108      	movs	r1, #8
 8005ee2:	187b      	adds	r3, r7, r1
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	719a      	strb	r2, [r3, #6]
  DIG_Init(0, DIG_InitStruct);
 8005ee8:	000c      	movs	r4, r1
 8005eea:	193b      	adds	r3, r7, r4
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	f7fe ffe3 	bl	8004ebc <DIG_Init>
  DIG_Init(1, DIG_InitStruct);
 8005ef6:	193b      	adds	r3, r7, r4
 8005ef8:	6819      	ldr	r1, [r3, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	2001      	movs	r0, #1
 8005efe:	f7fe ffdd 	bl	8004ebc <DIG_Init>
  DIG_Init(2, DIG_InitStruct);
 8005f02:	193b      	adds	r3, r7, r4
 8005f04:	6819      	ldr	r1, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	2002      	movs	r0, #2
 8005f0a:	f7fe ffd7 	bl	8004ebc <DIG_Init>
  DIG_Init(3, DIG_InitStruct);
 8005f0e:	193b      	adds	r3, r7, r4
 8005f10:	6819      	ldr	r1, [r3, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	2003      	movs	r0, #3
 8005f16:	f7fe ffd1 	bl	8004ebc <DIG_Init>
  DIG_Init(4, DIG_InitStruct);
 8005f1a:	193b      	adds	r3, r7, r4
 8005f1c:	6819      	ldr	r1, [r3, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	2004      	movs	r0, #4
 8005f22:	f7fe ffcb 	bl	8004ebc <DIG_Init>
  DIG_Init(5, DIG_InitStruct);
 8005f26:	193b      	adds	r3, r7, r4
 8005f28:	6819      	ldr	r1, [r3, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	2005      	movs	r0, #5
 8005f2e:	f7fe ffc5 	bl	8004ebc <DIG_Init>

}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	46bd      	mov	sp, r7
 8005f36:	b005      	add	sp, #20
 8005f38:	bd90      	pop	{r4, r7, pc}
	...

08005f3c <Error_Handler>:
//********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
void Error_Handler(void) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0

  while ( 1 ) {
    HAL_GPIO_TogglePin( EXT_PULLUP_GPIO_Port, EXT_PULLUP_Pin);
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	015b      	lsls	r3, r3, #5
 8005f44:	4a04      	ldr	r2, [pc, #16]	; (8005f58 <Error_Handler+0x1c>)
 8005f46:	0019      	movs	r1, r3
 8005f48:	0010      	movs	r0, r2
 8005f4a:	f7fb fb11 	bl	8001570 <HAL_GPIO_TogglePin>
    HAL_Delay(5);
 8005f4e:	2005      	movs	r0, #5
 8005f50:	f7fa fc66 	bl	8000820 <HAL_Delay>
    HAL_GPIO_TogglePin( EXT_PULLUP_GPIO_Port, EXT_PULLUP_Pin);
 8005f54:	e7f4      	b.n	8005f40 <Error_Handler+0x4>
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	48000400 	.word	0x48000400

08005f5c <ClearDUTData>:
static uint16_t     EEPROM_Address;
//
// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
void ClearDUTData (void) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
    EEPROM_Address  = 0;
 8005f60:	4b1f      	ldr	r3, [pc, #124]	; (8005fe0 <ClearDUTData+0x84>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	801a      	strh	r2, [r3, #0]
    SysVarsCC.DUT_Master_Period  = 0;
 8005f66:	4b1f      	ldr	r3, [pc, #124]	; (8005fe4 <ClearDUTData+0x88>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	609a      	str	r2, [r3, #8]
    SysVarsCC.DUT_EEPROM_Config  = 0;
 8005f6c:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <ClearDUTData+0x88>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	645a      	str	r2, [r3, #68]	; 0x44
    SysVarsCC.DUT_Slave_Period[0]  = 0;
 8005f72:	4b1c      	ldr	r3, [pc, #112]	; (8005fe4 <ClearDUTData+0x88>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	611a      	str	r2, [r3, #16]
    SysVarsCC.DUT_Slave_Period[1]  = 0;
 8005f78:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <ClearDUTData+0x88>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	615a      	str	r2, [r3, #20]
    SysVarsCC.DUT_Slave_Period[2]  = 0;
 8005f7e:	4b19      	ldr	r3, [pc, #100]	; (8005fe4 <ClearDUTData+0x88>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	619a      	str	r2, [r3, #24]
    SysVarsCC.DUT_Slave_Period[3]  = 0;
 8005f84:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <ClearDUTData+0x88>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	61da      	str	r2, [r3, #28]
    SysVarsCC.DUT_Setpoint  = 0;
 8005f8a:	4b16      	ldr	r3, [pc, #88]	; (8005fe4 <ClearDUTData+0x88>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	635a      	str	r2, [r3, #52]	; 0x34
    SysVarsCC.DUT_KMA_Period  = 0;
 8005f90:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <ClearDUTData+0x88>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	60da      	str	r2, [r3, #12]
    SysVarsCC.DUT_AD7814_Counts  = 0;
 8005f96:	4b13      	ldr	r3, [pc, #76]	; (8005fe4 <ClearDUTData+0x88>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	631a      	str	r2, [r3, #48]	; 0x30
    SysVarsCC.DUT_KMA_Counts  = 0;
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <ClearDUTData+0x88>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	625a      	str	r2, [r3, #36]	; 0x24
    SysVarsCC.DUT_RV_Volts_Counts  = 0;
 8005fa2:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <ClearDUTData+0x88>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	629a      	str	r2, [r3, #40]	; 0x28
    SysVarsCC.DUT_RV_Amps_Counts  = 0;
 8005fa8:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <ClearDUTData+0x88>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	62da      	str	r2, [r3, #44]	; 0x2c
    SysVarsCC.DUT_PWM_Counts  = 0;
 8005fae:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <ClearDUTData+0x88>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	63da      	str	r2, [r3, #60]	; 0x3c
    SysVarsCC.DUT_Master_Index  = 0;
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <ClearDUTData+0x88>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	621a      	str	r2, [r3, #32]
    SysVarsCC.DUT_Feedback  = 0;
 8005fba:	4b0a      	ldr	r3, [pc, #40]	; (8005fe4 <ClearDUTData+0x88>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38
    SysVarsCC.DUT_EEPROM_Address  = 0;
 8005fc0:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <ClearDUTData+0x88>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	649a      	str	r2, [r3, #72]	; 0x48
    SysVarsCC.DUT_FW_Version  = 0;
 8005fc6:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <ClearDUTData+0x88>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40
    SysVarsCC.DUT_Status = 0;
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <ClearDUTData+0x88>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	605a      	str	r2, [r3, #4]
    SysVarsCC.DUT_UpdateCounter = 0;
 8005fd2:	4b04      	ldr	r3, [pc, #16]	; (8005fe4 <ClearDUTData+0x88>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]
}
 8005fd8:	46c0      	nop			; (mov r8, r8)
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	2000002a 	.word	0x2000002a
 8005fe4:	200028e0 	.word	0x200028e0

08005fe8 <ProcessFPGACommunications>:
// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
// This routine is called every 1mS
//
void ProcessFPGACommunications (void) {
 8005fe8:	b590      	push	{r4, r7, lr}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
    static uint8_t      State, UpdateDelayCounter, WaitDelay, AddressDelay, ManualDelay, CommCounter;
    static uint16_t     *AddressPtr, AddressIndex, EndAddressIndex;
    static uint16_t     NewConfigData[6];
    uint16_t            Crc16, i;

    if (SysPars.CommConfig != COMM_CC) {
 8005fee:	4bf4      	ldr	r3, [pc, #976]	; (80063c0 <ProcessFPGACommunications+0x3d8>)
 8005ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d003      	beq.n	8005ffe <ProcessFPGACommunications+0x16>
        ClearDUTData();
 8005ff6:	f7ff ffb1 	bl	8005f5c <ClearDUTData>
        return;
 8005ffa:	f000 fc29 	bl	8006850 <ProcessFPGACommunications+0x868>
    }
    if (SysPars.DigIO_Configuration[0] != DIG_SERIAL_IN) {
 8005ffe:	4bf0      	ldr	r3, [pc, #960]	; (80063c0 <ProcessFPGACommunications+0x3d8>)
 8006000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006002:	2b06      	cmp	r3, #6
 8006004:	d003      	beq.n	800600e <ProcessFPGACommunications+0x26>
        ClearDUTData();
 8006006:	f7ff ffa9 	bl	8005f5c <ClearDUTData>
        return;
 800600a:	f000 fc21 	bl	8006850 <ProcessFPGACommunications+0x868>
    }
    if (SysPars.DigIO_Configuration[1] != DIG_SERIAL_OUT) {
 800600e:	4bec      	ldr	r3, [pc, #944]	; (80063c0 <ProcessFPGACommunications+0x3d8>)
 8006010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006012:	2b07      	cmp	r3, #7
 8006014:	d003      	beq.n	800601e <ProcessFPGACommunications+0x36>
        ClearDUTData();
 8006016:	f7ff ffa1 	bl	8005f5c <ClearDUTData>
        return;
 800601a:	f000 fc19 	bl	8006850 <ProcessFPGACommunications+0x868>
    }
    if ((SysPars.EnableBits & ENABLE_POWER) == 0) {
 800601e:	4be8      	ldr	r3, [pc, #928]	; (80063c0 <ProcessFPGACommunications+0x3d8>)
 8006020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006022:	2201      	movs	r2, #1
 8006024:	4013      	ands	r3, r2
 8006026:	d103      	bne.n	8006030 <ProcessFPGACommunications+0x48>
        ClearDUTData();
 8006028:	f7ff ff98 	bl	8005f5c <ClearDUTData>
        return;
 800602c:	f000 fc10 	bl	8006850 <ProcessFPGACommunications+0x868>
    }
    SerialUsart2.ReceiveMode = 0;
 8006030:	4be4      	ldr	r3, [pc, #912]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006032:	2200      	movs	r2, #0
 8006034:	705a      	strb	r2, [r3, #1]
    //
    // As Rx2BufferIn is updated in an interrupt routine, we need to read it one time.  Otherwise, it could be updated after the first if statement below, and
    //  before the next one.
    //
    uint8_t BufferCount = SerialUsart2.TxRxBufferCount;
 8006036:	4be3      	ldr	r3, [pc, #908]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006038:	8a1a      	ldrh	r2, [r3, #16]
 800603a:	1d7b      	adds	r3, r7, #5
 800603c:	701a      	strb	r2, [r3, #0]

    CommCounter++;
 800603e:	4be2      	ldr	r3, [pc, #904]	; (80063c8 <ProcessFPGACommunications+0x3e0>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	3301      	adds	r3, #1
 8006044:	b2da      	uxtb	r2, r3
 8006046:	4be0      	ldr	r3, [pc, #896]	; (80063c8 <ProcessFPGACommunications+0x3e0>)
 8006048:	701a      	strb	r2, [r3, #0]
    if (BufferCount == 27) {
 800604a:	1d7b      	adds	r3, r7, #5
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b1b      	cmp	r3, #27
 8006050:	d000      	beq.n	8006054 <ProcessFPGACommunications+0x6c>
 8006052:	e1c3      	b.n	80063dc <ProcessFPGACommunications+0x3f4>
        CommCounter = 0;
 8006054:	4bdc      	ldr	r3, [pc, #880]	; (80063c8 <ProcessFPGACommunications+0x3e0>)
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
        EEPROM_Address  = ((SerialUsart2.TxRxBuffer[24] & 0x3) << 9) + (SerialUsart2.TxRxBuffer[23] << 1) + ((SerialUsart2.TxRxBuffer[22] >> 7) & 0x01);
 800605a:	4bda      	ldr	r3, [pc, #872]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	3318      	adds	r3, #24
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	025b      	lsls	r3, r3, #9
 8006064:	b29a      	uxth	r2, r3
 8006066:	23c0      	movs	r3, #192	; 0xc0
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	4013      	ands	r3, r2
 800606c:	b29a      	uxth	r2, r3
 800606e:	4bd5      	ldr	r3, [pc, #852]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	3317      	adds	r3, #23
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	18db      	adds	r3, r3, r3
 800607a:	b29b      	uxth	r3, r3
 800607c:	18d3      	adds	r3, r2, r3
 800607e:	b29a      	uxth	r2, r3
 8006080:	4bd0      	ldr	r3, [pc, #832]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	3316      	adds	r3, #22
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	09db      	lsrs	r3, r3, #7
 800608a:	b2db      	uxtb	r3, r3
 800608c:	b29b      	uxth	r3, r3
 800608e:	2101      	movs	r1, #1
 8006090:	400b      	ands	r3, r1
 8006092:	b29b      	uxth	r3, r3
 8006094:	18d3      	adds	r3, r2, r3
 8006096:	b29a      	uxth	r2, r3
 8006098:	4bcc      	ldr	r3, [pc, #816]	; (80063cc <ProcessFPGACommunications+0x3e4>)
 800609a:	801a      	strh	r2, [r3, #0]
        SysVarsCC.DUT_Master_Period  = ((SerialUsart2.TxRxBuffer[2] & 0x1F) << 8) + SerialUsart2.TxRxBuffer[1];
 800609c:	4bc9      	ldr	r3, [pc, #804]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	3302      	adds	r3, #2
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	021a      	lsls	r2, r3, #8
 80060a6:	23f8      	movs	r3, #248	; 0xf8
 80060a8:	015b      	lsls	r3, r3, #5
 80060aa:	401a      	ands	r2, r3
 80060ac:	4bc5      	ldr	r3, [pc, #788]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	3301      	adds	r3, #1
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	18d2      	adds	r2, r2, r3
 80060b6:	4bc6      	ldr	r3, [pc, #792]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 80060b8:	609a      	str	r2, [r3, #8]
        SysVarsCC.DUT_EEPROM_Config  = ((SerialUsart2.TxRxBuffer[4] & 0x1F) << 11) + (SerialUsart2.TxRxBuffer[3] << 3) + ((SerialUsart2.TxRxBuffer[2] >> 5) & 0x07);
 80060ba:	4bc2      	ldr	r3, [pc, #776]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	3304      	adds	r3, #4
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	02db      	lsls	r3, r3, #11
 80060c4:	041b      	lsls	r3, r3, #16
 80060c6:	0c1a      	lsrs	r2, r3, #16
 80060c8:	4bbe      	ldr	r3, [pc, #760]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	3303      	adds	r3, #3
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	18d2      	adds	r2, r2, r3
 80060d4:	4bbb      	ldr	r3, [pc, #748]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	3302      	adds	r3, #2
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	0019      	movs	r1, r3
 80060e2:	2307      	movs	r3, #7
 80060e4:	400b      	ands	r3, r1
 80060e6:	18d2      	adds	r2, r2, r3
 80060e8:	4bb9      	ldr	r3, [pc, #740]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 80060ea:	645a      	str	r2, [r3, #68]	; 0x44
        SysVarsCC.DUT_Slave_Period[0]  = ((SerialUsart2.TxRxBuffer[5] & 0x7F) << 3) + ((SerialUsart2.TxRxBuffer[4] >> 5) & 0x7);
 80060ec:	4bb5      	ldr	r3, [pc, #724]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	3305      	adds	r3, #5
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	00da      	lsls	r2, r3, #3
 80060f6:	23fe      	movs	r3, #254	; 0xfe
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	401a      	ands	r2, r3
 80060fc:	4bb1      	ldr	r3, [pc, #708]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	3304      	adds	r3, #4
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	095b      	lsrs	r3, r3, #5
 8006106:	b2db      	uxtb	r3, r3
 8006108:	0019      	movs	r1, r3
 800610a:	2307      	movs	r3, #7
 800610c:	400b      	ands	r3, r1
 800610e:	431a      	orrs	r2, r3
 8006110:	4baf      	ldr	r3, [pc, #700]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 8006112:	611a      	str	r2, [r3, #16]
        SysVarsCC.DUT_Slave_Period[1]  = ((SerialUsart2.TxRxBuffer[7] & 0x01) << 9) + (SerialUsart2.TxRxBuffer[6] << 1) + ((SerialUsart2.TxRxBuffer[5] >> 7) & 0x01);
 8006114:	4bab      	ldr	r3, [pc, #684]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	3307      	adds	r3, #7
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	025a      	lsls	r2, r3, #9
 800611e:	2380      	movs	r3, #128	; 0x80
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	401a      	ands	r2, r3
 8006124:	4ba7      	ldr	r3, [pc, #668]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	3306      	adds	r3, #6
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	18d2      	adds	r2, r2, r3
 8006130:	4ba4      	ldr	r3, [pc, #656]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	3305      	adds	r3, #5
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	09db      	lsrs	r3, r3, #7
 800613a:	b2db      	uxtb	r3, r3
 800613c:	0019      	movs	r1, r3
 800613e:	2301      	movs	r3, #1
 8006140:	400b      	ands	r3, r1
 8006142:	18d2      	adds	r2, r2, r3
 8006144:	4ba2      	ldr	r3, [pc, #648]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 8006146:	615a      	str	r2, [r3, #20]
        SysVarsCC.DUT_Slave_Period[2]  = ((SerialUsart2.TxRxBuffer[8] & 0x07) << 7) + ((SerialUsart2.TxRxBuffer[7] >> 1) & 0x7F);
 8006148:	4b9e      	ldr	r3, [pc, #632]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	3308      	adds	r3, #8
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	01da      	lsls	r2, r3, #7
 8006152:	23e0      	movs	r3, #224	; 0xe0
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	401a      	ands	r2, r3
 8006158:	4b9a      	ldr	r3, [pc, #616]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	3307      	adds	r3, #7
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	085b      	lsrs	r3, r3, #1
 8006162:	b2db      	uxtb	r3, r3
 8006164:	0019      	movs	r1, r3
 8006166:	237f      	movs	r3, #127	; 0x7f
 8006168:	400b      	ands	r3, r1
 800616a:	431a      	orrs	r2, r3
 800616c:	4b98      	ldr	r3, [pc, #608]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 800616e:	619a      	str	r2, [r3, #24]
        SysVarsCC.DUT_Slave_Period[3]  = ((SerialUsart2.TxRxBuffer[9] & 0x1F) << 5) + ((SerialUsart2.TxRxBuffer[8] >> 5) & 0x1F);
 8006170:	4b94      	ldr	r3, [pc, #592]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	3309      	adds	r3, #9
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	23f8      	movs	r3, #248	; 0xf8
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	401a      	ands	r2, r3
 8006180:	4b90      	ldr	r3, [pc, #576]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	3308      	adds	r3, #8
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	b2db      	uxtb	r3, r3
 800618c:	0019      	movs	r1, r3
 800618e:	231f      	movs	r3, #31
 8006190:	400b      	ands	r3, r1
 8006192:	431a      	orrs	r2, r3
 8006194:	4b8e      	ldr	r3, [pc, #568]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 8006196:	61da      	str	r2, [r3, #28]
        SysVarsCC.DUT_Setpoint  = ((SerialUsart2.TxRxBuffer[11] & 0x07) << 11) + (SerialUsart2.TxRxBuffer[10] << 3) + ((SerialUsart2.TxRxBuffer[9] >> 5) & 0x07);
 8006198:	4b8a      	ldr	r3, [pc, #552]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	330b      	adds	r3, #11
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	02da      	lsls	r2, r3, #11
 80061a2:	23e0      	movs	r3, #224	; 0xe0
 80061a4:	019b      	lsls	r3, r3, #6
 80061a6:	401a      	ands	r2, r3
 80061a8:	4b86      	ldr	r3, [pc, #536]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	330a      	adds	r3, #10
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	18d2      	adds	r2, r2, r3
 80061b4:	4b83      	ldr	r3, [pc, #524]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	3309      	adds	r3, #9
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	0019      	movs	r1, r3
 80061c2:	2307      	movs	r3, #7
 80061c4:	400b      	ands	r3, r1
 80061c6:	18d2      	adds	r2, r2, r3
 80061c8:	4b81      	ldr	r3, [pc, #516]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 80061ca:	635a      	str	r2, [r3, #52]	; 0x34
        SysVarsCC.DUT_KMA_Period  = ((SerialUsart2.TxRxBuffer[12] & 0x1F) << 5) + ((SerialUsart2.TxRxBuffer[11] >> 3) & 0x1F);
 80061cc:	4b7d      	ldr	r3, [pc, #500]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	330c      	adds	r3, #12
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	23f8      	movs	r3, #248	; 0xf8
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	401a      	ands	r2, r3
 80061dc:	4b79      	ldr	r3, [pc, #484]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	330b      	adds	r3, #11
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	08db      	lsrs	r3, r3, #3
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	0019      	movs	r1, r3
 80061ea:	231f      	movs	r3, #31
 80061ec:	400b      	ands	r3, r1
 80061ee:	431a      	orrs	r2, r3
 80061f0:	4b77      	ldr	r3, [pc, #476]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 80061f2:	60da      	str	r2, [r3, #12]
        SysVarsCC.DUT_AD7814_Counts  = ((SerialUsart2.TxRxBuffer[13] & 0x7F) << 3) + ((SerialUsart2.TxRxBuffer[12] >> 5) & 0x7);
 80061f4:	4b73      	ldr	r3, [pc, #460]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	330d      	adds	r3, #13
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	00da      	lsls	r2, r3, #3
 80061fe:	23fe      	movs	r3, #254	; 0xfe
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	401a      	ands	r2, r3
 8006204:	4b6f      	ldr	r3, [pc, #444]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	330c      	adds	r3, #12
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	b2db      	uxtb	r3, r3
 8006210:	0019      	movs	r1, r3
 8006212:	2307      	movs	r3, #7
 8006214:	400b      	ands	r3, r1
 8006216:	431a      	orrs	r2, r3
 8006218:	4b6d      	ldr	r3, [pc, #436]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 800621a:	631a      	str	r2, [r3, #48]	; 0x30
        SysVarsCC.DUT_KMA_Counts  = ((SerialUsart2.TxRxBuffer[15] & 0x07) << 9) + (SerialUsart2.TxRxBuffer[14] << 1) + ((SerialUsart2.TxRxBuffer[13] >> 7) & 0x01);
 800621c:	4b69      	ldr	r3, [pc, #420]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	330f      	adds	r3, #15
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	025a      	lsls	r2, r3, #9
 8006226:	23e0      	movs	r3, #224	; 0xe0
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	401a      	ands	r2, r3
 800622c:	4b65      	ldr	r3, [pc, #404]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	330e      	adds	r3, #14
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	18d2      	adds	r2, r2, r3
 8006238:	4b62      	ldr	r3, [pc, #392]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	330d      	adds	r3, #13
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	09db      	lsrs	r3, r3, #7
 8006242:	b2db      	uxtb	r3, r3
 8006244:	0019      	movs	r1, r3
 8006246:	2301      	movs	r3, #1
 8006248:	400b      	ands	r3, r1
 800624a:	18d2      	adds	r2, r2, r3
 800624c:	4b60      	ldr	r3, [pc, #384]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 800624e:	625a      	str	r2, [r3, #36]	; 0x24
        SysVarsCC.DUT_RV_Volts_Counts  = ((SerialUsart2.TxRxBuffer[16] & 0x7F) << 5) + ((SerialUsart2.TxRxBuffer[15] >> 3) & 0x1F);
 8006250:	4b5c      	ldr	r3, [pc, #368]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	3310      	adds	r3, #16
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	23fe      	movs	r3, #254	; 0xfe
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	401a      	ands	r2, r3
 8006260:	4b58      	ldr	r3, [pc, #352]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	330f      	adds	r3, #15
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	08db      	lsrs	r3, r3, #3
 800626a:	b2db      	uxtb	r3, r3
 800626c:	0019      	movs	r1, r3
 800626e:	231f      	movs	r3, #31
 8006270:	400b      	ands	r3, r1
 8006272:	431a      	orrs	r2, r3
 8006274:	4b56      	ldr	r3, [pc, #344]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 8006276:	629a      	str	r2, [r3, #40]	; 0x28
        SysVarsCC.DUT_RV_Amps_Counts  = ((SerialUsart2.TxRxBuffer[18] & 0x07) << 9) + (SerialUsart2.TxRxBuffer[17] << 1) + ((SerialUsart2.TxRxBuffer[16] >> 7) & 0x01);
 8006278:	4b52      	ldr	r3, [pc, #328]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	3312      	adds	r3, #18
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	025a      	lsls	r2, r3, #9
 8006282:	23e0      	movs	r3, #224	; 0xe0
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	401a      	ands	r2, r3
 8006288:	4b4e      	ldr	r3, [pc, #312]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	3311      	adds	r3, #17
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	18d2      	adds	r2, r2, r3
 8006294:	4b4b      	ldr	r3, [pc, #300]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	3310      	adds	r3, #16
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	09db      	lsrs	r3, r3, #7
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	0019      	movs	r1, r3
 80062a2:	2301      	movs	r3, #1
 80062a4:	400b      	ands	r3, r1
 80062a6:	18d2      	adds	r2, r2, r3
 80062a8:	4b49      	ldr	r3, [pc, #292]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 80062aa:	62da      	str	r2, [r3, #44]	; 0x2c
        SysVarsCC.DUT_PWM_Counts  = ((SerialUsart2.TxRxBuffer[19] & 0x7F) << 5) + ((SerialUsart2.TxRxBuffer[18] >> 3) & 0x1F);
 80062ac:	4b45      	ldr	r3, [pc, #276]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	3313      	adds	r3, #19
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	23fe      	movs	r3, #254	; 0xfe
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	401a      	ands	r2, r3
 80062bc:	4b41      	ldr	r3, [pc, #260]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	3312      	adds	r3, #18
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	08db      	lsrs	r3, r3, #3
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	0019      	movs	r1, r3
 80062ca:	231f      	movs	r3, #31
 80062cc:	400b      	ands	r3, r1
 80062ce:	431a      	orrs	r2, r3
 80062d0:	4b3f      	ldr	r3, [pc, #252]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 80062d2:	63da      	str	r2, [r3, #60]	; 0x3c
        SysVarsCC.DUT_Master_Index  = ((SerialUsart2.TxRxBuffer[21] & 0x01) << 9) + (SerialUsart2.TxRxBuffer[20] << 1) + ((SerialUsart2.TxRxBuffer[19] >> 7) & 0x01);
 80062d4:	4b3b      	ldr	r3, [pc, #236]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	3315      	adds	r3, #21
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	025a      	lsls	r2, r3, #9
 80062de:	2380      	movs	r3, #128	; 0x80
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	401a      	ands	r2, r3
 80062e4:	4b37      	ldr	r3, [pc, #220]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	3314      	adds	r3, #20
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	18d2      	adds	r2, r2, r3
 80062f0:	4b34      	ldr	r3, [pc, #208]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	3313      	adds	r3, #19
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	09db      	lsrs	r3, r3, #7
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	0019      	movs	r1, r3
 80062fe:	2301      	movs	r3, #1
 8006300:	400b      	ands	r3, r1
 8006302:	18d2      	adds	r2, r2, r3
 8006304:	4b32      	ldr	r3, [pc, #200]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 8006306:	621a      	str	r2, [r3, #32]
        SysVarsCC.DUT_Feedback  = ((SerialUsart2.TxRxBuffer[22] & 0x7F) << 7) + ((SerialUsart2.TxRxBuffer[21] >> 1) & 0x7F);
 8006308:	4b2e      	ldr	r3, [pc, #184]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	3316      	adds	r3, #22
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	01da      	lsls	r2, r3, #7
 8006312:	23fe      	movs	r3, #254	; 0xfe
 8006314:	019b      	lsls	r3, r3, #6
 8006316:	401a      	ands	r2, r3
 8006318:	4b2a      	ldr	r3, [pc, #168]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	3315      	adds	r3, #21
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	085b      	lsrs	r3, r3, #1
 8006322:	b2db      	uxtb	r3, r3
 8006324:	0019      	movs	r1, r3
 8006326:	237f      	movs	r3, #127	; 0x7f
 8006328:	400b      	ands	r3, r1
 800632a:	431a      	orrs	r2, r3
 800632c:	4b28      	ldr	r3, [pc, #160]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 800632e:	639a      	str	r2, [r3, #56]	; 0x38
        SysVarsCC.DUT_EEPROM_Address  = EEPROM_Address;
 8006330:	4b26      	ldr	r3, [pc, #152]	; (80063cc <ProcessFPGACommunications+0x3e4>)
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	001a      	movs	r2, r3
 8006336:	4b26      	ldr	r3, [pc, #152]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 8006338:	649a      	str	r2, [r3, #72]	; 0x48
        SysVarsCC.DUT_FW_Version  = (SerialUsart2.TxRxBuffer[25] << 8) + SerialUsart2.TxRxBuffer[26];
 800633a:	4b22      	ldr	r3, [pc, #136]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	3319      	adds	r3, #25
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	021a      	lsls	r2, r3, #8
 8006344:	4b1f      	ldr	r3, [pc, #124]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	331a      	adds	r3, #26
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	18d2      	adds	r2, r2, r3
 800634e:	4b20      	ldr	r3, [pc, #128]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 8006350:	641a      	str	r2, [r3, #64]	; 0x40
        SysVarsCC.DUT_Status = ((SysVarsCC.DUT_EEPROM_Config & 0x1F) << 7) + (SerialUsart2.TxRxBuffer[0] & 0x3F);
 8006352:	4b1f      	ldr	r3, [pc, #124]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 8006354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006356:	01da      	lsls	r2, r3, #7
 8006358:	23f8      	movs	r3, #248	; 0xf8
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	401a      	ands	r2, r3
 800635e:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <ProcessFPGACommunications+0x3dc>)
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	0019      	movs	r1, r3
 8006366:	233f      	movs	r3, #63	; 0x3f
 8006368:	400b      	ands	r3, r1
 800636a:	431a      	orrs	r2, r3
 800636c:	4b18      	ldr	r3, [pc, #96]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 800636e:	605a      	str	r2, [r3, #4]
        SysVarsCC.DUT_UpdateCounter++;
 8006370:	4b17      	ldr	r3, [pc, #92]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	4b16      	ldr	r3, [pc, #88]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 8006378:	601a      	str	r2, [r3, #0]

        if (SysVarsCC.DUT_EEPROM_Address == 20) {
 800637a:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 800637c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637e:	2b14      	cmp	r3, #20
 8006380:	d119      	bne.n	80063b6 <ProcessFPGACommunications+0x3ce>
            AddressDelay++;
 8006382:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <ProcessFPGACommunications+0x3ec>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	3301      	adds	r3, #1
 8006388:	b2da      	uxtb	r2, r3
 800638a:	4b12      	ldr	r3, [pc, #72]	; (80063d4 <ProcessFPGACommunications+0x3ec>)
 800638c:	701a      	strb	r2, [r3, #0]
            if (AddressDelay > 100) {
 800638e:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <ProcessFPGACommunications+0x3ec>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b64      	cmp	r3, #100	; 0x64
 8006394:	d928      	bls.n	80063e8 <ProcessFPGACommunications+0x400>
                AddressDelay = 0;
 8006396:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <ProcessFPGACommunications+0x3ec>)
 8006398:	2200      	movs	r2, #0
 800639a:	701a      	strb	r2, [r3, #0]
                if (SysVarsCC.DUT_Setpoint != SysPars.ManualSetpoint) {
 800639c:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 800639e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <ProcessFPGACommunications+0x3d8>)
 80063a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d01f      	beq.n	80063e8 <ProcessFPGACommunications+0x400>
                    SysVarsCC.EEPROM_Mode = EEPROM_MODE_UPDATE_MANUAL;
 80063a8:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <ProcessFPGACommunications+0x3e8>)
 80063aa:	2205      	movs	r2, #5
 80063ac:	64da      	str	r2, [r3, #76]	; 0x4c
                    State = 11;
 80063ae:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <ProcessFPGACommunications+0x3f0>)
 80063b0:	220b      	movs	r2, #11
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	e018      	b.n	80063e8 <ProcessFPGACommunications+0x400>
                }
            }
        } else {
            AddressDelay = 0;
 80063b6:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <ProcessFPGACommunications+0x3ec>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	e014      	b.n	80063e8 <ProcessFPGACommunications+0x400>
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	200011f4 	.word	0x200011f4
 80063c4:	200013d0 	.word	0x200013d0
 80063c8:	2000002c 	.word	0x2000002c
 80063cc:	2000002a 	.word	0x2000002a
 80063d0:	200028e0 	.word	0x200028e0
 80063d4:	2000002d 	.word	0x2000002d
 80063d8:	2000002e 	.word	0x2000002e
        }
    } else if (CommCounter > 100) {
 80063dc:	4bbe      	ldr	r3, [pc, #760]	; (80066d8 <ProcessFPGACommunications+0x6f0>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b64      	cmp	r3, #100	; 0x64
 80063e2:	d901      	bls.n	80063e8 <ProcessFPGACommunications+0x400>
        ClearDUTData();
 80063e4:	f7ff fdba 	bl	8005f5c <ClearDUTData>
    }

    if ((BufferCount == 27) && (WaitDelay > 3)) WaitDelay = 3;
 80063e8:	1d7b      	adds	r3, r7, #5
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b1b      	cmp	r3, #27
 80063ee:	d106      	bne.n	80063fe <ProcessFPGACommunications+0x416>
 80063f0:	4bba      	ldr	r3, [pc, #744]	; (80066dc <ProcessFPGACommunications+0x6f4>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d902      	bls.n	80063fe <ProcessFPGACommunications+0x416>
 80063f8:	4bb8      	ldr	r3, [pc, #736]	; (80066dc <ProcessFPGACommunications+0x6f4>)
 80063fa:	2203      	movs	r2, #3
 80063fc:	701a      	strb	r2, [r3, #0]
    if (WaitDelay != 0) WaitDelay--;
 80063fe:	4bb7      	ldr	r3, [pc, #732]	; (80066dc <ProcessFPGACommunications+0x6f4>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <ProcessFPGACommunications+0x42a>
 8006406:	4bb5      	ldr	r3, [pc, #724]	; (80066dc <ProcessFPGACommunications+0x6f4>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	3b01      	subs	r3, #1
 800640c:	b2da      	uxtb	r2, r3
 800640e:	4bb3      	ldr	r3, [pc, #716]	; (80066dc <ProcessFPGACommunications+0x6f4>)
 8006410:	701a      	strb	r2, [r3, #0]
    if (WaitDelay != 0) return;
 8006412:	4bb2      	ldr	r3, [pc, #712]	; (80066dc <ProcessFPGACommunications+0x6f4>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d000      	beq.n	800641c <ProcessFPGACommunications+0x434>
 800641a:	e218      	b.n	800684e <ProcessFPGACommunications+0x866>

    switch (State) {
 800641c:	4bb0      	ldr	r3, [pc, #704]	; (80066e0 <ProcessFPGACommunications+0x6f8>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b0b      	cmp	r3, #11
 8006422:	d900      	bls.n	8006426 <ProcessFPGACommunications+0x43e>
 8006424:	e1e5      	b.n	80067f2 <ProcessFPGACommunications+0x80a>
 8006426:	009a      	lsls	r2, r3, #2
 8006428:	4bae      	ldr	r3, [pc, #696]	; (80066e4 <ProcessFPGACommunications+0x6fc>)
 800642a:	18d3      	adds	r3, r2, r3
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	469f      	mov	pc, r3
    case 0:
        TestBuffer[0] = 0x80;                           // Command
 8006430:	4bad      	ldr	r3, [pc, #692]	; (80066e8 <ProcessFPGACommunications+0x700>)
 8006432:	2280      	movs	r2, #128	; 0x80
 8006434:	701a      	strb	r2, [r3, #0]
        TestBuffer[1] = AddressIndex & 0xFF;            // Address, LSB
 8006436:	4bad      	ldr	r3, [pc, #692]	; (80066ec <ProcessFPGACommunications+0x704>)
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	b2da      	uxtb	r2, r3
 800643c:	4baa      	ldr	r3, [pc, #680]	; (80066e8 <ProcessFPGACommunications+0x700>)
 800643e:	705a      	strb	r2, [r3, #1]
        TestBuffer[2] = (AddressIndex >> 8) & 0xFF;     // Address, MSB
 8006440:	4baa      	ldr	r3, [pc, #680]	; (80066ec <ProcessFPGACommunications+0x704>)
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	0a1b      	lsrs	r3, r3, #8
 8006446:	b29b      	uxth	r3, r3
 8006448:	b2da      	uxtb	r2, r3
 800644a:	4ba7      	ldr	r3, [pc, #668]	; (80066e8 <ProcessFPGACommunications+0x700>)
 800644c:	709a      	strb	r2, [r3, #2]
        TestBuffer[3] = 0x00;                           // Data, LSB
 800644e:	4ba6      	ldr	r3, [pc, #664]	; (80066e8 <ProcessFPGACommunications+0x700>)
 8006450:	2200      	movs	r2, #0
 8006452:	70da      	strb	r2, [r3, #3]
        TestBuffer[4] = 0x00;                           // Data, MSG
 8006454:	4ba4      	ldr	r3, [pc, #656]	; (80066e8 <ProcessFPGACommunications+0x700>)
 8006456:	2200      	movs	r2, #0
 8006458:	711a      	strb	r2, [r3, #4]

        ManualDelay++;
 800645a:	4ba5      	ldr	r3, [pc, #660]	; (80066f0 <ProcessFPGACommunications+0x708>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	3301      	adds	r3, #1
 8006460:	b2da      	uxtb	r2, r3
 8006462:	4ba3      	ldr	r3, [pc, #652]	; (80066f0 <ProcessFPGACommunications+0x708>)
 8006464:	701a      	strb	r2, [r3, #0]
        if (((SysPars.EnableBits & ENABLE_MANUAL) != 0) && (ManualDelay > 100)) {
 8006466:	4ba3      	ldr	r3, [pc, #652]	; (80066f4 <ProcessFPGACommunications+0x70c>)
 8006468:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800646a:	2380      	movs	r3, #128	; 0x80
 800646c:	015b      	lsls	r3, r3, #5
 800646e:	4013      	ands	r3, r2
 8006470:	d012      	beq.n	8006498 <ProcessFPGACommunications+0x4b0>
 8006472:	4b9f      	ldr	r3, [pc, #636]	; (80066f0 <ProcessFPGACommunications+0x708>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b64      	cmp	r3, #100	; 0x64
 8006478:	d90e      	bls.n	8006498 <ProcessFPGACommunications+0x4b0>
            ManualDelay = 0;
 800647a:	4b9d      	ldr	r3, [pc, #628]	; (80066f0 <ProcessFPGACommunications+0x708>)
 800647c:	2200      	movs	r2, #0
 800647e:	701a      	strb	r2, [r3, #0]
            TestBuffer[0] = 0x80 | (1 << 2) | 1;      // Command:  Master Enable, Serial_Verify=1, Set Serial_verify
 8006480:	4b99      	ldr	r3, [pc, #612]	; (80066e8 <ProcessFPGACommunications+0x700>)
 8006482:	2285      	movs	r2, #133	; 0x85
 8006484:	701a      	strb	r2, [r3, #0]
            TestBuffer[1] = 10;                      // Address, LSB
 8006486:	4b98      	ldr	r3, [pc, #608]	; (80066e8 <ProcessFPGACommunications+0x700>)
 8006488:	220a      	movs	r2, #10
 800648a:	705a      	strb	r2, [r3, #1]
            TestBuffer[2] = 0;                      // Address, MSB
 800648c:	4b96      	ldr	r3, [pc, #600]	; (80066e8 <ProcessFPGACommunications+0x700>)
 800648e:	2200      	movs	r2, #0
 8006490:	709a      	strb	r2, [r3, #2]
            AddressIndex = 10;
 8006492:	4b96      	ldr	r3, [pc, #600]	; (80066ec <ProcessFPGACommunications+0x704>)
 8006494:	220a      	movs	r2, #10
 8006496:	801a      	strh	r2, [r3, #0]
        }
        //
        // Read
        //
        if (bConfigRefresh && (SerialUsart2.TxRxBufferCount == 27)) {
 8006498:	4b97      	ldr	r3, [pc, #604]	; (80066f8 <ProcessFPGACommunications+0x710>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d015      	beq.n	80064cc <ProcessFPGACommunications+0x4e4>
 80064a0:	4b96      	ldr	r3, [pc, #600]	; (80066fc <ProcessFPGACommunications+0x714>)
 80064a2:	8a1b      	ldrh	r3, [r3, #16]
 80064a4:	2b1b      	cmp	r3, #27
 80064a6:	d111      	bne.n	80064cc <ProcessFPGACommunications+0x4e4>
            bConfigRefresh = FALSE;
 80064a8:	4b93      	ldr	r3, [pc, #588]	; (80066f8 <ProcessFPGACommunications+0x710>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	701a      	strb	r2, [r3, #0]
            AddressPtr = (uint16_t *)&EEPROMData;
 80064ae:	4b94      	ldr	r3, [pc, #592]	; (8006700 <ProcessFPGACommunications+0x718>)
 80064b0:	4a94      	ldr	r2, [pc, #592]	; (8006704 <ProcessFPGACommunications+0x71c>)
 80064b2:	601a      	str	r2, [r3, #0]
            AddressIndex = 0;
 80064b4:	4b8d      	ldr	r3, [pc, #564]	; (80066ec <ProcessFPGACommunications+0x704>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	801a      	strh	r2, [r3, #0]
            EndAddressIndex = 6;
 80064ba:	4b93      	ldr	r3, [pc, #588]	; (8006708 <ProcessFPGACommunications+0x720>)
 80064bc:	2206      	movs	r2, #6
 80064be:	801a      	strh	r2, [r3, #0]
            SysVarsCC.EEPROM_Mode = EEPROM_MODE_READ_CONFIG;
 80064c0:	4b92      	ldr	r3, [pc, #584]	; (800670c <ProcessFPGACommunications+0x724>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	64da      	str	r2, [r3, #76]	; 0x4c
            State = 1;
 80064c6:	4b86      	ldr	r3, [pc, #536]	; (80066e0 <ProcessFPGACommunications+0x6f8>)
 80064c8:	2201      	movs	r2, #1
 80064ca:	701a      	strb	r2, [r3, #0]
        }
        if (bProfileRefresh && (SerialUsart2.TxRxBufferCount == 27)) {
 80064cc:	4b90      	ldr	r3, [pc, #576]	; (8006710 <ProcessFPGACommunications+0x728>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d016      	beq.n	8006502 <ProcessFPGACommunications+0x51a>
 80064d4:	4b89      	ldr	r3, [pc, #548]	; (80066fc <ProcessFPGACommunications+0x714>)
 80064d6:	8a1b      	ldrh	r3, [r3, #16]
 80064d8:	2b1b      	cmp	r3, #27
 80064da:	d112      	bne.n	8006502 <ProcessFPGACommunications+0x51a>
            bProfileRefresh = FALSE;
 80064dc:	4b8c      	ldr	r3, [pc, #560]	; (8006710 <ProcessFPGACommunications+0x728>)
 80064de:	2200      	movs	r2, #0
 80064e0:	701a      	strb	r2, [r3, #0]
            AddressPtr = (uint16_t *)&EEPROMData;
 80064e2:	4b87      	ldr	r3, [pc, #540]	; (8006700 <ProcessFPGACommunications+0x718>)
 80064e4:	4a87      	ldr	r2, [pc, #540]	; (8006704 <ProcessFPGACommunications+0x71c>)
 80064e6:	601a      	str	r2, [r3, #0]
            AddressIndex = 0;
 80064e8:	4b80      	ldr	r3, [pc, #512]	; (80066ec <ProcessFPGACommunications+0x704>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	801a      	strh	r2, [r3, #0]
            EndAddressIndex = 528;
 80064ee:	4b86      	ldr	r3, [pc, #536]	; (8006708 <ProcessFPGACommunications+0x720>)
 80064f0:	2284      	movs	r2, #132	; 0x84
 80064f2:	0092      	lsls	r2, r2, #2
 80064f4:	801a      	strh	r2, [r3, #0]
            SysVarsCC.EEPROM_Mode = EEPROM_MODE_READ_PROFILE;
 80064f6:	4b85      	ldr	r3, [pc, #532]	; (800670c <ProcessFPGACommunications+0x724>)
 80064f8:	2202      	movs	r2, #2
 80064fa:	64da      	str	r2, [r3, #76]	; 0x4c
            State = 1;
 80064fc:	4b78      	ldr	r3, [pc, #480]	; (80066e0 <ProcessFPGACommunications+0x6f8>)
 80064fe:	2201      	movs	r2, #1
 8006500:	701a      	strb	r2, [r3, #0]
        }
        if (bConfigUpdateConfig && (SerialUsart2.TxRxBufferCount == 27)) {
 8006502:	4b84      	ldr	r3, [pc, #528]	; (8006714 <ProcessFPGACommunications+0x72c>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d02b      	beq.n	8006562 <ProcessFPGACommunications+0x57a>
 800650a:	4b7c      	ldr	r3, [pc, #496]	; (80066fc <ProcessFPGACommunications+0x714>)
 800650c:	8a1b      	ldrh	r3, [r3, #16]
 800650e:	2b1b      	cmp	r3, #27
 8006510:	d127      	bne.n	8006562 <ProcessFPGACommunications+0x57a>
            bConfigUpdateConfig = FALSE;
 8006512:	4b80      	ldr	r3, [pc, #512]	; (8006714 <ProcessFPGACommunications+0x72c>)
 8006514:	2200      	movs	r2, #0
 8006516:	701a      	strb	r2, [r3, #0]
            for (i = 0 ; i < 6 ; i++) {
 8006518:	1dbb      	adds	r3, r7, #6
 800651a:	2200      	movs	r2, #0
 800651c:	801a      	strh	r2, [r3, #0]
 800651e:	e010      	b.n	8006542 <ProcessFPGACommunications+0x55a>
                NewConfigData[i] = SysPars.NewConfigData[i];
 8006520:	1dbb      	adds	r3, r7, #6
 8006522:	881a      	ldrh	r2, [r3, #0]
 8006524:	4b73      	ldr	r3, [pc, #460]	; (80066f4 <ProcessFPGACommunications+0x70c>)
 8006526:	320c      	adds	r2, #12
 8006528:	0092      	lsls	r2, r2, #2
 800652a:	58d1      	ldr	r1, [r2, r3]
 800652c:	1dbb      	adds	r3, r7, #6
 800652e:	881a      	ldrh	r2, [r3, #0]
 8006530:	b289      	uxth	r1, r1
 8006532:	4b79      	ldr	r3, [pc, #484]	; (8006718 <ProcessFPGACommunications+0x730>)
 8006534:	0052      	lsls	r2, r2, #1
 8006536:	52d1      	strh	r1, [r2, r3]
            for (i = 0 ; i < 6 ; i++) {
 8006538:	1dbb      	adds	r3, r7, #6
 800653a:	881a      	ldrh	r2, [r3, #0]
 800653c:	1dbb      	adds	r3, r7, #6
 800653e:	3201      	adds	r2, #1
 8006540:	801a      	strh	r2, [r3, #0]
 8006542:	1dbb      	adds	r3, r7, #6
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	2b05      	cmp	r3, #5
 8006548:	d9ea      	bls.n	8006520 <ProcessFPGACommunications+0x538>
            }
            AddressPtr = (uint16_t *)&NewConfigData[0];
 800654a:	4b6d      	ldr	r3, [pc, #436]	; (8006700 <ProcessFPGACommunications+0x718>)
 800654c:	4a72      	ldr	r2, [pc, #456]	; (8006718 <ProcessFPGACommunications+0x730>)
 800654e:	601a      	str	r2, [r3, #0]
            AddressIndex = 0;
 8006550:	4b66      	ldr	r3, [pc, #408]	; (80066ec <ProcessFPGACommunications+0x704>)
 8006552:	2200      	movs	r2, #0
 8006554:	801a      	strh	r2, [r3, #0]
            SysVarsCC.EEPROM_Mode = EEPROM_MODE_UPDATE_CONFIG;
 8006556:	4b6d      	ldr	r3, [pc, #436]	; (800670c <ProcessFPGACommunications+0x724>)
 8006558:	2203      	movs	r2, #3
 800655a:	64da      	str	r2, [r3, #76]	; 0x4c
            State = 10;
 800655c:	4b60      	ldr	r3, [pc, #384]	; (80066e0 <ProcessFPGACommunications+0x6f8>)
 800655e:	220a      	movs	r2, #10
 8006560:	701a      	strb	r2, [r3, #0]
        }
        if (bConfigUpdateProfile && (SerialUsart2.TxRxBufferCount == 27)) {
 8006562:	4b6e      	ldr	r3, [pc, #440]	; (800671c <ProcessFPGACommunications+0x734>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d012      	beq.n	8006590 <ProcessFPGACommunications+0x5a8>
 800656a:	4b64      	ldr	r3, [pc, #400]	; (80066fc <ProcessFPGACommunications+0x714>)
 800656c:	8a1b      	ldrh	r3, [r3, #16]
 800656e:	2b1b      	cmp	r3, #27
 8006570:	d10e      	bne.n	8006590 <ProcessFPGACommunications+0x5a8>
            bConfigUpdateProfile = FALSE;
 8006572:	4b6a      	ldr	r3, [pc, #424]	; (800671c <ProcessFPGACommunications+0x734>)
 8006574:	2200      	movs	r2, #0
 8006576:	701a      	strb	r2, [r3, #0]
            AddressPtr = (uint16_t *)&EEPROMData.OhmsKFactor;
 8006578:	4b61      	ldr	r3, [pc, #388]	; (8006700 <ProcessFPGACommunications+0x718>)
 800657a:	4a62      	ldr	r2, [pc, #392]	; (8006704 <ProcessFPGACommunications+0x71c>)
 800657c:	601a      	str	r2, [r3, #0]
            AddressIndex = 2;
 800657e:	4b5b      	ldr	r3, [pc, #364]	; (80066ec <ProcessFPGACommunications+0x704>)
 8006580:	2202      	movs	r2, #2
 8006582:	801a      	strh	r2, [r3, #0]
            SysVarsCC.EEPROM_Mode = EEPROM_MODE_UPDATE_PROFILE;
 8006584:	4b61      	ldr	r3, [pc, #388]	; (800670c <ProcessFPGACommunications+0x724>)
 8006586:	2204      	movs	r2, #4
 8006588:	64da      	str	r2, [r3, #76]	; 0x4c
            State = 10;
 800658a:	4b55      	ldr	r3, [pc, #340]	; (80066e0 <ProcessFPGACommunications+0x6f8>)
 800658c:	220a      	movs	r2, #10
 800658e:	701a      	strb	r2, [r3, #0]
        }
        if (bSerialVerify && (SerialUsart2.TxRxBufferCount == 27)) {
 8006590:	4b63      	ldr	r3, [pc, #396]	; (8006720 <ProcessFPGACommunications+0x738>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d100      	bne.n	800659a <ProcessFPGACommunications+0x5b2>
 8006598:	e126      	b.n	80067e8 <ProcessFPGACommunications+0x800>
 800659a:	4b58      	ldr	r3, [pc, #352]	; (80066fc <ProcessFPGACommunications+0x714>)
 800659c:	8a1b      	ldrh	r3, [r3, #16]
 800659e:	2b1b      	cmp	r3, #27
 80065a0:	d000      	beq.n	80065a4 <ProcessFPGACommunications+0x5bc>
 80065a2:	e121      	b.n	80067e8 <ProcessFPGACommunications+0x800>
            bSerialVerify = FALSE;
 80065a4:	4b5e      	ldr	r3, [pc, #376]	; (8006720 <ProcessFPGACommunications+0x738>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]
            AddressIndex = SerialVerifyData.VerifyAddress;
 80065aa:	4b5e      	ldr	r3, [pc, #376]	; (8006724 <ProcessFPGACommunications+0x73c>)
 80065ac:	881a      	ldrh	r2, [r3, #0]
 80065ae:	4b4f      	ldr	r3, [pc, #316]	; (80066ec <ProcessFPGACommunications+0x704>)
 80065b0:	801a      	strh	r2, [r3, #0]
            TestBuffer[0] = 0x80 | (1 << 2) | SerialVerifyData.VerifyMode;      // Command:  Master Enable, Serial_Verify=1, Set Serial_verify
 80065b2:	4b5c      	ldr	r3, [pc, #368]	; (8006724 <ProcessFPGACommunications+0x73c>)
 80065b4:	791b      	ldrb	r3, [r3, #4]
 80065b6:	227c      	movs	r2, #124	; 0x7c
 80065b8:	4252      	negs	r2, r2
 80065ba:	4313      	orrs	r3, r2
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	4b4a      	ldr	r3, [pc, #296]	; (80066e8 <ProcessFPGACommunications+0x700>)
 80065c0:	701a      	strb	r2, [r3, #0]
            TestBuffer[1] = SerialVerifyData.VerifyAddress & 0xFF;              // Address, LSB
 80065c2:	4b58      	ldr	r3, [pc, #352]	; (8006724 <ProcessFPGACommunications+0x73c>)
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	4b47      	ldr	r3, [pc, #284]	; (80066e8 <ProcessFPGACommunications+0x700>)
 80065ca:	705a      	strb	r2, [r3, #1]
            TestBuffer[2] = (SerialVerifyData.VerifyAddress >> 8) & 0xFF;       // Address, MSB
 80065cc:	4b55      	ldr	r3, [pc, #340]	; (8006724 <ProcessFPGACommunications+0x73c>)
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	0a1b      	lsrs	r3, r3, #8
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	4b44      	ldr	r3, [pc, #272]	; (80066e8 <ProcessFPGACommunications+0x700>)
 80065d8:	709a      	strb	r2, [r3, #2]
            TestBuffer[3] = 0x00;                                               // DAta, LSB
 80065da:	4b43      	ldr	r3, [pc, #268]	; (80066e8 <ProcessFPGACommunications+0x700>)
 80065dc:	2200      	movs	r2, #0
 80065de:	70da      	strb	r2, [r3, #3]
            TestBuffer[4] = 0x00;                                               // Data, MSG
 80065e0:	4b41      	ldr	r3, [pc, #260]	; (80066e8 <ProcessFPGACommunications+0x700>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	711a      	strb	r2, [r3, #4]
        }
        break;
 80065e6:	e0ff      	b.n	80067e8 <ProcessFPGACommunications+0x800>
    case 1:
        TestBuffer[0] = 0x81 | (1 << 2);                // Command:  Master Enable, Serial_Verify=1, Set Serial_verify
 80065e8:	4b3f      	ldr	r3, [pc, #252]	; (80066e8 <ProcessFPGACommunications+0x700>)
 80065ea:	2285      	movs	r2, #133	; 0x85
 80065ec:	701a      	strb	r2, [r3, #0]
        TestBuffer[1] = AddressIndex & 0xFF;            // Address, LSB
 80065ee:	4b3f      	ldr	r3, [pc, #252]	; (80066ec <ProcessFPGACommunications+0x704>)
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	4b3c      	ldr	r3, [pc, #240]	; (80066e8 <ProcessFPGACommunications+0x700>)
 80065f6:	705a      	strb	r2, [r3, #1]
        TestBuffer[2] = (AddressIndex >> 8) & 0xFF;     // Address, MSB
 80065f8:	4b3c      	ldr	r3, [pc, #240]	; (80066ec <ProcessFPGACommunications+0x704>)
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	0a1b      	lsrs	r3, r3, #8
 80065fe:	b29b      	uxth	r3, r3
 8006600:	b2da      	uxtb	r2, r3
 8006602:	4b39      	ldr	r3, [pc, #228]	; (80066e8 <ProcessFPGACommunications+0x700>)
 8006604:	709a      	strb	r2, [r3, #2]
        TestBuffer[3] = 0x00;                           // DAta, LSB
 8006606:	4b38      	ldr	r3, [pc, #224]	; (80066e8 <ProcessFPGACommunications+0x700>)
 8006608:	2200      	movs	r2, #0
 800660a:	70da      	strb	r2, [r3, #3]
        TestBuffer[4] = 0x00;                           // Data, MSG
 800660c:	4b36      	ldr	r3, [pc, #216]	; (80066e8 <ProcessFPGACommunications+0x700>)
 800660e:	2200      	movs	r2, #0
 8006610:	711a      	strb	r2, [r3, #4]
        EEPROM_Address = 0xFFFF;
 8006612:	4b45      	ldr	r3, [pc, #276]	; (8006728 <ProcessFPGACommunications+0x740>)
 8006614:	2201      	movs	r2, #1
 8006616:	4252      	negs	r2, r2
 8006618:	801a      	strh	r2, [r3, #0]
        State = 2;
 800661a:	4b31      	ldr	r3, [pc, #196]	; (80066e0 <ProcessFPGACommunications+0x6f8>)
 800661c:	2202      	movs	r2, #2
 800661e:	701a      	strb	r2, [r3, #0]
        break;
 8006620:	e0e7      	b.n	80067f2 <ProcessFPGACommunications+0x80a>
    case 2:
        TestBuffer[0] = 0x80;                           // Command
 8006622:	4b31      	ldr	r3, [pc, #196]	; (80066e8 <ProcessFPGACommunications+0x700>)
 8006624:	2280      	movs	r2, #128	; 0x80
 8006626:	701a      	strb	r2, [r3, #0]
        TestBuffer[1] = AddressIndex & 0xFF;            // Address, LSB
 8006628:	4b30      	ldr	r3, [pc, #192]	; (80066ec <ProcessFPGACommunications+0x704>)
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	b2da      	uxtb	r2, r3
 800662e:	4b2e      	ldr	r3, [pc, #184]	; (80066e8 <ProcessFPGACommunications+0x700>)
 8006630:	705a      	strb	r2, [r3, #1]
        TestBuffer[2] = (AddressIndex >> 8) & 0xFF;     // Address, MSB
 8006632:	4b2e      	ldr	r3, [pc, #184]	; (80066ec <ProcessFPGACommunications+0x704>)
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	0a1b      	lsrs	r3, r3, #8
 8006638:	b29b      	uxth	r3, r3
 800663a:	b2da      	uxtb	r2, r3
 800663c:	4b2a      	ldr	r3, [pc, #168]	; (80066e8 <ProcessFPGACommunications+0x700>)
 800663e:	709a      	strb	r2, [r3, #2]
        TestBuffer[3] = 0x00;                           // DAta, LSB
 8006640:	4b29      	ldr	r3, [pc, #164]	; (80066e8 <ProcessFPGACommunications+0x700>)
 8006642:	2200      	movs	r2, #0
 8006644:	70da      	strb	r2, [r3, #3]
        TestBuffer[4] = 0x00;                           // Data, MSG
 8006646:	4b28      	ldr	r3, [pc, #160]	; (80066e8 <ProcessFPGACommunications+0x700>)
 8006648:	2200      	movs	r2, #0
 800664a:	711a      	strb	r2, [r3, #4]

        if (AddressIndex == (EEPROM_Address >> 1)) {
 800664c:	4b36      	ldr	r3, [pc, #216]	; (8006728 <ProcessFPGACommunications+0x740>)
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	085b      	lsrs	r3, r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	4b25      	ldr	r3, [pc, #148]	; (80066ec <ProcessFPGACommunications+0x704>)
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d000      	beq.n	800665e <ProcessFPGACommunications+0x676>
 800665c:	e0c6      	b.n	80067ec <ProcessFPGACommunications+0x804>
            if (++UpdateDelayCounter >= 3) {
 800665e:	4b33      	ldr	r3, [pc, #204]	; (800672c <ProcessFPGACommunications+0x744>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	3301      	adds	r3, #1
 8006664:	b2da      	uxtb	r2, r3
 8006666:	4b31      	ldr	r3, [pc, #196]	; (800672c <ProcessFPGACommunications+0x744>)
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	4b30      	ldr	r3, [pc, #192]	; (800672c <ProcessFPGACommunications+0x744>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d800      	bhi.n	8006674 <ProcessFPGACommunications+0x68c>
 8006672:	e0bb      	b.n	80067ec <ProcessFPGACommunications+0x804>
                UpdateDelayCounter = 0;
 8006674:	4b2d      	ldr	r3, [pc, #180]	; (800672c <ProcessFPGACommunications+0x744>)
 8006676:	2200      	movs	r2, #0
 8006678:	701a      	strb	r2, [r3, #0]
                AddressPtr[AddressIndex++] = SysVarsCC.DUT_Setpoint;
 800667a:	4b24      	ldr	r3, [pc, #144]	; (800670c <ProcessFPGACommunications+0x724>)
 800667c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800667e:	4b20      	ldr	r3, [pc, #128]	; (8006700 <ProcessFPGACommunications+0x718>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	4b1a      	ldr	r3, [pc, #104]	; (80066ec <ProcessFPGACommunications+0x704>)
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	1c59      	adds	r1, r3, #1
 8006688:	b28c      	uxth	r4, r1
 800668a:	4918      	ldr	r1, [pc, #96]	; (80066ec <ProcessFPGACommunications+0x704>)
 800668c:	800c      	strh	r4, [r1, #0]
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	18d3      	adds	r3, r2, r3
 8006692:	b282      	uxth	r2, r0
 8006694:	801a      	strh	r2, [r3, #0]
                if (AddressIndex == EndAddressIndex) {
 8006696:	4b15      	ldr	r3, [pc, #84]	; (80066ec <ProcessFPGACommunications+0x704>)
 8006698:	881a      	ldrh	r2, [r3, #0]
 800669a:	4b1b      	ldr	r3, [pc, #108]	; (8006708 <ProcessFPGACommunications+0x720>)
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d000      	beq.n	80066a4 <ProcessFPGACommunications+0x6bc>
 80066a2:	e0a3      	b.n	80067ec <ProcessFPGACommunications+0x804>
                    State = 3;
 80066a4:	4b0e      	ldr	r3, [pc, #56]	; (80066e0 <ProcessFPGACommunications+0x6f8>)
 80066a6:	2203      	movs	r2, #3
 80066a8:	701a      	strb	r2, [r3, #0]
                }
            }
        }
        break;
 80066aa:	e09f      	b.n	80067ec <ProcessFPGACommunications+0x804>
    case 3:
        TestBuffer[0] = 0x80 | 0 | (1 << 2);            // Command:  Master Enable, Serial_Verify=0, Set Serial_verify
 80066ac:	4b0e      	ldr	r3, [pc, #56]	; (80066e8 <ProcessFPGACommunications+0x700>)
 80066ae:	2284      	movs	r2, #132	; 0x84
 80066b0:	701a      	strb	r2, [r3, #0]
        TestBuffer[1] = 0;                              // Address, LSB
 80066b2:	4b0d      	ldr	r3, [pc, #52]	; (80066e8 <ProcessFPGACommunications+0x700>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	705a      	strb	r2, [r3, #1]
        TestBuffer[2] = 0;                              // Address, MSB
 80066b8:	4b0b      	ldr	r3, [pc, #44]	; (80066e8 <ProcessFPGACommunications+0x700>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	709a      	strb	r2, [r3, #2]
        TestBuffer[3] = 0x00;                           // DAta, LSB
 80066be:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <ProcessFPGACommunications+0x700>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	70da      	strb	r2, [r3, #3]
        TestBuffer[4] = 0x00;                           // Data, MSG
 80066c4:	4b08      	ldr	r3, [pc, #32]	; (80066e8 <ProcessFPGACommunications+0x700>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	711a      	strb	r2, [r3, #4]
        SysVarsCC.EEPROM_Mode = EEPROM_MODE_NORMAL;
 80066ca:	4b10      	ldr	r3, [pc, #64]	; (800670c <ProcessFPGACommunications+0x724>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	64da      	str	r2, [r3, #76]	; 0x4c
        State = 0;
 80066d0:	4b03      	ldr	r3, [pc, #12]	; (80066e0 <ProcessFPGACommunications+0x6f8>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	701a      	strb	r2, [r3, #0]
        break;
 80066d6:	e08c      	b.n	80067f2 <ProcessFPGACommunications+0x80a>
 80066d8:	2000002c 	.word	0x2000002c
 80066dc:	2000002f 	.word	0x2000002f
 80066e0:	2000002e 	.word	0x2000002e
 80066e4:	08009cc4 	.word	0x08009cc4
 80066e8:	20000020 	.word	0x20000020
 80066ec:	20000030 	.word	0x20000030
 80066f0:	20000032 	.word	0x20000032
 80066f4:	200011f4 	.word	0x200011f4
 80066f8:	20001e92 	.word	0x20001e92
 80066fc:	200013d0 	.word	0x200013d0
 8006700:	20000034 	.word	0x20000034
 8006704:	2000210c 	.word	0x2000210c
 8006708:	20000038 	.word	0x20000038
 800670c:	200028e0 	.word	0x200028e0
 8006710:	200000f0 	.word	0x200000f0
 8006714:	20001cc8 	.word	0x20001cc8
 8006718:	2000003c 	.word	0x2000003c
 800671c:	20002753 	.word	0x20002753
 8006720:	20002752 	.word	0x20002752
 8006724:	200000f4 	.word	0x200000f4
 8006728:	2000002a 	.word	0x2000002a
 800672c:	20000048 	.word	0x20000048

//--------------------------

    case 10:
        TestBuffer[0] = 0x80 | (2 << 2);                            // Command:  Master Enable,  Write EEPROM (Automatically sets Serial_verify)
 8006730:	4b49      	ldr	r3, [pc, #292]	; (8006858 <ProcessFPGACommunications+0x870>)
 8006732:	2288      	movs	r2, #136	; 0x88
 8006734:	701a      	strb	r2, [r3, #0]
        TestBuffer[1] = AddressIndex & 0xFF;                        // Address, LSB
 8006736:	4b49      	ldr	r3, [pc, #292]	; (800685c <ProcessFPGACommunications+0x874>)
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	b2da      	uxtb	r2, r3
 800673c:	4b46      	ldr	r3, [pc, #280]	; (8006858 <ProcessFPGACommunications+0x870>)
 800673e:	705a      	strb	r2, [r3, #1]
        TestBuffer[2] = (AddressIndex >> 8) & 0xFF;                 // Address, MSB
 8006740:	4b46      	ldr	r3, [pc, #280]	; (800685c <ProcessFPGACommunications+0x874>)
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	0a1b      	lsrs	r3, r3, #8
 8006746:	b29b      	uxth	r3, r3
 8006748:	b2da      	uxtb	r2, r3
 800674a:	4b43      	ldr	r3, [pc, #268]	; (8006858 <ProcessFPGACommunications+0x870>)
 800674c:	709a      	strb	r2, [r3, #2]
        TestBuffer[3] = AddressPtr[AddressIndex] & 0xFF;            // Data, LSB
 800674e:	4b44      	ldr	r3, [pc, #272]	; (8006860 <ProcessFPGACommunications+0x878>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b42      	ldr	r3, [pc, #264]	; (800685c <ProcessFPGACommunications+0x874>)
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	18d3      	adds	r3, r2, r3
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b2da      	uxtb	r2, r3
 800675e:	4b3e      	ldr	r3, [pc, #248]	; (8006858 <ProcessFPGACommunications+0x870>)
 8006760:	70da      	strb	r2, [r3, #3]
        TestBuffer[4] = (AddressPtr[AddressIndex] >> 8) & 0xFF;     // Data, MSG
 8006762:	4b3f      	ldr	r3, [pc, #252]	; (8006860 <ProcessFPGACommunications+0x878>)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	4b3d      	ldr	r3, [pc, #244]	; (800685c <ProcessFPGACommunications+0x874>)
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	18d3      	adds	r3, r2, r3
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	0a1b      	lsrs	r3, r3, #8
 8006772:	b29b      	uxth	r3, r3
 8006774:	b2da      	uxtb	r2, r3
 8006776:	4b38      	ldr	r3, [pc, #224]	; (8006858 <ProcessFPGACommunications+0x870>)
 8006778:	711a      	strb	r2, [r3, #4]
        AddressIndex++;
 800677a:	4b38      	ldr	r3, [pc, #224]	; (800685c <ProcessFPGACommunications+0x874>)
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	3301      	adds	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	4b36      	ldr	r3, [pc, #216]	; (800685c <ProcessFPGACommunications+0x874>)
 8006784:	801a      	strh	r2, [r3, #0]
        if ((AddressIndex == 6) && (SysVarsCC.EEPROM_Mode == EEPROM_MODE_UPDATE_CONFIG)) {
 8006786:	4b35      	ldr	r3, [pc, #212]	; (800685c <ProcessFPGACommunications+0x874>)
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	2b06      	cmp	r3, #6
 800678c:	d106      	bne.n	800679c <ProcessFPGACommunications+0x7b4>
 800678e:	4b35      	ldr	r3, [pc, #212]	; (8006864 <ProcessFPGACommunications+0x87c>)
 8006790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006792:	2b03      	cmp	r3, #3
 8006794:	d102      	bne.n	800679c <ProcessFPGACommunications+0x7b4>
            State = 3;
 8006796:	4b34      	ldr	r3, [pc, #208]	; (8006868 <ProcessFPGACommunications+0x880>)
 8006798:	2203      	movs	r2, #3
 800679a:	701a      	strb	r2, [r3, #0]
        }
        if ((AddressIndex == 528) && (SysVarsCC.EEPROM_Mode == EEPROM_MODE_UPDATE_PROFILE)) {
 800679c:	4b2f      	ldr	r3, [pc, #188]	; (800685c <ProcessFPGACommunications+0x874>)
 800679e:	881a      	ldrh	r2, [r3, #0]
 80067a0:	2384      	movs	r3, #132	; 0x84
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d123      	bne.n	80067f0 <ProcessFPGACommunications+0x808>
 80067a8:	4b2e      	ldr	r3, [pc, #184]	; (8006864 <ProcessFPGACommunications+0x87c>)
 80067aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d11f      	bne.n	80067f0 <ProcessFPGACommunications+0x808>
            State = 3;
 80067b0:	4b2d      	ldr	r3, [pc, #180]	; (8006868 <ProcessFPGACommunications+0x880>)
 80067b2:	2203      	movs	r2, #3
 80067b4:	701a      	strb	r2, [r3, #0]
        }
        break;
 80067b6:	e01b      	b.n	80067f0 <ProcessFPGACommunications+0x808>

    case 11:
        TestBuffer[0] = 0x80 | (2 << 2);                            // Command:  Master Enable,  Write EEPROM (Automatically sets Serial_verify)
 80067b8:	4b27      	ldr	r3, [pc, #156]	; (8006858 <ProcessFPGACommunications+0x870>)
 80067ba:	2288      	movs	r2, #136	; 0x88
 80067bc:	701a      	strb	r2, [r3, #0]
        TestBuffer[1] = 10;                        // Address, LSB
 80067be:	4b26      	ldr	r3, [pc, #152]	; (8006858 <ProcessFPGACommunications+0x870>)
 80067c0:	220a      	movs	r2, #10
 80067c2:	705a      	strb	r2, [r3, #1]
        TestBuffer[2] = 0;                          // Address, MSB
 80067c4:	4b24      	ldr	r3, [pc, #144]	; (8006858 <ProcessFPGACommunications+0x870>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	709a      	strb	r2, [r3, #2]
        TestBuffer[3] = SysPars.ManualSetpoint & 0xFF;            // Data, LSB
 80067ca:	4b28      	ldr	r3, [pc, #160]	; (800686c <ProcessFPGACommunications+0x884>)
 80067cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	4b21      	ldr	r3, [pc, #132]	; (8006858 <ProcessFPGACommunications+0x870>)
 80067d2:	70da      	strb	r2, [r3, #3]
        TestBuffer[4] = (SysPars.ManualSetpoint >> 8) & 0xFF;     // Data, MSG
 80067d4:	4b25      	ldr	r3, [pc, #148]	; (800686c <ProcessFPGACommunications+0x884>)
 80067d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d8:	121b      	asrs	r3, r3, #8
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	4b1e      	ldr	r3, [pc, #120]	; (8006858 <ProcessFPGACommunications+0x870>)
 80067de:	711a      	strb	r2, [r3, #4]
        State = 3;
 80067e0:	4b21      	ldr	r3, [pc, #132]	; (8006868 <ProcessFPGACommunications+0x880>)
 80067e2:	2203      	movs	r2, #3
 80067e4:	701a      	strb	r2, [r3, #0]
        break;
 80067e6:	e004      	b.n	80067f2 <ProcessFPGACommunications+0x80a>
        break;
 80067e8:	46c0      	nop			; (mov r8, r8)
 80067ea:	e002      	b.n	80067f2 <ProcessFPGACommunications+0x80a>
        break;
 80067ec:	46c0      	nop			; (mov r8, r8)
 80067ee:	e000      	b.n	80067f2 <ProcessFPGACommunications+0x80a>
        break;
 80067f0:	46c0      	nop			; (mov r8, r8)

    }

    SerialUsart2.TxRxBufferCount = 0;
 80067f2:	4b1f      	ldr	r3, [pc, #124]	; (8006870 <ProcessFPGACommunications+0x888>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	821a      	strh	r2, [r3, #16]
    WaitDelay = 10;
 80067f8:	4b1e      	ldr	r3, [pc, #120]	; (8006874 <ProcessFPGACommunications+0x88c>)
 80067fa:	220a      	movs	r2, #10
 80067fc:	701a      	strb	r2, [r3, #0]
    Crc16  = CalcCrcArray ( &TestBuffer[0], 5 );
 80067fe:	1cbc      	adds	r4, r7, #2
 8006800:	4b15      	ldr	r3, [pc, #84]	; (8006858 <ProcessFPGACommunications+0x870>)
 8006802:	2105      	movs	r1, #5
 8006804:	0018      	movs	r0, r3
 8006806:	f7fe fb25 	bl	8004e54 <CalcCrcArray>
 800680a:	0003      	movs	r3, r0
 800680c:	8023      	strh	r3, [r4, #0]
    TestBuffer[5] = Crc16 & 0xFF;
 800680e:	1cbb      	adds	r3, r7, #2
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b2da      	uxtb	r2, r3
 8006814:	4b10      	ldr	r3, [pc, #64]	; (8006858 <ProcessFPGACommunications+0x870>)
 8006816:	715a      	strb	r2, [r3, #5]
    TestBuffer[6] = (Crc16 >> 8) & 0xFF;
 8006818:	1cbb      	adds	r3, r7, #2
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	0a1b      	lsrs	r3, r3, #8
 800681e:	b29b      	uxth	r3, r3
 8006820:	b2da      	uxtb	r2, r3
 8006822:	4b0d      	ldr	r3, [pc, #52]	; (8006858 <ProcessFPGACommunications+0x870>)
 8006824:	719a      	strb	r2, [r3, #6]

    if ((TestBuffer[0] & 0x05) == 4) {
 8006826:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <ProcessFPGACommunications+0x870>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	001a      	movs	r2, r3
 800682c:	2305      	movs	r3, #5
 800682e:	4013      	ands	r3, r2
 8006830:	2b04      	cmp	r3, #4
 8006832:	d102      	bne.n	800683a <ProcessFPGACommunications+0x852>
        SerialUsart2.Transmitting = TRUE;
 8006834:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <ProcessFPGACommunications+0x888>)
 8006836:	2201      	movs	r2, #1
 8006838:	709a      	strb	r2, [r3, #2]
    }

    SerialUsart2.Transmitting = TRUE;
 800683a:	4b0d      	ldr	r3, [pc, #52]	; (8006870 <ProcessFPGACommunications+0x888>)
 800683c:	2201      	movs	r2, #1
 800683e:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&TestBuffer[0], 7);
 8006840:	4905      	ldr	r1, [pc, #20]	; (8006858 <ProcessFPGACommunications+0x870>)
 8006842:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <ProcessFPGACommunications+0x890>)
 8006844:	2207      	movs	r2, #7
 8006846:	0018      	movs	r0, r3
 8006848:	f7fd fd66 	bl	8004318 <HAL_UART_Transmit_DMA>
 800684c:	e000      	b.n	8006850 <ProcessFPGACommunications+0x868>
    if (WaitDelay != 0) return;
 800684e:	46c0      	nop			; (mov r8, r8)


}
 8006850:	46bd      	mov	sp, r7
 8006852:	b003      	add	sp, #12
 8006854:	bd90      	pop	{r4, r7, pc}
 8006856:	46c0      	nop			; (mov r8, r8)
 8006858:	20000020 	.word	0x20000020
 800685c:	20000030 	.word	0x20000030
 8006860:	20000034 	.word	0x20000034
 8006864:	200028e0 	.word	0x200028e0
 8006868:	2000002e 	.word	0x2000002e
 800686c:	200011f4 	.word	0x200011f4
 8006870:	200013d0 	.word	0x200013d0
 8006874:	2000002f 	.word	0x2000002f
 8006878:	200026e0 	.word	0x200026e0

0800687c <HAL_GPIO_EXTI_Callback>:
//
//
// HLR-xxxx
// LLR-xxxx
//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800687c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	0002      	movs	r2, r0
 8006884:	1dbb      	adds	r3, r7, #6
 8006886:	801a      	strh	r2, [r3, #0]

  int16_t Ch;
  //
  // Determine Channel.
  //
  if ( GPIO_Pin == GPIO_PIN_3 ) {
 8006888:	1dbb      	adds	r3, r7, #6
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	2b08      	cmp	r3, #8
 800688e:	d104      	bne.n	800689a <HAL_GPIO_EXTI_Callback+0x1e>
    Ch = 0;
 8006890:	2316      	movs	r3, #22
 8006892:	18fb      	adds	r3, r7, r3
 8006894:	2200      	movs	r2, #0
 8006896:	801a      	strh	r2, [r3, #0]
 8006898:	e033      	b.n	8006902 <HAL_GPIO_EXTI_Callback+0x86>
  } else if ( GPIO_Pin == GPIO_PIN_8 ) {
 800689a:	1dbb      	adds	r3, r7, #6
 800689c:	881a      	ldrh	r2, [r3, #0]
 800689e:	2380      	movs	r3, #128	; 0x80
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d10e      	bne.n	80068c4 <HAL_GPIO_EXTI_Callback+0x48>
    if ( DIG_HandleStruct[1].DIG_InitStruct.Mode == DIG_FREQ_IN ) {
 80068a6:	4bae      	ldr	r3, [pc, #696]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80068a8:	224e      	movs	r2, #78	; 0x4e
 80068aa:	5c9b      	ldrb	r3, [r3, r2]
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d104      	bne.n	80068ba <HAL_GPIO_EXTI_Callback+0x3e>
      Ch = 1;
 80068b0:	2316      	movs	r3, #22
 80068b2:	18fb      	adds	r3, r7, r3
 80068b4:	2201      	movs	r2, #1
 80068b6:	801a      	strh	r2, [r3, #0]
 80068b8:	e023      	b.n	8006902 <HAL_GPIO_EXTI_Callback+0x86>
    } else {
      Ch = 5;
 80068ba:	2316      	movs	r3, #22
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	2205      	movs	r2, #5
 80068c0:	801a      	strh	r2, [r3, #0]
 80068c2:	e01e      	b.n	8006902 <HAL_GPIO_EXTI_Callback+0x86>
    }
  } else if ( GPIO_Pin == GPIO_PIN_9 ) {
 80068c4:	1dbb      	adds	r3, r7, #6
 80068c6:	881a      	ldrh	r2, [r3, #0]
 80068c8:	2380      	movs	r3, #128	; 0x80
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d104      	bne.n	80068da <HAL_GPIO_EXTI_Callback+0x5e>
    Ch = 2;
 80068d0:	2316      	movs	r3, #22
 80068d2:	18fb      	adds	r3, r7, r3
 80068d4:	2202      	movs	r2, #2
 80068d6:	801a      	strh	r2, [r3, #0]
 80068d8:	e013      	b.n	8006902 <HAL_GPIO_EXTI_Callback+0x86>
  } else if ( GPIO_Pin == GPIO_PIN_4 ) {
 80068da:	1dbb      	adds	r3, r7, #6
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	2b10      	cmp	r3, #16
 80068e0:	d104      	bne.n	80068ec <HAL_GPIO_EXTI_Callback+0x70>
    Ch = 3;
 80068e2:	2316      	movs	r3, #22
 80068e4:	18fb      	adds	r3, r7, r3
 80068e6:	2203      	movs	r2, #3
 80068e8:	801a      	strh	r2, [r3, #0]
 80068ea:	e00a      	b.n	8006902 <HAL_GPIO_EXTI_Callback+0x86>
  } else if ( GPIO_Pin == GPIO_PIN_10 ) {
 80068ec:	1dbb      	adds	r3, r7, #6
 80068ee:	881a      	ldrh	r2, [r3, #0]
 80068f0:	2380      	movs	r3, #128	; 0x80
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d000      	beq.n	80068fa <HAL_GPIO_EXTI_Callback+0x7e>
 80068f8:	e12c      	b.n	8006b54 <HAL_GPIO_EXTI_Callback+0x2d8>
    Ch = 4;
 80068fa:	2316      	movs	r3, #22
 80068fc:	18fb      	adds	r3, r7, r3
 80068fe:	2204      	movs	r2, #4
 8006900:	801a      	strh	r2, [r3, #0]
  }
  //
  //  If interrupt was from a real leading edge, then pin should be high.  If pin is low, then interrupt was from a falling edge with glitches.
  //  By the time this logic is executed, any glitches on the input frequency should have passed by this point in the code.
  //
  if ( HAL_GPIO_ReadPin(DIG_HandleStruct[Ch].Dig_IO_Port, DIG_HandleStruct[Ch].Dig_IO_Pin) == 0 ) return;  //
 8006902:	2416      	movs	r4, #22
 8006904:	193b      	adds	r3, r7, r4
 8006906:	2200      	movs	r2, #0
 8006908:	5e9a      	ldrsh	r2, [r3, r2]
 800690a:	4995      	ldr	r1, [pc, #596]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800690c:	0013      	movs	r3, r2
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	189b      	adds	r3, r3, r2
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	18cb      	adds	r3, r1, r3
 8006916:	3310      	adds	r3, #16
 8006918:	6818      	ldr	r0, [r3, #0]
 800691a:	193b      	adds	r3, r7, r4
 800691c:	2200      	movs	r2, #0
 800691e:	5e9a      	ldrsh	r2, [r3, r2]
 8006920:	498f      	ldr	r1, [pc, #572]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006922:	0013      	movs	r3, r2
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	189b      	adds	r3, r3, r2
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	18cb      	adds	r3, r1, r3
 800692c:	333e      	adds	r3, #62	; 0x3e
 800692e:	2200      	movs	r2, #0
 8006930:	5e9b      	ldrsh	r3, [r3, r2]
 8006932:	b29b      	uxth	r3, r3
 8006934:	0019      	movs	r1, r3
 8006936:	f7fa fde1 	bl	80014fc <HAL_GPIO_ReadPin>
 800693a:	1e03      	subs	r3, r0, #0
 800693c:	d100      	bne.n	8006940 <HAL_GPIO_EXTI_Callback+0xc4>
 800693e:	e10b      	b.n	8006b58 <HAL_GPIO_EXTI_Callback+0x2dc>

  uint16_t Timer7Counts = __HAL_TIM_GET_COUNTER(&htim7);                // running at 1Mhz, but will rollover every 65.5mS
 8006940:	4b88      	ldr	r3, [pc, #544]	; (8006b64 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006946:	2414      	movs	r4, #20
 8006948:	193b      	adds	r3, r7, r4
 800694a:	801a      	strh	r2, [r3, #0]
  uint16_t Timer6Counts = __HAL_TIM_GET_COUNTER(&htim6);                // running at 200KHz, rollover every 327.68mS
 800694c:	4b86      	ldr	r3, [pc, #536]	; (8006b68 <HAL_GPIO_EXTI_Callback+0x2ec>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006952:	2512      	movs	r5, #18
 8006954:	197b      	adds	r3, r7, r5
 8006956:	801a      	strh	r2, [r3, #0]

  uint16_t Diff7 = Timer7Counts - DIG_HandleStruct[Ch].Timer7Counts;
 8006958:	2016      	movs	r0, #22
 800695a:	183b      	adds	r3, r7, r0
 800695c:	2200      	movs	r2, #0
 800695e:	5e9a      	ldrsh	r2, [r3, r2]
 8006960:	497f      	ldr	r1, [pc, #508]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006962:	0013      	movs	r3, r2
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	189b      	adds	r3, r3, r2
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	18cb      	adds	r3, r1, r3
 800696c:	3338      	adds	r3, #56	; 0x38
 800696e:	881a      	ldrh	r2, [r3, #0]
 8006970:	2310      	movs	r3, #16
 8006972:	18fb      	adds	r3, r7, r3
 8006974:	1939      	adds	r1, r7, r4
 8006976:	8809      	ldrh	r1, [r1, #0]
 8006978:	1a8a      	subs	r2, r1, r2
 800697a:	801a      	strh	r2, [r3, #0]
  uint16_t Diff6 = Timer6Counts - DIG_HandleStruct[Ch].Timer6Counts;
 800697c:	183b      	adds	r3, r7, r0
 800697e:	2200      	movs	r2, #0
 8006980:	5e9a      	ldrsh	r2, [r3, r2]
 8006982:	4977      	ldr	r1, [pc, #476]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006984:	0013      	movs	r3, r2
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	189b      	adds	r3, r3, r2
 800698a:	00db      	lsls	r3, r3, #3
 800698c:	18cb      	adds	r3, r1, r3
 800698e:	333a      	adds	r3, #58	; 0x3a
 8006990:	881a      	ldrh	r2, [r3, #0]
 8006992:	260e      	movs	r6, #14
 8006994:	19bb      	adds	r3, r7, r6
 8006996:	1979      	adds	r1, r7, r5
 8006998:	8809      	ldrh	r1, [r1, #0]
 800699a:	1a8a      	subs	r2, r1, r2
 800699c:	801a      	strh	r2, [r3, #0]
  DIG_HandleStruct[Ch].Timer7Counts = Timer7Counts;
 800699e:	183b      	adds	r3, r7, r0
 80069a0:	2200      	movs	r2, #0
 80069a2:	5e9a      	ldrsh	r2, [r3, r2]
 80069a4:	496e      	ldr	r1, [pc, #440]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80069a6:	0013      	movs	r3, r2
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	189b      	adds	r3, r3, r2
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	18cb      	adds	r3, r1, r3
 80069b0:	3338      	adds	r3, #56	; 0x38
 80069b2:	193a      	adds	r2, r7, r4
 80069b4:	8812      	ldrh	r2, [r2, #0]
 80069b6:	801a      	strh	r2, [r3, #0]
  DIG_HandleStruct[Ch].Timer6Counts = Timer6Counts;
 80069b8:	183b      	adds	r3, r7, r0
 80069ba:	2200      	movs	r2, #0
 80069bc:	5e9a      	ldrsh	r2, [r3, r2]
 80069be:	4968      	ldr	r1, [pc, #416]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80069c0:	0013      	movs	r3, r2
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	189b      	adds	r3, r3, r2
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	18cb      	adds	r3, r1, r3
 80069ca:	333a      	adds	r3, #58	; 0x3a
 80069cc:	197a      	adds	r2, r7, r5
 80069ce:	8812      	ldrh	r2, [r2, #0]
 80069d0:	801a      	strh	r2, [r3, #0]
  //
  // If Diff6 (200KHz) counter is less than 10000, then DIff7 (1Mhz) counter will be less than 50000.  Which means Diff7 didn't roll-over
  //
  if ( Diff6 < 10000 ) {
 80069d2:	19bb      	adds	r3, r7, r6
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	4a65      	ldr	r2, [pc, #404]	; (8006b6c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d81b      	bhi.n	8006a14 <HAL_GPIO_EXTI_Callback+0x198>
    DIG_HandleStruct[Ch].Accum += Diff7;
 80069dc:	2016      	movs	r0, #22
 80069de:	183b      	adds	r3, r7, r0
 80069e0:	2200      	movs	r2, #0
 80069e2:	5e9a      	ldrsh	r2, [r3, r2]
 80069e4:	495e      	ldr	r1, [pc, #376]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80069e6:	0013      	movs	r3, r2
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	189b      	adds	r3, r3, r2
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	18cb      	adds	r3, r1, r3
 80069f0:	332c      	adds	r3, #44	; 0x2c
 80069f2:	6819      	ldr	r1, [r3, #0]
 80069f4:	2310      	movs	r3, #16
 80069f6:	18fb      	adds	r3, r7, r3
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	183a      	adds	r2, r7, r0
 80069fc:	2000      	movs	r0, #0
 80069fe:	5e12      	ldrsh	r2, [r2, r0]
 8006a00:	18c9      	adds	r1, r1, r3
 8006a02:	4857      	ldr	r0, [pc, #348]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006a04:	0013      	movs	r3, r2
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	189b      	adds	r3, r3, r2
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	18c3      	adds	r3, r0, r3
 8006a0e:	332c      	adds	r3, #44	; 0x2c
 8006a10:	6019      	str	r1, [r3, #0]
 8006a12:	e01e      	b.n	8006a52 <HAL_GPIO_EXTI_Callback+0x1d6>
  } else {
    DIG_HandleStruct[Ch].Accum += Diff6 * 5;
 8006a14:	2416      	movs	r4, #22
 8006a16:	193b      	adds	r3, r7, r4
 8006a18:	2200      	movs	r2, #0
 8006a1a:	5e9a      	ldrsh	r2, [r3, r2]
 8006a1c:	4950      	ldr	r1, [pc, #320]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006a1e:	0013      	movs	r3, r2
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	189b      	adds	r3, r3, r2
 8006a24:	00db      	lsls	r3, r3, #3
 8006a26:	18cb      	adds	r3, r1, r3
 8006a28:	332c      	adds	r3, #44	; 0x2c
 8006a2a:	6819      	ldr	r1, [r3, #0]
 8006a2c:	230e      	movs	r3, #14
 8006a2e:	18fb      	adds	r3, r7, r3
 8006a30:	881a      	ldrh	r2, [r3, #0]
 8006a32:	0013      	movs	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	189b      	adds	r3, r3, r2
 8006a38:	0018      	movs	r0, r3
 8006a3a:	193b      	adds	r3, r7, r4
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	5e9a      	ldrsh	r2, [r3, r2]
 8006a40:	1809      	adds	r1, r1, r0
 8006a42:	4847      	ldr	r0, [pc, #284]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006a44:	0013      	movs	r3, r2
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	189b      	adds	r3, r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	18c3      	adds	r3, r0, r3
 8006a4e:	332c      	adds	r3, #44	; 0x2c
 8006a50:	6019      	str	r1, [r3, #0]
  }
  DIG_HandleStruct[Ch].AccumCounter++;
 8006a52:	2416      	movs	r4, #22
 8006a54:	193b      	adds	r3, r7, r4
 8006a56:	2200      	movs	r2, #0
 8006a58:	5e9a      	ldrsh	r2, [r3, r2]
 8006a5a:	4941      	ldr	r1, [pc, #260]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006a5c:	0013      	movs	r3, r2
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	189b      	adds	r3, r3, r2
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	18cb      	adds	r3, r1, r3
 8006a66:	3330      	adds	r3, #48	; 0x30
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	1c59      	adds	r1, r3, #1
 8006a6c:	483c      	ldr	r0, [pc, #240]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006a6e:	0013      	movs	r3, r2
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	189b      	adds	r3, r3, r2
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	18c3      	adds	r3, r0, r3
 8006a78:	3330      	adds	r3, #48	; 0x30
 8006a7a:	6019      	str	r1, [r3, #0]

  if ( DIG_HandleStruct[Ch].Accum >= 500000 ) {
 8006a7c:	193b      	adds	r3, r7, r4
 8006a7e:	2200      	movs	r2, #0
 8006a80:	5e9a      	ldrsh	r2, [r3, r2]
 8006a82:	4937      	ldr	r1, [pc, #220]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006a84:	0013      	movs	r3, r2
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	189b      	adds	r3, r3, r2
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	18cb      	adds	r3, r1, r3
 8006a8e:	332c      	adds	r3, #44	; 0x2c
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a37      	ldr	r2, [pc, #220]	; (8006b70 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d960      	bls.n	8006b5a <HAL_GPIO_EXTI_Callback+0x2de>
    DIG_HandleStruct[Ch].CaptureAccum = DIG_HandleStruct[Ch].Accum;
 8006a98:	2516      	movs	r5, #22
 8006a9a:	197b      	adds	r3, r7, r5
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	5e59      	ldrsh	r1, [r3, r1]
 8006aa0:	197b      	adds	r3, r7, r5
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	5e9a      	ldrsh	r2, [r3, r2]
 8006aa6:	482e      	ldr	r0, [pc, #184]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006aa8:	000b      	movs	r3, r1
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	185b      	adds	r3, r3, r1
 8006aae:	00db      	lsls	r3, r3, #3
 8006ab0:	18c3      	adds	r3, r0, r3
 8006ab2:	332c      	adds	r3, #44	; 0x2c
 8006ab4:	6819      	ldr	r1, [r3, #0]
 8006ab6:	482a      	ldr	r0, [pc, #168]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006ab8:	0013      	movs	r3, r2
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	189b      	adds	r3, r3, r2
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	18c3      	adds	r3, r0, r3
 8006ac2:	3324      	adds	r3, #36	; 0x24
 8006ac4:	6019      	str	r1, [r3, #0]
    DIG_HandleStruct[Ch].CaptureAccumCounter = DIG_HandleStruct[Ch].AccumCounter;
 8006ac6:	197b      	adds	r3, r7, r5
 8006ac8:	2100      	movs	r1, #0
 8006aca:	5e59      	ldrsh	r1, [r3, r1]
 8006acc:	197b      	adds	r3, r7, r5
 8006ace:	2200      	movs	r2, #0
 8006ad0:	5e9a      	ldrsh	r2, [r3, r2]
 8006ad2:	4823      	ldr	r0, [pc, #140]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006ad4:	000b      	movs	r3, r1
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	185b      	adds	r3, r3, r1
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	18c3      	adds	r3, r0, r3
 8006ade:	3330      	adds	r3, #48	; 0x30
 8006ae0:	6819      	ldr	r1, [r3, #0]
 8006ae2:	481f      	ldr	r0, [pc, #124]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006ae4:	0013      	movs	r3, r2
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	189b      	adds	r3, r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	18c3      	adds	r3, r0, r3
 8006aee:	3328      	adds	r3, #40	; 0x28
 8006af0:	6019      	str	r1, [r3, #0]
    DIG_HandleStruct[Ch].CapturePeriodCounter++;
 8006af2:	197b      	adds	r3, r7, r5
 8006af4:	2200      	movs	r2, #0
 8006af6:	5e9a      	ldrsh	r2, [r3, r2]
 8006af8:	4919      	ldr	r1, [pc, #100]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006afa:	2044      	movs	r0, #68	; 0x44
 8006afc:	0013      	movs	r3, r2
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	189b      	adds	r3, r3, r2
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	18cb      	adds	r3, r1, r3
 8006b06:	181b      	adds	r3, r3, r0
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	b29c      	uxth	r4, r3
 8006b0e:	4914      	ldr	r1, [pc, #80]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006b10:	2044      	movs	r0, #68	; 0x44
 8006b12:	0013      	movs	r3, r2
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	189b      	adds	r3, r3, r2
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	18cb      	adds	r3, r1, r3
 8006b1c:	181b      	adds	r3, r3, r0
 8006b1e:	1c22      	adds	r2, r4, #0
 8006b20:	801a      	strh	r2, [r3, #0]
    DIG_HandleStruct[Ch].Accum = 0;
 8006b22:	197b      	adds	r3, r7, r5
 8006b24:	2200      	movs	r2, #0
 8006b26:	5e9a      	ldrsh	r2, [r3, r2]
 8006b28:	490d      	ldr	r1, [pc, #52]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006b2a:	0013      	movs	r3, r2
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	189b      	adds	r3, r3, r2
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	18cb      	adds	r3, r1, r3
 8006b34:	332c      	adds	r3, #44	; 0x2c
 8006b36:	2200      	movs	r2, #0
 8006b38:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].AccumCounter = 0;
 8006b3a:	197b      	adds	r3, r7, r5
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	5e9a      	ldrsh	r2, [r3, r2]
 8006b40:	4907      	ldr	r1, [pc, #28]	; (8006b60 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8006b42:	0013      	movs	r3, r2
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	189b      	adds	r3, r3, r2
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	18cb      	adds	r3, r1, r3
 8006b4c:	3330      	adds	r3, #48	; 0x30
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e002      	b.n	8006b5a <HAL_GPIO_EXTI_Callback+0x2de>
    return;
 8006b54:	46c0      	nop			; (mov r8, r8)
 8006b56:	e000      	b.n	8006b5a <HAL_GPIO_EXTI_Callback+0x2de>
  if ( HAL_GPIO_ReadPin(DIG_HandleStruct[Ch].Dig_IO_Port, DIG_HandleStruct[Ch].Dig_IO_Pin) == 0 ) return;  //
 8006b58:	46c0      	nop			; (mov r8, r8)
  }
}
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	b007      	add	sp, #28
 8006b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b60:	20001f14 	.word	0x20001f14
 8006b64:	2000279c 	.word	0x2000279c
 8006b68:	20001e94 	.word	0x20001e94
 8006b6c:	0000270f 	.word	0x0000270f
 8006b70:	0007a11f 	.word	0x0007a11f

08006b74 <CalculuateFrequencyInput>:
//  At maximum input frequency of 20 KHz, rise-to-rise time will be 50uS
//
//  CapturePeriodCounter, CaptureAccumCounter, and CaptureAccum are updated in
//      HAL_GPIO_EXTI_Callback function
//
void CalculuateFrequencyInput(void) {
 8006b74:	b590      	push	{r4, r7, lr}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0

  int16_t i;

      for ( i = 0; i < 6; i++ ) {
 8006b7a:	1dbb      	adds	r3, r7, #6
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	801a      	strh	r2, [r3, #0]
 8006b80:	e0af      	b.n	8006ce2 <CalculuateFrequencyInput+0x16e>
        //
        // If DIG I/O isn't configured as Frequency Input, or
        //  rise-to-rise > 500 mS, then set CaptureFrequency to 0
        //
        if ( (DIG_HandleStruct[i].DIG_InitStruct.Mode != DIG_FREQ_IN) || (DIG_HandleStruct[i].FreqInputTicks > 1000) ) {
 8006b82:	1dbb      	adds	r3, r7, #6
 8006b84:	2200      	movs	r2, #0
 8006b86:	5e9a      	ldrsh	r2, [r3, r2]
 8006b88:	495b      	ldr	r1, [pc, #364]	; (8006cf8 <CalculuateFrequencyInput+0x184>)
 8006b8a:	0013      	movs	r3, r2
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	189b      	adds	r3, r3, r2
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	18cb      	adds	r3, r1, r3
 8006b94:	3306      	adds	r3, #6
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d10f      	bne.n	8006bbc <CalculuateFrequencyInput+0x48>
 8006b9c:	1dbb      	adds	r3, r7, #6
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	5e9a      	ldrsh	r2, [r3, r2]
 8006ba2:	4955      	ldr	r1, [pc, #340]	; (8006cf8 <CalculuateFrequencyInput+0x184>)
 8006ba4:	2046      	movs	r0, #70	; 0x46
 8006ba6:	0013      	movs	r3, r2
 8006ba8:	00db      	lsls	r3, r3, #3
 8006baa:	189b      	adds	r3, r3, r2
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	18cb      	adds	r3, r1, r3
 8006bb0:	181b      	adds	r3, r3, r0
 8006bb2:	881a      	ldrh	r2, [r3, #0]
 8006bb4:	23fa      	movs	r3, #250	; 0xfa
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d919      	bls.n	8006bf0 <CalculuateFrequencyInput+0x7c>
          DIG_HandleStruct[i].CaptureFrequency = 0;
 8006bbc:	1dbb      	adds	r3, r7, #6
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	5e9a      	ldrsh	r2, [r3, r2]
 8006bc2:	494d      	ldr	r1, [pc, #308]	; (8006cf8 <CalculuateFrequencyInput+0x184>)
 8006bc4:	0013      	movs	r3, r2
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	189b      	adds	r3, r3, r2
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	18cb      	adds	r3, r1, r3
 8006bce:	3334      	adds	r3, #52	; 0x34
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	601a      	str	r2, [r3, #0]
          DIG_HandleStruct[i].FreqInputTicks = 0;
 8006bd4:	1dbb      	adds	r3, r7, #6
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	5e9a      	ldrsh	r2, [r3, r2]
 8006bda:	4947      	ldr	r1, [pc, #284]	; (8006cf8 <CalculuateFrequencyInput+0x184>)
 8006bdc:	2046      	movs	r0, #70	; 0x46
 8006bde:	0013      	movs	r3, r2
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	189b      	adds	r3, r3, r2
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	18cb      	adds	r3, r1, r3
 8006be8:	181b      	adds	r3, r3, r0
 8006bea:	2200      	movs	r2, #0
 8006bec:	801a      	strh	r2, [r3, #0]
 8006bee:	e05b      	b.n	8006ca8 <CalculuateFrequencyInput+0x134>
          //
          // A change in CapturePeriodCounter means a rising
          //  edge has been detected.
          //
        } else if ( DIG_HandleStruct[i].CapturePeriodCounter != OldCapturePeriodCounter[i] ) {
 8006bf0:	1dbb      	adds	r3, r7, #6
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	5e9a      	ldrsh	r2, [r3, r2]
 8006bf6:	4940      	ldr	r1, [pc, #256]	; (8006cf8 <CalculuateFrequencyInput+0x184>)
 8006bf8:	2044      	movs	r0, #68	; 0x44
 8006bfa:	0013      	movs	r3, r2
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	189b      	adds	r3, r3, r2
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	18cb      	adds	r3, r1, r3
 8006c04:	181b      	adds	r3, r3, r0
 8006c06:	881a      	ldrh	r2, [r3, #0]
 8006c08:	1dbb      	adds	r3, r7, #6
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	5e59      	ldrsh	r1, [r3, r1]
 8006c0e:	4b3b      	ldr	r3, [pc, #236]	; (8006cfc <CalculuateFrequencyInput+0x188>)
 8006c10:	0049      	lsls	r1, r1, #1
 8006c12:	5acb      	ldrh	r3, [r1, r3]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d047      	beq.n	8006ca8 <CalculuateFrequencyInput+0x134>
          OldCapturePeriodCounter[i] = DIG_HandleStruct[i].CapturePeriodCounter;
 8006c18:	1dbb      	adds	r3, r7, #6
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	5e9a      	ldrsh	r2, [r3, r2]
 8006c1e:	1dbb      	adds	r3, r7, #6
 8006c20:	2100      	movs	r1, #0
 8006c22:	5e59      	ldrsh	r1, [r3, r1]
 8006c24:	4834      	ldr	r0, [pc, #208]	; (8006cf8 <CalculuateFrequencyInput+0x184>)
 8006c26:	2444      	movs	r4, #68	; 0x44
 8006c28:	0013      	movs	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	189b      	adds	r3, r3, r2
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	18c3      	adds	r3, r0, r3
 8006c32:	191b      	adds	r3, r3, r4
 8006c34:	8818      	ldrh	r0, [r3, #0]
 8006c36:	4b31      	ldr	r3, [pc, #196]	; (8006cfc <CalculuateFrequencyInput+0x188>)
 8006c38:	004a      	lsls	r2, r1, #1
 8006c3a:	1c01      	adds	r1, r0, #0
 8006c3c:	52d1      	strh	r1, [r2, r3]
          DIG_HandleStruct[i].CaptureFrequency = MultDivideWithRounding64((100000000), DIG_HandleStruct[i].CaptureAccumCounter, DIG_HandleStruct[i].CaptureAccum, RESULT_32);
 8006c3e:	1dbb      	adds	r3, r7, #6
 8006c40:	2200      	movs	r2, #0
 8006c42:	5e9a      	ldrsh	r2, [r3, r2]
 8006c44:	492c      	ldr	r1, [pc, #176]	; (8006cf8 <CalculuateFrequencyInput+0x184>)
 8006c46:	0013      	movs	r3, r2
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	189b      	adds	r3, r3, r2
 8006c4c:	00db      	lsls	r3, r3, #3
 8006c4e:	18cb      	adds	r3, r1, r3
 8006c50:	3328      	adds	r3, #40	; 0x28
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	001c      	movs	r4, r3
 8006c56:	1dbb      	adds	r3, r7, #6
 8006c58:	2200      	movs	r2, #0
 8006c5a:	5e9a      	ldrsh	r2, [r3, r2]
 8006c5c:	4926      	ldr	r1, [pc, #152]	; (8006cf8 <CalculuateFrequencyInput+0x184>)
 8006c5e:	0013      	movs	r3, r2
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	189b      	adds	r3, r3, r2
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	18cb      	adds	r3, r1, r3
 8006c68:	3324      	adds	r3, #36	; 0x24
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	001a      	movs	r2, r3
 8006c6e:	4824      	ldr	r0, [pc, #144]	; (8006d00 <CalculuateFrequencyInput+0x18c>)
 8006c70:	2301      	movs	r3, #1
 8006c72:	0021      	movs	r1, r4
 8006c74:	f000 fa0e 	bl	8007094 <MultDivideWithRounding64>
 8006c78:	1dbb      	adds	r3, r7, #6
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	5e9a      	ldrsh	r2, [r3, r2]
 8006c7e:	491e      	ldr	r1, [pc, #120]	; (8006cf8 <CalculuateFrequencyInput+0x184>)
 8006c80:	0013      	movs	r3, r2
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	189b      	adds	r3, r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	18cb      	adds	r3, r1, r3
 8006c8a:	3334      	adds	r3, #52	; 0x34
 8006c8c:	6018      	str	r0, [r3, #0]
          DIG_HandleStruct[i].FreqInputTicks = 0;
 8006c8e:	1dbb      	adds	r3, r7, #6
 8006c90:	2200      	movs	r2, #0
 8006c92:	5e9a      	ldrsh	r2, [r3, r2]
 8006c94:	4918      	ldr	r1, [pc, #96]	; (8006cf8 <CalculuateFrequencyInput+0x184>)
 8006c96:	2046      	movs	r0, #70	; 0x46
 8006c98:	0013      	movs	r3, r2
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	189b      	adds	r3, r3, r2
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	18cb      	adds	r3, r1, r3
 8006ca2:	181b      	adds	r3, r3, r0
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	801a      	strh	r2, [r3, #0]
        }
        SysVars.DigIO_InputFrequency[i] = DIG_HandleStruct[i].CaptureFrequency;
 8006ca8:	1dbb      	adds	r3, r7, #6
 8006caa:	2200      	movs	r2, #0
 8006cac:	5e9a      	ldrsh	r2, [r3, r2]
 8006cae:	1dbb      	adds	r3, r7, #6
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	5e18      	ldrsh	r0, [r3, r0]
 8006cb4:	4910      	ldr	r1, [pc, #64]	; (8006cf8 <CalculuateFrequencyInput+0x184>)
 8006cb6:	0013      	movs	r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	189b      	adds	r3, r3, r2
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	18cb      	adds	r3, r1, r3
 8006cc0:	3334      	adds	r3, #52	; 0x34
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	490f      	ldr	r1, [pc, #60]	; (8006d04 <CalculuateFrequencyInput+0x190>)
 8006cc6:	0003      	movs	r3, r0
 8006cc8:	3310      	adds	r3, #16
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	18cb      	adds	r3, r1, r3
 8006cce:	3304      	adds	r3, #4
 8006cd0:	601a      	str	r2, [r3, #0]
      for ( i = 0; i < 6; i++ ) {
 8006cd2:	1dbb      	adds	r3, r7, #6
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	5e9b      	ldrsh	r3, [r3, r2]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3301      	adds	r3, #1
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	1dbb      	adds	r3, r7, #6
 8006ce0:	801a      	strh	r2, [r3, #0]
 8006ce2:	1dbb      	adds	r3, r7, #6
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	5e9b      	ldrsh	r3, [r3, r2]
 8006ce8:	2b05      	cmp	r3, #5
 8006cea:	dc00      	bgt.n	8006cee <CalculuateFrequencyInput+0x17a>
 8006cec:	e749      	b.n	8006b82 <CalculuateFrequencyInput+0xe>
      }
}
 8006cee:	46c0      	nop			; (mov r8, r8)
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	b003      	add	sp, #12
 8006cf4:	bd90      	pop	{r4, r7, pc}
 8006cf6:	46c0      	nop			; (mov r8, r8)
 8006cf8:	20001f14 	.word	0x20001f14
 8006cfc:	2000004c 	.word	0x2000004c
 8006d00:	05f5e100 	.word	0x05f5e100
 8006d04:	20001d58 	.word	0x20001d58

08006d08 <ProcessI2C1>:
//  This routine is called from Main Loop every 1mS and reads the MCP3421
//
// HLR-xxxx
// LLR-xxxx
//
void ProcessI2C1(void) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0

}
 8006d0c:	46c0      	nop			; (mov r8, r8)
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <InitializeSystem>:
// ********************************************************************************************************************************

#include "global.h"


void InitializeSystem (void) {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0

    uint16_t            *PagePtr;

    HAL_Init();
 8006d1a:	f7f9 fd3b 	bl	8000794 <HAL_Init>
    SystemClock_Config();
 8006d1e:	f002 fcc5 	bl	80096ac <SystemClock_Config>

    MX_GPIO_Init();
 8006d22:	f001 fec9 	bl	8008ab8 <MX_GPIO_Init>
    MX_DMA_Init();
 8006d26:	f001 fe57 	bl	80089d8 <MX_DMA_Init>
    MX_CAN_Init();
 8006d2a:	f001 fd85 	bl	8008838 <MX_CAN_Init>
    MX_CRC_Init();
 8006d2e:	f001 fe11 	bl	8008954 <MX_CRC_Init>
    MX_I2C1_Init();
 8006d32:	f002 f88b 	bl	8008e4c <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8006d36:	f002 fa2b 	bl	8009190 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 8006d3a:	f002 fa59 	bl	80091f0 <MX_USART2_UART_Init>
    MX_USART4_UART_Init();
 8006d3e:	f002 fa87 	bl	8009250 <MX_USART4_UART_Init>

    MX_TIM6_Init();
 8006d42:	f002 fc09 	bl	8009558 <MX_TIM6_Init>
    __HAL_TIM_SET_COUNTER(&htim6, 0); // Setup to run at 200Khz.  Rollover every 327.68mS
 8006d46:	4b3a      	ldr	r3, [pc, #232]	; (8006e30 <InitializeSystem+0x11c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start(&htim6);
 8006d4e:	4b38      	ldr	r3, [pc, #224]	; (8006e30 <InitializeSystem+0x11c>)
 8006d50:	0018      	movs	r0, r3
 8006d52:	f7fc fd83 	bl	800385c <HAL_TIM_Base_Start>
    MX_TIM7_Init();
 8006d56:	f002 fc3b 	bl	80095d0 <MX_TIM7_Init>
    __HAL_TIM_SET_COUNTER(&htim7, 0); // Setup to run at 1Mhz.   Rollover every 16.384mS
 8006d5a:	4b36      	ldr	r3, [pc, #216]	; (8006e34 <InitializeSystem+0x120>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start(&htim7);
 8006d62:	4b34      	ldr	r3, [pc, #208]	; (8006e34 <InitializeSystem+0x120>)
 8006d64:	0018      	movs	r0, r3
 8006d66:	f7fc fd79 	bl	800385c <HAL_TIM_Base_Start>

    PagePtr = (uint16_t*)(0x08000000 + (2048 * 56));
 8006d6a:	4b33      	ldr	r3, [pc, #204]	; (8006e38 <InitializeSystem+0x124>)
 8006d6c:	607b      	str	r3, [r7, #4]
    if ((memcmp((void *)(0x08000000 + (2048 * 55)), (void *)(0x08000000 + (2048 * 56)), 2048) != 0) && (PagePtr[1023] == 0xAA55)) {
 8006d6e:	2380      	movs	r3, #128	; 0x80
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	4931      	ldr	r1, [pc, #196]	; (8006e38 <InitializeSystem+0x124>)
 8006d74:	4831      	ldr	r0, [pc, #196]	; (8006e3c <InitializeSystem+0x128>)
 8006d76:	001a      	movs	r2, r3
 8006d78:	f002 fe1c 	bl	80099b4 <memcmp>
 8006d7c:	1e03      	subs	r3, r0, #0
 8006d7e:	d00c      	beq.n	8006d9a <InitializeSystem+0x86>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a2f      	ldr	r2, [pc, #188]	; (8006e40 <InitializeSystem+0x12c>)
 8006d84:	4694      	mov	ip, r2
 8006d86:	4463      	add	r3, ip
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	4a2e      	ldr	r2, [pc, #184]	; (8006e44 <InitializeSystem+0x130>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d104      	bne.n	8006d9a <InitializeSystem+0x86>
        ReflashTuningParameters(55, (uint16_t *)(0x08000000 + (2048 * 56)));
 8006d90:	4b29      	ldr	r3, [pc, #164]	; (8006e38 <InitializeSystem+0x124>)
 8006d92:	0019      	movs	r1, r3
 8006d94:	2037      	movs	r0, #55	; 0x37
 8006d96:	f000 fcd9 	bl	800774c <ReflashTuningParameters>
    //
    // Setup pointers to Configuration structures stored at end of FLASH.  The flash within the STM32 consists of 64 sectors,
    //  with each sector being 2048 bytes (64 * 2K = 128KB).  The last sector is used for User Configuration, the next to last
    //  sector contains Factory Configuration.
    //
    FlashConfiguration = (stFlashConfiguration *) (0x08000000 + (2048 * 63));
 8006d9a:	4b2b      	ldr	r3, [pc, #172]	; (8006e48 <InitializeSystem+0x134>)
 8006d9c:	4a2b      	ldr	r2, [pc, #172]	; (8006e4c <InitializeSystem+0x138>)
 8006d9e:	601a      	str	r2, [r3, #0]
    FactoryConfiguration = (stFactoryConfiguration *) (0x08000000 + (2048 * 62));
 8006da0:	4b2b      	ldr	r3, [pc, #172]	; (8006e50 <InitializeSystem+0x13c>)
 8006da2:	4a2c      	ldr	r2, [pc, #176]	; (8006e54 <InitializeSystem+0x140>)
 8006da4:	601a      	str	r2, [r3, #0]
	//
	//  Initiailize Instance Number of SerialUsartx data structure
	//
    // Used to communicate with PC
    //
	SerialUsart1.InstanceNumber = 1;
 8006da6:	4b2c      	ldr	r3, [pc, #176]	; (8006e58 <InitializeSystem+0x144>)
 8006da8:	2201      	movs	r2, #1
 8006daa:	701a      	strb	r2, [r3, #0]
    SerialUsart1.ReceiveMode = 1;
 8006dac:	4b2a      	ldr	r3, [pc, #168]	; (8006e58 <InitializeSystem+0x144>)
 8006dae:	2201      	movs	r2, #1
 8006db0:	705a      	strb	r2, [r3, #1]
    SerialUsart1.TxRxBuffer = SerialBuffer1;
 8006db2:	4b29      	ldr	r3, [pc, #164]	; (8006e58 <InitializeSystem+0x144>)
 8006db4:	4a29      	ldr	r2, [pc, #164]	; (8006e5c <InitializeSystem+0x148>)
 8006db6:	615a      	str	r2, [r3, #20]
    SerialUsart1.TxRxBufferSize = sizeof(SerialBuffer1);
 8006db8:	4b27      	ldr	r3, [pc, #156]	; (8006e58 <InitializeSystem+0x144>)
 8006dba:	4a29      	ldr	r2, [pc, #164]	; (8006e60 <InitializeSystem+0x14c>)
 8006dbc:	81da      	strh	r2, [r3, #14]
    //
    // Used to communicate with Sender via DIG_IO1/2
    //
    SerialUsart2.InstanceNumber = 2;
 8006dbe:	4b29      	ldr	r3, [pc, #164]	; (8006e64 <InitializeSystem+0x150>)
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	701a      	strb	r2, [r3, #0]
    SerialUsart2.ReceiveMode = 1;
 8006dc4:	4b27      	ldr	r3, [pc, #156]	; (8006e64 <InitializeSystem+0x150>)
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	705a      	strb	r2, [r3, #1]
    SerialUsart2.TxRxBuffer = SerialBuffer2;
 8006dca:	4b26      	ldr	r3, [pc, #152]	; (8006e64 <InitializeSystem+0x150>)
 8006dcc:	4a26      	ldr	r2, [pc, #152]	; (8006e68 <InitializeSystem+0x154>)
 8006dce:	615a      	str	r2, [r3, #20]
    SerialUsart2.TxRxBufferSize = sizeof(SerialBuffer2);
 8006dd0:	4b24      	ldr	r3, [pc, #144]	; (8006e64 <InitializeSystem+0x150>)
 8006dd2:	4a23      	ldr	r2, [pc, #140]	; (8006e60 <InitializeSystem+0x14c>)
 8006dd4:	81da      	strh	r2, [r3, #14]
    //
    // Used to communicate with Sender via RS485 interface
    //
    SerialUsart4.InstanceNumber = 4;
 8006dd6:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <InitializeSystem+0x158>)
 8006dd8:	2204      	movs	r2, #4
 8006dda:	701a      	strb	r2, [r3, #0]
    SerialUsart4.ReceiveMode = 1;
 8006ddc:	4b23      	ldr	r3, [pc, #140]	; (8006e6c <InitializeSystem+0x158>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	705a      	strb	r2, [r3, #1]
    SerialUsart4.TxRxBuffer = SerialBuffer4;
 8006de2:	4b22      	ldr	r3, [pc, #136]	; (8006e6c <InitializeSystem+0x158>)
 8006de4:	4a22      	ldr	r2, [pc, #136]	; (8006e70 <InitializeSystem+0x15c>)
 8006de6:	615a      	str	r2, [r3, #20]
    SerialUsart4.TxRxBufferSize = sizeof(SerialBuffer4);
 8006de8:	4b20      	ldr	r3, [pc, #128]	; (8006e6c <InitializeSystem+0x158>)
 8006dea:	4a1d      	ldr	r2, [pc, #116]	; (8006e60 <InitializeSystem+0x14c>)
 8006dec:	81da      	strh	r2, [r3, #14]
    //
    // Enable TSEN, VBATEN, and VREFEN
    //
    ADC1_COMMON->CCR |= ADC_CCR_TSEN | ADC_CCR_VBATEN | ADC_CCR_VREFEN;
 8006dee:	4b21      	ldr	r3, [pc, #132]	; (8006e74 <InitializeSystem+0x160>)
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	4b20      	ldr	r3, [pc, #128]	; (8006e74 <InitializeSystem+0x160>)
 8006df4:	21e0      	movs	r1, #224	; 0xe0
 8006df6:	0449      	lsls	r1, r1, #17
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	601a      	str	r2, [r3, #0]


    I2C1Control.hi2c = &hi2c1;
 8006dfc:	4b1e      	ldr	r3, [pc, #120]	; (8006e78 <InitializeSystem+0x164>)
 8006dfe:	4a1f      	ldr	r2, [pc, #124]	; (8006e7c <InitializeSystem+0x168>)
 8006e00:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart1, &SerialUsart1.RxChar, 1);
 8006e02:	491f      	ldr	r1, [pc, #124]	; (8006e80 <InitializeSystem+0x16c>)
 8006e04:	4b1f      	ldr	r3, [pc, #124]	; (8006e84 <InitializeSystem+0x170>)
 8006e06:	2201      	movs	r2, #1
 8006e08:	0018      	movs	r0, r3
 8006e0a:	f7fd f9e7 	bl	80041dc <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart4, &SerialUsart4.RxChar, 1);
 8006e0e:	491e      	ldr	r1, [pc, #120]	; (8006e88 <InitializeSystem+0x174>)
 8006e10:	4b1e      	ldr	r3, [pc, #120]	; (8006e8c <InitializeSystem+0x178>)
 8006e12:	2201      	movs	r2, #1
 8006e14:	0018      	movs	r0, r3
 8006e16:	f7fd f9e1 	bl	80041dc <HAL_UART_Receive_IT>

    InitializeDigitalIO(0); // Configure DIG_IO1 as SERIAL_INOUT, all other DIG I/O as Digital Inputs (disabled)
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	f7ff f85a 	bl	8005ed4 <InitializeDigitalIO>
    InitializeNAU7802();
 8006e20:	f000 f9ee 	bl	8007200 <InitializeNAU7802>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8006e24:	b662      	cpsie	i
    __enable_irq();

}
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	b002      	add	sp, #8
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	20001e94 	.word	0x20001e94
 8006e34:	2000279c 	.word	0x2000279c
 8006e38:	0801c000 	.word	0x0801c000
 8006e3c:	0801b800 	.word	0x0801b800
 8006e40:	000007fe 	.word	0x000007fe
 8006e44:	0000aa55 	.word	0x0000aa55
 8006e48:	200020c4 	.word	0x200020c4
 8006e4c:	0801f800 	.word	0x0801f800
 8006e50:	20001ccc 	.word	0x20001ccc
 8006e54:	0801f000 	.word	0x0801f000
 8006e58:	200013b0 	.word	0x200013b0
 8006e5c:	200000fc 	.word	0x200000fc
 8006e60:	00000834 	.word	0x00000834
 8006e64:	200013d0 	.word	0x200013d0
 8006e68:	20001494 	.word	0x20001494
 8006e6c:	2000141c 	.word	0x2000141c
 8006e70:	20000978 	.word	0x20000978
 8006e74:	40012708 	.word	0x40012708
 8006e78:	2000143c 	.word	0x2000143c
 8006e7c:	2000127c 	.word	0x2000127c
 8006e80:	200013c8 	.word	0x200013c8
 8006e84:	20001e1c 	.word	0x20001e1c
 8006e88:	20001434 	.word	0x20001434
 8006e8c:	2000262c 	.word	0x2000262c

08006e90 <main>:
#include "math.h"
//
// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
int main(void) {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0

    uint32_t    LoopCounter = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	607b      	str	r3, [r7, #4]
    uint8_t     CDTxOffTimer = 0;
 8006e9a:	1cfb      	adds	r3, r7, #3
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	701a      	strb	r2, [r3, #0]
    uint8_t     CDRxOffTimer = 0;
 8006ea0:	1cbb      	adds	r3, r7, #2
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	701a      	strb	r2, [r3, #0]

    InitializeSystem();
 8006ea6:	f7ff ff35 	bl	8006d14 <InitializeSystem>

    while (1) {

        LoopCounter++;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3301      	adds	r3, #1
 8006eae:	607b      	str	r3, [r7, #4]
        ProcessTickCounters();
 8006eb0:	f002 fcae 	bl	8009810 <ProcessTickCounters>

        if (CDTxBufferIn != CDTxBufferOut) {
 8006eb4:	4b66      	ldr	r3, [pc, #408]	; (8007050 <main+0x1c0>)
 8006eb6:	781a      	ldrb	r2, [r3, #0]
 8006eb8:	4b66      	ldr	r3, [pc, #408]	; (8007054 <main+0x1c4>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d024      	beq.n	8006f0a <main+0x7a>
            if (CDTxOffTimer == 0) {
 8006ec0:	1cfb      	adds	r3, r7, #3
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d105      	bne.n	8006ed4 <main+0x44>
                HAL_GPIO_WritePin( RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_SET);                              // Turn on RS422/485 Driver
 8006ec8:	4b63      	ldr	r3, [pc, #396]	; (8007058 <main+0x1c8>)
 8006eca:	2201      	movs	r2, #1
 8006ecc:	2120      	movs	r1, #32
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f7fa fb31 	bl	8001536 <HAL_GPIO_WritePin>
            }
            if ( (USART4->ISR & (1 << 6)) != 0 ) {                           // Wait for Byte to be sent (Transmission Complete)
 8006ed4:	4b61      	ldr	r3, [pc, #388]	; (800705c <main+0x1cc>)
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	2240      	movs	r2, #64	; 0x40
 8006eda:	4013      	ands	r3, r2
 8006edc:	1e5a      	subs	r2, r3, #1
 8006ede:	4193      	sbcs	r3, r2
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00d      	beq.n	8006f02 <main+0x72>
                USART4->TDR = CDTxBuffer[CDTxBufferOut];                          // Send Data
 8006ee6:	4b5b      	ldr	r3, [pc, #364]	; (8007054 <main+0x1c4>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	001a      	movs	r2, r3
 8006eec:	4b5c      	ldr	r3, [pc, #368]	; (8007060 <main+0x1d0>)
 8006eee:	5c9a      	ldrb	r2, [r3, r2]
 8006ef0:	4b5a      	ldr	r3, [pc, #360]	; (800705c <main+0x1cc>)
 8006ef2:	b292      	uxth	r2, r2
 8006ef4:	851a      	strh	r2, [r3, #40]	; 0x28
                CDTxBufferOut++;
 8006ef6:	4b57      	ldr	r3, [pc, #348]	; (8007054 <main+0x1c4>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	3301      	adds	r3, #1
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	4b55      	ldr	r3, [pc, #340]	; (8007054 <main+0x1c4>)
 8006f00:	701a      	strb	r2, [r3, #0]
            }
            CDTxOffTimer = 48;
 8006f02:	1cfb      	adds	r3, r7, #3
 8006f04:	2230      	movs	r2, #48	; 0x30
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	e01b      	b.n	8006f42 <main+0xb2>
        } else if (CDTxOffTimer != 0) {
 8006f0a:	1cfb      	adds	r3, r7, #3
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d017      	beq.n	8006f42 <main+0xb2>
            if (--CDTxOffTimer == 0) {
 8006f12:	1cfb      	adds	r3, r7, #3
 8006f14:	1cfa      	adds	r2, r7, #3
 8006f16:	7812      	ldrb	r2, [r2, #0]
 8006f18:	3a01      	subs	r2, #1
 8006f1a:	701a      	strb	r2, [r3, #0]
 8006f1c:	1cfb      	adds	r3, r7, #3
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	425a      	negs	r2, r3
 8006f22:	4153      	adcs	r3, r2
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00b      	beq.n	8006f42 <main+0xb2>
                HAL_GPIO_WritePin( RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);            // Turn off RS422/485 Driver
 8006f2a:	4b4b      	ldr	r3, [pc, #300]	; (8007058 <main+0x1c8>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2120      	movs	r1, #32
 8006f30:	0018      	movs	r0, r3
 8006f32:	f7fa fb00 	bl	8001536 <HAL_GPIO_WritePin>
                SendMessageToCD = 0;
 8006f36:	4b4b      	ldr	r3, [pc, #300]	; (8007064 <main+0x1d4>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
                SendMessageToPC = 1;
 8006f3c:	4b4a      	ldr	r3, [pc, #296]	; (8007068 <main+0x1d8>)
 8006f3e:	2201      	movs	r2, #1
 8006f40:	701a      	strb	r2, [r3, #0]
            }
        }

        if (CDRxBufferIn != CDRxBufferOut) {
 8006f42:	4b4a      	ldr	r3, [pc, #296]	; (800706c <main+0x1dc>)
 8006f44:	781a      	ldrb	r2, [r3, #0]
 8006f46:	4b4a      	ldr	r3, [pc, #296]	; (8007070 <main+0x1e0>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d025      	beq.n	8006f9a <main+0x10a>
            if (CDRxOffTimer == 0) {
 8006f4e:	1cbb      	adds	r3, r7, #2
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d106      	bne.n	8006f64 <main+0xd4>
                HAL_GPIO_WritePin( PC_RS485_EN_GPIO_Port, PC_RS485_EN_Pin, GPIO_PIN_SET);                              // Turn on RS422/485 Driver
 8006f56:	2380      	movs	r3, #128	; 0x80
 8006f58:	01db      	lsls	r3, r3, #7
 8006f5a:	483f      	ldr	r0, [pc, #252]	; (8007058 <main+0x1c8>)
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	0019      	movs	r1, r3
 8006f60:	f7fa fae9 	bl	8001536 <HAL_GPIO_WritePin>
            }
            if ( (USART1->ISR & (1 << 6)) != 0 ) {                           // Wait for Byte to be sent (Transmission Complete)
 8006f64:	4b43      	ldr	r3, [pc, #268]	; (8007074 <main+0x1e4>)
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	2240      	movs	r2, #64	; 0x40
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	1e5a      	subs	r2, r3, #1
 8006f6e:	4193      	sbcs	r3, r2
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00d      	beq.n	8006f92 <main+0x102>
                USART1->TDR = CDRxBuffer[CDRxBufferOut];                          // Send Data
 8006f76:	4b3e      	ldr	r3, [pc, #248]	; (8007070 <main+0x1e0>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	001a      	movs	r2, r3
 8006f7c:	4b3e      	ldr	r3, [pc, #248]	; (8007078 <main+0x1e8>)
 8006f7e:	5c9a      	ldrb	r2, [r3, r2]
 8006f80:	4b3c      	ldr	r3, [pc, #240]	; (8007074 <main+0x1e4>)
 8006f82:	b292      	uxth	r2, r2
 8006f84:	851a      	strh	r2, [r3, #40]	; 0x28
                CDRxBufferOut++;
 8006f86:	4b3a      	ldr	r3, [pc, #232]	; (8007070 <main+0x1e0>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	4b38      	ldr	r3, [pc, #224]	; (8007070 <main+0x1e0>)
 8006f90:	701a      	strb	r2, [r3, #0]
            }
            CDRxOffTimer = 48;
 8006f92:	1cbb      	adds	r3, r7, #2
 8006f94:	2230      	movs	r2, #48	; 0x30
 8006f96:	701a      	strb	r2, [r3, #0]
 8006f98:	e019      	b.n	8006fce <main+0x13e>
        } else if (CDRxOffTimer != 0) {
 8006f9a:	1cbb      	adds	r3, r7, #2
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d015      	beq.n	8006fce <main+0x13e>
            if (--CDRxOffTimer == 0) {
 8006fa2:	1cbb      	adds	r3, r7, #2
 8006fa4:	1cba      	adds	r2, r7, #2
 8006fa6:	7812      	ldrb	r2, [r2, #0]
 8006fa8:	3a01      	subs	r2, #1
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	1cbb      	adds	r3, r7, #2
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	425a      	negs	r2, r3
 8006fb2:	4153      	adcs	r3, r2
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d009      	beq.n	8006fce <main+0x13e>
                HAL_GPIO_WritePin( PC_RS485_EN_GPIO_Port, PC_RS485_EN_Pin, GPIO_PIN_RESET);            // Turn off RS422/485 Driver
 8006fba:	2380      	movs	r3, #128	; 0x80
 8006fbc:	01db      	lsls	r3, r3, #7
 8006fbe:	4826      	ldr	r0, [pc, #152]	; (8007058 <main+0x1c8>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	0019      	movs	r1, r3
 8006fc4:	f7fa fab7 	bl	8001536 <HAL_GPIO_WritePin>
                SendMessageToPC = 0;
 8006fc8:	4b27      	ldr	r3, [pc, #156]	; (8007068 <main+0x1d8>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	701a      	strb	r2, [r3, #0]
            }
        }

        if (Ticks1ms >= 1) {
 8006fce:	4b2b      	ldr	r3, [pc, #172]	; (800707c <main+0x1ec>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	5e9b      	ldrsh	r3, [r3, r2]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	dd0c      	ble.n	8006ff2 <main+0x162>
            Ticks1ms -= 1;
 8006fd8:	4b28      	ldr	r3, [pc, #160]	; (800707c <main+0x1ec>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	5e9b      	ldrsh	r3, [r3, r2]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	b21a      	sxth	r2, r3
 8006fe6:	4b25      	ldr	r3, [pc, #148]	; (800707c <main+0x1ec>)
 8006fe8:	801a      	strh	r2, [r3, #0]
            ProcessI2C1();
 8006fea:	f7ff fe8d 	bl	8006d08 <ProcessI2C1>
            ProcessFPGACommunications();
 8006fee:	f7fe fffb 	bl	8005fe8 <ProcessFPGACommunications>
        }

        if (Ticks5ms >= 5) {
 8006ff2:	4b23      	ldr	r3, [pc, #140]	; (8007080 <main+0x1f0>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	5e9b      	ldrsh	r3, [r3, r2]
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	dd10      	ble.n	800701e <main+0x18e>
            Ticks5ms -= 5;
 8006ffc:	4b20      	ldr	r3, [pc, #128]	; (8007080 <main+0x1f0>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	5e9b      	ldrsh	r3, [r3, r2]
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b05      	subs	r3, #5
 8007006:	b29b      	uxth	r3, r3
 8007008:	b21a      	sxth	r2, r3
 800700a:	4b1d      	ldr	r3, [pc, #116]	; (8007080 <main+0x1f0>)
 800700c:	801a      	strh	r2, [r3, #0]
            CalculuateFrequencyInput();
 800700e:	f7ff fdb1 	bl	8006b74 <CalculuateFrequencyInput>
            if (CDTxOffTimer == 0) {
 8007012:	1cfb      	adds	r3, r7, #3
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <main+0x18e>
                ProcessAdc();
 800701a:	f000 f971 	bl	8007300 <ProcessAdc>
            }
        }

        if (Ticks1000ms >= 1000) {              // One second
 800701e:	4b19      	ldr	r3, [pc, #100]	; (8007084 <main+0x1f4>)
 8007020:	2200      	movs	r2, #0
 8007022:	5e9b      	ldrsh	r3, [r3, r2]
 8007024:	4a18      	ldr	r2, [pc, #96]	; (8007088 <main+0x1f8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	dc00      	bgt.n	800702c <main+0x19c>
 800702a:	e73e      	b.n	8006eaa <main+0x1a>
            Ticks1000ms -= 1000;
 800702c:	4b15      	ldr	r3, [pc, #84]	; (8007084 <main+0x1f4>)
 800702e:	2200      	movs	r2, #0
 8007030:	5e9b      	ldrsh	r3, [r3, r2]
 8007032:	b29b      	uxth	r3, r3
 8007034:	4a15      	ldr	r2, [pc, #84]	; (800708c <main+0x1fc>)
 8007036:	4694      	mov	ip, r2
 8007038:	4463      	add	r3, ip
 800703a:	b29b      	uxth	r3, r3
 800703c:	b21a      	sxth	r2, r3
 800703e:	4b11      	ldr	r3, [pc, #68]	; (8007084 <main+0x1f4>)
 8007040:	801a      	strh	r2, [r3, #0]
            SysVars.TestData[0] = LoopCounter;
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	4b12      	ldr	r3, [pc, #72]	; (8007090 <main+0x200>)
 8007046:	661a      	str	r2, [r3, #96]	; 0x60
            LoopCounter = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	607b      	str	r3, [r7, #4]
        LoopCounter++;
 800704c:	e72d      	b.n	8006eaa <main+0x1a>
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	20002754 	.word	0x20002754
 8007054:	200026dc 	.word	0x200026dc
 8007058:	48000400 	.word	0x48000400
 800705c:	40004c00 	.word	0x40004c00
 8007060:	2000252c 	.word	0x2000252c
 8007064:	200026dd 	.word	0x200026dd
 8007068:	20002750 	.word	0x20002750
 800706c:	20002751 	.word	0x20002751
 8007070:	20001cc9 	.word	0x20001cc9
 8007074:	40013800 	.word	0x40013800
 8007078:	200027dc 	.word	0x200027dc
 800707c:	20001e90 	.word	0x20001e90
 8007080:	20002756 	.word	0x20002756
 8007084:	20001e8c 	.word	0x20001e8c
 8007088:	000003e7 	.word	0x000003e7
 800708c:	fffffc18 	.word	0xfffffc18
 8007090:	20001d58 	.word	0x20001d58

08007094 <MultDivideWithRounding64>:
//
// This routine provides rounding
//
//    Result = (Dividend + (Divisor / 2)) / Divisor
//
int64_t MultDivideWithRounding64(int32_t Mult1, int32_t Mult2, int32_t Divisor, enumMultDivideResult MultDivideResult) {
 8007094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007096:	b091      	sub	sp, #68	; 0x44
 8007098:	af00      	add	r7, sp, #0
 800709a:	6278      	str	r0, [r7, #36]	; 0x24
 800709c:	6239      	str	r1, [r7, #32]
 800709e:	61fa      	str	r2, [r7, #28]
 80070a0:	001a      	movs	r2, r3
 80070a2:	231b      	movs	r3, #27
 80070a4:	18fb      	adds	r3, r7, r3
 80070a6:	701a      	strb	r2, [r3, #0]

  uint8_t bNeg;
  int64_t Result;
  int64_t Dividend;

  if ( Divisor == 0 ) {
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d113      	bne.n	80070d6 <MultDivideWithRounding64+0x42>
    if ( MultDivideResult == RESULT_16 ) {
 80070ae:	231b      	movs	r3, #27
 80070b0:	18fb      	adds	r3, r7, r3
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d102      	bne.n	80070be <MultDivideWithRounding64+0x2a>
      return SHRT_MAX;
 80070b8:	4b4f      	ldr	r3, [pc, #316]	; (80071f8 <MultDivideWithRounding64+0x164>)
 80070ba:	2400      	movs	r4, #0
 80070bc:	e097      	b.n	80071ee <MultDivideWithRounding64+0x15a>
    }
    if ( MultDivideResult == RESULT_32 ) {
 80070be:	231b      	movs	r3, #27
 80070c0:	18fb      	adds	r3, r7, r3
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d102      	bne.n	80070ce <MultDivideWithRounding64+0x3a>
      return LONG_MAX;
 80070c8:	4b4c      	ldr	r3, [pc, #304]	; (80071fc <MultDivideWithRounding64+0x168>)
 80070ca:	2400      	movs	r4, #0
 80070cc:	e08f      	b.n	80071ee <MultDivideWithRounding64+0x15a>
    }
    return LONG_LONG_MAX;
 80070ce:	2301      	movs	r3, #1
 80070d0:	425b      	negs	r3, r3
 80070d2:	4c4a      	ldr	r4, [pc, #296]	; (80071fc <MultDivideWithRounding64+0x168>)
 80070d4:	e08b      	b.n	80071ee <MultDivideWithRounding64+0x15a>
  }
  bNeg = FALSE;
 80070d6:	2327      	movs	r3, #39	; 0x27
 80070d8:	2218      	movs	r2, #24
 80070da:	4694      	mov	ip, r2
 80070dc:	44bc      	add	ip, r7
 80070de:	4463      	add	r3, ip
 80070e0:	2200      	movs	r2, #0
 80070e2:	701a      	strb	r2, [r3, #0]
  Dividend = (int64_t) Mult1 * Mult2;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	613b      	str	r3, [r7, #16]
 80070e8:	17db      	asrs	r3, r3, #31
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	60bb      	str	r3, [r7, #8]
 80070f0:	17db      	asrs	r3, r3, #31
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6938      	ldr	r0, [r7, #16]
 80070fa:	6979      	ldr	r1, [r7, #20]
 80070fc:	f7f9 fa02 	bl	8000504 <__aeabi_lmul>
 8007100:	0003      	movs	r3, r0
 8007102:	000c      	movs	r4, r1
 8007104:	62bb      	str	r3, [r7, #40]	; 0x28
 8007106:	62fc      	str	r4, [r7, #44]	; 0x2c
  if ( Dividend < 0 ) {
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	2b00      	cmp	r3, #0
 800710c:	da0d      	bge.n	800712a <MultDivideWithRounding64+0x96>
    Dividend = -Dividend;
 800710e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007112:	2400      	movs	r4, #0
 8007114:	424b      	negs	r3, r1
 8007116:	4194      	sbcs	r4, r2
 8007118:	62bb      	str	r3, [r7, #40]	; 0x28
 800711a:	62fc      	str	r4, [r7, #44]	; 0x2c
    bNeg = TRUE;
 800711c:	2327      	movs	r3, #39	; 0x27
 800711e:	2218      	movs	r2, #24
 8007120:	4694      	mov	ip, r2
 8007122:	44bc      	add	ip, r7
 8007124:	4463      	add	r3, ip
 8007126:	2201      	movs	r2, #1
 8007128:	701a      	strb	r2, [r3, #0]
  }
  if ( Divisor < 0 ) {
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	2b00      	cmp	r3, #0
 800712e:	da0d      	bge.n	800714c <MultDivideWithRounding64+0xb8>
    Divisor = -Divisor;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	425b      	negs	r3, r3
 8007134:	61fb      	str	r3, [r7, #28]
    bNeg = !bNeg;
 8007136:	2127      	movs	r1, #39	; 0x27
 8007138:	2018      	movs	r0, #24
 800713a:	183b      	adds	r3, r7, r0
 800713c:	185b      	adds	r3, r3, r1
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	425a      	negs	r2, r3
 8007142:	4153      	adcs	r3, r2
 8007144:	b2da      	uxtb	r2, r3
 8007146:	183b      	adds	r3, r7, r0
 8007148:	185b      	adds	r3, r3, r1
 800714a:	701a      	strb	r2, [r3, #0]
  }
  Result = (Dividend + (Divisor / 2)) / Divisor;
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	2b00      	cmp	r3, #0
 8007150:	da00      	bge.n	8007154 <MultDivideWithRounding64+0xc0>
 8007152:	3301      	adds	r3, #1
 8007154:	105b      	asrs	r3, r3, #1
 8007156:	001d      	movs	r5, r3
 8007158:	17db      	asrs	r3, r3, #31
 800715a:	001e      	movs	r6, r3
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007160:	0028      	movs	r0, r5
 8007162:	0031      	movs	r1, r6
 8007164:	18c0      	adds	r0, r0, r3
 8007166:	4161      	adcs	r1, r4
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	603b      	str	r3, [r7, #0]
 800716c:	17db      	asrs	r3, r3, #31
 800716e:	607b      	str	r3, [r7, #4]
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f7f9 f9a2 	bl	80004bc <__aeabi_ldivmod>
 8007178:	0003      	movs	r3, r0
 800717a:	000c      	movs	r4, r1
 800717c:	633b      	str	r3, [r7, #48]	; 0x30
 800717e:	637c      	str	r4, [r7, #52]	; 0x34
  if ( (MultDivideResult == RESULT_16) && (Result > SHRT_MAX) ) {
 8007180:	231b      	movs	r3, #27
 8007182:	18fb      	adds	r3, r7, r3
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10d      	bne.n	80071a6 <MultDivideWithRounding64+0x112>
 800718a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718c:	2b00      	cmp	r3, #0
 800718e:	dc06      	bgt.n	800719e <MultDivideWithRounding64+0x10a>
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007192:	2b00      	cmp	r3, #0
 8007194:	d107      	bne.n	80071a6 <MultDivideWithRounding64+0x112>
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	4a17      	ldr	r2, [pc, #92]	; (80071f8 <MultDivideWithRounding64+0x164>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d903      	bls.n	80071a6 <MultDivideWithRounding64+0x112>
    Result = SHRT_MAX;
 800719e:	4b16      	ldr	r3, [pc, #88]	; (80071f8 <MultDivideWithRounding64+0x164>)
 80071a0:	2400      	movs	r4, #0
 80071a2:	633b      	str	r3, [r7, #48]	; 0x30
 80071a4:	637c      	str	r4, [r7, #52]	; 0x34
  }
  if ( (MultDivideResult == RESULT_32) && (Result > LONG_MAX) ) {
 80071a6:	231b      	movs	r3, #27
 80071a8:	18fb      	adds	r3, r7, r3
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d10d      	bne.n	80071cc <MultDivideWithRounding64+0x138>
 80071b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	dc06      	bgt.n	80071c4 <MultDivideWithRounding64+0x130>
 80071b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d107      	bne.n	80071cc <MultDivideWithRounding64+0x138>
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	4a0f      	ldr	r2, [pc, #60]	; (80071fc <MultDivideWithRounding64+0x168>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d903      	bls.n	80071cc <MultDivideWithRounding64+0x138>
    Result = LONG_MAX;
 80071c4:	4b0d      	ldr	r3, [pc, #52]	; (80071fc <MultDivideWithRounding64+0x168>)
 80071c6:	2400      	movs	r4, #0
 80071c8:	633b      	str	r3, [r7, #48]	; 0x30
 80071ca:	637c      	str	r4, [r7, #52]	; 0x34
  }
  if ( bNeg ) {
 80071cc:	2327      	movs	r3, #39	; 0x27
 80071ce:	2218      	movs	r2, #24
 80071d0:	4694      	mov	ip, r2
 80071d2:	44bc      	add	ip, r7
 80071d4:	4463      	add	r3, ip
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d006      	beq.n	80071ea <MultDivideWithRounding64+0x156>
    Result = -Result;
 80071dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071e0:	2400      	movs	r4, #0
 80071e2:	424b      	negs	r3, r1
 80071e4:	4194      	sbcs	r4, r2
 80071e6:	633b      	str	r3, [r7, #48]	; 0x30
 80071e8:	637c      	str	r4, [r7, #52]	; 0x34
  }
  return Result;
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	6b7c      	ldr	r4, [r7, #52]	; 0x34
}
 80071ee:	0018      	movs	r0, r3
 80071f0:	0021      	movs	r1, r4
 80071f2:	46bd      	mov	sp, r7
 80071f4:	b011      	add	sp, #68	; 0x44
 80071f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071f8:	00007fff 	.word	0x00007fff
 80071fc:	7fffffff 	.word	0x7fffffff

08007200 <InitializeNAU7802>:
#include "global.h"

static uint8_t		NAU7802Buffer[32];
static int32_t      MuxCh;

void InitializeNAU7802 (void) {
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af04      	add	r7, sp, #16

	NAU7802Buffer[0] = NAU7802_RR;                                              // Set RR Bit
 8007206:	4b3c      	ldr	r3, [pc, #240]	; (80072f8 <InitializeNAU7802+0xf8>)
 8007208:	2201      	movs	r2, #1
 800720a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write( &hi2c1, 0x55, 0x00, 1, &NAU7802Buffer[0], 1, 100 );
 800720c:	483b      	ldr	r0, [pc, #236]	; (80072fc <InitializeNAU7802+0xfc>)
 800720e:	2364      	movs	r3, #100	; 0x64
 8007210:	9302      	str	r3, [sp, #8]
 8007212:	2301      	movs	r3, #1
 8007214:	9301      	str	r3, [sp, #4]
 8007216:	4b38      	ldr	r3, [pc, #224]	; (80072f8 <InitializeNAU7802+0xf8>)
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	2301      	movs	r3, #1
 800721c:	2200      	movs	r2, #0
 800721e:	2155      	movs	r1, #85	; 0x55
 8007220:	f7fa fa6a 	bl	80016f8 <HAL_I2C_Mem_Write>
	NAU7802Buffer[0] = 0;														// RR Bit = 0
 8007224:	4b34      	ldr	r3, [pc, #208]	; (80072f8 <InitializeNAU7802+0xf8>)
 8007226:	2200      	movs	r2, #0
 8007228:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write( &hi2c1, 0x55, 0x00, 1, &NAU7802Buffer[0], 1, 100 );
 800722a:	4834      	ldr	r0, [pc, #208]	; (80072fc <InitializeNAU7802+0xfc>)
 800722c:	2364      	movs	r3, #100	; 0x64
 800722e:	9302      	str	r3, [sp, #8]
 8007230:	2301      	movs	r3, #1
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	4b30      	ldr	r3, [pc, #192]	; (80072f8 <InitializeNAU7802+0xf8>)
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	2301      	movs	r3, #1
 800723a:	2200      	movs	r2, #0
 800723c:	2155      	movs	r1, #85	; 0x55
 800723e:	f7fa fa5b 	bl	80016f8 <HAL_I2C_Mem_Write>
	HAL_Delay( 2 );
 8007242:	2002      	movs	r0, #2
 8007244:	f7f9 faec 	bl	8000820 <HAL_Delay>

	NAU7802Buffer[0] = NAU7802_PUD;                                             // Set PUD Bit
 8007248:	4b2b      	ldr	r3, [pc, #172]	; (80072f8 <InitializeNAU7802+0xf8>)
 800724a:	2202      	movs	r2, #2
 800724c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write( &hi2c1, 0x55, 0x00, 1, &NAU7802Buffer[0], 1, 100 );
 800724e:	482b      	ldr	r0, [pc, #172]	; (80072fc <InitializeNAU7802+0xfc>)
 8007250:	2364      	movs	r3, #100	; 0x64
 8007252:	9302      	str	r3, [sp, #8]
 8007254:	2301      	movs	r3, #1
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	4b27      	ldr	r3, [pc, #156]	; (80072f8 <InitializeNAU7802+0xf8>)
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	2301      	movs	r3, #1
 800725e:	2200      	movs	r2, #0
 8007260:	2155      	movs	r1, #85	; 0x55
 8007262:	f7fa fa49 	bl	80016f8 <HAL_I2C_Mem_Write>
	HAL_Delay( 2 );
 8007266:	2002      	movs	r0, #2
 8007268:	f7f9 fada 	bl	8000820 <HAL_Delay>

	NAU7802Buffer[0] = NAU7802_PUD | NAU7802_PUA;                               // Set PUD and PUA bits
 800726c:	4b22      	ldr	r3, [pc, #136]	; (80072f8 <InitializeNAU7802+0xf8>)
 800726e:	2206      	movs	r2, #6
 8007270:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write( &hi2c1, 0x55, 0x00, 1, &NAU7802Buffer[0], 1, 100 );
 8007272:	4822      	ldr	r0, [pc, #136]	; (80072fc <InitializeNAU7802+0xfc>)
 8007274:	2364      	movs	r3, #100	; 0x64
 8007276:	9302      	str	r3, [sp, #8]
 8007278:	2301      	movs	r3, #1
 800727a:	9301      	str	r3, [sp, #4]
 800727c:	4b1e      	ldr	r3, [pc, #120]	; (80072f8 <InitializeNAU7802+0xf8>)
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	2301      	movs	r3, #1
 8007282:	2200      	movs	r2, #0
 8007284:	2155      	movs	r1, #85	; 0x55
 8007286:	f7fa fa37 	bl	80016f8 <HAL_I2C_Mem_Write>
	HAL_Delay( 2 );
 800728a:	2002      	movs	r0, #2
 800728c:	f7f9 fac8 	bl	8000820 <HAL_Delay>

	NAU7802Buffer[0] = (0 << 5) | (1 << 4) | (1 << 0);							// PGA Output Buffer Disabled (Bit 5), PGA Bypass Enable (Bit 4), Chopper Disabled (Bit 0)
 8007290:	4b19      	ldr	r3, [pc, #100]	; (80072f8 <InitializeNAU7802+0xf8>)
 8007292:	2211      	movs	r2, #17
 8007294:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write( &hi2c1, 0x55, 0x1B, 1, &NAU7802Buffer[0], 1, 100 );
 8007296:	4819      	ldr	r0, [pc, #100]	; (80072fc <InitializeNAU7802+0xfc>)
 8007298:	2364      	movs	r3, #100	; 0x64
 800729a:	9302      	str	r3, [sp, #8]
 800729c:	2301      	movs	r3, #1
 800729e:	9301      	str	r3, [sp, #4]
 80072a0:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <InitializeNAU7802+0xf8>)
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	2301      	movs	r3, #1
 80072a6:	221b      	movs	r2, #27
 80072a8:	2155      	movs	r1, #85	; 0x55
 80072aa:	f7fa fa25 	bl	80016f8 <HAL_I2C_Mem_Write>
	HAL_Delay( 2 );
 80072ae:	2002      	movs	r0, #2
 80072b0:	f7f9 fab6 	bl	8000820 <HAL_Delay>

	NAU7802Buffer[0] = NAU7802_CRS_40SPS;							            // Ch 1, 320SPS
 80072b4:	4b10      	ldr	r3, [pc, #64]	; (80072f8 <InitializeNAU7802+0xf8>)
 80072b6:	2220      	movs	r2, #32
 80072b8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write( &hi2c1, 0x55, 0x02, 1, &NAU7802Buffer[0], 1, 100 );
 80072ba:	4810      	ldr	r0, [pc, #64]	; (80072fc <InitializeNAU7802+0xfc>)
 80072bc:	2364      	movs	r3, #100	; 0x64
 80072be:	9302      	str	r3, [sp, #8]
 80072c0:	2301      	movs	r3, #1
 80072c2:	9301      	str	r3, [sp, #4]
 80072c4:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <InitializeNAU7802+0xf8>)
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	2301      	movs	r3, #1
 80072ca:	2202      	movs	r2, #2
 80072cc:	2155      	movs	r1, #85	; 0x55
 80072ce:	f7fa fa13 	bl	80016f8 <HAL_I2C_Mem_Write>

	NAU7802Buffer[0] = (3 << 4);                                                // REG)_CHPS = turned off, high (1) state
 80072d2:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <InitializeNAU7802+0xf8>)
 80072d4:	2230      	movs	r2, #48	; 0x30
 80072d6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write( &hi2c1, 0x55, 0x15, 1, &NAU7802Buffer[0], 1, 100 );
 80072d8:	4808      	ldr	r0, [pc, #32]	; (80072fc <InitializeNAU7802+0xfc>)
 80072da:	2364      	movs	r3, #100	; 0x64
 80072dc:	9302      	str	r3, [sp, #8]
 80072de:	2301      	movs	r3, #1
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <InitializeNAU7802+0xf8>)
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	2301      	movs	r3, #1
 80072e8:	2215      	movs	r2, #21
 80072ea:	2155      	movs	r1, #85	; 0x55
 80072ec:	f7fa fa04 	bl	80016f8 <HAL_I2C_Mem_Write>
}
 80072f0:	46c0      	nop			; (mov r8, r8)
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	20000058 	.word	0x20000058
 80072fc:	2000127c 	.word	0x2000127c

08007300 <ProcessAdc>:

//********************************************************************************************************************************
//********************************************************************************************************************************
//
void ProcessAdc (void) {
 8007300:	b590      	push	{r4, r7, lr}
 8007302:	b087      	sub	sp, #28
 8007304:	af04      	add	r7, sp, #16
	static uint8_t	State, MuxDelay, OldPowerEnable, PowerCounter, OvercurrentDelay;
	uint8_t     PowerEnable;
	int32_t     RV_Current;


	switch (State) {
 8007306:	4bcb      	ldr	r3, [pc, #812]	; (8007634 <ProcessAdc+0x334>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d100      	bne.n	8007310 <ProcessAdc+0x10>
 800730e:	e07c      	b.n	800740a <ProcessAdc+0x10a>
 8007310:	2b02      	cmp	r3, #2
 8007312:	d100      	bne.n	8007316 <ProcessAdc+0x16>
 8007314:	e08c      	b.n	8007430 <ProcessAdc+0x130>
 8007316:	2b00      	cmp	r3, #0
 8007318:	d000      	beq.n	800731c <ProcessAdc+0x1c>
				State = 0;
			}
		}
		break;
	}
}
 800731a:	e186      	b.n	800762a <ProcessAdc+0x32a>
		MuxCh = (MuxCh + 1) & 0xF;
 800731c:	4bc6      	ldr	r3, [pc, #792]	; (8007638 <ProcessAdc+0x338>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3301      	adds	r3, #1
 8007322:	220f      	movs	r2, #15
 8007324:	401a      	ands	r2, r3
 8007326:	4bc4      	ldr	r3, [pc, #784]	; (8007638 <ProcessAdc+0x338>)
 8007328:	601a      	str	r2, [r3, #0]
		if (MuxCh == 11) {                                      // Skip Channels 11 and 12
 800732a:	4bc3      	ldr	r3, [pc, #780]	; (8007638 <ProcessAdc+0x338>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b0b      	cmp	r3, #11
 8007330:	d102      	bne.n	8007338 <ProcessAdc+0x38>
		    MuxCh = 13;
 8007332:	4bc1      	ldr	r3, [pc, #772]	; (8007638 <ProcessAdc+0x338>)
 8007334:	220d      	movs	r2, #13
 8007336:	601a      	str	r2, [r3, #0]
		PowerEnable = (SysPars.EnableBits & 0x1) != 0;
 8007338:	4bc0      	ldr	r3, [pc, #768]	; (800763c <ProcessAdc+0x33c>)
 800733a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733c:	2201      	movs	r2, #1
 800733e:	4013      	ands	r3, r2
 8007340:	1e5a      	subs	r2, r3, #1
 8007342:	4193      	sbcs	r3, r2
 8007344:	b2da      	uxtb	r2, r3
 8007346:	1cfb      	adds	r3, r7, #3
 8007348:	701a      	strb	r2, [r3, #0]
		if (PowerEnable && !OldPowerEnable) {
 800734a:	1cfb      	adds	r3, r7, #3
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d006      	beq.n	8007360 <ProcessAdc+0x60>
 8007352:	4bbb      	ldr	r3, [pc, #748]	; (8007640 <ProcessAdc+0x340>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d102      	bne.n	8007360 <ProcessAdc+0x60>
		    PowerCounter = 20;
 800735a:	4bba      	ldr	r3, [pc, #744]	; (8007644 <ProcessAdc+0x344>)
 800735c:	2214      	movs	r2, #20
 800735e:	701a      	strb	r2, [r3, #0]
		OldPowerEnable = PowerEnable;
 8007360:	4bb7      	ldr	r3, [pc, #732]	; (8007640 <ProcessAdc+0x340>)
 8007362:	1cfa      	adds	r2, r7, #3
 8007364:	7812      	ldrb	r2, [r2, #0]
 8007366:	701a      	strb	r2, [r3, #0]
		if (PowerCounter != 0) {
 8007368:	4bb6      	ldr	r3, [pc, #728]	; (8007644 <ProcessAdc+0x344>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d013      	beq.n	8007398 <ProcessAdc+0x98>
		    if (MuxCh < 13) MuxCh = 13;
 8007370:	4bb1      	ldr	r3, [pc, #708]	; (8007638 <ProcessAdc+0x338>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b0c      	cmp	r3, #12
 8007376:	dc02      	bgt.n	800737e <ProcessAdc+0x7e>
 8007378:	4baf      	ldr	r3, [pc, #700]	; (8007638 <ProcessAdc+0x338>)
 800737a:	220d      	movs	r2, #13
 800737c:	601a      	str	r2, [r3, #0]
		    if (MuxCh > 14) MuxCh = 13;
 800737e:	4bae      	ldr	r3, [pc, #696]	; (8007638 <ProcessAdc+0x338>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b0e      	cmp	r3, #14
 8007384:	dd02      	ble.n	800738c <ProcessAdc+0x8c>
 8007386:	4bac      	ldr	r3, [pc, #688]	; (8007638 <ProcessAdc+0x338>)
 8007388:	220d      	movs	r2, #13
 800738a:	601a      	str	r2, [r3, #0]
		    PowerCounter--;
 800738c:	4bad      	ldr	r3, [pc, #692]	; (8007644 <ProcessAdc+0x344>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	3b01      	subs	r3, #1
 8007392:	b2da      	uxtb	r2, r3
 8007394:	4bab      	ldr	r3, [pc, #684]	; (8007644 <ProcessAdc+0x344>)
 8007396:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin( MUX_A_GPIO_Port, MUX_A_Pin, (MuxCh >> 0) & 1 );
 8007398:	4ba7      	ldr	r3, [pc, #668]	; (8007638 <ProcessAdc+0x338>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2201      	movs	r2, #1
 80073a0:	4013      	ands	r3, r2
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	2380      	movs	r3, #128	; 0x80
 80073a6:	019b      	lsls	r3, r3, #6
 80073a8:	48a7      	ldr	r0, [pc, #668]	; (8007648 <ProcessAdc+0x348>)
 80073aa:	0019      	movs	r1, r3
 80073ac:	f7fa f8c3 	bl	8001536 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( MUX_B_GPIO_Port, MUX_B_Pin, (MuxCh >> 1) & 1 );
 80073b0:	4ba1      	ldr	r3, [pc, #644]	; (8007638 <ProcessAdc+0x338>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	105b      	asrs	r3, r3, #1
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2201      	movs	r2, #1
 80073ba:	4013      	ands	r3, r2
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	2380      	movs	r3, #128	; 0x80
 80073c0:	01db      	lsls	r3, r3, #7
 80073c2:	48a1      	ldr	r0, [pc, #644]	; (8007648 <ProcessAdc+0x348>)
 80073c4:	0019      	movs	r1, r3
 80073c6:	f7fa f8b6 	bl	8001536 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( MUX_C_GPIO_Port, MUX_C_Pin, (MuxCh >> 2) & 1 );
 80073ca:	4b9b      	ldr	r3, [pc, #620]	; (8007638 <ProcessAdc+0x338>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	109b      	asrs	r3, r3, #2
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2201      	movs	r2, #1
 80073d4:	4013      	ands	r3, r2
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	2380      	movs	r3, #128	; 0x80
 80073da:	021b      	lsls	r3, r3, #8
 80073dc:	489a      	ldr	r0, [pc, #616]	; (8007648 <ProcessAdc+0x348>)
 80073de:	0019      	movs	r1, r3
 80073e0:	f7fa f8a9 	bl	8001536 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( MUX_D_GPIO_Port, MUX_D_Pin, (MuxCh >> 3) & 1 );
 80073e4:	4b94      	ldr	r3, [pc, #592]	; (8007638 <ProcessAdc+0x338>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	10db      	asrs	r3, r3, #3
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2201      	movs	r2, #1
 80073ee:	4013      	ands	r3, r2
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	4896      	ldr	r0, [pc, #600]	; (800764c <ProcessAdc+0x34c>)
 80073f4:	001a      	movs	r2, r3
 80073f6:	2102      	movs	r1, #2
 80073f8:	f7fa f89d 	bl	8001536 <HAL_GPIO_WritePin>
		MuxDelay = 6;
 80073fc:	4b94      	ldr	r3, [pc, #592]	; (8007650 <ProcessAdc+0x350>)
 80073fe:	2206      	movs	r2, #6
 8007400:	701a      	strb	r2, [r3, #0]
		State = 1;
 8007402:	4b8c      	ldr	r3, [pc, #560]	; (8007634 <ProcessAdc+0x334>)
 8007404:	2201      	movs	r2, #1
 8007406:	701a      	strb	r2, [r3, #0]
		break;
 8007408:	e10f      	b.n	800762a <ProcessAdc+0x32a>
		NAU7802Buffer[0] = NAU7802_PUD | NAU7802_PUA | NAU7802_CS;                  // Start Conversion
 800740a:	4b92      	ldr	r3, [pc, #584]	; (8007654 <ProcessAdc+0x354>)
 800740c:	2216      	movs	r2, #22
 800740e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write( &hi2c1, 0x55, 0x00, 1, &NAU7802Buffer[0], 1, 100 );
 8007410:	4891      	ldr	r0, [pc, #580]	; (8007658 <ProcessAdc+0x358>)
 8007412:	2364      	movs	r3, #100	; 0x64
 8007414:	9302      	str	r3, [sp, #8]
 8007416:	2301      	movs	r3, #1
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	4b8e      	ldr	r3, [pc, #568]	; (8007654 <ProcessAdc+0x354>)
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	2301      	movs	r3, #1
 8007420:	2200      	movs	r2, #0
 8007422:	2155      	movs	r1, #85	; 0x55
 8007424:	f7fa f968 	bl	80016f8 <HAL_I2C_Mem_Write>
		State = 2;
 8007428:	4b82      	ldr	r3, [pc, #520]	; (8007634 <ProcessAdc+0x334>)
 800742a:	2202      	movs	r2, #2
 800742c:	701a      	strb	r2, [r3, #0]
		break;
 800742e:	e0fc      	b.n	800762a <ProcessAdc+0x32a>
        HAL_I2C_Mem_Read( &hi2c1, 0x55, 0x00, 1, &NAU7802Buffer[0], 1, 100 );
 8007430:	4889      	ldr	r0, [pc, #548]	; (8007658 <ProcessAdc+0x358>)
 8007432:	2364      	movs	r3, #100	; 0x64
 8007434:	9302      	str	r3, [sp, #8]
 8007436:	2301      	movs	r3, #1
 8007438:	9301      	str	r3, [sp, #4]
 800743a:	4b86      	ldr	r3, [pc, #536]	; (8007654 <ProcessAdc+0x354>)
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	2301      	movs	r3, #1
 8007440:	2200      	movs	r2, #0
 8007442:	2155      	movs	r1, #85	; 0x55
 8007444:	f7fa fa98 	bl	8001978 <HAL_I2C_Mem_Read>
		if ((NAU7802Buffer[0] & NAU7802_CR) != 0) {                                 // Wait for Conversion to finish
 8007448:	4b82      	ldr	r3, [pc, #520]	; (8007654 <ProcessAdc+0x354>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	001a      	movs	r2, r3
 800744e:	2320      	movs	r3, #32
 8007450:	4013      	ands	r3, r2
 8007452:	d100      	bne.n	8007456 <ProcessAdc+0x156>
 8007454:	e0e8      	b.n	8007628 <ProcessAdc+0x328>
			HAL_I2C_Mem_Read( &hi2c1, 0x55, 0x12, 1, &NAU7802Buffer[0], 3, 100 );
 8007456:	4880      	ldr	r0, [pc, #512]	; (8007658 <ProcessAdc+0x358>)
 8007458:	2364      	movs	r3, #100	; 0x64
 800745a:	9302      	str	r3, [sp, #8]
 800745c:	2303      	movs	r3, #3
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	4b7c      	ldr	r3, [pc, #496]	; (8007654 <ProcessAdc+0x354>)
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	2301      	movs	r3, #1
 8007466:	2212      	movs	r2, #18
 8007468:	2155      	movs	r1, #85	; 0x55
 800746a:	f7fa fa85 	bl	8001978 <HAL_I2C_Mem_Read>
			State = 1;
 800746e:	4b71      	ldr	r3, [pc, #452]	; (8007634 <ProcessAdc+0x334>)
 8007470:	2201      	movs	r2, #1
 8007472:	701a      	strb	r2, [r3, #0]
			if (--MuxDelay == 0) {
 8007474:	4b76      	ldr	r3, [pc, #472]	; (8007650 <ProcessAdc+0x350>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	3b01      	subs	r3, #1
 800747a:	b2da      	uxtb	r2, r3
 800747c:	4b74      	ldr	r3, [pc, #464]	; (8007650 <ProcessAdc+0x350>)
 800747e:	701a      	strb	r2, [r3, #0]
 8007480:	4b73      	ldr	r3, [pc, #460]	; (8007650 <ProcessAdc+0x350>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d000      	beq.n	800748a <ProcessAdc+0x18a>
 8007488:	e0ce      	b.n	8007628 <ProcessAdc+0x328>
			    SysVars.AdcCounts[MuxCh] = ((int32_t)NAU7802Buffer[0] << 24) | ((int32_t)NAU7802Buffer[1] << 16) | ((int32_t)NAU7802Buffer[2] << 8);
 800748a:	4b72      	ldr	r3, [pc, #456]	; (8007654 <ProcessAdc+0x354>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	061a      	lsls	r2, r3, #24
 8007490:	4b70      	ldr	r3, [pc, #448]	; (8007654 <ProcessAdc+0x354>)
 8007492:	785b      	ldrb	r3, [r3, #1]
 8007494:	041b      	lsls	r3, r3, #16
 8007496:	431a      	orrs	r2, r3
 8007498:	0011      	movs	r1, r2
 800749a:	4b6e      	ldr	r3, [pc, #440]	; (8007654 <ProcessAdc+0x354>)
 800749c:	789b      	ldrb	r3, [r3, #2]
 800749e:	021a      	lsls	r2, r3, #8
 80074a0:	4b65      	ldr	r3, [pc, #404]	; (8007638 <ProcessAdc+0x338>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	496d      	ldr	r1, [pc, #436]	; (800765c <ProcessAdc+0x35c>)
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	18cb      	adds	r3, r1, r3
 80074ac:	3304      	adds	r3, #4
 80074ae:	601a      	str	r2, [r3, #0]
			    SysVars.AdcCounts[MuxCh] /= (1 << 12);
 80074b0:	4b61      	ldr	r3, [pc, #388]	; (8007638 <ProcessAdc+0x338>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a69      	ldr	r2, [pc, #420]	; (800765c <ProcessAdc+0x35c>)
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	18d3      	adds	r3, r2, r3
 80074ba:	3304      	adds	r3, #4
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	4b5e      	ldr	r3, [pc, #376]	; (8007638 <ProcessAdc+0x338>)
 80074c0:	6819      	ldr	r1, [r3, #0]
 80074c2:	1e13      	subs	r3, r2, #0
 80074c4:	da02      	bge.n	80074cc <ProcessAdc+0x1cc>
 80074c6:	4a66      	ldr	r2, [pc, #408]	; (8007660 <ProcessAdc+0x360>)
 80074c8:	4694      	mov	ip, r2
 80074ca:	4463      	add	r3, ip
 80074cc:	131b      	asrs	r3, r3, #12
 80074ce:	0018      	movs	r0, r3
 80074d0:	4a62      	ldr	r2, [pc, #392]	; (800765c <ProcessAdc+0x35c>)
 80074d2:	008b      	lsls	r3, r1, #2
 80074d4:	18d3      	adds	r3, r2, r3
 80074d6:	3304      	adds	r3, #4
 80074d8:	6018      	str	r0, [r3, #0]
			    SysVars.AdcVolts[MuxCh] = MultDivideWithRounding64(SysVars.AdcCounts[MuxCh] - FactoryConfiguration->AdcZero[MuxCh], FactoryConfiguration->AdcSpan[MuxCh], 10000000, RESULT_32);
 80074da:	4b57      	ldr	r3, [pc, #348]	; (8007638 <ProcessAdc+0x338>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a5f      	ldr	r2, [pc, #380]	; (800765c <ProcessAdc+0x35c>)
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	18d3      	adds	r3, r2, r3
 80074e4:	3304      	adds	r3, #4
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	4b5e      	ldr	r3, [pc, #376]	; (8007664 <ProcessAdc+0x364>)
 80074ea:	6819      	ldr	r1, [r3, #0]
 80074ec:	4b52      	ldr	r3, [pc, #328]	; (8007638 <ProcessAdc+0x338>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	585b      	ldr	r3, [r3, r1]
 80074f4:	1ad0      	subs	r0, r2, r3
 80074f6:	4b5b      	ldr	r3, [pc, #364]	; (8007664 <ProcessAdc+0x364>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b4f      	ldr	r3, [pc, #316]	; (8007638 <ProcessAdc+0x338>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3310      	adds	r3, #16
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	5899      	ldr	r1, [r3, r2]
 8007504:	4a58      	ldr	r2, [pc, #352]	; (8007668 <ProcessAdc+0x368>)
 8007506:	2301      	movs	r3, #1
 8007508:	f7ff fdc4 	bl	8007094 <MultDivideWithRounding64>
 800750c:	4b4a      	ldr	r3, [pc, #296]	; (8007638 <ProcessAdc+0x338>)
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	b201      	sxth	r1, r0
 8007512:	4b52      	ldr	r3, [pc, #328]	; (800765c <ProcessAdc+0x35c>)
 8007514:	3250      	adds	r2, #80	; 0x50
 8007516:	0052      	lsls	r2, r2, #1
 8007518:	52d1      	strh	r1, [r2, r3]
                if (MuxCh == 14) {
 800751a:	4b47      	ldr	r3, [pc, #284]	; (8007638 <ProcessAdc+0x338>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b0e      	cmp	r3, #14
 8007520:	d142      	bne.n	80075a8 <ProcessAdc+0x2a8>
                    SysVars.PS_Current = MultDivideWithRounding64(SysVars.AdcVolts[13] - SysVars.AdcVolts[14], 100000, 54169, RESULT_32);
 8007522:	4b4e      	ldr	r3, [pc, #312]	; (800765c <ProcessAdc+0x35c>)
 8007524:	22ba      	movs	r2, #186	; 0xba
 8007526:	5e9b      	ldrsh	r3, [r3, r2]
 8007528:	0019      	movs	r1, r3
 800752a:	4b4c      	ldr	r3, [pc, #304]	; (800765c <ProcessAdc+0x35c>)
 800752c:	22bc      	movs	r2, #188	; 0xbc
 800752e:	5e9b      	ldrsh	r3, [r3, r2]
 8007530:	1ac8      	subs	r0, r1, r3
 8007532:	4a4e      	ldr	r2, [pc, #312]	; (800766c <ProcessAdc+0x36c>)
 8007534:	494e      	ldr	r1, [pc, #312]	; (8007670 <ProcessAdc+0x370>)
 8007536:	2301      	movs	r3, #1
 8007538:	f7ff fdac 	bl	8007094 <MultDivideWithRounding64>
 800753c:	0003      	movs	r3, r0
 800753e:	000c      	movs	r4, r1
 8007540:	b219      	sxth	r1, r3
 8007542:	4b46      	ldr	r3, [pc, #280]	; (800765c <ProcessAdc+0x35c>)
 8007544:	22c0      	movs	r2, #192	; 0xc0
 8007546:	5299      	strh	r1, [r3, r2]
                    SysVars.PS_Current -= MultDivideWithRounding64(SysVars.AdcVolts[14], 1, 110, RESULT_32);
 8007548:	4b44      	ldr	r3, [pc, #272]	; (800765c <ProcessAdc+0x35c>)
 800754a:	22bc      	movs	r2, #188	; 0xbc
 800754c:	5e9b      	ldrsh	r3, [r3, r2]
 800754e:	0018      	movs	r0, r3
 8007550:	2301      	movs	r3, #1
 8007552:	226e      	movs	r2, #110	; 0x6e
 8007554:	2101      	movs	r1, #1
 8007556:	f7ff fd9d 	bl	8007094 <MultDivideWithRounding64>
 800755a:	4b40      	ldr	r3, [pc, #256]	; (800765c <ProcessAdc+0x35c>)
 800755c:	22c0      	movs	r2, #192	; 0xc0
 800755e:	5e9b      	ldrsh	r3, [r3, r2]
 8007560:	b29a      	uxth	r2, r3
 8007562:	b283      	uxth	r3, r0
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	b29b      	uxth	r3, r3
 8007568:	b219      	sxth	r1, r3
 800756a:	4b3c      	ldr	r3, [pc, #240]	; (800765c <ProcessAdc+0x35c>)
 800756c:	22c0      	movs	r2, #192	; 0xc0
 800756e:	5299      	strh	r1, [r3, r2]
                    if (SysVars.PS_Current > 5000) {
 8007570:	4b3a      	ldr	r3, [pc, #232]	; (800765c <ProcessAdc+0x35c>)
 8007572:	22c0      	movs	r2, #192	; 0xc0
 8007574:	5e9b      	ldrsh	r3, [r3, r2]
 8007576:	4a3f      	ldr	r2, [pc, #252]	; (8007674 <ProcessAdc+0x374>)
 8007578:	4293      	cmp	r3, r2
 800757a:	dd0e      	ble.n	800759a <ProcessAdc+0x29a>
                        if (--OvercurrentDelay == 0) {
 800757c:	4b3e      	ldr	r3, [pc, #248]	; (8007678 <ProcessAdc+0x378>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	3b01      	subs	r3, #1
 8007582:	b2da      	uxtb	r2, r3
 8007584:	4b3c      	ldr	r3, [pc, #240]	; (8007678 <ProcessAdc+0x378>)
 8007586:	701a      	strb	r2, [r3, #0]
 8007588:	4b3b      	ldr	r3, [pc, #236]	; (8007678 <ProcessAdc+0x378>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10b      	bne.n	80075a8 <ProcessAdc+0x2a8>
                            SysVars.OverCurrentFlag = 1;
 8007590:	4b32      	ldr	r3, [pc, #200]	; (800765c <ProcessAdc+0x35c>)
 8007592:	22c3      	movs	r2, #195	; 0xc3
 8007594:	2101      	movs	r1, #1
 8007596:	5499      	strb	r1, [r3, r2]
 8007598:	e006      	b.n	80075a8 <ProcessAdc+0x2a8>
                        OvercurrentDelay = 3;
 800759a:	4b37      	ldr	r3, [pc, #220]	; (8007678 <ProcessAdc+0x378>)
 800759c:	2203      	movs	r2, #3
 800759e:	701a      	strb	r2, [r3, #0]
                        SysVars.OverCurrentFlag = 0;
 80075a0:	4b2e      	ldr	r3, [pc, #184]	; (800765c <ProcessAdc+0x35c>)
 80075a2:	22c3      	movs	r2, #195	; 0xc3
 80075a4:	2100      	movs	r1, #0
 80075a6:	5499      	strb	r1, [r3, r2]
                if (MuxCh == 15) {
 80075a8:	4b23      	ldr	r3, [pc, #140]	; (8007638 <ProcessAdc+0x338>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b0f      	cmp	r3, #15
 80075ae:	d138      	bne.n	8007622 <ProcessAdc+0x322>
                    RV_Current = MultDivideWithRounding64(SysVars.AdcVolts[15] - SysVars.AdcVolts[10], 1000000, 88727, RESULT_32);
 80075b0:	4b2a      	ldr	r3, [pc, #168]	; (800765c <ProcessAdc+0x35c>)
 80075b2:	22be      	movs	r2, #190	; 0xbe
 80075b4:	5e9b      	ldrsh	r3, [r3, r2]
 80075b6:	0019      	movs	r1, r3
 80075b8:	4b28      	ldr	r3, [pc, #160]	; (800765c <ProcessAdc+0x35c>)
 80075ba:	22b4      	movs	r2, #180	; 0xb4
 80075bc:	5e9b      	ldrsh	r3, [r3, r2]
 80075be:	1ac8      	subs	r0, r1, r3
 80075c0:	4a2e      	ldr	r2, [pc, #184]	; (800767c <ProcessAdc+0x37c>)
 80075c2:	492f      	ldr	r1, [pc, #188]	; (8007680 <ProcessAdc+0x380>)
 80075c4:	2301      	movs	r3, #1
 80075c6:	f7ff fd65 	bl	8007094 <MultDivideWithRounding64>
 80075ca:	0003      	movs	r3, r0
 80075cc:	000c      	movs	r4, r1
 80075ce:	607b      	str	r3, [r7, #4]
                    RV_Current -= MultDivideWithRounding64(SysVars.AdcVolts[10], 10, 110, RESULT_32);
 80075d0:	4b22      	ldr	r3, [pc, #136]	; (800765c <ProcessAdc+0x35c>)
 80075d2:	22b4      	movs	r2, #180	; 0xb4
 80075d4:	5e9b      	ldrsh	r3, [r3, r2]
 80075d6:	0018      	movs	r0, r3
 80075d8:	2301      	movs	r3, #1
 80075da:	226e      	movs	r2, #110	; 0x6e
 80075dc:	210a      	movs	r1, #10
 80075de:	f7ff fd59 	bl	8007094 <MultDivideWithRounding64>
 80075e2:	000a      	movs	r2, r1
 80075e4:	0001      	movs	r1, r0
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	000a      	movs	r2, r1
 80075ea:	1a9b      	subs	r3, r3, r2
 80075ec:	607b      	str	r3, [r7, #4]
                    if ((RV_Current <= 0) || (SysVars.AdcVolts[10] <= 0)) {
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	dd04      	ble.n	80075fe <ProcessAdc+0x2fe>
 80075f4:	4b19      	ldr	r3, [pc, #100]	; (800765c <ProcessAdc+0x35c>)
 80075f6:	22b4      	movs	r2, #180	; 0xb4
 80075f8:	5e9b      	ldrsh	r3, [r3, r2]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	dc03      	bgt.n	8007606 <ProcessAdc+0x306>
                        SysVars.RV_Ohms = 9999999;
 80075fe:	4b17      	ldr	r3, [pc, #92]	; (800765c <ProcessAdc+0x35c>)
 8007600:	4a20      	ldr	r2, [pc, #128]	; (8007684 <ProcessAdc+0x384>)
 8007602:	65da      	str	r2, [r3, #92]	; 0x5c
 8007604:	e00d      	b.n	8007622 <ProcessAdc+0x322>
                        SysVars.RV_Ohms = MultDivideWithRounding64(SysVars.AdcVolts[10], 1000000, RV_Current, RESULT_32);
 8007606:	4b15      	ldr	r3, [pc, #84]	; (800765c <ProcessAdc+0x35c>)
 8007608:	22b4      	movs	r2, #180	; 0xb4
 800760a:	5e9b      	ldrsh	r3, [r3, r2]
 800760c:	0018      	movs	r0, r3
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	491b      	ldr	r1, [pc, #108]	; (8007680 <ProcessAdc+0x380>)
 8007612:	2301      	movs	r3, #1
 8007614:	f7ff fd3e 	bl	8007094 <MultDivideWithRounding64>
 8007618:	0003      	movs	r3, r0
 800761a:	000c      	movs	r4, r1
 800761c:	001a      	movs	r2, r3
 800761e:	4b0f      	ldr	r3, [pc, #60]	; (800765c <ProcessAdc+0x35c>)
 8007620:	65da      	str	r2, [r3, #92]	; 0x5c
				State = 0;
 8007622:	4b04      	ldr	r3, [pc, #16]	; (8007634 <ProcessAdc+0x334>)
 8007624:	2200      	movs	r2, #0
 8007626:	701a      	strb	r2, [r3, #0]
		break;
 8007628:	46c0      	nop			; (mov r8, r8)
}
 800762a:	46c0      	nop			; (mov r8, r8)
 800762c:	46bd      	mov	sp, r7
 800762e:	b003      	add	sp, #12
 8007630:	bd90      	pop	{r4, r7, pc}
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	2000007c 	.word	0x2000007c
 8007638:	20000078 	.word	0x20000078
 800763c:	200011f4 	.word	0x200011f4
 8007640:	2000007d 	.word	0x2000007d
 8007644:	2000007e 	.word	0x2000007e
 8007648:	48000800 	.word	0x48000800
 800764c:	48001400 	.word	0x48001400
 8007650:	2000007f 	.word	0x2000007f
 8007654:	20000058 	.word	0x20000058
 8007658:	2000127c 	.word	0x2000127c
 800765c:	20001d58 	.word	0x20001d58
 8007660:	00000fff 	.word	0x00000fff
 8007664:	20001ccc 	.word	0x20001ccc
 8007668:	00989680 	.word	0x00989680
 800766c:	0000d399 	.word	0x0000d399
 8007670:	000186a0 	.word	0x000186a0
 8007674:	00001388 	.word	0x00001388
 8007678:	20000080 	.word	0x20000080
 800767c:	00015a97 	.word	0x00015a97
 8007680:	000f4240 	.word	0x000f4240
 8007684:	0098967f 	.word	0x0098967f

08007688 <WaitForLastOperation>:
#define MAX_WAIT_TIME           0xFFFFFF00

// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
static void WaitForLastOperation(void) {
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0

  while ((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) {
 800768c:	46c0      	nop			; (mov r8, r8)
 800768e:	4b09      	ldr	r3, [pc, #36]	; (80076b4 <WaitForLastOperation+0x2c>)
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	2201      	movs	r2, #1
 8007694:	4013      	ands	r3, r2
 8007696:	2b01      	cmp	r3, #1
 8007698:	d0f9      	beq.n	800768e <WaitForLastOperation+0x6>
  }
  if ((FLASH->SR & FLASH_FLAG_EOP) == FLASH_FLAG_EOP) {
 800769a:	4b06      	ldr	r3, [pc, #24]	; (80076b4 <WaitForLastOperation+0x2c>)
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	2220      	movs	r2, #32
 80076a0:	4013      	ands	r3, r2
 80076a2:	2b20      	cmp	r3, #32
 80076a4:	d102      	bne.n	80076ac <WaitForLastOperation+0x24>
      FLASH->SR = FLASH_FLAG_EOP;
 80076a6:	4b03      	ldr	r3, [pc, #12]	; (80076b4 <WaitForLastOperation+0x2c>)
 80076a8:	2220      	movs	r2, #32
 80076aa:	60da      	str	r2, [r3, #12]
  }
}
 80076ac:	46c0      	nop			; (mov r8, r8)
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	40022000 	.word	0x40022000

080076b8 <Flash_Program>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
static void Flash_Program(uint32_t Address, uint16_t *WordPtr) {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]

  uint32_t index;

  WaitForLastOperation();
 80076c2:	f7ff ffe1 	bl	8007688 <WaitForLastOperation>
  FLASH->CR |= FLASH_CR_PER;
 80076c6:	4b1f      	ldr	r3, [pc, #124]	; (8007744 <Flash_Program+0x8c>)
 80076c8:	691a      	ldr	r2, [r3, #16]
 80076ca:	4b1e      	ldr	r3, [pc, #120]	; (8007744 <Flash_Program+0x8c>)
 80076cc:	2102      	movs	r1, #2
 80076ce:	430a      	orrs	r2, r1
 80076d0:	611a      	str	r2, [r3, #16]
  FLASH->AR = Address;
 80076d2:	4b1c      	ldr	r3, [pc, #112]	; (8007744 <Flash_Program+0x8c>)
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	615a      	str	r2, [r3, #20]
  FLASH->CR |= FLASH_CR_STRT;
 80076d8:	4b1a      	ldr	r3, [pc, #104]	; (8007744 <Flash_Program+0x8c>)
 80076da:	691a      	ldr	r2, [r3, #16]
 80076dc:	4b19      	ldr	r3, [pc, #100]	; (8007744 <Flash_Program+0x8c>)
 80076de:	2140      	movs	r1, #64	; 0x40
 80076e0:	430a      	orrs	r2, r1
 80076e2:	611a      	str	r2, [r3, #16]
  WaitForLastOperation();
 80076e4:	f7ff ffd0 	bl	8007688 <WaitForLastOperation>
  FLASH->CR &= ~FLASH_CR_PER;
 80076e8:	4b16      	ldr	r3, [pc, #88]	; (8007744 <Flash_Program+0x8c>)
 80076ea:	691a      	ldr	r2, [r3, #16]
 80076ec:	4b15      	ldr	r3, [pc, #84]	; (8007744 <Flash_Program+0x8c>)
 80076ee:	2102      	movs	r1, #2
 80076f0:	438a      	bics	r2, r1
 80076f2:	611a      	str	r2, [r3, #16]
  WaitForLastOperation();
 80076f4:	f7ff ffc8 	bl	8007688 <WaitForLastOperation>
  for ( index = 0 ; index < (2048 / 2) ; index++ ) {
 80076f8:	2300      	movs	r3, #0
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	e01a      	b.n	8007734 <Flash_Program+0x7c>
    FLASH->CR |= FLASH_CR_PG;
 80076fe:	4b11      	ldr	r3, [pc, #68]	; (8007744 <Flash_Program+0x8c>)
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	4b10      	ldr	r3, [pc, #64]	; (8007744 <Flash_Program+0x8c>)
 8007704:	2101      	movs	r1, #1
 8007706:	430a      	orrs	r2, r1
 8007708:	611a      	str	r2, [r3, #16]
    *(__IO uint16_t*) Address = WordPtr[index];
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	18d2      	adds	r2, r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	8812      	ldrh	r2, [r2, #0]
 8007716:	801a      	strh	r2, [r3, #0]
    Address += 2;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3302      	adds	r3, #2
 800771c:	607b      	str	r3, [r7, #4]
    WaitForLastOperation();
 800771e:	f7ff ffb3 	bl	8007688 <WaitForLastOperation>
    FLASH->CR &= ~FLASH_CR_PG;
 8007722:	4b08      	ldr	r3, [pc, #32]	; (8007744 <Flash_Program+0x8c>)
 8007724:	691a      	ldr	r2, [r3, #16]
 8007726:	4b07      	ldr	r3, [pc, #28]	; (8007744 <Flash_Program+0x8c>)
 8007728:	2101      	movs	r1, #1
 800772a:	438a      	bics	r2, r1
 800772c:	611a      	str	r2, [r3, #16]
  for ( index = 0 ; index < (2048 / 2) ; index++ ) {
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3301      	adds	r3, #1
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4a04      	ldr	r2, [pc, #16]	; (8007748 <Flash_Program+0x90>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d9e0      	bls.n	80076fe <Flash_Program+0x46>
  }
}
 800773c:	46c0      	nop			; (mov r8, r8)
 800773e:	46bd      	mov	sp, r7
 8007740:	b004      	add	sp, #16
 8007742:	bd80      	pop	{r7, pc}
 8007744:	40022000 	.word	0x40022000
 8007748:	000003ff 	.word	0x000003ff

0800774c <ReflashTuningParameters>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
void ReflashTuningParameters(uint32_t PageNumber, uint16_t *DataPtr) {
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007756:	b672      	cpsid	i

  uint32_t PageAddress;
  volatile uint32_t tmpreg;

  __disable_irq();
  RCC->AHBENR |= RCC_AHBENR_CRCEN;
 8007758:	4b26      	ldr	r3, [pc, #152]	; (80077f4 <ReflashTuningParameters+0xa8>)
 800775a:	695a      	ldr	r2, [r3, #20]
 800775c:	4b25      	ldr	r3, [pc, #148]	; (80077f4 <ReflashTuningParameters+0xa8>)
 800775e:	2140      	movs	r1, #64	; 0x40
 8007760:	430a      	orrs	r2, r1
 8007762:	615a      	str	r2, [r3, #20]
  tmpreg = RCC->AHBENR & RCC_AHBENR_CRCEN;
 8007764:	4b23      	ldr	r3, [pc, #140]	; (80077f4 <ReflashTuningParameters+0xa8>)
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	2240      	movs	r2, #64	; 0x40
 800776a:	4013      	ands	r3, r2
 800776c:	60bb      	str	r3, [r7, #8]
  UNUSED(tmpreg);
 800776e:	68bb      	ldr	r3, [r7, #8]
  if ((FLASH->CR & FLASH_CR_LOCK) != RESET ) {
 8007770:	4b21      	ldr	r3, [pc, #132]	; (80077f8 <ReflashTuningParameters+0xac>)
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	2280      	movs	r2, #128	; 0x80
 8007776:	4013      	ands	r3, r2
 8007778:	d005      	beq.n	8007786 <ReflashTuningParameters+0x3a>
    FLASH->KEYR = FLASH_KEY1;
 800777a:	4b1f      	ldr	r3, [pc, #124]	; (80077f8 <ReflashTuningParameters+0xac>)
 800777c:	4a1f      	ldr	r2, [pc, #124]	; (80077fc <ReflashTuningParameters+0xb0>)
 800777e:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8007780:	4b1d      	ldr	r3, [pc, #116]	; (80077f8 <ReflashTuningParameters+0xac>)
 8007782:	4a1f      	ldr	r2, [pc, #124]	; (8007800 <ReflashTuningParameters+0xb4>)
 8007784:	605a      	str	r2, [r3, #4]
  }
  FLASH->SR = FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR;
 8007786:	4b1c      	ldr	r3, [pc, #112]	; (80077f8 <ReflashTuningParameters+0xac>)
 8007788:	2214      	movs	r2, #20
 800778a:	60da      	str	r2, [r3, #12]
  PageAddress = 0x08000000 + (PageNumber * FLASH_PAGE_SIZE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2280      	movs	r2, #128	; 0x80
 8007790:	0252      	lsls	r2, r2, #9
 8007792:	4694      	mov	ip, r2
 8007794:	4463      	add	r3, ip
 8007796:	02db      	lsls	r3, r3, #11
 8007798:	60fb      	str	r3, [r7, #12]
  WaitForLastOperation();
 800779a:	f7ff ff75 	bl	8007688 <WaitForLastOperation>
  FLASH->CR |= FLASH_CR_PER;
 800779e:	4b16      	ldr	r3, [pc, #88]	; (80077f8 <ReflashTuningParameters+0xac>)
 80077a0:	691a      	ldr	r2, [r3, #16]
 80077a2:	4b15      	ldr	r3, [pc, #84]	; (80077f8 <ReflashTuningParameters+0xac>)
 80077a4:	2102      	movs	r1, #2
 80077a6:	430a      	orrs	r2, r1
 80077a8:	611a      	str	r2, [r3, #16]
  FLASH->AR = PageAddress;
 80077aa:	4b13      	ldr	r3, [pc, #76]	; (80077f8 <ReflashTuningParameters+0xac>)
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	615a      	str	r2, [r3, #20]
  FLASH->CR |= FLASH_CR_STRT;
 80077b0:	4b11      	ldr	r3, [pc, #68]	; (80077f8 <ReflashTuningParameters+0xac>)
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	4b10      	ldr	r3, [pc, #64]	; (80077f8 <ReflashTuningParameters+0xac>)
 80077b6:	2140      	movs	r1, #64	; 0x40
 80077b8:	430a      	orrs	r2, r1
 80077ba:	611a      	str	r2, [r3, #16]
  WaitForLastOperation();
 80077bc:	f7ff ff64 	bl	8007688 <WaitForLastOperation>
  FLASH->CR &= ~FLASH_CR_PER;
 80077c0:	4b0d      	ldr	r3, [pc, #52]	; (80077f8 <ReflashTuningParameters+0xac>)
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <ReflashTuningParameters+0xac>)
 80077c6:	2102      	movs	r1, #2
 80077c8:	438a      	bics	r2, r1
 80077ca:	611a      	str	r2, [r3, #16]
  Flash_Program(PageAddress, DataPtr);
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	0011      	movs	r1, r2
 80077d2:	0018      	movs	r0, r3
 80077d4:	f7ff ff70 	bl	80076b8 <Flash_Program>
  WaitForLastOperation();
 80077d8:	f7ff ff56 	bl	8007688 <WaitForLastOperation>
  FLASH->CR |= FLASH_CR_LOCK;
 80077dc:	4b06      	ldr	r3, [pc, #24]	; (80077f8 <ReflashTuningParameters+0xac>)
 80077de:	691a      	ldr	r2, [r3, #16]
 80077e0:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <ReflashTuningParameters+0xac>)
 80077e2:	2180      	movs	r1, #128	; 0x80
 80077e4:	430a      	orrs	r2, r1
 80077e6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 80077e8:	b662      	cpsie	i
  __enable_irq();
}
 80077ea:	46c0      	nop			; (mov r8, r8)
 80077ec:	46bd      	mov	sp, r7
 80077ee:	b004      	add	sp, #16
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	46c0      	nop			; (mov r8, r8)
 80077f4:	40021000 	.word	0x40021000
 80077f8:	40022000 	.word	0x40022000
 80077fc:	45670123 	.word	0x45670123
 8007800:	cdef89ab 	.word	0xcdef89ab

08007804 <ProcessSerialData>:
//  This routine is called for each byte received
//
// HLR-xxxx
// LLR-xxxx
//
void ProcessSerialData(stSerial *SerialStruct) {
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]

  //
  // There should never be a 50mS gap between characters coming from Host.  If there is, then reset State Machine
  // back to looking for Sync Characters.
  //
  if (SerialStruct->RxTimeout > 50) {           // 50mS
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	8b5b      	ldrh	r3, [r3, #26]
 8007810:	2b32      	cmp	r3, #50	; 0x32
 8007812:	d910      	bls.n	8007836 <ProcessSerialData+0x32>
      if (SerialStruct->InstanceNumber == 1) SendMessageToCD = 0;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d102      	bne.n	8007822 <ProcessSerialData+0x1e>
 800781c:	4bba      	ldr	r3, [pc, #744]	; (8007b08 <ProcessSerialData+0x304>)
 800781e:	2200      	movs	r2, #0
 8007820:	701a      	strb	r2, [r3, #0]
      if (SerialStruct->InstanceNumber == 4) SendMessageToPC = 0;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b04      	cmp	r3, #4
 8007828:	d102      	bne.n	8007830 <ProcessSerialData+0x2c>
 800782a:	4bb8      	ldr	r3, [pc, #736]	; (8007b0c <ProcessSerialData+0x308>)
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
      SerialStruct->State = 0;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	70da      	strb	r2, [r3, #3]
  }
  SerialStruct->RxTimeout = 0;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	835a      	strh	r2, [r3, #26]

  Data = SerialStruct->RxChar;
 800783c:	230f      	movs	r3, #15
 800783e:	18fb      	adds	r3, r7, r3
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	7e12      	ldrb	r2, [r2, #24]
 8007844:	701a      	strb	r2, [r3, #0]
  if ((SendMessageToCD == 2) && (SerialStruct->InstanceNumber == 1)) {
 8007846:	4bb0      	ldr	r3, [pc, #704]	; (8007b08 <ProcessSerialData+0x304>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d10f      	bne.n	800786e <ProcessSerialData+0x6a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d10b      	bne.n	800786e <ProcessSerialData+0x6a>
      CDTxBuffer[CDTxBufferIn++] = Data;
 8007856:	4bae      	ldr	r3, [pc, #696]	; (8007b10 <ProcessSerialData+0x30c>)
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	b2d1      	uxtb	r1, r2
 800785e:	4aac      	ldr	r2, [pc, #688]	; (8007b10 <ProcessSerialData+0x30c>)
 8007860:	7011      	strb	r1, [r2, #0]
 8007862:	0019      	movs	r1, r3
 8007864:	4bab      	ldr	r3, [pc, #684]	; (8007b14 <ProcessSerialData+0x310>)
 8007866:	220f      	movs	r2, #15
 8007868:	18ba      	adds	r2, r7, r2
 800786a:	7812      	ldrb	r2, [r2, #0]
 800786c:	545a      	strb	r2, [r3, r1]
  }
  if ((SendMessageToPC == 2) && (SerialStruct->InstanceNumber == 4)) {
 800786e:	4ba7      	ldr	r3, [pc, #668]	; (8007b0c <ProcessSerialData+0x308>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d10f      	bne.n	8007896 <ProcessSerialData+0x92>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	2b04      	cmp	r3, #4
 800787c:	d10b      	bne.n	8007896 <ProcessSerialData+0x92>
      CDRxBuffer[CDRxBufferIn++] = Data;
 800787e:	4ba6      	ldr	r3, [pc, #664]	; (8007b18 <ProcessSerialData+0x314>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	1c5a      	adds	r2, r3, #1
 8007884:	b2d1      	uxtb	r1, r2
 8007886:	4aa4      	ldr	r2, [pc, #656]	; (8007b18 <ProcessSerialData+0x314>)
 8007888:	7011      	strb	r1, [r2, #0]
 800788a:	0019      	movs	r1, r3
 800788c:	4ba3      	ldr	r3, [pc, #652]	; (8007b1c <ProcessSerialData+0x318>)
 800788e:	220f      	movs	r2, #15
 8007890:	18ba      	adds	r2, r7, r2
 8007892:	7812      	ldrb	r2, [r2, #0]
 8007894:	545a      	strb	r2, [r3, r1]
  }

  switch ( SerialStruct->State ) {
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	78db      	ldrb	r3, [r3, #3]
 800789a:	2b3c      	cmp	r3, #60	; 0x3c
 800789c:	d900      	bls.n	80078a0 <ProcessSerialData+0x9c>
 800789e:	e17a      	b.n	8007b96 <ProcessSerialData+0x392>
 80078a0:	009a      	lsls	r2, r3, #2
 80078a2:	4b9f      	ldr	r3, [pc, #636]	; (8007b20 <ProcessSerialData+0x31c>)
 80078a4:	18d3      	adds	r3, r2, r3
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	469f      	mov	pc, r3
  case 0:
      if ((Data == 0xBB) && (SerialStruct->InstanceNumber == 1)) {
 80078aa:	230f      	movs	r3, #15
 80078ac:	18fb      	adds	r3, r7, r3
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2bbb      	cmp	r3, #187	; 0xbb
 80078b2:	d117      	bne.n	80078e4 <ProcessSerialData+0xe0>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d113      	bne.n	80078e4 <ProcessSerialData+0xe0>
        CDTxBuffer[CDTxBufferIn++] = 0xAA;
 80078bc:	4b94      	ldr	r3, [pc, #592]	; (8007b10 <ProcessSerialData+0x30c>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	b2d1      	uxtb	r1, r2
 80078c4:	4a92      	ldr	r2, [pc, #584]	; (8007b10 <ProcessSerialData+0x30c>)
 80078c6:	7011      	strb	r1, [r2, #0]
 80078c8:	001a      	movs	r2, r3
 80078ca:	4b92      	ldr	r3, [pc, #584]	; (8007b14 <ProcessSerialData+0x310>)
 80078cc:	21aa      	movs	r1, #170	; 0xaa
 80078ce:	5499      	strb	r1, [r3, r2]
        SendMessageToCD = 1;
 80078d0:	4b8d      	ldr	r3, [pc, #564]	; (8007b08 <ProcessSerialData+0x304>)
 80078d2:	2201      	movs	r2, #1
 80078d4:	701a      	strb	r2, [r3, #0]
        SerialStruct->SyncCount++;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	791b      	ldrb	r3, [r3, #4]
 80078da:	3301      	adds	r3, #1
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	711a      	strb	r2, [r3, #4]
          if (SerialStruct->InstanceNumber == 1) SendMessageToCD = 0;
          if (SerialStruct->InstanceNumber == 4) SendMessageToPC = 0;
      }
      SerialStruct->SyncCount = 0;
    }
    break;
 80078e2:	e158      	b.n	8007b96 <ProcessSerialData+0x392>
    } else if ( Data == 0xAA ) {
 80078e4:	230f      	movs	r3, #15
 80078e6:	18fb      	adds	r3, r7, r3
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	2baa      	cmp	r3, #170	; 0xaa
 80078ec:	d11f      	bne.n	800792e <ProcessSerialData+0x12a>
        if (SerialStruct->InstanceNumber == 1) SendMessageToCD = 0;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d102      	bne.n	80078fc <ProcessSerialData+0xf8>
 80078f6:	4b84      	ldr	r3, [pc, #528]	; (8007b08 <ProcessSerialData+0x304>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	701a      	strb	r2, [r3, #0]
        if ((SendMessageToPC == 1) && (SerialStruct->InstanceNumber == 4)) {
 80078fc:	4b83      	ldr	r3, [pc, #524]	; (8007b0c <ProcessSerialData+0x308>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d10d      	bne.n	8007920 <ProcessSerialData+0x11c>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b04      	cmp	r3, #4
 800790a:	d109      	bne.n	8007920 <ProcessSerialData+0x11c>
            CDRxBuffer[CDRxBufferIn++] = 0xBB;
 800790c:	4b82      	ldr	r3, [pc, #520]	; (8007b18 <ProcessSerialData+0x314>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	b2d1      	uxtb	r1, r2
 8007914:	4a80      	ldr	r2, [pc, #512]	; (8007b18 <ProcessSerialData+0x314>)
 8007916:	7011      	strb	r1, [r2, #0]
 8007918:	001a      	movs	r2, r3
 800791a:	4b80      	ldr	r3, [pc, #512]	; (8007b1c <ProcessSerialData+0x318>)
 800791c:	21bb      	movs	r1, #187	; 0xbb
 800791e:	5499      	strb	r1, [r3, r2]
        SerialStruct->SyncCount++;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	791b      	ldrb	r3, [r3, #4]
 8007924:	3301      	adds	r3, #1
 8007926:	b2da      	uxtb	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	711a      	strb	r2, [r3, #4]
    break;
 800792c:	e133      	b.n	8007b96 <ProcessSerialData+0x392>
       if (Data == 0x00) {
 800792e:	230f      	movs	r3, #15
 8007930:	18fb      	adds	r3, r7, r3
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d134      	bne.n	80079a2 <ProcessSerialData+0x19e>
          if (SerialStruct->SyncCount >= 3) {
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	791b      	ldrb	r3, [r3, #4]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d93e      	bls.n	80079be <ProcessSerialData+0x1ba>
              if ((SendMessageToCD == 1) && (SerialStruct->InstanceNumber == 1)) {
 8007940:	4b71      	ldr	r3, [pc, #452]	; (8007b08 <ProcessSerialData+0x304>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d110      	bne.n	800796a <ProcessSerialData+0x166>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d10c      	bne.n	800796a <ProcessSerialData+0x166>
                  CDTxBuffer[CDTxBufferIn++] = 0x00;
 8007950:	4b6f      	ldr	r3, [pc, #444]	; (8007b10 <ProcessSerialData+0x30c>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	b2d1      	uxtb	r1, r2
 8007958:	4a6d      	ldr	r2, [pc, #436]	; (8007b10 <ProcessSerialData+0x30c>)
 800795a:	7011      	strb	r1, [r2, #0]
 800795c:	001a      	movs	r2, r3
 800795e:	4b6d      	ldr	r3, [pc, #436]	; (8007b14 <ProcessSerialData+0x310>)
 8007960:	2100      	movs	r1, #0
 8007962:	5499      	strb	r1, [r3, r2]
                  SendMessageToCD = 2;
 8007964:	4b68      	ldr	r3, [pc, #416]	; (8007b08 <ProcessSerialData+0x304>)
 8007966:	2202      	movs	r2, #2
 8007968:	701a      	strb	r2, [r3, #0]
              if ((SendMessageToPC == 1) && (SerialStruct->InstanceNumber == 4)) {
 800796a:	4b68      	ldr	r3, [pc, #416]	; (8007b0c <ProcessSerialData+0x308>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d110      	bne.n	8007994 <ProcessSerialData+0x190>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b04      	cmp	r3, #4
 8007978:	d10c      	bne.n	8007994 <ProcessSerialData+0x190>
                  CDRxBuffer[CDRxBufferIn++] = 0x00;
 800797a:	4b67      	ldr	r3, [pc, #412]	; (8007b18 <ProcessSerialData+0x314>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	b2d1      	uxtb	r1, r2
 8007982:	4a65      	ldr	r2, [pc, #404]	; (8007b18 <ProcessSerialData+0x314>)
 8007984:	7011      	strb	r1, [r2, #0]
 8007986:	001a      	movs	r2, r3
 8007988:	4b64      	ldr	r3, [pc, #400]	; (8007b1c <ProcessSerialData+0x318>)
 800798a:	2100      	movs	r1, #0
 800798c:	5499      	strb	r1, [r3, r2]
                  SendMessageToPC = 2;
 800798e:	4b5f      	ldr	r3, [pc, #380]	; (8007b0c <ProcessSerialData+0x308>)
 8007990:	2202      	movs	r2, #2
 8007992:	701a      	strb	r2, [r3, #0]
              SerialStruct->State += 10;                      // Must have received at least 3 of the 5 0xAA's
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	78db      	ldrb	r3, [r3, #3]
 8007998:	330a      	adds	r3, #10
 800799a:	b2da      	uxtb	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	70da      	strb	r2, [r3, #3]
 80079a0:	e00d      	b.n	80079be <ProcessSerialData+0x1ba>
          if (SerialStruct->InstanceNumber == 1) SendMessageToCD = 0;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d102      	bne.n	80079b0 <ProcessSerialData+0x1ac>
 80079aa:	4b57      	ldr	r3, [pc, #348]	; (8007b08 <ProcessSerialData+0x304>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	701a      	strb	r2, [r3, #0]
          if (SerialStruct->InstanceNumber == 4) SendMessageToPC = 0;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	d102      	bne.n	80079be <ProcessSerialData+0x1ba>
 80079b8:	4b54      	ldr	r3, [pc, #336]	; (8007b0c <ProcessSerialData+0x308>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]
      SerialStruct->SyncCount = 0;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	711a      	strb	r2, [r3, #4]
    break;
 80079c4:	e0e7      	b.n	8007b96 <ProcessSerialData+0x392>
  case 10:
    SerialStruct->Command = Data;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	210f      	movs	r1, #15
 80079ca:	187a      	adds	r2, r7, r1
 80079cc:	7812      	ldrb	r2, [r2, #0]
 80079ce:	771a      	strb	r2, [r3, #28]
    SerialStruct->Crc16 = CalcCrc(Data, 0x0);
 80079d0:	187b      	adds	r3, r7, r1
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	2100      	movs	r1, #0
 80079d6:	0018      	movs	r0, r3
 80079d8:	f7fd fa10 	bl	8004dfc <CalcCrc>
 80079dc:	0003      	movs	r3, r0
 80079de:	001a      	movs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	811a      	strh	r2, [r3, #8]
    SerialStruct->State += 10;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	78db      	ldrb	r3, [r3, #3]
 80079e8:	330a      	adds	r3, #10
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	70da      	strb	r2, [r3, #3]
    break;
 80079f0:	e0d1      	b.n	8007b96 <ProcessSerialData+0x392>
  case 20:
    SerialStruct->CmdLen = Data;                              // LSB
 80079f2:	210f      	movs	r1, #15
 80079f4:	187b      	adds	r3, r7, r1
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	80da      	strh	r2, [r3, #6]
    SerialStruct->Crc16 = CalcCrc(Data, SerialStruct->Crc16);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	891a      	ldrh	r2, [r3, #8]
 8007a02:	187b      	adds	r3, r7, r1
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	0011      	movs	r1, r2
 8007a08:	0018      	movs	r0, r3
 8007a0a:	f7fd f9f7 	bl	8004dfc <CalcCrc>
 8007a0e:	0003      	movs	r3, r0
 8007a10:	001a      	movs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	811a      	strh	r2, [r3, #8]
    SerialStruct->State += 10;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	78db      	ldrb	r3, [r3, #3]
 8007a1a:	330a      	adds	r3, #10
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	70da      	strb	r2, [r3, #3]
    break;
 8007a22:	e0b8      	b.n	8007b96 <ProcessSerialData+0x392>
  case 30:
      SerialStruct->CmdLen += (uint16_t) Data << 8;              // MSB
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	88da      	ldrh	r2, [r3, #6]
 8007a28:	210f      	movs	r1, #15
 8007a2a:	187b      	adds	r3, r7, r1
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	18d3      	adds	r3, r2, r3
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	80da      	strh	r2, [r3, #6]
      SerialStruct->Length = SerialStruct->CmdLen;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	88db      	ldrh	r3, [r3, #6]
 8007a40:	b21a      	sxth	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	83da      	strh	r2, [r3, #30]
      SerialStruct->Crc16 = CalcCrc(Data, SerialStruct->Crc16);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	891a      	ldrh	r2, [r3, #8]
 8007a4a:	187b      	adds	r3, r7, r1
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	0011      	movs	r1, r2
 8007a50:	0018      	movs	r0, r3
 8007a52:	f7fd f9d3 	bl	8004dfc <CalcCrc>
 8007a56:	0003      	movs	r3, r0
 8007a58:	001a      	movs	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	811a      	strh	r2, [r3, #8]
      SerialStruct->State += 10;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	78db      	ldrb	r3, [r3, #3]
 8007a62:	330a      	adds	r3, #10
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	70da      	strb	r2, [r3, #3]
      if ( SerialStruct->CmdLen == 0 ) {
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	88db      	ldrh	r3, [r3, #6]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d105      	bne.n	8007a7e <ProcessSerialData+0x27a>
          SerialStruct->State += 10;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	78db      	ldrb	r3, [r3, #3]
 8007a76:	330a      	adds	r3, #10
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	70da      	strb	r2, [r3, #3]
      }
      if ( SerialStruct->CmdLen > SerialStruct->TxRxBufferSize ) {
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	88da      	ldrh	r2, [r3, #6]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	89db      	ldrh	r3, [r3, #14]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d902      	bls.n	8007a90 <ProcessSerialData+0x28c>
          SerialStruct->State = 0;          // Make sure Length is valid
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	70da      	strb	r2, [r3, #3]
      }
      SerialStruct->Offset = 0;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	815a      	strh	r2, [r3, #10]
      break;
 8007a96:	e07e      	b.n	8007b96 <ProcessSerialData+0x392>
  case 40:
      SerialStruct->TxRxBuffer[SerialStruct->Offset++] = Data;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	695a      	ldr	r2, [r3, #20]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	895b      	ldrh	r3, [r3, #10]
 8007aa0:	1c59      	adds	r1, r3, #1
 8007aa2:	b288      	uxth	r0, r1
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	8148      	strh	r0, [r1, #10]
 8007aa8:	18d3      	adds	r3, r2, r3
 8007aaa:	210f      	movs	r1, #15
 8007aac:	187a      	adds	r2, r7, r1
 8007aae:	7812      	ldrb	r2, [r2, #0]
 8007ab0:	701a      	strb	r2, [r3, #0]
      SerialStruct->Crc16 = CalcCrc(Data, SerialStruct->Crc16);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	891a      	ldrh	r2, [r3, #8]
 8007ab6:	187b      	adds	r3, r7, r1
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	0011      	movs	r1, r2
 8007abc:	0018      	movs	r0, r3
 8007abe:	f7fd f99d 	bl	8004dfc <CalcCrc>
 8007ac2:	0003      	movs	r3, r0
 8007ac4:	001a      	movs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	811a      	strh	r2, [r3, #8]
      SerialStruct->CmdLen--;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	88db      	ldrh	r3, [r3, #6]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	80da      	strh	r2, [r3, #6]
      if ( SerialStruct->CmdLen == 0 ) {
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	88db      	ldrh	r3, [r3, #6]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d15a      	bne.n	8007b94 <ProcessSerialData+0x390>
          SerialStruct->State += 10;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	78db      	ldrb	r3, [r3, #3]
 8007ae2:	330a      	adds	r3, #10
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	70da      	strb	r2, [r3, #3]
      }
      break;
 8007aea:	e053      	b.n	8007b94 <ProcessSerialData+0x390>
  case 50:
    SerialStruct->CmdCrc = Data;                          // LSB
 8007aec:	230f      	movs	r3, #15
 8007aee:	18fb      	adds	r3, r7, r3
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	819a      	strh	r2, [r3, #12]
    SerialStruct->State += 10;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	78db      	ldrb	r3, [r3, #3]
 8007afc:	330a      	adds	r3, #10
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	70da      	strb	r2, [r3, #3]
    break;
 8007b04:	e047      	b.n	8007b96 <ProcessSerialData+0x392>
 8007b06:	46c0      	nop			; (mov r8, r8)
 8007b08:	200026dd 	.word	0x200026dd
 8007b0c:	20002750 	.word	0x20002750
 8007b10:	20002754 	.word	0x20002754
 8007b14:	2000252c 	.word	0x2000252c
 8007b18:	20002751 	.word	0x20002751
 8007b1c:	200027dc 	.word	0x200027dc
 8007b20:	08009cf4 	.word	0x08009cf4
  case 60:
    SerialStruct->CmdCrc += (uint16_t) Data << 8;          // MSB
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	899a      	ldrh	r2, [r3, #12]
 8007b28:	230f      	movs	r3, #15
 8007b2a:	18fb      	adds	r3, r7, r3
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	021b      	lsls	r3, r3, #8
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	18d3      	adds	r3, r2, r3
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	819a      	strh	r2, [r3, #12]
    if (SerialStruct->InstanceNumber == 2) {    // TESTING
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d105      	bne.n	8007b50 <ProcessSerialData+0x34c>
      SerialStruct->SyncCount++;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	791b      	ldrb	r3, [r3, #4]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	711a      	strb	r2, [r3, #4]
    }
    if (( SerialStruct->CmdCrc == SerialStruct->Crc16 ) &&
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	899a      	ldrh	r2, [r3, #12]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	891b      	ldrh	r3, [r3, #8]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d117      	bne.n	8007b8c <ProcessSerialData+0x388>
            (((SerialStruct->InstanceNumber == 2)) ||
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
    if (( SerialStruct->CmdCrc == SerialStruct->Crc16 ) &&
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d00f      	beq.n	8007b84 <ProcessSerialData+0x380>
            ((SerialStruct->InstanceNumber == 1) && (SendMessageToCD == 0)) ||
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	781b      	ldrb	r3, [r3, #0]
            (((SerialStruct->InstanceNumber == 2)) ||
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d103      	bne.n	8007b74 <ProcessSerialData+0x370>
            ((SerialStruct->InstanceNumber == 1) && (SendMessageToCD == 0)) ||
 8007b6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <ProcessSerialData+0x39c>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d007      	beq.n	8007b84 <ProcessSerialData+0x380>
            ((SerialStruct->InstanceNumber == 4) && (SendMessageToPC == 0))) ){
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	781b      	ldrb	r3, [r3, #0]
            ((SerialStruct->InstanceNumber == 1) && (SendMessageToCD == 0)) ||
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	d107      	bne.n	8007b8c <ProcessSerialData+0x388>
            ((SerialStruct->InstanceNumber == 4) && (SendMessageToPC == 0))) ){
 8007b7c:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <ProcessSerialData+0x3a0>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d103      	bne.n	8007b8c <ProcessSerialData+0x388>
      ProcessSerialMessage(SerialStruct);             // Process Command if CRC's match
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	0018      	movs	r0, r3
 8007b88:	f000 f9a6 	bl	8007ed8 <ProcessSerialMessage>
    }
    SerialStruct->State = 0;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	70da      	strb	r2, [r3, #3]
    break;
 8007b92:	e000      	b.n	8007b96 <ProcessSerialData+0x392>
      break;
 8007b94:	46c0      	nop			; (mov r8, r8)
  }
}
 8007b96:	46c0      	nop			; (mov r8, r8)
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	b004      	add	sp, #16
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	46c0      	nop			; (mov r8, r8)
 8007ba0:	200026dd 	.word	0x200026dd
 8007ba4:	20002750 	.word	0x20002750

08007ba8 <HAL_UART_TxCpltCallback>:
// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
// This routine is called on TX Complete
//
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
    if ( huart->Instance == USART1 ) {
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a1d      	ldr	r2, [pc, #116]	; (8007c2c <HAL_UART_TxCpltCallback+0x84>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d109      	bne.n	8007bce <HAL_UART_TxCpltCallback+0x26>
        HAL_GPIO_WritePin( PC_RS485_EN_GPIO_Port, PC_RS485_EN_Pin, GPIO_PIN_RESET);            // Turn off RS422/485 Driver
 8007bba:	2380      	movs	r3, #128	; 0x80
 8007bbc:	01db      	lsls	r3, r3, #7
 8007bbe:	481c      	ldr	r0, [pc, #112]	; (8007c30 <HAL_UART_TxCpltCallback+0x88>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	0019      	movs	r1, r3
 8007bc4:	f7f9 fcb7 	bl	8001536 <HAL_GPIO_WritePin>
        SerialUsart1.Transmitting = FALSE;
 8007bc8:	4b1a      	ldr	r3, [pc, #104]	; (8007c34 <HAL_UART_TxCpltCallback+0x8c>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	709a      	strb	r2, [r3, #2]
    }
  if ( huart->Instance == USART2 ) {
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a19      	ldr	r2, [pc, #100]	; (8007c38 <HAL_UART_TxCpltCallback+0x90>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d116      	bne.n	8007c06 <HAL_UART_TxCpltCallback+0x5e>
      SerialUsart2.Transmitting = FALSE;
 8007bd8:	4b18      	ldr	r3, [pc, #96]	; (8007c3c <HAL_UART_TxCpltCallback+0x94>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	709a      	strb	r2, [r3, #2]
      if (SysPars.CommConfig == COMM_CD_DIGIO1) {
 8007bde:	4b18      	ldr	r3, [pc, #96]	; (8007c40 <HAL_UART_TxCpltCallback+0x98>)
 8007be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d109      	bne.n	8007bfa <HAL_UART_TxCpltCallback+0x52>
          HAL_GPIO_WritePin(DIG_HandleStruct[0].Dir_Port, DIG_HandleStruct[0].Dir_Pin, GPIO_PIN_RESET);   //Config DIGIO1 Buffer as an input
 8007be6:	4b17      	ldr	r3, [pc, #92]	; (8007c44 <HAL_UART_TxCpltCallback+0x9c>)
 8007be8:	68d8      	ldr	r0, [r3, #12]
 8007bea:	4b16      	ldr	r3, [pc, #88]	; (8007c44 <HAL_UART_TxCpltCallback+0x9c>)
 8007bec:	223c      	movs	r2, #60	; 0x3c
 8007bee:	5e9b      	ldrsh	r3, [r3, r2]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	0019      	movs	r1, r3
 8007bf6:	f7f9 fc9e 	bl	8001536 <HAL_GPIO_WritePin>
      }
      HAL_UART_Receive_IT(&huart2, &SerialUsart2.RxChar, 1);
 8007bfa:	4913      	ldr	r1, [pc, #76]	; (8007c48 <HAL_UART_TxCpltCallback+0xa0>)
 8007bfc:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <HAL_UART_TxCpltCallback+0xa4>)
 8007bfe:	2201      	movs	r2, #1
 8007c00:	0018      	movs	r0, r3
 8007c02:	f7fc faeb 	bl	80041dc <HAL_UART_Receive_IT>
  }
  if ( huart->Instance == USART4 ) {
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a11      	ldr	r2, [pc, #68]	; (8007c50 <HAL_UART_TxCpltCallback+0xa8>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d108      	bne.n	8007c22 <HAL_UART_TxCpltCallback+0x7a>
      HAL_GPIO_WritePin( RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);            // Turn off RS422/485 Driver
 8007c10:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <HAL_UART_TxCpltCallback+0x88>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	2120      	movs	r1, #32
 8007c16:	0018      	movs	r0, r3
 8007c18:	f7f9 fc8d 	bl	8001536 <HAL_GPIO_WritePin>
      SerialUsart4.Transmitting = FALSE;
 8007c1c:	4b0d      	ldr	r3, [pc, #52]	; (8007c54 <HAL_UART_TxCpltCallback+0xac>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	709a      	strb	r2, [r3, #2]
  }
}
 8007c22:	46c0      	nop			; (mov r8, r8)
 8007c24:	46bd      	mov	sp, r7
 8007c26:	b002      	add	sp, #8
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	46c0      	nop			; (mov r8, r8)
 8007c2c:	40013800 	.word	0x40013800
 8007c30:	48000400 	.word	0x48000400
 8007c34:	200013b0 	.word	0x200013b0
 8007c38:	40004400 	.word	0x40004400
 8007c3c:	200013d0 	.word	0x200013d0
 8007c40:	200011f4 	.word	0x200011f4
 8007c44:	20001f14 	.word	0x20001f14
 8007c48:	200013e8 	.word	0x200013e8
 8007c4c:	200026e0 	.word	0x200026e0
 8007c50:	40004c00 	.word	0x40004c00
 8007c54:	2000141c 	.word	0x2000141c

08007c58 <HAL_UART_RxCpltCallback>:
// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
// This routine is called on RX Complete
//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  if ( huart->Instance == USART1 ) {                                  // To/From PC
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a25      	ldr	r2, [pc, #148]	; (8007cfc <HAL_UART_RxCpltCallback+0xa4>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d10d      	bne.n	8007c86 <HAL_UART_RxCpltCallback+0x2e>
      if (!SerialUsart1.Transmitting) {
 8007c6a:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <HAL_UART_RxCpltCallback+0xa8>)
 8007c6c:	789b      	ldrb	r3, [r3, #2]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d103      	bne.n	8007c7a <HAL_UART_RxCpltCallback+0x22>
        ProcessSerialData(&SerialUsart1);
 8007c72:	4b23      	ldr	r3, [pc, #140]	; (8007d00 <HAL_UART_RxCpltCallback+0xa8>)
 8007c74:	0018      	movs	r0, r3
 8007c76:	f7ff fdc5 	bl	8007804 <ProcessSerialData>
        }
      HAL_UART_Receive_IT(&huart1, &SerialUsart1.RxChar, 1);
 8007c7a:	4922      	ldr	r1, [pc, #136]	; (8007d04 <HAL_UART_RxCpltCallback+0xac>)
 8007c7c:	4b22      	ldr	r3, [pc, #136]	; (8007d08 <HAL_UART_RxCpltCallback+0xb0>)
 8007c7e:	2201      	movs	r2, #1
 8007c80:	0018      	movs	r0, r3
 8007c82:	f7fc faab 	bl	80041dc <HAL_UART_Receive_IT>
  }
  if ( huart->Instance == USART2 ) {                                // To/From Sender TTL (can be either half duplex or full)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a20      	ldr	r2, [pc, #128]	; (8007d0c <HAL_UART_RxCpltCallback+0xb4>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d11e      	bne.n	8007cce <HAL_UART_RxCpltCallback+0x76>
      if (!SerialUsart2.Transmitting) {
 8007c90:	4b1f      	ldr	r3, [pc, #124]	; (8007d10 <HAL_UART_RxCpltCallback+0xb8>)
 8007c92:	789b      	ldrb	r3, [r3, #2]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d114      	bne.n	8007cc2 <HAL_UART_RxCpltCallback+0x6a>
              if (SerialUsart2.ReceiveMode == 1) {
 8007c98:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <HAL_UART_RxCpltCallback+0xb8>)
 8007c9a:	785b      	ldrb	r3, [r3, #1]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d104      	bne.n	8007caa <HAL_UART_RxCpltCallback+0x52>
                  ProcessSerialData(&SerialUsart2);
 8007ca0:	4b1b      	ldr	r3, [pc, #108]	; (8007d10 <HAL_UART_RxCpltCallback+0xb8>)
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	f7ff fdae 	bl	8007804 <ProcessSerialData>
 8007ca8:	e00b      	b.n	8007cc2 <HAL_UART_RxCpltCallback+0x6a>
              } else {
                  SerialUsart2.TxRxBuffer[SerialUsart2.TxRxBufferCount++] = SerialUsart2.RxChar;
 8007caa:	4b19      	ldr	r3, [pc, #100]	; (8007d10 <HAL_UART_RxCpltCallback+0xb8>)
 8007cac:	695a      	ldr	r2, [r3, #20]
 8007cae:	4b18      	ldr	r3, [pc, #96]	; (8007d10 <HAL_UART_RxCpltCallback+0xb8>)
 8007cb0:	8a1b      	ldrh	r3, [r3, #16]
 8007cb2:	1c59      	adds	r1, r3, #1
 8007cb4:	b288      	uxth	r0, r1
 8007cb6:	4916      	ldr	r1, [pc, #88]	; (8007d10 <HAL_UART_RxCpltCallback+0xb8>)
 8007cb8:	8208      	strh	r0, [r1, #16]
 8007cba:	18d3      	adds	r3, r2, r3
 8007cbc:	4a14      	ldr	r2, [pc, #80]	; (8007d10 <HAL_UART_RxCpltCallback+0xb8>)
 8007cbe:	7e12      	ldrb	r2, [r2, #24]
 8007cc0:	701a      	strb	r2, [r3, #0]
              }
      }
      HAL_UART_Receive_IT(&huart2, &SerialUsart2.RxChar, 1);
 8007cc2:	4914      	ldr	r1, [pc, #80]	; (8007d14 <HAL_UART_RxCpltCallback+0xbc>)
 8007cc4:	4b14      	ldr	r3, [pc, #80]	; (8007d18 <HAL_UART_RxCpltCallback+0xc0>)
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	0018      	movs	r0, r3
 8007cca:	f7fc fa87 	bl	80041dc <HAL_UART_Receive_IT>
  }
  if ( huart->Instance == USART4 ) {                                // To/From Sender RS485
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a12      	ldr	r2, [pc, #72]	; (8007d1c <HAL_UART_RxCpltCallback+0xc4>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d10d      	bne.n	8007cf4 <HAL_UART_RxCpltCallback+0x9c>
          if (!SerialUsart4.Transmitting) {
 8007cd8:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <HAL_UART_RxCpltCallback+0xc8>)
 8007cda:	789b      	ldrb	r3, [r3, #2]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d103      	bne.n	8007ce8 <HAL_UART_RxCpltCallback+0x90>
              ProcessSerialData(&SerialUsart4);
 8007ce0:	4b0f      	ldr	r3, [pc, #60]	; (8007d20 <HAL_UART_RxCpltCallback+0xc8>)
 8007ce2:	0018      	movs	r0, r3
 8007ce4:	f7ff fd8e 	bl	8007804 <ProcessSerialData>
          }
      HAL_UART_Receive_IT(&huart4, &SerialUsart4.RxChar, 1);
 8007ce8:	490e      	ldr	r1, [pc, #56]	; (8007d24 <HAL_UART_RxCpltCallback+0xcc>)
 8007cea:	4b0f      	ldr	r3, [pc, #60]	; (8007d28 <HAL_UART_RxCpltCallback+0xd0>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	0018      	movs	r0, r3
 8007cf0:	f7fc fa74 	bl	80041dc <HAL_UART_Receive_IT>
  }
}
 8007cf4:	46c0      	nop			; (mov r8, r8)
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	b002      	add	sp, #8
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	40013800 	.word	0x40013800
 8007d00:	200013b0 	.word	0x200013b0
 8007d04:	200013c8 	.word	0x200013c8
 8007d08:	20001e1c 	.word	0x20001e1c
 8007d0c:	40004400 	.word	0x40004400
 8007d10:	200013d0 	.word	0x200013d0
 8007d14:	200013e8 	.word	0x200013e8
 8007d18:	200026e0 	.word	0x200026e0
 8007d1c:	40004c00 	.word	0x40004c00
 8007d20:	2000141c 	.word	0x2000141c
 8007d24:	20001434 	.word	0x20001434
 8007d28:	2000262c 	.word	0x2000262c

08007d2c <SerialSend>:
// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
// HLR-xxxx
//
void SerialSend(stSerial *SerialStruct) {
 8007d2c:	b5b0      	push	{r4, r5, r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]

  uint16_t Crc;
  uint16_t Counter7, TxDelay;

  Counter7 = __HAL_TIM_GET_COUNTER(&htim7);
 8007d34:	4b60      	ldr	r3, [pc, #384]	; (8007eb8 <SerialSend+0x18c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d3a:	210e      	movs	r1, #14
 8007d3c:	187b      	adds	r3, r7, r1
 8007d3e:	801a      	strh	r2, [r3, #0]
  TxDelay = Counter7 + 250;                                                 // 500uS
 8007d40:	230c      	movs	r3, #12
 8007d42:	18fb      	adds	r3, r7, r3
 8007d44:	187a      	adds	r2, r7, r1
 8007d46:	8812      	ldrh	r2, [r2, #0]
 8007d48:	32fa      	adds	r2, #250	; 0xfa
 8007d4a:	801a      	strh	r2, [r3, #0]
  while (Counter7 < TxDelay) {
 8007d4c:	e005      	b.n	8007d5a <SerialSend+0x2e>
      Counter7 = __HAL_TIM_GET_COUNTER(&htim7);
 8007d4e:	4b5a      	ldr	r3, [pc, #360]	; (8007eb8 <SerialSend+0x18c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d54:	230e      	movs	r3, #14
 8007d56:	18fb      	adds	r3, r7, r3
 8007d58:	801a      	strh	r2, [r3, #0]
  while (Counter7 < TxDelay) {
 8007d5a:	230e      	movs	r3, #14
 8007d5c:	18fa      	adds	r2, r7, r3
 8007d5e:	230c      	movs	r3, #12
 8007d60:	18fb      	adds	r3, r7, r3
 8007d62:	8812      	ldrh	r2, [r2, #0]
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d3f1      	bcc.n	8007d4e <SerialSend+0x22>
  }

  SerialStruct->TxRxBuffer[0] = 0xAA;                    // Sync
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	22aa      	movs	r2, #170	; 0xaa
 8007d70:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[1] = 0xAA;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	3301      	adds	r3, #1
 8007d78:	22aa      	movs	r2, #170	; 0xaa
 8007d7a:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[2] = 0xAA;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	3302      	adds	r3, #2
 8007d82:	22aa      	movs	r2, #170	; 0xaa
 8007d84:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[3] = 0xAA;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	3303      	adds	r3, #3
 8007d8c:	22aa      	movs	r2, #170	; 0xaa
 8007d8e:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[4] = 0xAA;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	3304      	adds	r3, #4
 8007d96:	22aa      	movs	r2, #170	; 0xaa
 8007d98:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[5] = 0x00;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	3305      	adds	r3, #5
 8007da0:	2200      	movs	r2, #0
 8007da2:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[6] = SerialStruct->Command;                // Command
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	3306      	adds	r3, #6
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	7f12      	ldrb	r2, [r2, #28]
 8007dae:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[7] = SerialStruct->Length & 0xFF;          // Length
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	221e      	movs	r2, #30
 8007db4:	5e9a      	ldrsh	r2, [r3, r2]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	3307      	adds	r3, #7
 8007dbc:	b2d2      	uxtb	r2, r2
 8007dbe:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[8] = SerialStruct->Length >> 8;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	221e      	movs	r2, #30
 8007dc4:	5e9b      	ldrsh	r3, [r3, r2]
 8007dc6:	121b      	asrs	r3, r3, #8
 8007dc8:	b21a      	sxth	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	b2d2      	uxtb	r2, r2
 8007dd2:	701a      	strb	r2, [r3, #0]
  //
  //  Calculate CRC
  //
  Crc = CalcCrcArray(&SerialStruct->TxRxBuffer[6], SerialStruct->Length + 3);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	1d9a      	adds	r2, r3, #6
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	211e      	movs	r1, #30
 8007dde:	5e5b      	ldrsh	r3, [r3, r1]
 8007de0:	3303      	adds	r3, #3
 8007de2:	250a      	movs	r5, #10
 8007de4:	197c      	adds	r4, r7, r5
 8007de6:	0019      	movs	r1, r3
 8007de8:	0010      	movs	r0, r2
 8007dea:	f7fd f833 	bl	8004e54 <CalcCrcArray>
 8007dee:	0003      	movs	r3, r0
 8007df0:	8023      	strh	r3, [r4, #0]
  SerialStruct->TxRxBuffer[SerialStruct->Length + 9] = Crc & 0xFF;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	695a      	ldr	r2, [r3, #20]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	211e      	movs	r1, #30
 8007dfa:	5e5b      	ldrsh	r3, [r3, r1]
 8007dfc:	3309      	adds	r3, #9
 8007dfe:	18d3      	adds	r3, r2, r3
 8007e00:	197a      	adds	r2, r7, r5
 8007e02:	8812      	ldrh	r2, [r2, #0]
 8007e04:	b2d2      	uxtb	r2, r2
 8007e06:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[SerialStruct->Length + 10] = Crc >> 8;
 8007e08:	197b      	adds	r3, r7, r5
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	0a1b      	lsrs	r3, r3, #8
 8007e0e:	b299      	uxth	r1, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	695a      	ldr	r2, [r3, #20]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	201e      	movs	r0, #30
 8007e18:	5e1b      	ldrsh	r3, [r3, r0]
 8007e1a:	330a      	adds	r3, #10
 8007e1c:	18d3      	adds	r3, r2, r3
 8007e1e:	b2ca      	uxtb	r2, r1
 8007e20:	701a      	strb	r2, [r3, #0]
  //
  // Send Message via selected SerialMode Mode.
  //
  if (SerialStruct->InstanceNumber == 1) {
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d115      	bne.n	8007e56 <SerialSend+0x12a>
      HAL_GPIO_WritePin( PC_RS485_EN_GPIO_Port, PC_RS485_EN_Pin, GPIO_PIN_SET);                              // Turn on RS422/485 Driver
 8007e2a:	2380      	movs	r3, #128	; 0x80
 8007e2c:	01db      	lsls	r3, r3, #7
 8007e2e:	4823      	ldr	r0, [pc, #140]	; (8007ebc <SerialSend+0x190>)
 8007e30:	2201      	movs	r2, #1
 8007e32:	0019      	movs	r1, r3
 8007e34:	f7f9 fb7f 	bl	8001536 <HAL_GPIO_WritePin>
      SerialUsart1.Transmitting = TRUE;
 8007e38:	4b21      	ldr	r3, [pc, #132]	; (8007ec0 <SerialSend+0x194>)
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	709a      	strb	r2, [r3, #2]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *) &SerialStruct->TxRxBuffer[0], SerialStruct->Length + 11);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6959      	ldr	r1, [r3, #20]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	221e      	movs	r2, #30
 8007e46:	5e9b      	ldrsh	r3, [r3, r2]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	330b      	adds	r3, #11
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	4b1d      	ldr	r3, [pc, #116]	; (8007ec4 <SerialSend+0x198>)
 8007e50:	0018      	movs	r0, r3
 8007e52:	f7fc fa61 	bl	8004318 <HAL_UART_Transmit_DMA>
  }
  if (SerialStruct->InstanceNumber == 2) {
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d10e      	bne.n	8007e7c <SerialSend+0x150>
      SerialUsart2.Transmitting = TRUE;
 8007e5e:	4b1a      	ldr	r3, [pc, #104]	; (8007ec8 <SerialSend+0x19c>)
 8007e60:	2201      	movs	r2, #1
 8007e62:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit_IT(&huart2, (uint8_t *) &SerialStruct->TxRxBuffer[0], SerialStruct->Length + 11);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6959      	ldr	r1, [r3, #20]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	221e      	movs	r2, #30
 8007e6c:	5e9b      	ldrsh	r3, [r3, r2]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	330b      	adds	r3, #11
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	4b15      	ldr	r3, [pc, #84]	; (8007ecc <SerialSend+0x1a0>)
 8007e76:	0018      	movs	r0, r3
 8007e78:	f7fc f958 	bl	800412c <HAL_UART_Transmit_IT>
  }
  if (SerialStruct->InstanceNumber == 4) {
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d114      	bne.n	8007eae <SerialSend+0x182>
      HAL_GPIO_WritePin( RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_SET);                              // Turn on RS422/485 Driver
 8007e84:	4b0d      	ldr	r3, [pc, #52]	; (8007ebc <SerialSend+0x190>)
 8007e86:	2201      	movs	r2, #1
 8007e88:	2120      	movs	r1, #32
 8007e8a:	0018      	movs	r0, r3
 8007e8c:	f7f9 fb53 	bl	8001536 <HAL_GPIO_WritePin>
      SerialUsart4.Transmitting = TRUE;
 8007e90:	4b0f      	ldr	r3, [pc, #60]	; (8007ed0 <SerialSend+0x1a4>)
 8007e92:	2201      	movs	r2, #1
 8007e94:	709a      	strb	r2, [r3, #2]
      HAL_UART_Transmit_DMA(&huart4, (uint8_t *) &SerialStruct->TxRxBuffer[0], SerialStruct->Length + 11);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6959      	ldr	r1, [r3, #20]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	221e      	movs	r2, #30
 8007e9e:	5e9b      	ldrsh	r3, [r3, r2]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	330b      	adds	r3, #11
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <SerialSend+0x1a8>)
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	f7fc fa35 	bl	8004318 <HAL_UART_Transmit_DMA>
  }
}
 8007eae:	46c0      	nop			; (mov r8, r8)
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	b004      	add	sp, #16
 8007eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8007eb6:	46c0      	nop			; (mov r8, r8)
 8007eb8:	2000279c 	.word	0x2000279c
 8007ebc:	48000400 	.word	0x48000400
 8007ec0:	200013b0 	.word	0x200013b0
 8007ec4:	20001e1c 	.word	0x20001e1c
 8007ec8:	200013d0 	.word	0x200013d0
 8007ecc:	200026e0 	.word	0x200026e0
 8007ed0:	2000141c 	.word	0x2000141c
 8007ed4:	2000262c 	.word	0x2000262c

08007ed8 <ProcessSerialMessage>:
// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
// This routine is called when a valid message has been received
//
void ProcessSerialMessage(stSerial *SerialStruct) {
 8007ed8:	b590      	push	{r4, r7, lr}
 8007eda:	b089      	sub	sp, #36	; 0x24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  DIG_InitTypeDef   DIG_InitStruct;

  //
  // If Comm Mode is RS485 and
  //
  if ((SysPars.CommConfig == COMM_CD_RS485) && (SerialStruct->InstanceNumber == 4)) {
 8007ee0:	4bb8      	ldr	r3, [pc, #736]	; (80081c4 <ProcessSerialMessage+0x2ec>)
 8007ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	d127      	bne.n	8007f38 <ProcessSerialMessage+0x60>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d123      	bne.n	8007f38 <ProcessSerialMessage+0x60>
        SerialUsart1.TxRxBuffer[9] = SerialStruct->Command;
 8007ef0:	4bb5      	ldr	r3, [pc, #724]	; (80081c8 <ProcessSerialMessage+0x2f0>)
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	3309      	adds	r3, #9
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	7f12      	ldrb	r2, [r2, #28]
 8007efa:	701a      	strb	r2, [r3, #0]
        memmove(&SerialUsart1.TxRxBuffer[10], &SerialStruct->TxRxBuffer[0], SerialStruct->Length);
 8007efc:	4bb2      	ldr	r3, [pc, #712]	; (80081c8 <ProcessSerialMessage+0x2f0>)
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	330a      	adds	r3, #10
 8007f02:	0018      	movs	r0, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6959      	ldr	r1, [r3, #20]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	221e      	movs	r2, #30
 8007f0c:	5e9b      	ldrsh	r3, [r3, r2]
 8007f0e:	001a      	movs	r2, r3
 8007f10:	f001 fd5f 	bl	80099d2 <memmove>
        SerialUsart1.Length = SerialStruct->Length + 1;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	221e      	movs	r2, #30
 8007f18:	5e9b      	ldrsh	r3, [r3, r2]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	b21a      	sxth	r2, r3
 8007f22:	4ba9      	ldr	r3, [pc, #676]	; (80081c8 <ProcessSerialMessage+0x2f0>)
 8007f24:	83da      	strh	r2, [r3, #30]
        SerialUsart1.Command = 0xBC;
 8007f26:	4ba8      	ldr	r3, [pc, #672]	; (80081c8 <ProcessSerialMessage+0x2f0>)
 8007f28:	22bc      	movs	r2, #188	; 0xbc
 8007f2a:	771a      	strb	r2, [r3, #28]
        SerialSend(&SerialUsart1);
 8007f2c:	4ba6      	ldr	r3, [pc, #664]	; (80081c8 <ProcessSerialMessage+0x2f0>)
 8007f2e:	0018      	movs	r0, r3
 8007f30:	f7ff fefc 	bl	8007d2c <SerialSend>
        return;
 8007f34:	f000 fbaf 	bl	8008696 <ProcessSerialMessage+0x7be>
    }
  if ((SysPars.CommConfig == COMM_CD_DIGIO1) && (SerialStruct->InstanceNumber == 2)) {
 8007f38:	4ba2      	ldr	r3, [pc, #648]	; (80081c4 <ProcessSerialMessage+0x2ec>)
 8007f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d130      	bne.n	8007fa2 <ProcessSerialMessage+0xca>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d12c      	bne.n	8007fa2 <ProcessSerialMessage+0xca>
        SerialUsart1.TxRxBuffer[9] = SerialStruct->Command;
 8007f48:	4b9f      	ldr	r3, [pc, #636]	; (80081c8 <ProcessSerialMessage+0x2f0>)
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	3309      	adds	r3, #9
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	7f12      	ldrb	r2, [r2, #28]
 8007f52:	701a      	strb	r2, [r3, #0]
        if (SerialStruct->Length < (SerialStruct->TxRxBufferSize - 15)) {
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	221e      	movs	r2, #30
 8007f58:	5e9b      	ldrsh	r3, [r3, r2]
 8007f5a:	001a      	movs	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	89db      	ldrh	r3, [r3, #14]
 8007f60:	3b0f      	subs	r3, #15
 8007f62:	429a      	cmp	r2, r3
 8007f64:	da0b      	bge.n	8007f7e <ProcessSerialMessage+0xa6>
            memmove(&SerialUsart1.TxRxBuffer[10], &SerialStruct->TxRxBuffer[0], SerialStruct->Length);
 8007f66:	4b98      	ldr	r3, [pc, #608]	; (80081c8 <ProcessSerialMessage+0x2f0>)
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	330a      	adds	r3, #10
 8007f6c:	0018      	movs	r0, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6959      	ldr	r1, [r3, #20]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	221e      	movs	r2, #30
 8007f76:	5e9b      	ldrsh	r3, [r3, r2]
 8007f78:	001a      	movs	r2, r3
 8007f7a:	f001 fd2a 	bl	80099d2 <memmove>
        }
        SerialUsart1.Length = SerialStruct->Length + 1;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	221e      	movs	r2, #30
 8007f82:	5e9b      	ldrsh	r3, [r3, r2]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	3301      	adds	r3, #1
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	b21a      	sxth	r2, r3
 8007f8c:	4b8e      	ldr	r3, [pc, #568]	; (80081c8 <ProcessSerialMessage+0x2f0>)
 8007f8e:	83da      	strh	r2, [r3, #30]
        SerialUsart1.Command = 0xBC;
 8007f90:	4b8d      	ldr	r3, [pc, #564]	; (80081c8 <ProcessSerialMessage+0x2f0>)
 8007f92:	22bc      	movs	r2, #188	; 0xbc
 8007f94:	771a      	strb	r2, [r3, #28]
        SerialSend(&SerialUsart1);
 8007f96:	4b8c      	ldr	r3, [pc, #560]	; (80081c8 <ProcessSerialMessage+0x2f0>)
 8007f98:	0018      	movs	r0, r3
 8007f9a:	f7ff fec7 	bl	8007d2c <SerialSend>
        return;
 8007f9e:	f000 fb7a 	bl	8008696 <ProcessSerialMessage+0x7be>
    }
  //
  // Read FlashConfiguration Data from Programmer Memory
  //
  if (SerialStruct->Command == 0xB1) {
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	7f1b      	ldrb	r3, [r3, #28]
 8007fa6:	2bb1      	cmp	r3, #177	; 0xb1
 8007fa8:	d12e      	bne.n	8008008 <ProcessSerialMessage+0x130>
      if (SerialStruct->Length == 1) {
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	221e      	movs	r2, #30
 8007fae:	5e9b      	ldrsh	r3, [r3, r2]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d122      	bne.n	8007ffa <ProcessSerialMessage+0x122>
          FlashIndex = SerialStruct->TxRxBuffer[0];
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	781a      	ldrb	r2, [r3, #0]
 8007fba:	211c      	movs	r1, #28
 8007fbc:	187b      	adds	r3, r7, r1
 8007fbe:	801a      	strh	r2, [r3, #0]
          SerialStruct->TxRxBuffer[9] = FlashIndex;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	3309      	adds	r3, #9
 8007fc6:	187a      	adds	r2, r7, r1
 8007fc8:	8812      	ldrh	r2, [r2, #0]
 8007fca:	b2d2      	uxtb	r2, r2
 8007fcc:	701a      	strb	r2, [r3, #0]
          BytePointer = (uint8_t *)FlashConfiguration;
 8007fce:	4b7f      	ldr	r3, [pc, #508]	; (80081cc <ProcessSerialMessage+0x2f4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	61bb      	str	r3, [r7, #24]
          memmove(&SerialStruct->TxRxBuffer[10], &BytePointer[FlashIndex * 512], 512);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	330a      	adds	r3, #10
 8007fda:	0018      	movs	r0, r3
 8007fdc:	187b      	adds	r3, r7, r1
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	025b      	lsls	r3, r3, #9
 8007fe2:	001a      	movs	r2, r3
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	1899      	adds	r1, r3, r2
 8007fe8:	2380      	movs	r3, #128	; 0x80
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	001a      	movs	r2, r3
 8007fee:	f001 fcf0 	bl	80099d2 <memmove>
          SerialStruct->Length = 513;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a76      	ldr	r2, [pc, #472]	; (80081d0 <ProcessSerialMessage+0x2f8>)
 8007ff6:	83da      	strh	r2, [r3, #30]
 8007ff8:	e002      	b.n	8008000 <ProcessSerialMessage+0x128>
      } else {
          SerialStruct->Length = 0;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	83da      	strh	r2, [r3, #30]
      }
      SerialSend(SerialStruct);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	0018      	movs	r0, r3
 8008004:	f7ff fe92 	bl	8007d2c <SerialSend>
  }
  //
  // Read FactoryConfiguration Data from Programmer Memory
  //
  if (SerialStruct->Command == 0xB2) {
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7f1b      	ldrb	r3, [r3, #28]
 800800c:	2bb2      	cmp	r3, #178	; 0xb2
 800800e:	d12e      	bne.n	800806e <ProcessSerialMessage+0x196>
      if (SerialStruct->Length == 1) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	221e      	movs	r2, #30
 8008014:	5e9b      	ldrsh	r3, [r3, r2]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d122      	bne.n	8008060 <ProcessSerialMessage+0x188>
          FlashIndex = SerialStruct->TxRxBuffer[0];
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	781a      	ldrb	r2, [r3, #0]
 8008020:	211c      	movs	r1, #28
 8008022:	187b      	adds	r3, r7, r1
 8008024:	801a      	strh	r2, [r3, #0]
          SerialStruct->TxRxBuffer[9] = FlashIndex;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	3309      	adds	r3, #9
 800802c:	187a      	adds	r2, r7, r1
 800802e:	8812      	ldrh	r2, [r2, #0]
 8008030:	b2d2      	uxtb	r2, r2
 8008032:	701a      	strb	r2, [r3, #0]
          BytePointer = (uint8_t *)FactoryConfiguration;
 8008034:	4b67      	ldr	r3, [pc, #412]	; (80081d4 <ProcessSerialMessage+0x2fc>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	61bb      	str	r3, [r7, #24]
          memmove(&SerialStruct->TxRxBuffer[10], &BytePointer[FlashIndex * 512], 512);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	330a      	adds	r3, #10
 8008040:	0018      	movs	r0, r3
 8008042:	187b      	adds	r3, r7, r1
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	025b      	lsls	r3, r3, #9
 8008048:	001a      	movs	r2, r3
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	1899      	adds	r1, r3, r2
 800804e:	2380      	movs	r3, #128	; 0x80
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	001a      	movs	r2, r3
 8008054:	f001 fcbd 	bl	80099d2 <memmove>
          SerialStruct->Length = 513;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a5d      	ldr	r2, [pc, #372]	; (80081d0 <ProcessSerialMessage+0x2f8>)
 800805c:	83da      	strh	r2, [r3, #30]
 800805e:	e002      	b.n	8008066 <ProcessSerialMessage+0x18e>
      } else {
          SerialStruct->Length = 0;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	83da      	strh	r2, [r3, #30]
      }
      SerialSend(SerialStruct);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	0018      	movs	r0, r3
 800806a:	f7ff fe5f 	bl	8007d2c <SerialSend>
  }
  //
  //  Write FlashConfiguration Data to Programmer Memory
  //
  if (SerialStruct->Command == 0xB3) {
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	7f1b      	ldrb	r3, [r3, #28]
 8008072:	2bb3      	cmp	r3, #179	; 0xb3
 8008074:	d116      	bne.n	80080a4 <ProcessSerialMessage+0x1cc>
      if (SerialStruct->Length == 2048)  {
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	221e      	movs	r2, #30
 800807a:	5e9a      	ldrsh	r2, [r3, r2]
 800807c:	2380      	movs	r3, #128	; 0x80
 800807e:	011b      	lsls	r3, r3, #4
 8008080:	429a      	cmp	r2, r3
 8008082:	d105      	bne.n	8008090 <ProcessSerialMessage+0x1b8>
          ReflashTuningParameters(63, (uint16_t *)&SerialStruct->TxRxBuffer[0]);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	0019      	movs	r1, r3
 800808a:	203f      	movs	r0, #63	; 0x3f
 800808c:	f7ff fb5e 	bl	800774c <ReflashTuningParameters>
      }
      SerialStruct->Command = 0xB3;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	22b3      	movs	r2, #179	; 0xb3
 8008094:	771a      	strb	r2, [r3, #28]
      SerialStruct->Length = 0;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	83da      	strh	r2, [r3, #30]
      SerialSend(SerialStruct);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	0018      	movs	r0, r3
 80080a0:	f7ff fe44 	bl	8007d2c <SerialSend>
  }
  //
  // Write FactoryConfiguration Data to Programmer Memory
  //
  if (SerialStruct->Command == 0xB4) {
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	7f1b      	ldrb	r3, [r3, #28]
 80080a8:	2bb4      	cmp	r3, #180	; 0xb4
 80080aa:	d116      	bne.n	80080da <ProcessSerialMessage+0x202>
      if (SerialStruct->Length == 2048) {
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	221e      	movs	r2, #30
 80080b0:	5e9a      	ldrsh	r2, [r3, r2]
 80080b2:	2380      	movs	r3, #128	; 0x80
 80080b4:	011b      	lsls	r3, r3, #4
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d105      	bne.n	80080c6 <ProcessSerialMessage+0x1ee>
          ReflashTuningParameters(62, (uint16_t *)&SerialStruct->TxRxBuffer[0]);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	0019      	movs	r1, r3
 80080c0:	203e      	movs	r0, #62	; 0x3e
 80080c2:	f7ff fb43 	bl	800774c <ReflashTuningParameters>
      }
      SerialStruct->Command = 0xB4;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	22b4      	movs	r2, #180	; 0xb4
 80080ca:	771a      	strb	r2, [r3, #28]
      SerialStruct->Length = 0;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	83da      	strh	r2, [r3, #30]
      SerialSend(SerialStruct);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	0018      	movs	r0, r3
 80080d6:	f7ff fe29 	bl	8007d2c <SerialSend>
  }
  //
  // Read CC Series SysVars Data
  //
  if (SerialStruct->Command == 0xB5) {
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	7f1b      	ldrb	r3, [r3, #28]
 80080de:	2bb5      	cmp	r3, #181	; 0xb5
 80080e0:	d10e      	bne.n	8008100 <ProcessSerialMessage+0x228>
      memmove(&SerialStruct->TxRxBuffer[9], &SysVarsCC, sizeof(SysVarsCC));
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	3309      	adds	r3, #9
 80080e8:	493b      	ldr	r1, [pc, #236]	; (80081d8 <ProcessSerialMessage+0x300>)
 80080ea:	2250      	movs	r2, #80	; 0x50
 80080ec:	0018      	movs	r0, r3
 80080ee:	f001 fc70 	bl	80099d2 <memmove>
      SerialStruct->Length = sizeof(SysVarsCC);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2250      	movs	r2, #80	; 0x50
 80080f6:	83da      	strh	r2, [r3, #30]
      SerialSend(SerialStruct);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	0018      	movs	r0, r3
 80080fc:	f7ff fe16 	bl	8007d2c <SerialSend>
  }
  //
  // Return Firmware Version Information of Programmer
  //
  if (SerialStruct->Command == 0xB6) {
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	7f1b      	ldrb	r3, [r3, #28]
 8008104:	2bb6      	cmp	r3, #182	; 0xb6
 8008106:	d117      	bne.n	8008138 <ProcessSerialMessage+0x260>
    //
    // Calculate Firmware Checksum - excluding last 2 pages of flash from calculation
    //
//      uint16_t Crc = CalcCrcArray((uint8_t *) 0x08000000, 0x20000 - (2048 * 2));  // Last two pages are Calibration/Configuration
      uint16_t Crc = 0;
 8008108:	2116      	movs	r1, #22
 800810a:	187b      	adds	r3, r7, r1
 800810c:	2200      	movs	r2, #0
 800810e:	801a      	strh	r2, [r3, #0]

    SerialStruct->TxRxBuffer[9] = Crc & 0xFF;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	3309      	adds	r3, #9
 8008116:	187a      	adds	r2, r7, r1
 8008118:	8812      	ldrh	r2, [r2, #0]
 800811a:	b2d2      	uxtb	r2, r2
 800811c:	701a      	strb	r2, [r3, #0]
    SerialStruct->TxRxBuffer[10] = Crc >> 8;
 800811e:	187b      	adds	r3, r7, r1
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	0a1b      	lsrs	r3, r3, #8
 8008124:	b29a      	uxth	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	330a      	adds	r3, #10
 800812c:	b2d2      	uxtb	r2, r2
 800812e:	701a      	strb	r2, [r3, #0]
//    memmove(&SerialStruct->Data[11], Version, sizeof(Version));
//    SerialStruct->Length = sizeof(Version) + 2;
    SerialSend(SerialStruct);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	0018      	movs	r0, r3
 8008134:	f7ff fdfa 	bl	8007d2c <SerialSend>
  }
  //
  // Get CC Series EEPROM Config Data
  //
  if ( SerialStruct->Command == 0xB7 )  {
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	7f1b      	ldrb	r3, [r3, #28]
 800813c:	2bb7      	cmp	r3, #183	; 0xb7
 800813e:	d111      	bne.n	8008164 <ProcessSerialMessage+0x28c>
      memmove(&SerialStruct->TxRxBuffer[9], &EEPROMData, 12);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	3309      	adds	r3, #9
 8008146:	4925      	ldr	r1, [pc, #148]	; (80081dc <ProcessSerialMessage+0x304>)
 8008148:	220c      	movs	r2, #12
 800814a:	0018      	movs	r0, r3
 800814c:	f001 fc41 	bl	80099d2 <memmove>
      SerialStruct->Command = 0xB7;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	22b7      	movs	r2, #183	; 0xb7
 8008154:	771a      	strb	r2, [r3, #28]
      SerialStruct->Length = 12;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	220c      	movs	r2, #12
 800815a:	83da      	strh	r2, [r3, #30]
      SerialSend(SerialStruct);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	0018      	movs	r0, r3
 8008160:	f7ff fde4 	bl	8007d2c <SerialSend>
  }
  //
  // Read CC Series EEPROM Config/Profile Data
  //
  if (SerialStruct->Command == 0xB8) {
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	7f1b      	ldrb	r3, [r3, #28]
 8008168:	2bb8      	cmp	r3, #184	; 0xb8
 800816a:	d143      	bne.n	80081f4 <ProcessSerialMessage+0x31c>
      if (SerialStruct->Length == 1) {
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	221e      	movs	r2, #30
 8008170:	5e9b      	ldrsh	r3, [r3, r2]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d134      	bne.n	80081e0 <ProcessSerialMessage+0x308>
          FlashIndex = SerialStruct->TxRxBuffer[0];
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	781a      	ldrb	r2, [r3, #0]
 800817c:	211c      	movs	r1, #28
 800817e:	187b      	adds	r3, r7, r1
 8008180:	801a      	strh	r2, [r3, #0]
          SerialStruct->TxRxBuffer[9] = FlashIndex;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	3309      	adds	r3, #9
 8008188:	187a      	adds	r2, r7, r1
 800818a:	8812      	ldrh	r2, [r2, #0]
 800818c:	b2d2      	uxtb	r2, r2
 800818e:	701a      	strb	r2, [r3, #0]
          BytePointer = (uint8_t *)&EEPROMData;
 8008190:	4b12      	ldr	r3, [pc, #72]	; (80081dc <ProcessSerialMessage+0x304>)
 8008192:	61bb      	str	r3, [r7, #24]
          memmove(&SerialStruct->TxRxBuffer[10], &BytePointer[FlashIndex * 264], 264);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	330a      	adds	r3, #10
 800819a:	0018      	movs	r0, r3
 800819c:	187b      	adds	r3, r7, r1
 800819e:	881a      	ldrh	r2, [r3, #0]
 80081a0:	0013      	movs	r3, r2
 80081a2:	015b      	lsls	r3, r3, #5
 80081a4:	189b      	adds	r3, r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	001a      	movs	r2, r3
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	1899      	adds	r1, r3, r2
 80081ae:	2384      	movs	r3, #132	; 0x84
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	001a      	movs	r2, r3
 80081b4:	f001 fc0d 	bl	80099d2 <memmove>
          SerialStruct->Length = 265;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	220a      	movs	r2, #10
 80081bc:	32ff      	adds	r2, #255	; 0xff
 80081be:	83da      	strh	r2, [r3, #30]
 80081c0:	e011      	b.n	80081e6 <ProcessSerialMessage+0x30e>
 80081c2:	46c0      	nop			; (mov r8, r8)
 80081c4:	200011f4 	.word	0x200011f4
 80081c8:	200013b0 	.word	0x200013b0
 80081cc:	200020c4 	.word	0x200020c4
 80081d0:	00000201 	.word	0x00000201
 80081d4:	20001ccc 	.word	0x20001ccc
 80081d8:	200028e0 	.word	0x200028e0
 80081dc:	2000210c 	.word	0x2000210c
      } else {
          SerialStruct->Length = 0;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	83da      	strh	r2, [r3, #30]
      }
      SerialStruct->Command = 0xB8;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	22b8      	movs	r2, #184	; 0xb8
 80081ea:	771a      	strb	r2, [r3, #28]
      SerialSend(SerialStruct);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	0018      	movs	r0, r3
 80081f0:	f7ff fd9c 	bl	8007d2c <SerialSend>
  }
  //
  // Write to CC Series EEPROM
  //
  if ( SerialStruct->Command == 0xB9 ) {
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	7f1b      	ldrb	r3, [r3, #28]
 80081f8:	2bb9      	cmp	r3, #185	; 0xb9
 80081fa:	d11b      	bne.n	8008234 <ProcessSerialMessage+0x35c>
      if ( SerialStruct->Length == sizeof(EEPROMData) )  {              // Set EEPROM Data
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	221e      	movs	r2, #30
 8008200:	5e9a      	ldrsh	r2, [r3, r2]
 8008202:	2384      	movs	r3, #132	; 0x84
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	429a      	cmp	r2, r3
 8008208:	d10a      	bne.n	8008220 <ProcessSerialMessage+0x348>
          memmove(&EEPROMData, &SerialStruct->TxRxBuffer[0], sizeof( EEPROMData ));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6959      	ldr	r1, [r3, #20]
 800820e:	2384      	movs	r3, #132	; 0x84
 8008210:	00da      	lsls	r2, r3, #3
 8008212:	4b86      	ldr	r3, [pc, #536]	; (800842c <ProcessSerialMessage+0x554>)
 8008214:	0018      	movs	r0, r3
 8008216:	f001 fbdc 	bl	80099d2 <memmove>
          bConfigUpdateProfile = TRUE;
 800821a:	4b85      	ldr	r3, [pc, #532]	; (8008430 <ProcessSerialMessage+0x558>)
 800821c:	2201      	movs	r2, #1
 800821e:	701a      	strb	r2, [r3, #0]
      }
      SerialStruct->Command = 0xB9;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	22b9      	movs	r2, #185	; 0xb9
 8008224:	771a      	strb	r2, [r3, #28]
      SerialStruct->Length = 0;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	83da      	strh	r2, [r3, #30]
      SerialSend(SerialStruct);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	0018      	movs	r0, r3
 8008230:	f7ff fd7c 	bl	8007d2c <SerialSend>
  }
  //
  // Set SerialVerifyData Mode for CC Series
  //
  if ( SerialStruct->Command == 0xBA ) {
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	7f1b      	ldrb	r3, [r3, #28]
 8008238:	2bba      	cmp	r3, #186	; 0xba
 800823a:	d118      	bne.n	800826e <ProcessSerialMessage+0x396>
      if ( SerialStruct->Length == sizeof(SerialVerifyData) ) {      // Set SerialVerifyData
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	221e      	movs	r2, #30
 8008240:	5e9b      	ldrsh	r3, [r3, r2]
 8008242:	2b06      	cmp	r3, #6
 8008244:	d109      	bne.n	800825a <ProcessSerialMessage+0x382>
          memmove(&SerialVerifyData, &SerialStruct->TxRxBuffer[0], sizeof( SerialVerifyData ));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6959      	ldr	r1, [r3, #20]
 800824a:	4b7a      	ldr	r3, [pc, #488]	; (8008434 <ProcessSerialMessage+0x55c>)
 800824c:	2206      	movs	r2, #6
 800824e:	0018      	movs	r0, r3
 8008250:	f001 fbbf 	bl	80099d2 <memmove>
          bSerialVerify = TRUE;
 8008254:	4b78      	ldr	r3, [pc, #480]	; (8008438 <ProcessSerialMessage+0x560>)
 8008256:	2201      	movs	r2, #1
 8008258:	701a      	strb	r2, [r3, #0]
      }
      SerialStruct->Command = 0xBA;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	22ba      	movs	r2, #186	; 0xba
 800825e:	771a      	strb	r2, [r3, #28]
      SerialStruct->Length = 0;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	83da      	strh	r2, [r3, #30]
      SerialSend(SerialStruct);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	0018      	movs	r0, r3
 800826a:	f7ff fd5f 	bl	8007d2c <SerialSend>
  }
  //
  // Flash new Firmware into Programmer
  //
  if ( (SerialStruct->Command == 0xBB) && (SerialStruct->Length == 4) ) {
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	7f1b      	ldrb	r3, [r3, #28]
 8008272:	2bbb      	cmp	r3, #187	; 0xbb
 8008274:	d11f      	bne.n	80082b6 <ProcessSerialMessage+0x3de>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	221e      	movs	r2, #30
 800827a:	5e9b      	ldrsh	r3, [r3, r2]
 800827c:	2b04      	cmp	r3, #4
 800827e:	d11a      	bne.n	80082b6 <ProcessSerialMessage+0x3de>
    if ( (SerialStruct->TxRxBuffer[0] == 0x12) && (SerialStruct->TxRxBuffer[1] == 0x34) && (SerialStruct->TxRxBuffer[2] == 0x56) && (SerialStruct->TxRxBuffer[3] == 0x78) ) {
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b12      	cmp	r3, #18
 8008288:	d115      	bne.n	80082b6 <ProcessSerialMessage+0x3de>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	3301      	adds	r3, #1
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b34      	cmp	r3, #52	; 0x34
 8008294:	d10f      	bne.n	80082b6 <ProcessSerialMessage+0x3de>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	3302      	adds	r3, #2
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b56      	cmp	r3, #86	; 0x56
 80082a0:	d109      	bne.n	80082b6 <ProcessSerialMessage+0x3de>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	3303      	adds	r3, #3
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b78      	cmp	r3, #120	; 0x78
 80082ac:	d103      	bne.n	80082b6 <ProcessSerialMessage+0x3de>
      reflash(SerialStruct);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	0018      	movs	r0, r3
 80082b2:	f013 fc8b 	bl	801bbcc <reflash>
    }
  }
  //
  // Read Programming Unit System Variables
  //
  if (SerialStruct->Command == 0x70) {
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	7f1b      	ldrb	r3, [r3, #28]
 80082ba:	2b70      	cmp	r3, #112	; 0x70
 80082bc:	d000      	beq.n	80082c0 <ProcessSerialMessage+0x3e8>
 80082be:	e186      	b.n	80085ce <ProcessSerialMessage+0x6f6>
      if (SerialStruct->Length == sizeof(SysPars))  {
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	221e      	movs	r2, #30
 80082c4:	5e9b      	ldrsh	r3, [r3, r2]
 80082c6:	2b88      	cmp	r3, #136	; 0x88
 80082c8:	d106      	bne.n	80082d8 <ProcessSerialMessage+0x400>
          memmove(&SysPars, &SerialStruct->TxRxBuffer[0], sizeof(SysPars));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6959      	ldr	r1, [r3, #20]
 80082ce:	4b5b      	ldr	r3, [pc, #364]	; (800843c <ProcessSerialMessage+0x564>)
 80082d0:	2288      	movs	r2, #136	; 0x88
 80082d2:	0018      	movs	r0, r3
 80082d4:	f001 fb7d 	bl	80099d2 <memmove>
      }
	  SysVars.DigIO_InputLevel = 0;
 80082d8:	4b59      	ldr	r3, [pc, #356]	; (8008440 <ProcessSerialMessage+0x568>)
 80082da:	22c2      	movs	r2, #194	; 0xc2
 80082dc:	2100      	movs	r1, #0
 80082de:	5499      	strb	r1, [r3, r2]
      for (i = 0 ; i < 6 ; i++) {
 80082e0:	231e      	movs	r3, #30
 80082e2:	18fb      	adds	r3, r7, r3
 80082e4:	2200      	movs	r2, #0
 80082e6:	801a      	strh	r2, [r3, #0]
 80082e8:	e01a      	b.n	8008320 <ProcessSerialMessage+0x448>
          SysVars.DigIO_InputLevel |= DIG_ReadPin(i) << i;
 80082ea:	201e      	movs	r0, #30
 80082ec:	0004      	movs	r4, r0
 80082ee:	183b      	adds	r3, r7, r0
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	0018      	movs	r0, r3
 80082f4:	f7fd fdcc 	bl	8005e90 <DIG_ReadPin>
 80082f8:	0002      	movs	r2, r0
 80082fa:	0020      	movs	r0, r4
 80082fc:	183b      	adds	r3, r7, r0
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	409a      	lsls	r2, r3
 8008302:	0011      	movs	r1, r2
 8008304:	4b4e      	ldr	r3, [pc, #312]	; (8008440 <ProcessSerialMessage+0x568>)
 8008306:	22c2      	movs	r2, #194	; 0xc2
 8008308:	569a      	ldrsb	r2, [r3, r2]
 800830a:	b24b      	sxtb	r3, r1
 800830c:	4313      	orrs	r3, r2
 800830e:	b259      	sxtb	r1, r3
 8008310:	4b4b      	ldr	r3, [pc, #300]	; (8008440 <ProcessSerialMessage+0x568>)
 8008312:	22c2      	movs	r2, #194	; 0xc2
 8008314:	5499      	strb	r1, [r3, r2]
      for (i = 0 ; i < 6 ; i++) {
 8008316:	183b      	adds	r3, r7, r0
 8008318:	881a      	ldrh	r2, [r3, #0]
 800831a:	183b      	adds	r3, r7, r0
 800831c:	3201      	adds	r2, #1
 800831e:	801a      	strh	r2, [r3, #0]
 8008320:	231e      	movs	r3, #30
 8008322:	18fb      	adds	r3, r7, r3
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	2b05      	cmp	r3, #5
 8008328:	d9df      	bls.n	80082ea <ProcessSerialMessage+0x412>
      }
      SysVars.FirmwareVersion = 0x55AA0000 + (VERSION_MAJOR << 8) + VERSION_MINOR;
 800832a:	4b45      	ldr	r3, [pc, #276]	; (8008440 <ProcessSerialMessage+0x568>)
 800832c:	4a45      	ldr	r2, [pc, #276]	; (8008444 <ProcessSerialMessage+0x56c>)
 800832e:	601a      	str	r2, [r3, #0]
      memmove(&SerialStruct->TxRxBuffer[9], &SysVars, sizeof(SysVars));
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	3309      	adds	r3, #9
 8008336:	4942      	ldr	r1, [pc, #264]	; (8008440 <ProcessSerialMessage+0x568>)
 8008338:	22c4      	movs	r2, #196	; 0xc4
 800833a:	0018      	movs	r0, r3
 800833c:	f001 fb49 	bl	80099d2 <memmove>
      SerialStruct->Length = sizeof(SysVars);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	22c4      	movs	r2, #196	; 0xc4
 8008344:	83da      	strh	r2, [r3, #30]
      SerialSend(SerialStruct);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	0018      	movs	r0, r3
 800834a:	f7ff fcef 	bl	8007d2c <SerialSend>

      if (((SysPars.EnableBits & 0x01) != 0) && (SysVars.OverCurrentFlag == 0)) {
 800834e:	4b3b      	ldr	r3, [pc, #236]	; (800843c <ProcessSerialMessage+0x564>)
 8008350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008352:	2201      	movs	r2, #1
 8008354:	4013      	ands	r3, r2
 8008356:	d00b      	beq.n	8008370 <ProcessSerialMessage+0x498>
 8008358:	4b39      	ldr	r3, [pc, #228]	; (8008440 <ProcessSerialMessage+0x568>)
 800835a:	22c3      	movs	r2, #195	; 0xc3
 800835c:	569b      	ldrsb	r3, [r3, r2]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <ProcessSerialMessage+0x498>
          HAL_GPIO_WritePin( PWR_EN_GPIO_Port, PWR_EN_Pin, GPIO_PIN_SET);
 8008362:	4b39      	ldr	r3, [pc, #228]	; (8008448 <ProcessSerialMessage+0x570>)
 8008364:	2201      	movs	r2, #1
 8008366:	2110      	movs	r1, #16
 8008368:	0018      	movs	r0, r3
 800836a:	f7f9 f8e4 	bl	8001536 <HAL_GPIO_WritePin>
 800836e:	e005      	b.n	800837c <ProcessSerialMessage+0x4a4>
      } else {
          HAL_GPIO_WritePin( PWR_EN_GPIO_Port, PWR_EN_Pin, GPIO_PIN_RESET);
 8008370:	4b35      	ldr	r3, [pc, #212]	; (8008448 <ProcessSerialMessage+0x570>)
 8008372:	2200      	movs	r2, #0
 8008374:	2110      	movs	r1, #16
 8008376:	0018      	movs	r0, r3
 8008378:	f7f9 f8dd 	bl	8001536 <HAL_GPIO_WritePin>
      }
      if ((SysPars.EnableBits & 0x02) != 0) {
 800837c:	4b2f      	ldr	r3, [pc, #188]	; (800843c <ProcessSerialMessage+0x564>)
 800837e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008380:	2202      	movs	r2, #2
 8008382:	4013      	ands	r3, r2
 8008384:	d007      	beq.n	8008396 <ProcessSerialMessage+0x4be>
          HAL_GPIO_WritePin( EXT_PULLUP_GPIO_Port, EXT_PULLUP_Pin, GPIO_PIN_SET);
 8008386:	2380      	movs	r3, #128	; 0x80
 8008388:	015b      	lsls	r3, r3, #5
 800838a:	482f      	ldr	r0, [pc, #188]	; (8008448 <ProcessSerialMessage+0x570>)
 800838c:	2201      	movs	r2, #1
 800838e:	0019      	movs	r1, r3
 8008390:	f7f9 f8d1 	bl	8001536 <HAL_GPIO_WritePin>
 8008394:	e006      	b.n	80083a4 <ProcessSerialMessage+0x4cc>
      } else {
          HAL_GPIO_WritePin( EXT_PULLUP_GPIO_Port, EXT_PULLUP_Pin, GPIO_PIN_RESET);
 8008396:	2380      	movs	r3, #128	; 0x80
 8008398:	015b      	lsls	r3, r3, #5
 800839a:	482b      	ldr	r0, [pc, #172]	; (8008448 <ProcessSerialMessage+0x570>)
 800839c:	2200      	movs	r2, #0
 800839e:	0019      	movs	r1, r3
 80083a0:	f7f9 f8c9 	bl	8001536 <HAL_GPIO_WritePin>
      }

      if (((SysPars.EnableBits & ENABLE_POWER) != 0) && ((OldEnable & ENABLE_POWER) == 0)) {
 80083a4:	4b25      	ldr	r3, [pc, #148]	; (800843c <ProcessSerialMessage+0x564>)
 80083a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a8:	2201      	movs	r2, #1
 80083aa:	4013      	ands	r3, r2
 80083ac:	d007      	beq.n	80083be <ProcessSerialMessage+0x4e6>
 80083ae:	4b27      	ldr	r3, [pc, #156]	; (800844c <ProcessSerialMessage+0x574>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2201      	movs	r2, #1
 80083b4:	4013      	ands	r3, r2
 80083b6:	d102      	bne.n	80083be <ProcessSerialMessage+0x4e6>
          bConfigRefresh = TRUE;
 80083b8:	4b25      	ldr	r3, [pc, #148]	; (8008450 <ProcessSerialMessage+0x578>)
 80083ba:	2201      	movs	r2, #1
 80083bc:	701a      	strb	r2, [r3, #0]
      }
      if (((SysPars.EnableBits & ENABLE_REFRESH_CONFIG) != 0) && ((OldEnable & ENABLE_REFRESH_CONFIG) == 0)) {
 80083be:	4b1f      	ldr	r3, [pc, #124]	; (800843c <ProcessSerialMessage+0x564>)
 80083c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083c2:	2380      	movs	r3, #128	; 0x80
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4013      	ands	r3, r2
 80083c8:	d008      	beq.n	80083dc <ProcessSerialMessage+0x504>
 80083ca:	4b20      	ldr	r3, [pc, #128]	; (800844c <ProcessSerialMessage+0x574>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	2380      	movs	r3, #128	; 0x80
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4013      	ands	r3, r2
 80083d4:	d102      	bne.n	80083dc <ProcessSerialMessage+0x504>
          bConfigRefresh = TRUE;
 80083d6:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <ProcessSerialMessage+0x578>)
 80083d8:	2201      	movs	r2, #1
 80083da:	701a      	strb	r2, [r3, #0]
      }
      if (((SysPars.EnableBits & ENABLE_REFRESH_PROFILE) != 0) && ((OldEnable & ENABLE_REFRESH_PROFILE) == 0)) {
 80083dc:	4b17      	ldr	r3, [pc, #92]	; (800843c <ProcessSerialMessage+0x564>)
 80083de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083e0:	2380      	movs	r3, #128	; 0x80
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	4013      	ands	r3, r2
 80083e6:	d008      	beq.n	80083fa <ProcessSerialMessage+0x522>
 80083e8:	4b18      	ldr	r3, [pc, #96]	; (800844c <ProcessSerialMessage+0x574>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	2380      	movs	r3, #128	; 0x80
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	4013      	ands	r3, r2
 80083f2:	d102      	bne.n	80083fa <ProcessSerialMessage+0x522>
          bProfileRefresh = TRUE;
 80083f4:	4b17      	ldr	r3, [pc, #92]	; (8008454 <ProcessSerialMessage+0x57c>)
 80083f6:	2201      	movs	r2, #1
 80083f8:	701a      	strb	r2, [r3, #0]
      }
      if (((SysPars.EnableBits & ENABLE_UPDATE_CONFIG) != 0) && ((OldEnable & ENABLE_UPDATE_CONFIG) == 0)) {
 80083fa:	4b10      	ldr	r3, [pc, #64]	; (800843c <ProcessSerialMessage+0x564>)
 80083fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083fe:	2380      	movs	r3, #128	; 0x80
 8008400:	00db      	lsls	r3, r3, #3
 8008402:	4013      	ands	r3, r2
 8008404:	d008      	beq.n	8008418 <ProcessSerialMessage+0x540>
 8008406:	4b11      	ldr	r3, [pc, #68]	; (800844c <ProcessSerialMessage+0x574>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	2380      	movs	r3, #128	; 0x80
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	4013      	ands	r3, r2
 8008410:	d102      	bne.n	8008418 <ProcessSerialMessage+0x540>
          bConfigUpdateConfig = TRUE;
 8008412:	4b11      	ldr	r3, [pc, #68]	; (8008458 <ProcessSerialMessage+0x580>)
 8008414:	2201      	movs	r2, #1
 8008416:	701a      	strb	r2, [r3, #0]
      }
      OldEnable = SysPars.EnableBits;
 8008418:	4b08      	ldr	r3, [pc, #32]	; (800843c <ProcessSerialMessage+0x564>)
 800841a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800841c:	4b0b      	ldr	r3, [pc, #44]	; (800844c <ProcessSerialMessage+0x574>)
 800841e:	601a      	str	r2, [r3, #0]

      for ( i = 0 ; i < 6 ; i++) {
 8008420:	231e      	movs	r3, #30
 8008422:	18fb      	adds	r3, r7, r3
 8008424:	2200      	movs	r2, #0
 8008426:	801a      	strh	r2, [r3, #0]
 8008428:	e0cb      	b.n	80085c2 <ProcessSerialMessage+0x6ea>
 800842a:	46c0      	nop			; (mov r8, r8)
 800842c:	2000210c 	.word	0x2000210c
 8008430:	20002753 	.word	0x20002753
 8008434:	200000f4 	.word	0x200000f4
 8008438:	20002752 	.word	0x20002752
 800843c:	200011f4 	.word	0x200011f4
 8008440:	20001d58 	.word	0x20001d58
 8008444:	55aa0201 	.word	0x55aa0201
 8008448:	48000400 	.word	0x48000400
 800844c:	20000084 	.word	0x20000084
 8008450:	20001e92 	.word	0x20001e92
 8008454:	200000f0 	.word	0x200000f0
 8008458:	20001cc8 	.word	0x20001cc8
          if ((SysPars.DigIO_Configuration[i] != OldConfig[i]) || (SysPars.DigIO_FrequencySetpoint[i] != OldFreq[i]) || (SysPars.DigIO_DutyCycle[i] != OldDuty[i])) {
 800845c:	211e      	movs	r1, #30
 800845e:	187b      	adds	r3, r7, r1
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	4a8e      	ldr	r2, [pc, #568]	; (800869c <ProcessSerialMessage+0x7c4>)
 8008464:	3314      	adds	r3, #20
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	18d3      	adds	r3, r2, r3
 800846a:	3304      	adds	r3, #4
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	187b      	adds	r3, r7, r1
 8008470:	8819      	ldrh	r1, [r3, #0]
 8008472:	4b8b      	ldr	r3, [pc, #556]	; (80086a0 <ProcessSerialMessage+0x7c8>)
 8008474:	0089      	lsls	r1, r1, #2
 8008476:	58cb      	ldr	r3, [r1, r3]
 8008478:	429a      	cmp	r2, r3
 800847a:	d11a      	bne.n	80084b2 <ProcessSerialMessage+0x5da>
 800847c:	211e      	movs	r1, #30
 800847e:	187b      	adds	r3, r7, r1
 8008480:	881a      	ldrh	r2, [r3, #0]
 8008482:	4b86      	ldr	r3, [pc, #536]	; (800869c <ProcessSerialMessage+0x7c4>)
 8008484:	0092      	lsls	r2, r2, #2
 8008486:	58d2      	ldr	r2, [r2, r3]
 8008488:	187b      	adds	r3, r7, r1
 800848a:	8819      	ldrh	r1, [r3, #0]
 800848c:	4b85      	ldr	r3, [pc, #532]	; (80086a4 <ProcessSerialMessage+0x7cc>)
 800848e:	0089      	lsls	r1, r1, #2
 8008490:	58cb      	ldr	r3, [r1, r3]
 8008492:	429a      	cmp	r2, r3
 8008494:	d10d      	bne.n	80084b2 <ProcessSerialMessage+0x5da>
 8008496:	211e      	movs	r1, #30
 8008498:	187b      	adds	r3, r7, r1
 800849a:	881a      	ldrh	r2, [r3, #0]
 800849c:	4b7f      	ldr	r3, [pc, #508]	; (800869c <ProcessSerialMessage+0x7c4>)
 800849e:	3206      	adds	r2, #6
 80084a0:	0092      	lsls	r2, r2, #2
 80084a2:	58d2      	ldr	r2, [r2, r3]
 80084a4:	187b      	adds	r3, r7, r1
 80084a6:	8819      	ldrh	r1, [r3, #0]
 80084a8:	4b7f      	ldr	r3, [pc, #508]	; (80086a8 <ProcessSerialMessage+0x7d0>)
 80084aa:	0089      	lsls	r1, r1, #2
 80084ac:	58cb      	ldr	r3, [r1, r3]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d044      	beq.n	800853c <ProcessSerialMessage+0x664>
              OldConfig[i] = SysPars.DigIO_Configuration[i];
 80084b2:	201e      	movs	r0, #30
 80084b4:	183b      	adds	r3, r7, r0
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	183a      	adds	r2, r7, r0
 80084ba:	8812      	ldrh	r2, [r2, #0]
 80084bc:	4977      	ldr	r1, [pc, #476]	; (800869c <ProcessSerialMessage+0x7c4>)
 80084be:	3314      	adds	r3, #20
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	18cb      	adds	r3, r1, r3
 80084c4:	3304      	adds	r3, #4
 80084c6:	6819      	ldr	r1, [r3, #0]
 80084c8:	4b75      	ldr	r3, [pc, #468]	; (80086a0 <ProcessSerialMessage+0x7c8>)
 80084ca:	0092      	lsls	r2, r2, #2
 80084cc:	50d1      	str	r1, [r2, r3]
              OldFreq[i] = SysPars.DigIO_FrequencySetpoint[i];
 80084ce:	183b      	adds	r3, r7, r0
 80084d0:	8819      	ldrh	r1, [r3, #0]
 80084d2:	183b      	adds	r3, r7, r0
 80084d4:	881a      	ldrh	r2, [r3, #0]
 80084d6:	4b71      	ldr	r3, [pc, #452]	; (800869c <ProcessSerialMessage+0x7c4>)
 80084d8:	0089      	lsls	r1, r1, #2
 80084da:	58c9      	ldr	r1, [r1, r3]
 80084dc:	4b71      	ldr	r3, [pc, #452]	; (80086a4 <ProcessSerialMessage+0x7cc>)
 80084de:	0092      	lsls	r2, r2, #2
 80084e0:	50d1      	str	r1, [r2, r3]
              OldDuty[i] = SysPars.DigIO_DutyCycle[i];
 80084e2:	183b      	adds	r3, r7, r0
 80084e4:	8819      	ldrh	r1, [r3, #0]
 80084e6:	183b      	adds	r3, r7, r0
 80084e8:	881a      	ldrh	r2, [r3, #0]
 80084ea:	4b6c      	ldr	r3, [pc, #432]	; (800869c <ProcessSerialMessage+0x7c4>)
 80084ec:	3106      	adds	r1, #6
 80084ee:	0089      	lsls	r1, r1, #2
 80084f0:	58c9      	ldr	r1, [r1, r3]
 80084f2:	4b6d      	ldr	r3, [pc, #436]	; (80086a8 <ProcessSerialMessage+0x7d0>)
 80084f4:	0092      	lsls	r2, r2, #2
 80084f6:	50d1      	str	r1, [r2, r3]
              DIG_InitStruct.Mode = OldConfig[i];
 80084f8:	0001      	movs	r1, r0
 80084fa:	187b      	adds	r3, r7, r1
 80084fc:	881a      	ldrh	r2, [r3, #0]
 80084fe:	4b68      	ldr	r3, [pc, #416]	; (80086a0 <ProcessSerialMessage+0x7c8>)
 8008500:	0092      	lsls	r2, r2, #2
 8008502:	58d3      	ldr	r3, [r2, r3]
 8008504:	b2da      	uxtb	r2, r3
 8008506:	200c      	movs	r0, #12
 8008508:	183b      	adds	r3, r7, r0
 800850a:	719a      	strb	r2, [r3, #6]
              DIG_InitStruct.Frequency = SysPars.DigIO_FrequencySetpoint[i];
 800850c:	187b      	adds	r3, r7, r1
 800850e:	881a      	ldrh	r2, [r3, #0]
 8008510:	4b62      	ldr	r3, [pc, #392]	; (800869c <ProcessSerialMessage+0x7c4>)
 8008512:	0092      	lsls	r2, r2, #2
 8008514:	58d2      	ldr	r2, [r2, r3]
 8008516:	183b      	adds	r3, r7, r0
 8008518:	601a      	str	r2, [r3, #0]
              DIG_InitStruct.DutyCycle = SysPars.DigIO_DutyCycle[i];
 800851a:	187b      	adds	r3, r7, r1
 800851c:	881a      	ldrh	r2, [r3, #0]
 800851e:	4b5f      	ldr	r3, [pc, #380]	; (800869c <ProcessSerialMessage+0x7c4>)
 8008520:	3206      	adds	r2, #6
 8008522:	0092      	lsls	r2, r2, #2
 8008524:	58d3      	ldr	r3, [r2, r3]
 8008526:	b21a      	sxth	r2, r3
 8008528:	0004      	movs	r4, r0
 800852a:	183b      	adds	r3, r7, r0
 800852c:	809a      	strh	r2, [r3, #4]
              DIG_Init(i, DIG_InitStruct);
 800852e:	187b      	adds	r3, r7, r1
 8008530:	8818      	ldrh	r0, [r3, #0]
 8008532:	193b      	adds	r3, r7, r4
 8008534:	6819      	ldr	r1, [r3, #0]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	f7fc fcc0 	bl	8004ebc <DIG_Init>
          }
          if (SysPars.DigIO_Configuration[i] == DIG_OUT) {
 800853c:	231e      	movs	r3, #30
 800853e:	18fb      	adds	r3, r7, r3
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	4a56      	ldr	r2, [pc, #344]	; (800869c <ProcessSerialMessage+0x7c4>)
 8008544:	3314      	adds	r3, #20
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	18d3      	adds	r3, r2, r3
 800854a:	3304      	adds	r3, #4
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b02      	cmp	r3, #2
 8008550:	d131      	bne.n	80085b6 <ProcessSerialMessage+0x6de>
              if (SysPars.DigIO_OutputLevel[i] != OldLevel[i]) {
 8008552:	211e      	movs	r1, #30
 8008554:	187b      	adds	r3, r7, r1
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	4a50      	ldr	r2, [pc, #320]	; (800869c <ProcessSerialMessage+0x7c4>)
 800855a:	331a      	adds	r3, #26
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	18d3      	adds	r3, r2, r3
 8008560:	3304      	adds	r3, #4
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	187b      	adds	r3, r7, r1
 8008566:	8819      	ldrh	r1, [r3, #0]
 8008568:	4b50      	ldr	r3, [pc, #320]	; (80086ac <ProcessSerialMessage+0x7d4>)
 800856a:	0089      	lsls	r1, r1, #2
 800856c:	58cb      	ldr	r3, [r1, r3]
 800856e:	429a      	cmp	r2, r3
 8008570:	d021      	beq.n	80085b6 <ProcessSerialMessage+0x6de>
                  OldLevel[i] = SysPars.DigIO_OutputLevel[i];
 8008572:	201e      	movs	r0, #30
 8008574:	183b      	adds	r3, r7, r0
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	183a      	adds	r2, r7, r0
 800857a:	8812      	ldrh	r2, [r2, #0]
 800857c:	4947      	ldr	r1, [pc, #284]	; (800869c <ProcessSerialMessage+0x7c4>)
 800857e:	331a      	adds	r3, #26
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	18cb      	adds	r3, r1, r3
 8008584:	3304      	adds	r3, #4
 8008586:	6819      	ldr	r1, [r3, #0]
 8008588:	4b48      	ldr	r3, [pc, #288]	; (80086ac <ProcessSerialMessage+0x7d4>)
 800858a:	0092      	lsls	r2, r2, #2
 800858c:	50d1      	str	r1, [r2, r3]
                  if (OldLevel[i] != 0) {
 800858e:	183b      	adds	r3, r7, r0
 8008590:	881a      	ldrh	r2, [r3, #0]
 8008592:	4b46      	ldr	r3, [pc, #280]	; (80086ac <ProcessSerialMessage+0x7d4>)
 8008594:	0092      	lsls	r2, r2, #2
 8008596:	58d3      	ldr	r3, [r2, r3]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d006      	beq.n	80085aa <ProcessSerialMessage+0x6d2>
                      DIG_SetPin(i);
 800859c:	231e      	movs	r3, #30
 800859e:	18fb      	adds	r3, r7, r3
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	0018      	movs	r0, r3
 80085a4:	f7fd fc10 	bl	8005dc8 <DIG_SetPin>
 80085a8:	e005      	b.n	80085b6 <ProcessSerialMessage+0x6de>
                  } else {
                      DIG_ResetPin(i);
 80085aa:	231e      	movs	r3, #30
 80085ac:	18fb      	adds	r3, r7, r3
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	0018      	movs	r0, r3
 80085b2:	f7fd fc3b 	bl	8005e2c <DIG_ResetPin>
      for ( i = 0 ; i < 6 ; i++) {
 80085b6:	211e      	movs	r1, #30
 80085b8:	187b      	adds	r3, r7, r1
 80085ba:	881a      	ldrh	r2, [r3, #0]
 80085bc:	187b      	adds	r3, r7, r1
 80085be:	3201      	adds	r2, #1
 80085c0:	801a      	strh	r2, [r3, #0]
 80085c2:	231e      	movs	r3, #30
 80085c4:	18fb      	adds	r3, r7, r3
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	2b05      	cmp	r3, #5
 80085ca:	d800      	bhi.n	80085ce <ProcessSerialMessage+0x6f6>
 80085cc:	e746      	b.n	800845c <ProcessSerialMessage+0x584>
      }
  }
  //
  // Relay Message to CD Series Sender
  //
  if ( SerialStruct->Command == 0xBC) {
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	7f1b      	ldrb	r3, [r3, #28]
 80085d2:	2bbc      	cmp	r3, #188	; 0xbc
 80085d4:	d15f      	bne.n	8008696 <ProcessSerialMessage+0x7be>
      if (SysPars.CommConfig == COMM_CD_RS485) {
 80085d6:	4b31      	ldr	r3, [pc, #196]	; (800869c <ProcessSerialMessage+0x7c4>)
 80085d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d126      	bne.n	800862c <ProcessSerialMessage+0x754>
          SerialUsart4.Command = SerialStruct->TxRxBuffer[0];
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	781a      	ldrb	r2, [r3, #0]
 80085e4:	4b32      	ldr	r3, [pc, #200]	; (80086b0 <ProcessSerialMessage+0x7d8>)
 80085e6:	771a      	strb	r2, [r3, #28]
          SerialUsart4.Length = SerialStruct->Length - 1;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	221e      	movs	r2, #30
 80085ec:	5e9b      	ldrsh	r3, [r3, r2]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	3b01      	subs	r3, #1
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	b21a      	sxth	r2, r3
 80085f6:	4b2e      	ldr	r3, [pc, #184]	; (80086b0 <ProcessSerialMessage+0x7d8>)
 80085f8:	83da      	strh	r2, [r3, #30]
          if (SerialUsart4.Length != 0) {
 80085fa:	4b2d      	ldr	r3, [pc, #180]	; (80086b0 <ProcessSerialMessage+0x7d8>)
 80085fc:	221e      	movs	r2, #30
 80085fe:	5e9b      	ldrsh	r3, [r3, r2]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00c      	beq.n	800861e <ProcessSerialMessage+0x746>
              memmove(&SerialUsart4.TxRxBuffer[9], &SerialStruct->TxRxBuffer[1], SerialUsart4.Length);
 8008604:	4b2a      	ldr	r3, [pc, #168]	; (80086b0 <ProcessSerialMessage+0x7d8>)
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	3309      	adds	r3, #9
 800860a:	0018      	movs	r0, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	1c59      	adds	r1, r3, #1
 8008612:	4b27      	ldr	r3, [pc, #156]	; (80086b0 <ProcessSerialMessage+0x7d8>)
 8008614:	221e      	movs	r2, #30
 8008616:	5e9b      	ldrsh	r3, [r3, r2]
 8008618:	001a      	movs	r2, r3
 800861a:	f001 f9da 	bl	80099d2 <memmove>
          }
          SerialUsart4.ReceiveMode = 1;
 800861e:	4b24      	ldr	r3, [pc, #144]	; (80086b0 <ProcessSerialMessage+0x7d8>)
 8008620:	2201      	movs	r2, #1
 8008622:	705a      	strb	r2, [r3, #1]
          SerialSend(&SerialUsart4);
 8008624:	4b22      	ldr	r3, [pc, #136]	; (80086b0 <ProcessSerialMessage+0x7d8>)
 8008626:	0018      	movs	r0, r3
 8008628:	f7ff fb80 	bl	8007d2c <SerialSend>
      }
      if (SysPars.CommConfig == COMM_CD_DIGIO1) {
 800862c:	4b1b      	ldr	r3, [pc, #108]	; (800869c <ProcessSerialMessage+0x7c4>)
 800862e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008630:	2b02      	cmp	r3, #2
 8008632:	d130      	bne.n	8008696 <ProcessSerialMessage+0x7be>
          SerialUsart2.Command = SerialStruct->TxRxBuffer[0];
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	781a      	ldrb	r2, [r3, #0]
 800863a:	4b1e      	ldr	r3, [pc, #120]	; (80086b4 <ProcessSerialMessage+0x7dc>)
 800863c:	771a      	strb	r2, [r3, #28]
          SerialUsart2.Length = SerialStruct->Length - 1;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	221e      	movs	r2, #30
 8008642:	5e9b      	ldrsh	r3, [r3, r2]
 8008644:	b29b      	uxth	r3, r3
 8008646:	3b01      	subs	r3, #1
 8008648:	b29b      	uxth	r3, r3
 800864a:	b21a      	sxth	r2, r3
 800864c:	4b19      	ldr	r3, [pc, #100]	; (80086b4 <ProcessSerialMessage+0x7dc>)
 800864e:	83da      	strh	r2, [r3, #30]
          if (SerialUsart2.Length != 0) {
 8008650:	4b18      	ldr	r3, [pc, #96]	; (80086b4 <ProcessSerialMessage+0x7dc>)
 8008652:	221e      	movs	r2, #30
 8008654:	5e9b      	ldrsh	r3, [r3, r2]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00c      	beq.n	8008674 <ProcessSerialMessage+0x79c>
              memmove(&SerialUsart2.TxRxBuffer[9], &SerialStruct->TxRxBuffer[1], SerialUsart2.Length);
 800865a:	4b16      	ldr	r3, [pc, #88]	; (80086b4 <ProcessSerialMessage+0x7dc>)
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	3309      	adds	r3, #9
 8008660:	0018      	movs	r0, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	1c59      	adds	r1, r3, #1
 8008668:	4b12      	ldr	r3, [pc, #72]	; (80086b4 <ProcessSerialMessage+0x7dc>)
 800866a:	221e      	movs	r2, #30
 800866c:	5e9b      	ldrsh	r3, [r3, r2]
 800866e:	001a      	movs	r2, r3
 8008670:	f001 f9af 	bl	80099d2 <memmove>
          }
          HAL_GPIO_WritePin(DIG_HandleStruct[0].Dir_Port, DIG_HandleStruct[0].Dir_Pin, GPIO_PIN_SET);   //Config DIGIO1 as an output driven by USART2_TX
 8008674:	4b10      	ldr	r3, [pc, #64]	; (80086b8 <ProcessSerialMessage+0x7e0>)
 8008676:	68d8      	ldr	r0, [r3, #12]
 8008678:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <ProcessSerialMessage+0x7e0>)
 800867a:	223c      	movs	r2, #60	; 0x3c
 800867c:	5e9b      	ldrsh	r3, [r3, r2]
 800867e:	b29b      	uxth	r3, r3
 8008680:	2201      	movs	r2, #1
 8008682:	0019      	movs	r1, r3
 8008684:	f7f8 ff57 	bl	8001536 <HAL_GPIO_WritePin>
          SerialUsart2.ReceiveMode = 1;
 8008688:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <ProcessSerialMessage+0x7dc>)
 800868a:	2201      	movs	r2, #1
 800868c:	705a      	strb	r2, [r3, #1]
          SerialSend(&SerialUsart2);
 800868e:	4b09      	ldr	r3, [pc, #36]	; (80086b4 <ProcessSerialMessage+0x7dc>)
 8008690:	0018      	movs	r0, r3
 8008692:	f7ff fb4b 	bl	8007d2c <SerialSend>
      }
  }
}
 8008696:	46bd      	mov	sp, r7
 8008698:	b009      	add	sp, #36	; 0x24
 800869a:	bd90      	pop	{r4, r7, pc}
 800869c:	200011f4 	.word	0x200011f4
 80086a0:	20000088 	.word	0x20000088
 80086a4:	200000a0 	.word	0x200000a0
 80086a8:	200000b8 	.word	0x200000b8
 80086ac:	200000d0 	.word	0x200000d0
 80086b0:	2000141c 	.word	0x2000141c
 80086b4:	200013d0 	.word	0x200013d0
 80086b8:	20001f14 	.word	0x20001f14

080086bc <HAL_MspInit>:
/* Includes ------------------------------------------------------------------*/
#include "stm32f0xx_hal.h"

extern void Error_Handler(void);

void HAL_MspInit(void) {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086c2:	4b12      	ldr	r3, [pc, #72]	; (800870c <HAL_MspInit+0x50>)
 80086c4:	699a      	ldr	r2, [r3, #24]
 80086c6:	4b11      	ldr	r3, [pc, #68]	; (800870c <HAL_MspInit+0x50>)
 80086c8:	2101      	movs	r1, #1
 80086ca:	430a      	orrs	r2, r1
 80086cc:	619a      	str	r2, [r3, #24]
 80086ce:	4b0f      	ldr	r3, [pc, #60]	; (800870c <HAL_MspInit+0x50>)
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	2201      	movs	r2, #1
 80086d4:	4013      	ands	r3, r2
 80086d6:	607b      	str	r3, [r7, #4]
 80086d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80086da:	2305      	movs	r3, #5
 80086dc:	425b      	negs	r3, r3
 80086de:	2200      	movs	r2, #0
 80086e0:	2100      	movs	r1, #0
 80086e2:	0018      	movs	r0, r3
 80086e4:	f7f8 fa78 	bl	8000bd8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80086e8:	2302      	movs	r3, #2
 80086ea:	425b      	negs	r3, r3
 80086ec:	2200      	movs	r2, #0
 80086ee:	2100      	movs	r1, #0
 80086f0:	0018      	movs	r0, r3
 80086f2:	f7f8 fa71 	bl	8000bd8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80086f6:	2301      	movs	r3, #1
 80086f8:	425b      	negs	r3, r3
 80086fa:	2200      	movs	r2, #0
 80086fc:	2100      	movs	r1, #0
 80086fe:	0018      	movs	r0, r3
 8008700:	f7f8 fa6a 	bl	8000bd8 <HAL_NVIC_SetPriority>
}
 8008704:	46c0      	nop			; (mov r8, r8)
 8008706:	46bd      	mov	sp, r7
 8008708:	b002      	add	sp, #8
 800870a:	bd80      	pop	{r7, pc}
 800870c:	40021000 	.word	0x40021000

08008710 <NMI_Handler>:

/******************************************************************************/
/*            Cortex-M0 Processor Interruption and Exception Handlers         */
/******************************************************************************/

void NMI_Handler(void) {
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
}
 8008714:	46c0      	nop			; (mov r8, r8)
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <HardFault_Handler>:

void HardFault_Handler(void) {
 800871a:	b580      	push	{r7, lr}
 800871c:	af00      	add	r7, sp, #0
  while ( 1 ) {
 800871e:	e7fe      	b.n	800871e <HardFault_Handler+0x4>

08008720 <SVC_Handler>:
  }
}

void SVC_Handler(void) {
 8008720:	b580      	push	{r7, lr}
 8008722:	af00      	add	r7, sp, #0
}
 8008724:	46c0      	nop			; (mov r8, r8)
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <PendSV_Handler>:

void PendSV_Handler(void) {
 800872a:	b580      	push	{r7, lr}
 800872c:	af00      	add	r7, sp, #0
}
 800872e:	46c0      	nop			; (mov r8, r8)
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void) {
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8008738:	2008      	movs	r0, #8
 800873a:	f7f8 ff2b 	bl	8001594 <HAL_GPIO_EXTI_IRQHandler>
}
 800873e:	46c0      	nop			; (mov r8, r8)
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void) {
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8008748:	2010      	movs	r0, #16
 800874a:	f7f8 ff23 	bl	8001594 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800874e:	2380      	movs	r3, #128	; 0x80
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	0018      	movs	r0, r3
 8008754:	f7f8 ff1e 	bl	8001594 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8008758:	2380      	movs	r3, #128	; 0x80
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	0018      	movs	r0, r3
 800875e:	f7f8 ff19 	bl	8001594 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8008762:	2380      	movs	r3, #128	; 0x80
 8008764:	00db      	lsls	r3, r3, #3
 8008766:	0018      	movs	r0, r3
 8008768:	f7f8 ff14 	bl	8001594 <HAL_GPIO_EXTI_IRQHandler>
}
 800876c:	46c0      	nop			; (mov r8, r8)
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <SysTick_Handler>:

void SysTick_Handler(void) {
 8008772:	b580      	push	{r7, lr}
 8008774:	af00      	add	r7, sp, #0

  HAL_IncTick();
 8008776:	f7f8 f83d 	bl	80007f4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800877a:	f7f8 fa89 	bl	8000c90 <HAL_SYSTICK_IRQHandler>
}
 800877e:	46c0      	nop			; (mov r8, r8)
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart1);
 8008788:	4b03      	ldr	r3, [pc, #12]	; (8008798 <USART1_IRQHandler+0x14>)
 800878a:	0018      	movs	r0, r3
 800878c:	f7fb fe44 	bl	8004418 <HAL_UART_IRQHandler>
}
 8008790:	46c0      	nop			; (mov r8, r8)
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	46c0      	nop			; (mov r8, r8)
 8008798:	20001e1c 	.word	0x20001e1c

0800879c <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 800879c:	b580      	push	{r7, lr}
 800879e:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart2);
 80087a0:	4b03      	ldr	r3, [pc, #12]	; (80087b0 <USART2_IRQHandler+0x14>)
 80087a2:	0018      	movs	r0, r3
 80087a4:	f7fb fe38 	bl	8004418 <HAL_UART_IRQHandler>
}
 80087a8:	46c0      	nop			; (mov r8, r8)
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	200026e0 	.word	0x200026e0

080087b4 <USART3_4_IRQHandler>:

void USART3_4_IRQHandler(void) {
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 80087b8:	4b03      	ldr	r3, [pc, #12]	; (80087c8 <USART3_4_IRQHandler+0x14>)
 80087ba:	0018      	movs	r0, r3
 80087bc:	f7fb fe2c 	bl	8004418 <HAL_UART_IRQHandler>
}
 80087c0:	46c0      	nop			; (mov r8, r8)
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	46c0      	nop			; (mov r8, r8)
 80087c8:	2000262c 	.word	0x2000262c

080087cc <DMA1_Channel2_3_IRQHandler>:

void DMA1_Channel2_3_IRQHandler(void) {
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0

  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80087d0:	4b03      	ldr	r3, [pc, #12]	; (80087e0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80087d2:	0018      	movs	r0, r3
 80087d4:	f7f8 fc2c 	bl	8001030 <HAL_DMA_IRQHandler>
}
 80087d8:	46c0      	nop			; (mov r8, r8)
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	46c0      	nop			; (mov r8, r8)
 80087e0:	20001cd0 	.word	0x20001cd0

080087e4 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void) {
 80087e4:	b580      	push	{r7, lr}
 80087e6:	af00      	add	r7, sp, #0

    HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80087e8:	4b05      	ldr	r3, [pc, #20]	; (8008800 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 80087ea:	0018      	movs	r0, r3
 80087ec:	f7f8 fc20 	bl	8001030 <HAL_DMA_IRQHandler>
    HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80087f0:	4b04      	ldr	r3, [pc, #16]	; (8008804 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 80087f2:	0018      	movs	r0, r3
 80087f4:	f7f8 fc1c 	bl	8001030 <HAL_DMA_IRQHandler>
}
 80087f8:	46c0      	nop			; (mov r8, r8)
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	46c0      	nop			; (mov r8, r8)
 8008800:	20001d14 	.word	0x20001d14
 8008804:	2000132c 	.word	0x2000132c

08008808 <I2C1_IRQHandler>:

void I2C1_IRQHandler(void) {
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0

  if ( hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR) ) {
 800880c:	4b09      	ldr	r3, [pc, #36]	; (8008834 <I2C1_IRQHandler+0x2c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699a      	ldr	r2, [r3, #24]
 8008812:	23e0      	movs	r3, #224	; 0xe0
 8008814:	00db      	lsls	r3, r3, #3
 8008816:	4013      	ands	r3, r2
 8008818:	d004      	beq.n	8008824 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <I2C1_IRQHandler+0x2c>)
 800881c:	0018      	movs	r0, r3
 800881e:	f7f9 fa05 	bl	8001c2c <HAL_I2C_ER_IRQHandler>
  } else {
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
}
 8008822:	e003      	b.n	800882c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8008824:	4b03      	ldr	r3, [pc, #12]	; (8008834 <I2C1_IRQHandler+0x2c>)
 8008826:	0018      	movs	r0, r3
 8008828:	f7f9 f9e6 	bl	8001bf8 <HAL_I2C_EV_IRQHandler>
}
 800882c:	46c0      	nop			; (mov r8, r8)
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	46c0      	nop			; (mov r8, r8)
 8008834:	2000127c 	.word	0x2000127c

08008838 <MX_CAN_Init>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
void MX_CAN_Init(void) {
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0

    hcan.Instance = CAN;
 800883c:	4b17      	ldr	r3, [pc, #92]	; (800889c <MX_CAN_Init+0x64>)
 800883e:	4a18      	ldr	r2, [pc, #96]	; (80088a0 <MX_CAN_Init+0x68>)
 8008840:	601a      	str	r2, [r3, #0]
    hcan.Init.Prescaler = 16;
 8008842:	4b16      	ldr	r3, [pc, #88]	; (800889c <MX_CAN_Init+0x64>)
 8008844:	2210      	movs	r2, #16
 8008846:	605a      	str	r2, [r3, #4]
    hcan.Init.Mode = CAN_MODE_NORMAL;
 8008848:	4b14      	ldr	r3, [pc, #80]	; (800889c <MX_CAN_Init+0x64>)
 800884a:	2200      	movs	r2, #0
 800884c:	609a      	str	r2, [r3, #8]
    hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800884e:	4b13      	ldr	r3, [pc, #76]	; (800889c <MX_CAN_Init+0x64>)
 8008850:	2200      	movs	r2, #0
 8008852:	60da      	str	r2, [r3, #12]
    hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008854:	4b11      	ldr	r3, [pc, #68]	; (800889c <MX_CAN_Init+0x64>)
 8008856:	2200      	movs	r2, #0
 8008858:	611a      	str	r2, [r3, #16]
    hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800885a:	4b10      	ldr	r3, [pc, #64]	; (800889c <MX_CAN_Init+0x64>)
 800885c:	2200      	movs	r2, #0
 800885e:	615a      	str	r2, [r3, #20]
    hcan.Init.TimeTriggeredMode = DISABLE;
 8008860:	4b0e      	ldr	r3, [pc, #56]	; (800889c <MX_CAN_Init+0x64>)
 8008862:	2200      	movs	r2, #0
 8008864:	761a      	strb	r2, [r3, #24]
    hcan.Init.AutoBusOff = DISABLE;
 8008866:	4b0d      	ldr	r3, [pc, #52]	; (800889c <MX_CAN_Init+0x64>)
 8008868:	2200      	movs	r2, #0
 800886a:	765a      	strb	r2, [r3, #25]
    hcan.Init.AutoWakeUp = DISABLE;
 800886c:	4b0b      	ldr	r3, [pc, #44]	; (800889c <MX_CAN_Init+0x64>)
 800886e:	2200      	movs	r2, #0
 8008870:	769a      	strb	r2, [r3, #26]
    hcan.Init.AutoRetransmission = DISABLE;
 8008872:	4b0a      	ldr	r3, [pc, #40]	; (800889c <MX_CAN_Init+0x64>)
 8008874:	2200      	movs	r2, #0
 8008876:	76da      	strb	r2, [r3, #27]
    hcan.Init.ReceiveFifoLocked = DISABLE;
 8008878:	4b08      	ldr	r3, [pc, #32]	; (800889c <MX_CAN_Init+0x64>)
 800887a:	2200      	movs	r2, #0
 800887c:	771a      	strb	r2, [r3, #28]
    hcan.Init.TransmitFifoPriority = DISABLE;
 800887e:	4b07      	ldr	r3, [pc, #28]	; (800889c <MX_CAN_Init+0x64>)
 8008880:	2200      	movs	r2, #0
 8008882:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008884:	4b05      	ldr	r3, [pc, #20]	; (800889c <MX_CAN_Init+0x64>)
 8008886:	0018      	movs	r0, r3
 8008888:	f7f7 ffe7 	bl	800085a <HAL_CAN_Init>
 800888c:	1e03      	subs	r3, r0, #0
 800888e:	d001      	beq.n	8008894 <MX_CAN_Init+0x5c>
    {
      Error_Handler();
 8008890:	f7fd fb54 	bl	8005f3c <Error_Handler>
    }

}
 8008894:	46c0      	nop			; (mov r8, r8)
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	46c0      	nop			; (mov r8, r8)
 800889c:	200013f0 	.word	0x200013f0
 80088a0:	40006400 	.word	0x40006400

080088a4 <HAL_CAN_MspInit>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 80088a4:	b590      	push	{r4, r7, lr}
 80088a6:	b089      	sub	sp, #36	; 0x24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088ac:	230c      	movs	r3, #12
 80088ae:	18fb      	adds	r3, r7, r3
 80088b0:	0018      	movs	r0, r3
 80088b2:	2314      	movs	r3, #20
 80088b4:	001a      	movs	r2, r3
 80088b6:	2100      	movs	r1, #0
 80088b8:	f001 f89e 	bl	80099f8 <memset>

    if(canHandle->Instance==CAN)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a22      	ldr	r2, [pc, #136]	; (800894c <HAL_CAN_MspInit+0xa8>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d13e      	bne.n	8008944 <HAL_CAN_MspInit+0xa0>
    {
      /* CAN clock enable */
      __HAL_RCC_CAN1_CLK_ENABLE();
 80088c6:	4b22      	ldr	r3, [pc, #136]	; (8008950 <HAL_CAN_MspInit+0xac>)
 80088c8:	69da      	ldr	r2, [r3, #28]
 80088ca:	4b21      	ldr	r3, [pc, #132]	; (8008950 <HAL_CAN_MspInit+0xac>)
 80088cc:	2180      	movs	r1, #128	; 0x80
 80088ce:	0489      	lsls	r1, r1, #18
 80088d0:	430a      	orrs	r2, r1
 80088d2:	61da      	str	r2, [r3, #28]
 80088d4:	4b1e      	ldr	r3, [pc, #120]	; (8008950 <HAL_CAN_MspInit+0xac>)
 80088d6:	69da      	ldr	r2, [r3, #28]
 80088d8:	2380      	movs	r3, #128	; 0x80
 80088da:	049b      	lsls	r3, r3, #18
 80088dc:	4013      	ands	r3, r2
 80088de:	60bb      	str	r3, [r7, #8]
 80088e0:	68bb      	ldr	r3, [r7, #8]
      /**CAN GPIO Configuration
      PA11     ------> CAN_RX
      PA12     ------> CAN_TX
      */
      GPIO_InitStruct.Pin = CANRXD_Pin;
 80088e2:	210c      	movs	r1, #12
 80088e4:	187b      	adds	r3, r7, r1
 80088e6:	2280      	movs	r2, #128	; 0x80
 80088e8:	0112      	lsls	r2, r2, #4
 80088ea:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088ec:	187b      	adds	r3, r7, r1
 80088ee:	2202      	movs	r2, #2
 80088f0:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088f2:	187b      	adds	r3, r7, r1
 80088f4:	2200      	movs	r2, #0
 80088f6:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80088f8:	187b      	adds	r3, r7, r1
 80088fa:	2203      	movs	r2, #3
 80088fc:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80088fe:	187b      	adds	r3, r7, r1
 8008900:	2204      	movs	r2, #4
 8008902:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init(CANRXD_GPIO_Port, &GPIO_InitStruct);
 8008904:	000c      	movs	r4, r1
 8008906:	187a      	adds	r2, r7, r1
 8008908:	2390      	movs	r3, #144	; 0x90
 800890a:	05db      	lsls	r3, r3, #23
 800890c:	0011      	movs	r1, r2
 800890e:	0018      	movs	r0, r3
 8008910:	f7f8 fc78 	bl	8001204 <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = CANTXD_Pin;
 8008914:	0021      	movs	r1, r4
 8008916:	187b      	adds	r3, r7, r1
 8008918:	2280      	movs	r2, #128	; 0x80
 800891a:	0152      	lsls	r2, r2, #5
 800891c:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800891e:	187b      	adds	r3, r7, r1
 8008920:	2202      	movs	r2, #2
 8008922:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008924:	187b      	adds	r3, r7, r1
 8008926:	2200      	movs	r2, #0
 8008928:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800892a:	187b      	adds	r3, r7, r1
 800892c:	2203      	movs	r2, #3
 800892e:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8008930:	187b      	adds	r3, r7, r1
 8008932:	2204      	movs	r2, #4
 8008934:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init(CANTXD_GPIO_Port, &GPIO_InitStruct);
 8008936:	187a      	adds	r2, r7, r1
 8008938:	2390      	movs	r3, #144	; 0x90
 800893a:	05db      	lsls	r3, r3, #23
 800893c:	0011      	movs	r1, r2
 800893e:	0018      	movs	r0, r3
 8008940:	f7f8 fc60 	bl	8001204 <HAL_GPIO_Init>
    }
}
 8008944:	46c0      	nop			; (mov r8, r8)
 8008946:	46bd      	mov	sp, r7
 8008948:	b009      	add	sp, #36	; 0x24
 800894a:	bd90      	pop	{r4, r7, pc}
 800894c:	40006400 	.word	0x40006400
 8008950:	40021000 	.word	0x40021000

08008954 <MX_CRC_Init>:

// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
void MX_CRC_Init(void)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8008958:	4b0e      	ldr	r3, [pc, #56]	; (8008994 <MX_CRC_Init+0x40>)
 800895a:	4a0f      	ldr	r2, [pc, #60]	; (8008998 <MX_CRC_Init+0x44>)
 800895c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800895e:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <MX_CRC_Init+0x40>)
 8008960:	2200      	movs	r2, #0
 8008962:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008964:	4b0b      	ldr	r3, [pc, #44]	; (8008994 <MX_CRC_Init+0x40>)
 8008966:	2200      	movs	r2, #0
 8008968:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800896a:	4b0a      	ldr	r3, [pc, #40]	; (8008994 <MX_CRC_Init+0x40>)
 800896c:	2200      	movs	r2, #0
 800896e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8008970:	4b08      	ldr	r3, [pc, #32]	; (8008994 <MX_CRC_Init+0x40>)
 8008972:	2200      	movs	r2, #0
 8008974:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008976:	4b07      	ldr	r3, [pc, #28]	; (8008994 <MX_CRC_Init+0x40>)
 8008978:	2201      	movs	r2, #1
 800897a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800897c:	4b05      	ldr	r3, [pc, #20]	; (8008994 <MX_CRC_Init+0x40>)
 800897e:	0018      	movs	r0, r3
 8008980:	f7f8 f992 	bl	8000ca8 <HAL_CRC_Init>
 8008984:	1e03      	subs	r3, r0, #0
 8008986:	d001      	beq.n	800898c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8008988:	f7fd fad8 	bl	8005f3c <Error_Handler>
  }

}
 800898c:	46c0      	nop			; (mov r8, r8)
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	46c0      	nop			; (mov r8, r8)
 8008994:	20001308 	.word	0x20001308
 8008998:	40023000 	.word	0x40023000

0800899c <HAL_CRC_MspInit>:

// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <HAL_CRC_MspInit+0x34>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d10b      	bne.n	80089c6 <HAL_CRC_MspInit+0x2a>
  {
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80089ae:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <HAL_CRC_MspInit+0x38>)
 80089b0:	695a      	ldr	r2, [r3, #20]
 80089b2:	4b08      	ldr	r3, [pc, #32]	; (80089d4 <HAL_CRC_MspInit+0x38>)
 80089b4:	2140      	movs	r1, #64	; 0x40
 80089b6:	430a      	orrs	r2, r1
 80089b8:	615a      	str	r2, [r3, #20]
 80089ba:	4b06      	ldr	r3, [pc, #24]	; (80089d4 <HAL_CRC_MspInit+0x38>)
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	2240      	movs	r2, #64	; 0x40
 80089c0:	4013      	ands	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	68fb      	ldr	r3, [r7, #12]
  }
}
 80089c6:	46c0      	nop			; (mov r8, r8)
 80089c8:	46bd      	mov	sp, r7
 80089ca:	b004      	add	sp, #16
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	40023000 	.word	0x40023000
 80089d4:	40021000 	.word	0x40021000

080089d8 <MX_DMA_Init>:

// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
void MX_DMA_Init(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80089de:	4b31      	ldr	r3, [pc, #196]	; (8008aa4 <MX_DMA_Init+0xcc>)
 80089e0:	695a      	ldr	r2, [r3, #20]
 80089e2:	4b30      	ldr	r3, [pc, #192]	; (8008aa4 <MX_DMA_Init+0xcc>)
 80089e4:	2101      	movs	r1, #1
 80089e6:	430a      	orrs	r2, r1
 80089e8:	615a      	str	r2, [r3, #20]
 80089ea:	4b2e      	ldr	r3, [pc, #184]	; (8008aa4 <MX_DMA_Init+0xcc>)
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	2201      	movs	r2, #1
 80089f0:	4013      	ands	r3, r2
 80089f2:	607b      	str	r3, [r7, #4]
 80089f4:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 80089f6:	4b2c      	ldr	r3, [pc, #176]	; (8008aa8 <MX_DMA_Init+0xd0>)
 80089f8:	4a2c      	ldr	r2, [pc, #176]	; (8008aac <MX_DMA_Init+0xd4>)
 80089fa:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80089fc:	4b2a      	ldr	r3, [pc, #168]	; (8008aa8 <MX_DMA_Init+0xd0>)
 80089fe:	2280      	movs	r2, #128	; 0x80
 8008a00:	01d2      	lsls	r2, r2, #7
 8008a02:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8008a04:	4b28      	ldr	r3, [pc, #160]	; (8008aa8 <MX_DMA_Init+0xd0>)
 8008a06:	2240      	movs	r2, #64	; 0x40
 8008a08:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8008a0a:	4b27      	ldr	r3, [pc, #156]	; (8008aa8 <MX_DMA_Init+0xd0>)
 8008a0c:	2280      	movs	r2, #128	; 0x80
 8008a0e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a10:	4b25      	ldr	r3, [pc, #148]	; (8008aa8 <MX_DMA_Init+0xd0>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a16:	4b24      	ldr	r3, [pc, #144]	; (8008aa8 <MX_DMA_Init+0xd0>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8008a1c:	4b22      	ldr	r3, [pc, #136]	; (8008aa8 <MX_DMA_Init+0xd0>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8008a22:	4b21      	ldr	r3, [pc, #132]	; (8008aa8 <MX_DMA_Init+0xd0>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8008a28:	4b1f      	ldr	r3, [pc, #124]	; (8008aa8 <MX_DMA_Init+0xd0>)
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	f7f8 fa00 	bl	8000e30 <HAL_DMA_Init>
 8008a30:	1e03      	subs	r3, r0, #0
 8008a32:	d001      	beq.n	8008a38 <MX_DMA_Init+0x60>
  {
    Error_Handler();
 8008a34:	f7fd fa82 	bl	8005f3c <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma1_channel3 on DMA1_Channel3 */
  hdma_memtomem_dma1_channel3.Instance = DMA1_Channel3;
 8008a38:	4b1d      	ldr	r3, [pc, #116]	; (8008ab0 <MX_DMA_Init+0xd8>)
 8008a3a:	4a1e      	ldr	r2, [pc, #120]	; (8008ab4 <MX_DMA_Init+0xdc>)
 8008a3c:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8008a3e:	4b1c      	ldr	r3, [pc, #112]	; (8008ab0 <MX_DMA_Init+0xd8>)
 8008a40:	2280      	movs	r2, #128	; 0x80
 8008a42:	01d2      	lsls	r2, r2, #7
 8008a44:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel3.Init.PeriphInc = DMA_PINC_ENABLE;
 8008a46:	4b1a      	ldr	r3, [pc, #104]	; (8008ab0 <MX_DMA_Init+0xd8>)
 8008a48:	2240      	movs	r2, #64	; 0x40
 8008a4a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel3.Init.MemInc = DMA_MINC_DISABLE;
 8008a4c:	4b18      	ldr	r3, [pc, #96]	; (8008ab0 <MX_DMA_Init+0xd8>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a52:	4b17      	ldr	r3, [pc, #92]	; (8008ab0 <MX_DMA_Init+0xd8>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a58:	4b15      	ldr	r3, [pc, #84]	; (8008ab0 <MX_DMA_Init+0xd8>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel3.Init.Mode = DMA_NORMAL;
 8008a5e:	4b14      	ldr	r3, [pc, #80]	; (8008ab0 <MX_DMA_Init+0xd8>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel3.Init.Priority = DMA_PRIORITY_LOW;
 8008a64:	4b12      	ldr	r3, [pc, #72]	; (8008ab0 <MX_DMA_Init+0xd8>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel3) != HAL_OK)
 8008a6a:	4b11      	ldr	r3, [pc, #68]	; (8008ab0 <MX_DMA_Init+0xd8>)
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	f7f8 f9df 	bl	8000e30 <HAL_DMA_Init>
 8008a72:	1e03      	subs	r3, r0, #0
 8008a74:	d001      	beq.n	8008a7a <MX_DMA_Init+0xa2>
  {
    Error_Handler();
 8008a76:	f7fd fa61 	bl	8005f3c <Error_Handler>
  }
  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	200a      	movs	r0, #10
 8008a80:	f7f8 f8aa 	bl	8000bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8008a84:	200a      	movs	r0, #10
 8008a86:	f7f8 f8bc 	bl	8000c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	200b      	movs	r0, #11
 8008a90:	f7f8 f8a2 	bl	8000bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8008a94:	200b      	movs	r0, #11
 8008a96:	f7f8 f8b4 	bl	8000c02 <HAL_NVIC_EnableIRQ>

}
 8008a9a:	46c0      	nop			; (mov r8, r8)
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	b002      	add	sp, #8
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	46c0      	nop			; (mov r8, r8)
 8008aa4:	40021000 	.word	0x40021000
 8008aa8:	200020c8 	.word	0x200020c8
 8008aac:	40020008 	.word	0x40020008
 8008ab0:	20000934 	.word	0x20000934
 8008ab4:	40020030 	.word	0x40020030

08008ab8 <MX_GPIO_Init>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
void MX_GPIO_Init(void) {
 8008ab8:	b590      	push	{r4, r7, lr}
 8008aba:	b08b      	sub	sp, #44	; 0x2c
 8008abc:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct;

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008abe:	4bdf      	ldr	r3, [pc, #892]	; (8008e3c <MX_GPIO_Init+0x384>)
 8008ac0:	695a      	ldr	r2, [r3, #20]
 8008ac2:	4bde      	ldr	r3, [pc, #888]	; (8008e3c <MX_GPIO_Init+0x384>)
 8008ac4:	2180      	movs	r1, #128	; 0x80
 8008ac6:	0309      	lsls	r1, r1, #12
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	615a      	str	r2, [r3, #20]
 8008acc:	4bdb      	ldr	r3, [pc, #876]	; (8008e3c <MX_GPIO_Init+0x384>)
 8008ace:	695a      	ldr	r2, [r3, #20]
 8008ad0:	2380      	movs	r3, #128	; 0x80
 8008ad2:	031b      	lsls	r3, r3, #12
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	613b      	str	r3, [r7, #16]
 8008ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008ada:	4bd8      	ldr	r3, [pc, #864]	; (8008e3c <MX_GPIO_Init+0x384>)
 8008adc:	695a      	ldr	r2, [r3, #20]
 8008ade:	4bd7      	ldr	r3, [pc, #860]	; (8008e3c <MX_GPIO_Init+0x384>)
 8008ae0:	2180      	movs	r1, #128	; 0x80
 8008ae2:	03c9      	lsls	r1, r1, #15
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	615a      	str	r2, [r3, #20]
 8008ae8:	4bd4      	ldr	r3, [pc, #848]	; (8008e3c <MX_GPIO_Init+0x384>)
 8008aea:	695a      	ldr	r2, [r3, #20]
 8008aec:	2380      	movs	r3, #128	; 0x80
 8008aee:	03db      	lsls	r3, r3, #15
 8008af0:	4013      	ands	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008af6:	4bd1      	ldr	r3, [pc, #836]	; (8008e3c <MX_GPIO_Init+0x384>)
 8008af8:	695a      	ldr	r2, [r3, #20]
 8008afa:	4bd0      	ldr	r3, [pc, #832]	; (8008e3c <MX_GPIO_Init+0x384>)
 8008afc:	2180      	movs	r1, #128	; 0x80
 8008afe:	0289      	lsls	r1, r1, #10
 8008b00:	430a      	orrs	r2, r1
 8008b02:	615a      	str	r2, [r3, #20]
 8008b04:	4bcd      	ldr	r3, [pc, #820]	; (8008e3c <MX_GPIO_Init+0x384>)
 8008b06:	695a      	ldr	r2, [r3, #20]
 8008b08:	2380      	movs	r3, #128	; 0x80
 8008b0a:	029b      	lsls	r3, r3, #10
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	60bb      	str	r3, [r7, #8]
 8008b10:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b12:	4bca      	ldr	r3, [pc, #808]	; (8008e3c <MX_GPIO_Init+0x384>)
 8008b14:	695a      	ldr	r2, [r3, #20]
 8008b16:	4bc9      	ldr	r3, [pc, #804]	; (8008e3c <MX_GPIO_Init+0x384>)
 8008b18:	2180      	movs	r1, #128	; 0x80
 8008b1a:	02c9      	lsls	r1, r1, #11
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	615a      	str	r2, [r3, #20]
 8008b20:	4bc6      	ldr	r3, [pc, #792]	; (8008e3c <MX_GPIO_Init+0x384>)
 8008b22:	695a      	ldr	r2, [r3, #20]
 8008b24:	2380      	movs	r3, #128	; 0x80
 8008b26:	02db      	lsls	r3, r3, #11
 8008b28:	4013      	ands	r3, r2
 8008b2a:	607b      	str	r3, [r7, #4]
 8008b2c:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = DIR1_Pin;
 8008b2e:	2414      	movs	r4, #20
 8008b30:	193b      	adds	r3, r7, r4
 8008b32:	2210      	movs	r2, #16
 8008b34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b36:	193b      	adds	r3, r7, r4
 8008b38:	2201      	movs	r2, #1
 8008b3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b3c:	193b      	adds	r3, r7, r4
 8008b3e:	2200      	movs	r2, #0
 8008b40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b42:	193b      	adds	r3, r7, r4
 8008b44:	2200      	movs	r2, #0
 8008b46:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DIR1_GPIO_Port, &GPIO_InitStruct);
 8008b48:	193a      	adds	r2, r7, r4
 8008b4a:	2390      	movs	r3, #144	; 0x90
 8008b4c:	05db      	lsls	r3, r3, #23
 8008b4e:	0011      	movs	r1, r2
 8008b50:	0018      	movs	r0, r3
 8008b52:	f7f8 fb57 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 8008b56:	2390      	movs	r3, #144	; 0x90
 8008b58:	05db      	lsls	r3, r3, #23
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2120      	movs	r1, #32
 8008b5e:	0018      	movs	r0, r3
 8008b60:	f7f8 fce9 	bl	8001536 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = DIR2_Pin;
 8008b64:	193b      	adds	r3, r7, r4
 8008b66:	2220      	movs	r2, #32
 8008b68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b6a:	193b      	adds	r3, r7, r4
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b70:	193b      	adds	r3, r7, r4
 8008b72:	2200      	movs	r2, #0
 8008b74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b76:	193b      	adds	r3, r7, r4
 8008b78:	2200      	movs	r2, #0
 8008b7a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 8008b7c:	193a      	adds	r2, r7, r4
 8008b7e:	2390      	movs	r3, #144	; 0x90
 8008b80:	05db      	lsls	r3, r3, #23
 8008b82:	0011      	movs	r1, r2
 8008b84:	0018      	movs	r0, r3
 8008b86:	f7f8 fb3d 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 8008b8a:	2390      	movs	r3, #144	; 0x90
 8008b8c:	05db      	lsls	r3, r3, #23
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2120      	movs	r1, #32
 8008b92:	0018      	movs	r0, r3
 8008b94:	f7f8 fccf 	bl	8001536 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = DIR3_Pin;
 8008b98:	193b      	adds	r3, r7, r4
 8008b9a:	2240      	movs	r2, #64	; 0x40
 8008b9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b9e:	193b      	adds	r3, r7, r4
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ba4:	193b      	adds	r3, r7, r4
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008baa:	193b      	adds	r3, r7, r4
 8008bac:	2200      	movs	r2, #0
 8008bae:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DIR3_GPIO_Port, &GPIO_InitStruct);
 8008bb0:	193a      	adds	r2, r7, r4
 8008bb2:	2390      	movs	r3, #144	; 0x90
 8008bb4:	05db      	lsls	r3, r3, #23
 8008bb6:	0011      	movs	r1, r2
 8008bb8:	0018      	movs	r0, r3
 8008bba:	f7f8 fb23 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(DIR3_GPIO_Port, DIR3_Pin, GPIO_PIN_RESET);
 8008bbe:	2390      	movs	r3, #144	; 0x90
 8008bc0:	05db      	lsls	r3, r3, #23
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	2140      	movs	r1, #64	; 0x40
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	f7f8 fcb5 	bl	8001536 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = DIR4_Pin;
 8008bcc:	193b      	adds	r3, r7, r4
 8008bce:	2201      	movs	r2, #1
 8008bd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bd2:	193b      	adds	r3, r7, r4
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bd8:	193b      	adds	r3, r7, r4
 8008bda:	2200      	movs	r2, #0
 8008bdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bde:	193b      	adds	r3, r7, r4
 8008be0:	2200      	movs	r2, #0
 8008be2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DIR4_GPIO_Port, &GPIO_InitStruct);
 8008be4:	193b      	adds	r3, r7, r4
 8008be6:	4a96      	ldr	r2, [pc, #600]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008be8:	0019      	movs	r1, r3
 8008bea:	0010      	movs	r0, r2
 8008bec:	f7f8 fb0a 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(DIR4_GPIO_Port, DIR4_Pin, GPIO_PIN_RESET);
 8008bf0:	4b93      	ldr	r3, [pc, #588]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	0018      	movs	r0, r3
 8008bf8:	f7f8 fc9d 	bl	8001536 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = DIR5_Pin;
 8008bfc:	0021      	movs	r1, r4
 8008bfe:	187b      	adds	r3, r7, r1
 8008c00:	2204      	movs	r2, #4
 8008c02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c04:	187b      	adds	r3, r7, r1
 8008c06:	2201      	movs	r2, #1
 8008c08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c0a:	187b      	adds	r3, r7, r1
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c10:	187b      	adds	r3, r7, r1
 8008c12:	2200      	movs	r2, #0
 8008c14:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DIR5_GPIO_Port, &GPIO_InitStruct);
 8008c16:	000c      	movs	r4, r1
 8008c18:	187b      	adds	r3, r7, r1
 8008c1a:	4a89      	ldr	r2, [pc, #548]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008c1c:	0019      	movs	r1, r3
 8008c1e:	0010      	movs	r0, r2
 8008c20:	f7f8 faf0 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(DIR5_GPIO_Port, DIR5_Pin, GPIO_PIN_RESET);
 8008c24:	4b86      	ldr	r3, [pc, #536]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	2104      	movs	r1, #4
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	f7f8 fc83 	bl	8001536 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = DIR6_Pin;
 8008c30:	0021      	movs	r1, r4
 8008c32:	187b      	adds	r3, r7, r1
 8008c34:	2280      	movs	r2, #128	; 0x80
 8008c36:	0112      	lsls	r2, r2, #4
 8008c38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c3a:	187b      	adds	r3, r7, r1
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c40:	187b      	adds	r3, r7, r1
 8008c42:	2200      	movs	r2, #0
 8008c44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c46:	187b      	adds	r3, r7, r1
 8008c48:	2200      	movs	r2, #0
 8008c4a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DIR6_GPIO_Port, &GPIO_InitStruct);
 8008c4c:	000c      	movs	r4, r1
 8008c4e:	187b      	adds	r3, r7, r1
 8008c50:	4a7b      	ldr	r2, [pc, #492]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008c52:	0019      	movs	r1, r3
 8008c54:	0010      	movs	r0, r2
 8008c56:	f7f8 fad5 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(DIR6_GPIO_Port, DIR6_Pin, GPIO_PIN_RESET);
 8008c5a:	2380      	movs	r3, #128	; 0x80
 8008c5c:	011b      	lsls	r3, r3, #4
 8008c5e:	4878      	ldr	r0, [pc, #480]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	0019      	movs	r1, r3
 8008c64:	f7f8 fc67 	bl	8001536 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = MUX_A_Pin;
 8008c68:	193b      	adds	r3, r7, r4
 8008c6a:	2280      	movs	r2, #128	; 0x80
 8008c6c:	0192      	lsls	r2, r2, #6
 8008c6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c70:	193b      	adds	r3, r7, r4
 8008c72:	2201      	movs	r2, #1
 8008c74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c76:	193b      	adds	r3, r7, r4
 8008c78:	2200      	movs	r2, #0
 8008c7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c7c:	193b      	adds	r3, r7, r4
 8008c7e:	2200      	movs	r2, #0
 8008c80:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(MUX_A_GPIO_Port, &GPIO_InitStruct);
 8008c82:	193b      	adds	r3, r7, r4
 8008c84:	4a6f      	ldr	r2, [pc, #444]	; (8008e44 <MX_GPIO_Init+0x38c>)
 8008c86:	0019      	movs	r1, r3
 8008c88:	0010      	movs	r0, r2
 8008c8a:	f7f8 fabb 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(MUX_A_GPIO_Port, MUX_A_Pin, GPIO_PIN_RESET);
 8008c8e:	2380      	movs	r3, #128	; 0x80
 8008c90:	019b      	lsls	r3, r3, #6
 8008c92:	486c      	ldr	r0, [pc, #432]	; (8008e44 <MX_GPIO_Init+0x38c>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	0019      	movs	r1, r3
 8008c98:	f7f8 fc4d 	bl	8001536 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = MUX_B_Pin;
 8008c9c:	193b      	adds	r3, r7, r4
 8008c9e:	2280      	movs	r2, #128	; 0x80
 8008ca0:	01d2      	lsls	r2, r2, #7
 8008ca2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ca4:	193b      	adds	r3, r7, r4
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008caa:	193b      	adds	r3, r7, r4
 8008cac:	2200      	movs	r2, #0
 8008cae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cb0:	193b      	adds	r3, r7, r4
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(MUX_B_GPIO_Port, &GPIO_InitStruct);
 8008cb6:	193b      	adds	r3, r7, r4
 8008cb8:	4a62      	ldr	r2, [pc, #392]	; (8008e44 <MX_GPIO_Init+0x38c>)
 8008cba:	0019      	movs	r1, r3
 8008cbc:	0010      	movs	r0, r2
 8008cbe:	f7f8 faa1 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(MUX_B_GPIO_Port, MUX_B_Pin, GPIO_PIN_RESET);
 8008cc2:	2380      	movs	r3, #128	; 0x80
 8008cc4:	01db      	lsls	r3, r3, #7
 8008cc6:	485f      	ldr	r0, [pc, #380]	; (8008e44 <MX_GPIO_Init+0x38c>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	0019      	movs	r1, r3
 8008ccc:	f7f8 fc33 	bl	8001536 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = MUX_C_Pin;
 8008cd0:	193b      	adds	r3, r7, r4
 8008cd2:	2280      	movs	r2, #128	; 0x80
 8008cd4:	0212      	lsls	r2, r2, #8
 8008cd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008cd8:	193b      	adds	r3, r7, r4
 8008cda:	2201      	movs	r2, #1
 8008cdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cde:	193b      	adds	r3, r7, r4
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ce4:	193b      	adds	r3, r7, r4
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(MUX_C_GPIO_Port, &GPIO_InitStruct);
 8008cea:	193b      	adds	r3, r7, r4
 8008cec:	4a55      	ldr	r2, [pc, #340]	; (8008e44 <MX_GPIO_Init+0x38c>)
 8008cee:	0019      	movs	r1, r3
 8008cf0:	0010      	movs	r0, r2
 8008cf2:	f7f8 fa87 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(MUX_C_GPIO_Port, MUX_C_Pin, GPIO_PIN_RESET);
 8008cf6:	2380      	movs	r3, #128	; 0x80
 8008cf8:	021b      	lsls	r3, r3, #8
 8008cfa:	4852      	ldr	r0, [pc, #328]	; (8008e44 <MX_GPIO_Init+0x38c>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	0019      	movs	r1, r3
 8008d00:	f7f8 fc19 	bl	8001536 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = MUX_D_Pin;
 8008d04:	193b      	adds	r3, r7, r4
 8008d06:	2202      	movs	r2, #2
 8008d08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d0a:	193b      	adds	r3, r7, r4
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d10:	193b      	adds	r3, r7, r4
 8008d12:	2200      	movs	r2, #0
 8008d14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d16:	193b      	adds	r3, r7, r4
 8008d18:	2200      	movs	r2, #0
 8008d1a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(MUX_D_GPIO_Port, &GPIO_InitStruct);
 8008d1c:	193b      	adds	r3, r7, r4
 8008d1e:	4a4a      	ldr	r2, [pc, #296]	; (8008e48 <MX_GPIO_Init+0x390>)
 8008d20:	0019      	movs	r1, r3
 8008d22:	0010      	movs	r0, r2
 8008d24:	f7f8 fa6e 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(MUX_D_GPIO_Port, MUX_D_Pin, GPIO_PIN_RESET);
 8008d28:	4b47      	ldr	r3, [pc, #284]	; (8008e48 <MX_GPIO_Init+0x390>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	2102      	movs	r1, #2
 8008d2e:	0018      	movs	r0, r3
 8008d30:	f7f8 fc01 	bl	8001536 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = CAN_EN_Pin;
 8008d34:	193b      	adds	r3, r7, r4
 8008d36:	2208      	movs	r2, #8
 8008d38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d3a:	193b      	adds	r3, r7, r4
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d40:	193b      	adds	r3, r7, r4
 8008d42:	2200      	movs	r2, #0
 8008d44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d46:	193b      	adds	r3, r7, r4
 8008d48:	2200      	movs	r2, #0
 8008d4a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(CAN_EN_GPIO_Port, &GPIO_InitStruct);
 8008d4c:	193b      	adds	r3, r7, r4
 8008d4e:	4a3c      	ldr	r2, [pc, #240]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008d50:	0019      	movs	r1, r3
 8008d52:	0010      	movs	r0, r2
 8008d54:	f7f8 fa56 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(CAN_EN_GPIO_Port, CAN_EN_Pin, GPIO_PIN_RESET);
 8008d58:	4b39      	ldr	r3, [pc, #228]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2108      	movs	r1, #8
 8008d5e:	0018      	movs	r0, r3
 8008d60:	f7f8 fbe9 	bl	8001536 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PWR_EN_Pin;
 8008d64:	193b      	adds	r3, r7, r4
 8008d66:	2210      	movs	r2, #16
 8008d68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d6a:	193b      	adds	r3, r7, r4
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d70:	193b      	adds	r3, r7, r4
 8008d72:	2200      	movs	r2, #0
 8008d74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d76:	193b      	adds	r3, r7, r4
 8008d78:	2200      	movs	r2, #0
 8008d7a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8008d7c:	193b      	adds	r3, r7, r4
 8008d7e:	4a30      	ldr	r2, [pc, #192]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008d80:	0019      	movs	r1, r3
 8008d82:	0010      	movs	r0, r2
 8008d84:	f7f8 fa3e 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PWR_EN_GPIO_Port, PWR_EN_Pin, GPIO_PIN_RESET);
 8008d88:	4b2d      	ldr	r3, [pc, #180]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	2110      	movs	r1, #16
 8008d8e:	0018      	movs	r0, r3
 8008d90:	f7f8 fbd1 	bl	8001536 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = RS485_EN_Pin;
 8008d94:	0021      	movs	r1, r4
 8008d96:	187b      	adds	r3, r7, r1
 8008d98:	2220      	movs	r2, #32
 8008d9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d9c:	187b      	adds	r3, r7, r1
 8008d9e:	2201      	movs	r2, #1
 8008da0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008da2:	187b      	adds	r3, r7, r1
 8008da4:	2200      	movs	r2, #0
 8008da6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008da8:	187b      	adds	r3, r7, r1
 8008daa:	2200      	movs	r2, #0
 8008dac:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 8008dae:	000c      	movs	r4, r1
 8008db0:	187b      	adds	r3, r7, r1
 8008db2:	4a23      	ldr	r2, [pc, #140]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008db4:	0019      	movs	r1, r3
 8008db6:	0010      	movs	r0, r2
 8008db8:	f7f8 fa24 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);
 8008dbc:	4b20      	ldr	r3, [pc, #128]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2120      	movs	r1, #32
 8008dc2:	0018      	movs	r0, r3
 8008dc4:	f7f8 fbb7 	bl	8001536 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PC_RS485_EN_Pin;
 8008dc8:	0021      	movs	r1, r4
 8008dca:	187b      	adds	r3, r7, r1
 8008dcc:	2280      	movs	r2, #128	; 0x80
 8008dce:	01d2      	lsls	r2, r2, #7
 8008dd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008dd2:	187b      	adds	r3, r7, r1
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dd8:	187b      	adds	r3, r7, r1
 8008dda:	2200      	movs	r2, #0
 8008ddc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dde:	187b      	adds	r3, r7, r1
 8008de0:	2200      	movs	r2, #0
 8008de2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(PC_RS485_EN_GPIO_Port, &GPIO_InitStruct);
 8008de4:	000c      	movs	r4, r1
 8008de6:	187b      	adds	r3, r7, r1
 8008de8:	4a15      	ldr	r2, [pc, #84]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008dea:	0019      	movs	r1, r3
 8008dec:	0010      	movs	r0, r2
 8008dee:	f7f8 fa09 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PC_RS485_EN_GPIO_Port, PC_RS485_EN_Pin, GPIO_PIN_RESET);
 8008df2:	2380      	movs	r3, #128	; 0x80
 8008df4:	01db      	lsls	r3, r3, #7
 8008df6:	4812      	ldr	r0, [pc, #72]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	0019      	movs	r1, r3
 8008dfc:	f7f8 fb9b 	bl	8001536 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = EXT_PULLUP_Pin;
 8008e00:	193b      	adds	r3, r7, r4
 8008e02:	2280      	movs	r2, #128	; 0x80
 8008e04:	0152      	lsls	r2, r2, #5
 8008e06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e08:	193b      	adds	r3, r7, r4
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e0e:	193b      	adds	r3, r7, r4
 8008e10:	2200      	movs	r2, #0
 8008e12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e14:	193b      	adds	r3, r7, r4
 8008e16:	2200      	movs	r2, #0
 8008e18:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(EXT_PULLUP_GPIO_Port, &GPIO_InitStruct);
 8008e1a:	193b      	adds	r3, r7, r4
 8008e1c:	4a08      	ldr	r2, [pc, #32]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008e1e:	0019      	movs	r1, r3
 8008e20:	0010      	movs	r0, r2
 8008e22:	f7f8 f9ef 	bl	8001204 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(EXT_PULLUP_GPIO_Port, EXT_PULLUP_Pin, GPIO_PIN_RESET);
 8008e26:	2380      	movs	r3, #128	; 0x80
 8008e28:	015b      	lsls	r3, r3, #5
 8008e2a:	4805      	ldr	r0, [pc, #20]	; (8008e40 <MX_GPIO_Init+0x388>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	0019      	movs	r1, r3
 8008e30:	f7f8 fb81 	bl	8001536 <HAL_GPIO_WritePin>
}
 8008e34:	46c0      	nop			; (mov r8, r8)
 8008e36:	46bd      	mov	sp, r7
 8008e38:	b00b      	add	sp, #44	; 0x2c
 8008e3a:	bd90      	pop	{r4, r7, pc}
 8008e3c:	40021000 	.word	0x40021000
 8008e40:	48000400 	.word	0x48000400
 8008e44:	48000800 	.word	0x48000800
 8008e48:	48001400 	.word	0x48001400

08008e4c <MX_I2C1_Init>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
void MX_I2C1_Init(void) {
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	af00      	add	r7, sp, #0

    hi2c1.Instance = I2C1;
 8008e50:	4b1b      	ldr	r3, [pc, #108]	; (8008ec0 <MX_I2C1_Init+0x74>)
 8008e52:	4a1c      	ldr	r2, [pc, #112]	; (8008ec4 <MX_I2C1_Init+0x78>)
 8008e54:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x20303E5D;
 8008e56:	4b1a      	ldr	r3, [pc, #104]	; (8008ec0 <MX_I2C1_Init+0x74>)
 8008e58:	4a1b      	ldr	r2, [pc, #108]	; (8008ec8 <MX_I2C1_Init+0x7c>)
 8008e5a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8008e5c:	4b18      	ldr	r3, [pc, #96]	; (8008ec0 <MX_I2C1_Init+0x74>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008e62:	4b17      	ldr	r3, [pc, #92]	; (8008ec0 <MX_I2C1_Init+0x74>)
 8008e64:	2201      	movs	r2, #1
 8008e66:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008e68:	4b15      	ldr	r3, [pc, #84]	; (8008ec0 <MX_I2C1_Init+0x74>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8008e6e:	4b14      	ldr	r3, [pc, #80]	; (8008ec0 <MX_I2C1_Init+0x74>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008e74:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <MX_I2C1_Init+0x74>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008e7a:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <MX_I2C1_Init+0x74>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008e80:	4b0f      	ldr	r3, [pc, #60]	; (8008ec0 <MX_I2C1_Init+0x74>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8008e86:	4b0e      	ldr	r3, [pc, #56]	; (8008ec0 <MX_I2C1_Init+0x74>)
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f7f8 fb9f 	bl	80015cc <HAL_I2C_Init>
 8008e8e:	1e03      	subs	r3, r0, #0
 8008e90:	d001      	beq.n	8008e96 <MX_I2C1_Init+0x4a>
      Error_Handler();
 8008e92:	f7fd f853 	bl	8005f3c <Error_Handler>
    }
    /** Configure Analogue filter
    */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8008e96:	4b0a      	ldr	r3, [pc, #40]	; (8008ec0 <MX_I2C1_Init+0x74>)
 8008e98:	2100      	movs	r1, #0
 8008e9a:	0018      	movs	r0, r3
 8008e9c:	f7f9 fe10 	bl	8002ac0 <HAL_I2CEx_ConfigAnalogFilter>
 8008ea0:	1e03      	subs	r3, r0, #0
 8008ea2:	d001      	beq.n	8008ea8 <MX_I2C1_Init+0x5c>
      Error_Handler();
 8008ea4:	f7fd f84a 	bl	8005f3c <Error_Handler>
    }
    /** Configure Digital filter
    */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8008ea8:	4b05      	ldr	r3, [pc, #20]	; (8008ec0 <MX_I2C1_Init+0x74>)
 8008eaa:	2100      	movs	r1, #0
 8008eac:	0018      	movs	r0, r3
 8008eae:	f7f9 fe53 	bl	8002b58 <HAL_I2CEx_ConfigDigitalFilter>
 8008eb2:	1e03      	subs	r3, r0, #0
 8008eb4:	d001      	beq.n	8008eba <MX_I2C1_Init+0x6e>
      Error_Handler();
 8008eb6:	f7fd f841 	bl	8005f3c <Error_Handler>
    }
}
 8008eba:	46c0      	nop			; (mov r8, r8)
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	2000127c 	.word	0x2000127c
 8008ec4:	40005400 	.word	0x40005400
 8008ec8:	20303e5d 	.word	0x20303e5d

08008ecc <HAL_I2C_MspInit>:

// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008ecc:	b590      	push	{r4, r7, lr}
 8008ece:	b08b      	sub	sp, #44	; 0x2c
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ed4:	2314      	movs	r3, #20
 8008ed6:	18fb      	adds	r3, r7, r3
 8008ed8:	0018      	movs	r0, r3
 8008eda:	2314      	movs	r3, #20
 8008edc:	001a      	movs	r2, r3
 8008ede:	2100      	movs	r1, #0
 8008ee0:	f000 fd8a 	bl	80099f8 <memset>
  if(i2cHandle->Instance==I2C1)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a42      	ldr	r2, [pc, #264]	; (8008ff4 <HAL_I2C_MspInit+0x128>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d000      	beq.n	8008ef0 <HAL_I2C_MspInit+0x24>
 8008eee:	e07d      	b.n	8008fec <HAL_I2C_MspInit+0x120>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ef0:	4b41      	ldr	r3, [pc, #260]	; (8008ff8 <HAL_I2C_MspInit+0x12c>)
 8008ef2:	695a      	ldr	r2, [r3, #20]
 8008ef4:	4b40      	ldr	r3, [pc, #256]	; (8008ff8 <HAL_I2C_MspInit+0x12c>)
 8008ef6:	2180      	movs	r1, #128	; 0x80
 8008ef8:	02c9      	lsls	r1, r1, #11
 8008efa:	430a      	orrs	r2, r1
 8008efc:	615a      	str	r2, [r3, #20]
 8008efe:	4b3e      	ldr	r3, [pc, #248]	; (8008ff8 <HAL_I2C_MspInit+0x12c>)
 8008f00:	695a      	ldr	r2, [r3, #20]
 8008f02:	2380      	movs	r3, #128	; 0x80
 8008f04:	02db      	lsls	r3, r3, #11
 8008f06:	4013      	ands	r3, r2
 8008f08:	613b      	str	r3, [r7, #16]
 8008f0a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8008f0c:	2114      	movs	r1, #20
 8008f0e:	187b      	adds	r3, r7, r1
 8008f10:	2240      	movs	r2, #64	; 0x40
 8008f12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008f14:	187b      	adds	r3, r7, r1
 8008f16:	2212      	movs	r2, #18
 8008f18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f1a:	187b      	adds	r3, r7, r1
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f20:	187b      	adds	r3, r7, r1
 8008f22:	2203      	movs	r2, #3
 8008f24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8008f26:	187b      	adds	r3, r7, r1
 8008f28:	2201      	movs	r2, #1
 8008f2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8008f2c:	000c      	movs	r4, r1
 8008f2e:	187b      	adds	r3, r7, r1
 8008f30:	4a32      	ldr	r2, [pc, #200]	; (8008ffc <HAL_I2C_MspInit+0x130>)
 8008f32:	0019      	movs	r1, r3
 8008f34:	0010      	movs	r0, r2
 8008f36:	f7f8 f965 	bl	8001204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8008f3a:	0021      	movs	r1, r4
 8008f3c:	187b      	adds	r3, r7, r1
 8008f3e:	2280      	movs	r2, #128	; 0x80
 8008f40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008f42:	187b      	adds	r3, r7, r1
 8008f44:	2212      	movs	r2, #18
 8008f46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f48:	187b      	adds	r3, r7, r1
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f4e:	187b      	adds	r3, r7, r1
 8008f50:	2203      	movs	r2, #3
 8008f52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8008f54:	187b      	adds	r3, r7, r1
 8008f56:	2201      	movs	r2, #1
 8008f58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8008f5a:	187b      	adds	r3, r7, r1
 8008f5c:	4a27      	ldr	r2, [pc, #156]	; (8008ffc <HAL_I2C_MspInit+0x130>)
 8008f5e:	0019      	movs	r1, r3
 8008f60:	0010      	movs	r0, r2
 8008f62:	f7f8 f94f 	bl	8001204 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008f66:	4b24      	ldr	r3, [pc, #144]	; (8008ff8 <HAL_I2C_MspInit+0x12c>)
 8008f68:	69da      	ldr	r2, [r3, #28]
 8008f6a:	4b23      	ldr	r3, [pc, #140]	; (8008ff8 <HAL_I2C_MspInit+0x12c>)
 8008f6c:	2180      	movs	r1, #128	; 0x80
 8008f6e:	0389      	lsls	r1, r1, #14
 8008f70:	430a      	orrs	r2, r1
 8008f72:	61da      	str	r2, [r3, #28]
 8008f74:	4b20      	ldr	r3, [pc, #128]	; (8008ff8 <HAL_I2C_MspInit+0x12c>)
 8008f76:	69da      	ldr	r2, [r3, #28]
 8008f78:	2380      	movs	r3, #128	; 0x80
 8008f7a:	039b      	lsls	r3, r3, #14
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8008f82:	4b1f      	ldr	r3, [pc, #124]	; (8009000 <HAL_I2C_MspInit+0x134>)
 8008f84:	4a1f      	ldr	r2, [pc, #124]	; (8009004 <HAL_I2C_MspInit+0x138>)
 8008f86:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008f88:	4b1d      	ldr	r3, [pc, #116]	; (8009000 <HAL_I2C_MspInit+0x134>)
 8008f8a:	2210      	movs	r2, #16
 8008f8c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f8e:	4b1c      	ldr	r3, [pc, #112]	; (8009000 <HAL_I2C_MspInit+0x134>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008f94:	4b1a      	ldr	r3, [pc, #104]	; (8009000 <HAL_I2C_MspInit+0x134>)
 8008f96:	2280      	movs	r2, #128	; 0x80
 8008f98:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008f9a:	4b19      	ldr	r3, [pc, #100]	; (8009000 <HAL_I2C_MspInit+0x134>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008fa0:	4b17      	ldr	r3, [pc, #92]	; (8009000 <HAL_I2C_MspInit+0x134>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8008fa6:	4b16      	ldr	r3, [pc, #88]	; (8009000 <HAL_I2C_MspInit+0x134>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008fac:	4b14      	ldr	r3, [pc, #80]	; (8009000 <HAL_I2C_MspInit+0x134>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK) {
 8008fb2:	4b13      	ldr	r3, [pc, #76]	; (8009000 <HAL_I2C_MspInit+0x134>)
 8008fb4:	0018      	movs	r0, r3
 8008fb6:	f7f7 ff3b 	bl	8000e30 <HAL_DMA_Init>
 8008fba:	1e03      	subs	r3, r0, #0
 8008fbc:	d001      	beq.n	8008fc2 <HAL_I2C_MspInit+0xf6>
      Error_Handler();
 8008fbe:	f7fc ffbd 	bl	8005f3c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_I2C1_DMA_CH76);
 8008fc2:	4b11      	ldr	r3, [pc, #68]	; (8009008 <HAL_I2C_MspInit+0x13c>)
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	4b10      	ldr	r3, [pc, #64]	; (8009008 <HAL_I2C_MspInit+0x13c>)
 8008fc8:	2180      	movs	r1, #128	; 0x80
 8008fca:	0509      	lsls	r1, r1, #20
 8008fcc:	430a      	orrs	r2, r1
 8008fce:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(i2cHandle, hdmatx, hdma_i2c1_tx);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a0b      	ldr	r2, [pc, #44]	; (8009000 <HAL_I2C_MspInit+0x134>)
 8008fd4:	639a      	str	r2, [r3, #56]	; 0x38
 8008fd6:	4b0a      	ldr	r3, [pc, #40]	; (8009000 <HAL_I2C_MspInit+0x134>)
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2100      	movs	r1, #0
 8008fe0:	2017      	movs	r0, #23
 8008fe2:	f7f7 fdf9 	bl	8000bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8008fe6:	2017      	movs	r0, #23
 8008fe8:	f7f7 fe0b 	bl	8000c02 <HAL_NVIC_EnableIRQ>
  }
}
 8008fec:	46c0      	nop			; (mov r8, r8)
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	b00b      	add	sp, #44	; 0x2c
 8008ff2:	bd90      	pop	{r4, r7, pc}
 8008ff4:	40005400 	.word	0x40005400
 8008ff8:	40021000 	.word	0x40021000
 8008ffc:	48000400 	.word	0x48000400
 8009000:	200011b0 	.word	0x200011b0
 8009004:	4002006c 	.word	0x4002006c
 8009008:	40010000 	.word	0x40010000

0800900c <HAL_TIM_MspPostInit>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *timHandle) {
 800900c:	b580      	push	{r7, lr}
 800900e:	b088      	sub	sp, #32
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;

  if ( timHandle->Instance == TIM1 ) {
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a57      	ldr	r2, [pc, #348]	; (8009178 <HAL_TIM_MspPostInit+0x16c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d118      	bne.n	8009050 <HAL_TIM_MspPostInit+0x44>
    /**TIM1 GPIO Configuration
     PA8    ------> TIM1_CH1
     */
    GPIO_InitStruct.Pin = DIG_IO6_Pin;
 800901e:	210c      	movs	r1, #12
 8009020:	187b      	adds	r3, r7, r1
 8009022:	2280      	movs	r2, #128	; 0x80
 8009024:	0052      	lsls	r2, r2, #1
 8009026:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009028:	187b      	adds	r3, r7, r1
 800902a:	2202      	movs	r2, #2
 800902c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800902e:	187b      	adds	r3, r7, r1
 8009030:	2200      	movs	r2, #0
 8009032:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009034:	187b      	adds	r3, r7, r1
 8009036:	2200      	movs	r2, #0
 8009038:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800903a:	187b      	adds	r3, r7, r1
 800903c:	2202      	movs	r2, #2
 800903e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init( DIG_IO6_GPIO_Port, &GPIO_InitStruct);
 8009040:	187a      	adds	r2, r7, r1
 8009042:	2390      	movs	r3, #144	; 0x90
 8009044:	05db      	lsls	r3, r3, #23
 8009046:	0011      	movs	r1, r2
 8009048:	0018      	movs	r0, r3
 800904a:	f7f8 f8db 	bl	8001204 <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
    HAL_GPIO_Init( DIG_IO3_GPIO_Port, &GPIO_InitStruct);
  }

}
 800904e:	e08f      	b.n	8009170 <HAL_TIM_MspPostInit+0x164>
  } else if ( timHandle->Instance == TIM2 ) {
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	2380      	movs	r3, #128	; 0x80
 8009056:	05db      	lsls	r3, r3, #23
 8009058:	429a      	cmp	r2, r3
 800905a:	d117      	bne.n	800908c <HAL_TIM_MspPostInit+0x80>
    GPIO_InitStruct.Pin = DIG_IO5_Pin;
 800905c:	210c      	movs	r1, #12
 800905e:	187b      	adds	r3, r7, r1
 8009060:	2280      	movs	r2, #128	; 0x80
 8009062:	00d2      	lsls	r2, r2, #3
 8009064:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009066:	187b      	adds	r3, r7, r1
 8009068:	2202      	movs	r2, #2
 800906a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800906c:	187b      	adds	r3, r7, r1
 800906e:	2200      	movs	r2, #0
 8009070:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009072:	187b      	adds	r3, r7, r1
 8009074:	2200      	movs	r2, #0
 8009076:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8009078:	187b      	adds	r3, r7, r1
 800907a:	2202      	movs	r2, #2
 800907c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init( DIG_IO5_GPIO_Port, &GPIO_InitStruct);
 800907e:	187b      	adds	r3, r7, r1
 8009080:	4a3e      	ldr	r2, [pc, #248]	; (800917c <HAL_TIM_MspPostInit+0x170>)
 8009082:	0019      	movs	r1, r3
 8009084:	0010      	movs	r0, r2
 8009086:	f7f8 f8bd 	bl	8001204 <HAL_GPIO_Init>
}
 800908a:	e071      	b.n	8009170 <HAL_TIM_MspPostInit+0x164>
  } else if ( timHandle->Instance == TIM3 ) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a3b      	ldr	r2, [pc, #236]	; (8009180 <HAL_TIM_MspPostInit+0x174>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d116      	bne.n	80090c4 <HAL_TIM_MspPostInit+0xb8>
    GPIO_InitStruct.Pin = DIG_IO4_Pin;
 8009096:	210c      	movs	r1, #12
 8009098:	187b      	adds	r3, r7, r1
 800909a:	2202      	movs	r2, #2
 800909c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800909e:	187b      	adds	r3, r7, r1
 80090a0:	2202      	movs	r2, #2
 80090a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090a4:	187b      	adds	r3, r7, r1
 80090a6:	2200      	movs	r2, #0
 80090a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090aa:	187b      	adds	r3, r7, r1
 80090ac:	2200      	movs	r2, #0
 80090ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80090b0:	187b      	adds	r3, r7, r1
 80090b2:	2201      	movs	r2, #1
 80090b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init( DIG_IO4_GPIO_Port, &GPIO_InitStruct);
 80090b6:	187b      	adds	r3, r7, r1
 80090b8:	4a30      	ldr	r2, [pc, #192]	; (800917c <HAL_TIM_MspPostInit+0x170>)
 80090ba:	0019      	movs	r1, r3
 80090bc:	0010      	movs	r0, r2
 80090be:	f7f8 f8a1 	bl	8001204 <HAL_GPIO_Init>
}
 80090c2:	e055      	b.n	8009170 <HAL_TIM_MspPostInit+0x164>
  } else if ( timHandle->Instance == TIM15 ) {
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a2e      	ldr	r2, [pc, #184]	; (8009184 <HAL_TIM_MspPostInit+0x178>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d117      	bne.n	80090fe <HAL_TIM_MspPostInit+0xf2>
    GPIO_InitStruct.Pin = DIG_IO1_Pin;
 80090ce:	210c      	movs	r1, #12
 80090d0:	187b      	adds	r3, r7, r1
 80090d2:	2208      	movs	r2, #8
 80090d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090d6:	187b      	adds	r3, r7, r1
 80090d8:	2202      	movs	r2, #2
 80090da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090dc:	187b      	adds	r3, r7, r1
 80090de:	2200      	movs	r2, #0
 80090e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090e2:	187b      	adds	r3, r7, r1
 80090e4:	2200      	movs	r2, #0
 80090e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 80090e8:	187b      	adds	r3, r7, r1
 80090ea:	2200      	movs	r2, #0
 80090ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init( DIG_IO1_GPIO_Port, &GPIO_InitStruct);
 80090ee:	187a      	adds	r2, r7, r1
 80090f0:	2390      	movs	r3, #144	; 0x90
 80090f2:	05db      	lsls	r3, r3, #23
 80090f4:	0011      	movs	r1, r2
 80090f6:	0018      	movs	r0, r3
 80090f8:	f7f8 f884 	bl	8001204 <HAL_GPIO_Init>
}
 80090fc:	e038      	b.n	8009170 <HAL_TIM_MspPostInit+0x164>
  } else if ( timHandle->Instance == TIM16 ) {
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a21      	ldr	r2, [pc, #132]	; (8009188 <HAL_TIM_MspPostInit+0x17c>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d117      	bne.n	8009138 <HAL_TIM_MspPostInit+0x12c>
    GPIO_InitStruct.Pin = DIG_IO2_Pin;
 8009108:	210c      	movs	r1, #12
 800910a:	187b      	adds	r3, r7, r1
 800910c:	2280      	movs	r2, #128	; 0x80
 800910e:	0052      	lsls	r2, r2, #1
 8009110:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009112:	187b      	adds	r3, r7, r1
 8009114:	2202      	movs	r2, #2
 8009116:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009118:	187b      	adds	r3, r7, r1
 800911a:	2200      	movs	r2, #0
 800911c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800911e:	187b      	adds	r3, r7, r1
 8009120:	2200      	movs	r2, #0
 8009122:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8009124:	187b      	adds	r3, r7, r1
 8009126:	2202      	movs	r2, #2
 8009128:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init( DIG_IO2_GPIO_Port, &GPIO_InitStruct);
 800912a:	187b      	adds	r3, r7, r1
 800912c:	4a13      	ldr	r2, [pc, #76]	; (800917c <HAL_TIM_MspPostInit+0x170>)
 800912e:	0019      	movs	r1, r3
 8009130:	0010      	movs	r0, r2
 8009132:	f7f8 f867 	bl	8001204 <HAL_GPIO_Init>
}
 8009136:	e01b      	b.n	8009170 <HAL_TIM_MspPostInit+0x164>
  } else if ( timHandle->Instance == TIM17 ) {
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a13      	ldr	r2, [pc, #76]	; (800918c <HAL_TIM_MspPostInit+0x180>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d116      	bne.n	8009170 <HAL_TIM_MspPostInit+0x164>
    GPIO_InitStruct.Pin = DIG_IO3_Pin;
 8009142:	210c      	movs	r1, #12
 8009144:	187b      	adds	r3, r7, r1
 8009146:	2280      	movs	r2, #128	; 0x80
 8009148:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800914a:	187b      	adds	r3, r7, r1
 800914c:	2202      	movs	r2, #2
 800914e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009150:	187b      	adds	r3, r7, r1
 8009152:	2200      	movs	r2, #0
 8009154:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009156:	187b      	adds	r3, r7, r1
 8009158:	2200      	movs	r2, #0
 800915a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 800915c:	187b      	adds	r3, r7, r1
 800915e:	2205      	movs	r2, #5
 8009160:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init( DIG_IO3_GPIO_Port, &GPIO_InitStruct);
 8009162:	187a      	adds	r2, r7, r1
 8009164:	2390      	movs	r3, #144	; 0x90
 8009166:	05db      	lsls	r3, r3, #23
 8009168:	0011      	movs	r1, r2
 800916a:	0018      	movs	r0, r3
 800916c:	f7f8 f84a 	bl	8001204 <HAL_GPIO_Init>
}
 8009170:	46c0      	nop			; (mov r8, r8)
 8009172:	46bd      	mov	sp, r7
 8009174:	b008      	add	sp, #32
 8009176:	bd80      	pop	{r7, pc}
 8009178:	40012c00 	.word	0x40012c00
 800917c:	48000400 	.word	0x48000400
 8009180:	40000400 	.word	0x40000400
 8009184:	40014000 	.word	0x40014000
 8009188:	40014400 	.word	0x40014400
 800918c:	40014800 	.word	0x40014800

08009190 <MX_USART1_UART_Init>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
void MX_USART1_UART_Init(void) {
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0

    huart1.Instance = USART1;
 8009194:	4b14      	ldr	r3, [pc, #80]	; (80091e8 <MX_USART1_UART_Init+0x58>)
 8009196:	4a15      	ldr	r2, [pc, #84]	; (80091ec <MX_USART1_UART_Init+0x5c>)
 8009198:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 800919a:	4b13      	ldr	r3, [pc, #76]	; (80091e8 <MX_USART1_UART_Init+0x58>)
 800919c:	22e1      	movs	r2, #225	; 0xe1
 800919e:	0252      	lsls	r2, r2, #9
 80091a0:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80091a2:	4b11      	ldr	r3, [pc, #68]	; (80091e8 <MX_USART1_UART_Init+0x58>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80091a8:	4b0f      	ldr	r3, [pc, #60]	; (80091e8 <MX_USART1_UART_Init+0x58>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80091ae:	4b0e      	ldr	r3, [pc, #56]	; (80091e8 <MX_USART1_UART_Init+0x58>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80091b4:	4b0c      	ldr	r3, [pc, #48]	; (80091e8 <MX_USART1_UART_Init+0x58>)
 80091b6:	220c      	movs	r2, #12
 80091b8:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80091ba:	4b0b      	ldr	r3, [pc, #44]	; (80091e8 <MX_USART1_UART_Init+0x58>)
 80091bc:	2200      	movs	r2, #0
 80091be:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80091c0:	4b09      	ldr	r3, [pc, #36]	; (80091e8 <MX_USART1_UART_Init+0x58>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80091c6:	4b08      	ldr	r3, [pc, #32]	; (80091e8 <MX_USART1_UART_Init+0x58>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80091cc:	4b06      	ldr	r3, [pc, #24]	; (80091e8 <MX_USART1_UART_Init+0x58>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 80091d2:	4b05      	ldr	r3, [pc, #20]	; (80091e8 <MX_USART1_UART_Init+0x58>)
 80091d4:	0018      	movs	r0, r3
 80091d6:	f7fa ff51 	bl	800407c <HAL_UART_Init>
 80091da:	1e03      	subs	r3, r0, #0
 80091dc:	d001      	beq.n	80091e2 <MX_USART1_UART_Init+0x52>
      Error_Handler();
 80091de:	f7fc fead 	bl	8005f3c <Error_Handler>
    }
}
 80091e2:	46c0      	nop			; (mov r8, r8)
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	20001e1c 	.word	0x20001e1c
 80091ec:	40013800 	.word	0x40013800

080091f0 <MX_USART2_UART_Init>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
void MX_USART2_UART_Init(void) {
 80091f0:	b580      	push	{r7, lr}
 80091f2:	af00      	add	r7, sp, #0

    huart2.Instance = USART2;
 80091f4:	4b14      	ldr	r3, [pc, #80]	; (8009248 <MX_USART2_UART_Init+0x58>)
 80091f6:	4a15      	ldr	r2, [pc, #84]	; (800924c <MX_USART2_UART_Init+0x5c>)
 80091f8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80091fa:	4b13      	ldr	r3, [pc, #76]	; (8009248 <MX_USART2_UART_Init+0x58>)
 80091fc:	22e1      	movs	r2, #225	; 0xe1
 80091fe:	0252      	lsls	r2, r2, #9
 8009200:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009202:	4b11      	ldr	r3, [pc, #68]	; (8009248 <MX_USART2_UART_Init+0x58>)
 8009204:	2200      	movs	r2, #0
 8009206:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8009208:	4b0f      	ldr	r3, [pc, #60]	; (8009248 <MX_USART2_UART_Init+0x58>)
 800920a:	2200      	movs	r2, #0
 800920c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800920e:	4b0e      	ldr	r3, [pc, #56]	; (8009248 <MX_USART2_UART_Init+0x58>)
 8009210:	2200      	movs	r2, #0
 8009212:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8009214:	4b0c      	ldr	r3, [pc, #48]	; (8009248 <MX_USART2_UART_Init+0x58>)
 8009216:	220c      	movs	r2, #12
 8009218:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800921a:	4b0b      	ldr	r3, [pc, #44]	; (8009248 <MX_USART2_UART_Init+0x58>)
 800921c:	2200      	movs	r2, #0
 800921e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009220:	4b09      	ldr	r3, [pc, #36]	; (8009248 <MX_USART2_UART_Init+0x58>)
 8009222:	2200      	movs	r2, #0
 8009224:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009226:	4b08      	ldr	r3, [pc, #32]	; (8009248 <MX_USART2_UART_Init+0x58>)
 8009228:	2200      	movs	r2, #0
 800922a:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800922c:	4b06      	ldr	r3, [pc, #24]	; (8009248 <MX_USART2_UART_Init+0x58>)
 800922e:	2200      	movs	r2, #0
 8009230:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8009232:	4b05      	ldr	r3, [pc, #20]	; (8009248 <MX_USART2_UART_Init+0x58>)
 8009234:	0018      	movs	r0, r3
 8009236:	f7fa ff21 	bl	800407c <HAL_UART_Init>
 800923a:	1e03      	subs	r3, r0, #0
 800923c:	d001      	beq.n	8009242 <MX_USART2_UART_Init+0x52>
      Error_Handler();
 800923e:	f7fc fe7d 	bl	8005f3c <Error_Handler>
    }
}
 8009242:	46c0      	nop			; (mov r8, r8)
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	200026e0 	.word	0x200026e0
 800924c:	40004400 	.word	0x40004400

08009250 <MX_USART4_UART_Init>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
void MX_USART4_UART_Init(void) {
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0

    huart4.Instance = USART4;
 8009254:	4b14      	ldr	r3, [pc, #80]	; (80092a8 <MX_USART4_UART_Init+0x58>)
 8009256:	4a15      	ldr	r2, [pc, #84]	; (80092ac <MX_USART4_UART_Init+0x5c>)
 8009258:	601a      	str	r2, [r3, #0]
    huart4.Init.BaudRate = 115200;
 800925a:	4b13      	ldr	r3, [pc, #76]	; (80092a8 <MX_USART4_UART_Init+0x58>)
 800925c:	22e1      	movs	r2, #225	; 0xe1
 800925e:	0252      	lsls	r2, r2, #9
 8009260:	605a      	str	r2, [r3, #4]
    huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8009262:	4b11      	ldr	r3, [pc, #68]	; (80092a8 <MX_USART4_UART_Init+0x58>)
 8009264:	2200      	movs	r2, #0
 8009266:	609a      	str	r2, [r3, #8]
    huart4.Init.StopBits = UART_STOPBITS_1;
 8009268:	4b0f      	ldr	r3, [pc, #60]	; (80092a8 <MX_USART4_UART_Init+0x58>)
 800926a:	2200      	movs	r2, #0
 800926c:	60da      	str	r2, [r3, #12]
    huart4.Init.Parity = UART_PARITY_NONE;
 800926e:	4b0e      	ldr	r3, [pc, #56]	; (80092a8 <MX_USART4_UART_Init+0x58>)
 8009270:	2200      	movs	r2, #0
 8009272:	611a      	str	r2, [r3, #16]
    huart4.Init.Mode = UART_MODE_TX_RX;
 8009274:	4b0c      	ldr	r3, [pc, #48]	; (80092a8 <MX_USART4_UART_Init+0x58>)
 8009276:	220c      	movs	r2, #12
 8009278:	615a      	str	r2, [r3, #20]
    huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800927a:	4b0b      	ldr	r3, [pc, #44]	; (80092a8 <MX_USART4_UART_Init+0x58>)
 800927c:	2200      	movs	r2, #0
 800927e:	619a      	str	r2, [r3, #24]
    huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009280:	4b09      	ldr	r3, [pc, #36]	; (80092a8 <MX_USART4_UART_Init+0x58>)
 8009282:	2200      	movs	r2, #0
 8009284:	61da      	str	r2, [r3, #28]
    huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009286:	4b08      	ldr	r3, [pc, #32]	; (80092a8 <MX_USART4_UART_Init+0x58>)
 8009288:	2200      	movs	r2, #0
 800928a:	621a      	str	r2, [r3, #32]
    huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800928c:	4b06      	ldr	r3, [pc, #24]	; (80092a8 <MX_USART4_UART_Init+0x58>)
 800928e:	2200      	movs	r2, #0
 8009290:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart4) != HAL_OK) {
 8009292:	4b05      	ldr	r3, [pc, #20]	; (80092a8 <MX_USART4_UART_Init+0x58>)
 8009294:	0018      	movs	r0, r3
 8009296:	f7fa fef1 	bl	800407c <HAL_UART_Init>
 800929a:	1e03      	subs	r3, r0, #0
 800929c:	d001      	beq.n	80092a2 <MX_USART4_UART_Init+0x52>
      Error_Handler();
 800929e:	f7fc fe4d 	bl	8005f3c <Error_Handler>
    }

}
 80092a2:	46c0      	nop			; (mov r8, r8)
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	2000262c 	.word	0x2000262c
 80092ac:	40004c00 	.word	0x40004c00

080092b0 <HAL_UART_MspInit>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 80092b0:	b590      	push	{r4, r7, lr}
 80092b2:	b08b      	sub	sp, #44	; 0x2c
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;

  if(uartHandle->Instance==USART1) {
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a9c      	ldr	r2, [pc, #624]	; (8009530 <HAL_UART_MspInit+0x280>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d16d      	bne.n	800939e <HAL_UART_MspInit+0xee>
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80092c2:	4b9c      	ldr	r3, [pc, #624]	; (8009534 <HAL_UART_MspInit+0x284>)
 80092c4:	699a      	ldr	r2, [r3, #24]
 80092c6:	4b9b      	ldr	r3, [pc, #620]	; (8009534 <HAL_UART_MspInit+0x284>)
 80092c8:	2180      	movs	r1, #128	; 0x80
 80092ca:	01c9      	lsls	r1, r1, #7
 80092cc:	430a      	orrs	r2, r1
 80092ce:	619a      	str	r2, [r3, #24]
 80092d0:	4b98      	ldr	r3, [pc, #608]	; (8009534 <HAL_UART_MspInit+0x284>)
 80092d2:	699a      	ldr	r2, [r3, #24]
 80092d4:	2380      	movs	r3, #128	; 0x80
 80092d6:	01db      	lsls	r3, r3, #7
 80092d8:	4013      	ands	r3, r2
 80092da:	613b      	str	r3, [r7, #16]
 80092dc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC_RS485_TXD_Pin;
 80092de:	2114      	movs	r1, #20
 80092e0:	187b      	adds	r3, r7, r1
 80092e2:	2280      	movs	r2, #128	; 0x80
 80092e4:	0092      	lsls	r2, r2, #2
 80092e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092e8:	187b      	adds	r3, r7, r1
 80092ea:	2202      	movs	r2, #2
 80092ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092ee:	187b      	adds	r3, r7, r1
 80092f0:	2200      	movs	r2, #0
 80092f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80092f4:	187b      	adds	r3, r7, r1
 80092f6:	2203      	movs	r2, #3
 80092f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80092fa:	187b      	adds	r3, r7, r1
 80092fc:	2201      	movs	r2, #1
 80092fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PC_RS485_TXD_GPIO_Port, &GPIO_InitStruct);
 8009300:	000c      	movs	r4, r1
 8009302:	187a      	adds	r2, r7, r1
 8009304:	2390      	movs	r3, #144	; 0x90
 8009306:	05db      	lsls	r3, r3, #23
 8009308:	0011      	movs	r1, r2
 800930a:	0018      	movs	r0, r3
 800930c:	f7f7 ff7a 	bl	8001204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PC_RS485_RXD_Pin;
 8009310:	0021      	movs	r1, r4
 8009312:	187b      	adds	r3, r7, r1
 8009314:	2280      	movs	r2, #128	; 0x80
 8009316:	00d2      	lsls	r2, r2, #3
 8009318:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800931a:	187b      	adds	r3, r7, r1
 800931c:	2202      	movs	r2, #2
 800931e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009320:	187b      	adds	r3, r7, r1
 8009322:	2200      	movs	r2, #0
 8009324:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009326:	187b      	adds	r3, r7, r1
 8009328:	2203      	movs	r2, #3
 800932a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800932c:	187b      	adds	r3, r7, r1
 800932e:	2201      	movs	r2, #1
 8009330:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PC_RS485_RXD_GPIO_Port, &GPIO_InitStruct);
 8009332:	187a      	adds	r2, r7, r1
 8009334:	2390      	movs	r3, #144	; 0x90
 8009336:	05db      	lsls	r3, r3, #23
 8009338:	0011      	movs	r1, r2
 800933a:	0018      	movs	r0, r3
 800933c:	f7f7 ff62 	bl	8001204 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8009340:	4b7d      	ldr	r3, [pc, #500]	; (8009538 <HAL_UART_MspInit+0x288>)
 8009342:	4a7e      	ldr	r2, [pc, #504]	; (800953c <HAL_UART_MspInit+0x28c>)
 8009344:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009346:	4b7c      	ldr	r3, [pc, #496]	; (8009538 <HAL_UART_MspInit+0x288>)
 8009348:	2210      	movs	r2, #16
 800934a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800934c:	4b7a      	ldr	r3, [pc, #488]	; (8009538 <HAL_UART_MspInit+0x288>)
 800934e:	2200      	movs	r2, #0
 8009350:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009352:	4b79      	ldr	r3, [pc, #484]	; (8009538 <HAL_UART_MspInit+0x288>)
 8009354:	2280      	movs	r2, #128	; 0x80
 8009356:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009358:	4b77      	ldr	r3, [pc, #476]	; (8009538 <HAL_UART_MspInit+0x288>)
 800935a:	2200      	movs	r2, #0
 800935c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800935e:	4b76      	ldr	r3, [pc, #472]	; (8009538 <HAL_UART_MspInit+0x288>)
 8009360:	2200      	movs	r2, #0
 8009362:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009364:	4b74      	ldr	r3, [pc, #464]	; (8009538 <HAL_UART_MspInit+0x288>)
 8009366:	2200      	movs	r2, #0
 8009368:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800936a:	4b73      	ldr	r3, [pc, #460]	; (8009538 <HAL_UART_MspInit+0x288>)
 800936c:	2200      	movs	r2, #0
 800936e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK) {
 8009370:	4b71      	ldr	r3, [pc, #452]	; (8009538 <HAL_UART_MspInit+0x288>)
 8009372:	0018      	movs	r0, r3
 8009374:	f7f7 fd5c 	bl	8000e30 <HAL_DMA_Init>
 8009378:	1e03      	subs	r3, r0, #0
 800937a:	d001      	beq.n	8009380 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800937c:	f7fc fdde 	bl	8005f3c <Error_Handler>
    }
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart1_tx);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a6d      	ldr	r2, [pc, #436]	; (8009538 <HAL_UART_MspInit+0x288>)
 8009384:	661a      	str	r2, [r3, #96]	; 0x60
 8009386:	4b6c      	ldr	r3, [pc, #432]	; (8009538 <HAL_UART_MspInit+0x288>)
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800938c:	2200      	movs	r2, #0
 800938e:	2100      	movs	r1, #0
 8009390:	201b      	movs	r0, #27
 8009392:	f7f7 fc21 	bl	8000bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009396:	201b      	movs	r0, #27
 8009398:	f7f7 fc33 	bl	8000c02 <HAL_NVIC_EnableIRQ>

    /* USART4 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
  }
}
 800939c:	e0c4      	b.n	8009528 <HAL_UART_MspInit+0x278>
  } else if(uartHandle->Instance==USART2) {
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a67      	ldr	r2, [pc, #412]	; (8009540 <HAL_UART_MspInit+0x290>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d150      	bne.n	800944a <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80093a8:	4b62      	ldr	r3, [pc, #392]	; (8009534 <HAL_UART_MspInit+0x284>)
 80093aa:	69da      	ldr	r2, [r3, #28]
 80093ac:	4b61      	ldr	r3, [pc, #388]	; (8009534 <HAL_UART_MspInit+0x284>)
 80093ae:	2180      	movs	r1, #128	; 0x80
 80093b0:	0289      	lsls	r1, r1, #10
 80093b2:	430a      	orrs	r2, r1
 80093b4:	61da      	str	r2, [r3, #28]
 80093b6:	4b5f      	ldr	r3, [pc, #380]	; (8009534 <HAL_UART_MspInit+0x284>)
 80093b8:	69da      	ldr	r2, [r3, #28]
 80093ba:	2380      	movs	r3, #128	; 0x80
 80093bc:	029b      	lsls	r3, r3, #10
 80093be:	4013      	ands	r3, r2
 80093c0:	60fb      	str	r3, [r7, #12]
 80093c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DIG_TX_Pin;
 80093c4:	2114      	movs	r1, #20
 80093c6:	187b      	adds	r3, r7, r1
 80093c8:	2204      	movs	r2, #4
 80093ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093cc:	187b      	adds	r3, r7, r1
 80093ce:	2202      	movs	r2, #2
 80093d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093d2:	187b      	adds	r3, r7, r1
 80093d4:	2200      	movs	r2, #0
 80093d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80093d8:	187b      	adds	r3, r7, r1
 80093da:	2203      	movs	r2, #3
 80093dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80093de:	187b      	adds	r3, r7, r1
 80093e0:	2201      	movs	r2, #1
 80093e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DIG_TX_GPIO_Port, &GPIO_InitStruct);
 80093e4:	187a      	adds	r2, r7, r1
 80093e6:	2390      	movs	r3, #144	; 0x90
 80093e8:	05db      	lsls	r3, r3, #23
 80093ea:	0011      	movs	r1, r2
 80093ec:	0018      	movs	r0, r3
 80093ee:	f7f7 ff09 	bl	8001204 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80093f2:	4b54      	ldr	r3, [pc, #336]	; (8009544 <HAL_UART_MspInit+0x294>)
 80093f4:	4a54      	ldr	r2, [pc, #336]	; (8009548 <HAL_UART_MspInit+0x298>)
 80093f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80093f8:	4b52      	ldr	r3, [pc, #328]	; (8009544 <HAL_UART_MspInit+0x294>)
 80093fa:	2210      	movs	r2, #16
 80093fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80093fe:	4b51      	ldr	r3, [pc, #324]	; (8009544 <HAL_UART_MspInit+0x294>)
 8009400:	2200      	movs	r2, #0
 8009402:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009404:	4b4f      	ldr	r3, [pc, #316]	; (8009544 <HAL_UART_MspInit+0x294>)
 8009406:	2280      	movs	r2, #128	; 0x80
 8009408:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800940a:	4b4e      	ldr	r3, [pc, #312]	; (8009544 <HAL_UART_MspInit+0x294>)
 800940c:	2200      	movs	r2, #0
 800940e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009410:	4b4c      	ldr	r3, [pc, #304]	; (8009544 <HAL_UART_MspInit+0x294>)
 8009412:	2200      	movs	r2, #0
 8009414:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009416:	4b4b      	ldr	r3, [pc, #300]	; (8009544 <HAL_UART_MspInit+0x294>)
 8009418:	2200      	movs	r2, #0
 800941a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800941c:	4b49      	ldr	r3, [pc, #292]	; (8009544 <HAL_UART_MspInit+0x294>)
 800941e:	2200      	movs	r2, #0
 8009420:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK) {
 8009422:	4b48      	ldr	r3, [pc, #288]	; (8009544 <HAL_UART_MspInit+0x294>)
 8009424:	0018      	movs	r0, r3
 8009426:	f7f7 fd03 	bl	8000e30 <HAL_DMA_Init>
 800942a:	1e03      	subs	r3, r0, #0
 800942c:	d001      	beq.n	8009432 <HAL_UART_MspInit+0x182>
      Error_Handler();
 800942e:	f7fc fd85 	bl	8005f3c <Error_Handler>
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a43      	ldr	r2, [pc, #268]	; (8009544 <HAL_UART_MspInit+0x294>)
 8009436:	661a      	str	r2, [r3, #96]	; 0x60
 8009438:	4b42      	ldr	r3, [pc, #264]	; (8009544 <HAL_UART_MspInit+0x294>)
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800943e:	2200      	movs	r2, #0
 8009440:	2100      	movs	r1, #0
 8009442:	201c      	movs	r0, #28
 8009444:	f7f7 fbc8 	bl	8000bd8 <HAL_NVIC_SetPriority>
}
 8009448:	e06e      	b.n	8009528 <HAL_UART_MspInit+0x278>
  } else if(uartHandle->Instance==USART4) {
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a3f      	ldr	r2, [pc, #252]	; (800954c <HAL_UART_MspInit+0x29c>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d169      	bne.n	8009528 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART4_CLK_ENABLE();
 8009454:	4b37      	ldr	r3, [pc, #220]	; (8009534 <HAL_UART_MspInit+0x284>)
 8009456:	69da      	ldr	r2, [r3, #28]
 8009458:	4b36      	ldr	r3, [pc, #216]	; (8009534 <HAL_UART_MspInit+0x284>)
 800945a:	2180      	movs	r1, #128	; 0x80
 800945c:	0309      	lsls	r1, r1, #12
 800945e:	430a      	orrs	r2, r1
 8009460:	61da      	str	r2, [r3, #28]
 8009462:	4b34      	ldr	r3, [pc, #208]	; (8009534 <HAL_UART_MspInit+0x284>)
 8009464:	69da      	ldr	r2, [r3, #28]
 8009466:	2380      	movs	r3, #128	; 0x80
 8009468:	031b      	lsls	r3, r3, #12
 800946a:	4013      	ands	r3, r2
 800946c:	60bb      	str	r3, [r7, #8]
 800946e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TXD_Pin;
 8009470:	2414      	movs	r4, #20
 8009472:	193b      	adds	r3, r7, r4
 8009474:	2201      	movs	r2, #1
 8009476:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009478:	193b      	adds	r3, r7, r4
 800947a:	2202      	movs	r2, #2
 800947c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800947e:	193b      	adds	r3, r7, r4
 8009480:	2200      	movs	r2, #0
 8009482:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009484:	193b      	adds	r3, r7, r4
 8009486:	2203      	movs	r2, #3
 8009488:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 800948a:	193b      	adds	r3, r7, r4
 800948c:	2204      	movs	r2, #4
 800948e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RS485_TXD_GPIO_Port, &GPIO_InitStruct);
 8009490:	193a      	adds	r2, r7, r4
 8009492:	2390      	movs	r3, #144	; 0x90
 8009494:	05db      	lsls	r3, r3, #23
 8009496:	0011      	movs	r1, r2
 8009498:	0018      	movs	r0, r3
 800949a:	f7f7 feb3 	bl	8001204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RXD_Pin;
 800949e:	0021      	movs	r1, r4
 80094a0:	187b      	adds	r3, r7, r1
 80094a2:	2202      	movs	r2, #2
 80094a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094a6:	187b      	adds	r3, r7, r1
 80094a8:	2202      	movs	r2, #2
 80094aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ac:	187b      	adds	r3, r7, r1
 80094ae:	2200      	movs	r2, #0
 80094b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80094b2:	187b      	adds	r3, r7, r1
 80094b4:	2203      	movs	r2, #3
 80094b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80094b8:	187b      	adds	r3, r7, r1
 80094ba:	2204      	movs	r2, #4
 80094bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RS485_RXD_GPIO_Port, &GPIO_InitStruct);
 80094be:	187a      	adds	r2, r7, r1
 80094c0:	2390      	movs	r3, #144	; 0x90
 80094c2:	05db      	lsls	r3, r3, #23
 80094c4:	0011      	movs	r1, r2
 80094c6:	0018      	movs	r0, r3
 80094c8:	f7f7 fe9c 	bl	8001204 <HAL_GPIO_Init>
    hdma_usart4_tx.Instance = DMA1_Channel7;
 80094cc:	4b20      	ldr	r3, [pc, #128]	; (8009550 <HAL_UART_MspInit+0x2a0>)
 80094ce:	4a21      	ldr	r2, [pc, #132]	; (8009554 <HAL_UART_MspInit+0x2a4>)
 80094d0:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80094d2:	4b1f      	ldr	r3, [pc, #124]	; (8009550 <HAL_UART_MspInit+0x2a0>)
 80094d4:	2210      	movs	r2, #16
 80094d6:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80094d8:	4b1d      	ldr	r3, [pc, #116]	; (8009550 <HAL_UART_MspInit+0x2a0>)
 80094da:	2200      	movs	r2, #0
 80094dc:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80094de:	4b1c      	ldr	r3, [pc, #112]	; (8009550 <HAL_UART_MspInit+0x2a0>)
 80094e0:	2280      	movs	r2, #128	; 0x80
 80094e2:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80094e4:	4b1a      	ldr	r3, [pc, #104]	; (8009550 <HAL_UART_MspInit+0x2a0>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80094ea:	4b19      	ldr	r3, [pc, #100]	; (8009550 <HAL_UART_MspInit+0x2a0>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80094f0:	4b17      	ldr	r3, [pc, #92]	; (8009550 <HAL_UART_MspInit+0x2a0>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80094f6:	4b16      	ldr	r3, [pc, #88]	; (8009550 <HAL_UART_MspInit+0x2a0>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK) {
 80094fc:	4b14      	ldr	r3, [pc, #80]	; (8009550 <HAL_UART_MspInit+0x2a0>)
 80094fe:	0018      	movs	r0, r3
 8009500:	f7f7 fc96 	bl	8000e30 <HAL_DMA_Init>
 8009504:	1e03      	subs	r3, r0, #0
 8009506:	d001      	beq.n	800950c <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8009508:	f7fc fd18 	bl	8005f3c <Error_Handler>
    __HAL_LINKDMA(uartHandle, hdmatx ,hdma_usart4_tx);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a10      	ldr	r2, [pc, #64]	; (8009550 <HAL_UART_MspInit+0x2a0>)
 8009510:	661a      	str	r2, [r3, #96]	; 0x60
 8009512:	4b0f      	ldr	r3, [pc, #60]	; (8009550 <HAL_UART_MspInit+0x2a0>)
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8009518:	2200      	movs	r2, #0
 800951a:	2100      	movs	r1, #0
 800951c:	201d      	movs	r0, #29
 800951e:	f7f7 fb5b 	bl	8000bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8009522:	201d      	movs	r0, #29
 8009524:	f7f7 fb6d 	bl	8000c02 <HAL_NVIC_EnableIRQ>
}
 8009528:	46c0      	nop			; (mov r8, r8)
 800952a:	46bd      	mov	sp, r7
 800952c:	b00b      	add	sp, #44	; 0x2c
 800952e:	bd90      	pop	{r4, r7, pc}
 8009530:	40013800 	.word	0x40013800
 8009534:	40021000 	.word	0x40021000
 8009538:	20001cd0 	.word	0x20001cd0
 800953c:	4002001c 	.word	0x4002001c
 8009540:	40004400 	.word	0x40004400
 8009544:	20001d14 	.word	0x20001d14
 8009548:	40020044 	.word	0x40020044
 800954c:	40004c00 	.word	0x40004c00
 8009550:	2000132c 	.word	0x2000132c
 8009554:	40020080 	.word	0x40020080

08009558 <MX_TIM6_Init>:

// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
void MX_TIM6_Init(void) {
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800955e:	003b      	movs	r3, r7
 8009560:	0018      	movs	r0, r3
 8009562:	2308      	movs	r3, #8
 8009564:	001a      	movs	r2, r3
 8009566:	2100      	movs	r1, #0
 8009568:	f000 fa46 	bl	80099f8 <memset>

    htim6.Instance = TIM6;
 800956c:	4b15      	ldr	r3, [pc, #84]	; (80095c4 <MX_TIM6_Init+0x6c>)
 800956e:	4a16      	ldr	r2, [pc, #88]	; (80095c8 <MX_TIM6_Init+0x70>)
 8009570:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 239;
 8009572:	4b14      	ldr	r3, [pc, #80]	; (80095c4 <MX_TIM6_Init+0x6c>)
 8009574:	22ef      	movs	r2, #239	; 0xef
 8009576:	605a      	str	r2, [r3, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009578:	4b12      	ldr	r3, [pc, #72]	; (80095c4 <MX_TIM6_Init+0x6c>)
 800957a:	2200      	movs	r2, #0
 800957c:	609a      	str	r2, [r3, #8]
    htim6.Init.Period = 0x0FFFF;
 800957e:	4b11      	ldr	r3, [pc, #68]	; (80095c4 <MX_TIM6_Init+0x6c>)
 8009580:	4a12      	ldr	r2, [pc, #72]	; (80095cc <MX_TIM6_Init+0x74>)
 8009582:	60da      	str	r2, [r3, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009584:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <MX_TIM6_Init+0x6c>)
 8009586:	2280      	movs	r2, #128	; 0x80
 8009588:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800958a:	4b0e      	ldr	r3, [pc, #56]	; (80095c4 <MX_TIM6_Init+0x6c>)
 800958c:	0018      	movs	r0, r3
 800958e:	f7fa f939 	bl	8003804 <HAL_TIM_Base_Init>
 8009592:	1e03      	subs	r3, r0, #0
 8009594:	d001      	beq.n	800959a <MX_TIM6_Init+0x42>
      Error_Handler();
 8009596:	f7fc fcd1 	bl	8005f3c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800959a:	003b      	movs	r3, r7
 800959c:	2200      	movs	r2, #0
 800959e:	601a      	str	r2, [r3, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095a0:	003b      	movs	r3, r7
 80095a2:	2200      	movs	r2, #0
 80095a4:	605a      	str	r2, [r3, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80095a6:	003a      	movs	r2, r7
 80095a8:	4b06      	ldr	r3, [pc, #24]	; (80095c4 <MX_TIM6_Init+0x6c>)
 80095aa:	0011      	movs	r1, r2
 80095ac:	0018      	movs	r0, r3
 80095ae:	f7fa fd22 	bl	8003ff6 <HAL_TIMEx_MasterConfigSynchronization>
 80095b2:	1e03      	subs	r3, r0, #0
 80095b4:	d001      	beq.n	80095ba <MX_TIM6_Init+0x62>
      Error_Handler();
 80095b6:	f7fc fcc1 	bl	8005f3c <Error_Handler>
    }
}
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	46bd      	mov	sp, r7
 80095be:	b002      	add	sp, #8
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	46c0      	nop			; (mov r8, r8)
 80095c4:	20001e94 	.word	0x20001e94
 80095c8:	40001000 	.word	0x40001000
 80095cc:	0000ffff 	.word	0x0000ffff

080095d0 <MX_TIM7_Init>:

// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
void MX_TIM7_Init(void) {
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095d6:	003b      	movs	r3, r7
 80095d8:	0018      	movs	r0, r3
 80095da:	2308      	movs	r3, #8
 80095dc:	001a      	movs	r2, r3
 80095de:	2100      	movs	r1, #0
 80095e0:	f000 fa0a 	bl	80099f8 <memset>

    htim7.Instance = TIM7;
 80095e4:	4b15      	ldr	r3, [pc, #84]	; (800963c <MX_TIM7_Init+0x6c>)
 80095e6:	4a16      	ldr	r2, [pc, #88]	; (8009640 <MX_TIM7_Init+0x70>)
 80095e8:	601a      	str	r2, [r3, #0]
    htim7.Init.Prescaler = 47;
 80095ea:	4b14      	ldr	r3, [pc, #80]	; (800963c <MX_TIM7_Init+0x6c>)
 80095ec:	222f      	movs	r2, #47	; 0x2f
 80095ee:	605a      	str	r2, [r3, #4]
    htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095f0:	4b12      	ldr	r3, [pc, #72]	; (800963c <MX_TIM7_Init+0x6c>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	609a      	str	r2, [r3, #8]
    htim7.Init.Period = 0x0FFFF;
 80095f6:	4b11      	ldr	r3, [pc, #68]	; (800963c <MX_TIM7_Init+0x6c>)
 80095f8:	4a12      	ldr	r2, [pc, #72]	; (8009644 <MX_TIM7_Init+0x74>)
 80095fa:	60da      	str	r2, [r3, #12]
    htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80095fc:	4b0f      	ldr	r3, [pc, #60]	; (800963c <MX_TIM7_Init+0x6c>)
 80095fe:	2280      	movs	r2, #128	; 0x80
 8009600:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8009602:	4b0e      	ldr	r3, [pc, #56]	; (800963c <MX_TIM7_Init+0x6c>)
 8009604:	0018      	movs	r0, r3
 8009606:	f7fa f8fd 	bl	8003804 <HAL_TIM_Base_Init>
 800960a:	1e03      	subs	r3, r0, #0
 800960c:	d001      	beq.n	8009612 <MX_TIM7_Init+0x42>
      Error_Handler();
 800960e:	f7fc fc95 	bl	8005f3c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009612:	003b      	movs	r3, r7
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009618:	003b      	movs	r3, r7
 800961a:	2200      	movs	r2, #0
 800961c:	605a      	str	r2, [r3, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 800961e:	003a      	movs	r2, r7
 8009620:	4b06      	ldr	r3, [pc, #24]	; (800963c <MX_TIM7_Init+0x6c>)
 8009622:	0011      	movs	r1, r2
 8009624:	0018      	movs	r0, r3
 8009626:	f7fa fce6 	bl	8003ff6 <HAL_TIMEx_MasterConfigSynchronization>
 800962a:	1e03      	subs	r3, r0, #0
 800962c:	d001      	beq.n	8009632 <MX_TIM7_Init+0x62>
      Error_Handler();
 800962e:	f7fc fc85 	bl	8005f3c <Error_Handler>
    }
}
 8009632:	46c0      	nop			; (mov r8, r8)
 8009634:	46bd      	mov	sp, r7
 8009636:	b002      	add	sp, #8
 8009638:	bd80      	pop	{r7, pc}
 800963a:	46c0      	nop			; (mov r8, r8)
 800963c:	2000279c 	.word	0x2000279c
 8009640:	40001400 	.word	0x40001400
 8009644:	0000ffff 	.word	0x0000ffff

08009648 <HAL_TIM_Base_MspInit>:

// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a12      	ldr	r2, [pc, #72]	; (80096a0 <HAL_TIM_Base_MspInit+0x58>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d10c      	bne.n	8009674 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800965a:	4b12      	ldr	r3, [pc, #72]	; (80096a4 <HAL_TIM_Base_MspInit+0x5c>)
 800965c:	69da      	ldr	r2, [r3, #28]
 800965e:	4b11      	ldr	r3, [pc, #68]	; (80096a4 <HAL_TIM_Base_MspInit+0x5c>)
 8009660:	2110      	movs	r1, #16
 8009662:	430a      	orrs	r2, r1
 8009664:	61da      	str	r2, [r3, #28]
 8009666:	4b0f      	ldr	r3, [pc, #60]	; (80096a4 <HAL_TIM_Base_MspInit+0x5c>)
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	2210      	movs	r2, #16
 800966c:	4013      	ands	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]
 8009670:	68fb      	ldr	r3, [r7, #12]
  else if(tim_baseHandle->Instance==TIM7)
  {
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
  }
}
 8009672:	e010      	b.n	8009696 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a0b      	ldr	r2, [pc, #44]	; (80096a8 <HAL_TIM_Base_MspInit+0x60>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d10b      	bne.n	8009696 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800967e:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <HAL_TIM_Base_MspInit+0x5c>)
 8009680:	69da      	ldr	r2, [r3, #28]
 8009682:	4b08      	ldr	r3, [pc, #32]	; (80096a4 <HAL_TIM_Base_MspInit+0x5c>)
 8009684:	2120      	movs	r1, #32
 8009686:	430a      	orrs	r2, r1
 8009688:	61da      	str	r2, [r3, #28]
 800968a:	4b06      	ldr	r3, [pc, #24]	; (80096a4 <HAL_TIM_Base_MspInit+0x5c>)
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	2220      	movs	r2, #32
 8009690:	4013      	ands	r3, r2
 8009692:	60bb      	str	r3, [r7, #8]
 8009694:	68bb      	ldr	r3, [r7, #8]
}
 8009696:	46c0      	nop			; (mov r8, r8)
 8009698:	46bd      	mov	sp, r7
 800969a:	b004      	add	sp, #16
 800969c:	bd80      	pop	{r7, pc}
 800969e:	46c0      	nop			; (mov r8, r8)
 80096a0:	40001000 	.word	0x40001000
 80096a4:	40021000 	.word	0x40021000
 80096a8:	40001400 	.word	0x40001400

080096ac <SystemClock_Config>:
//*****************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
void SystemClock_Config(void) {
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b098      	sub	sp, #96	; 0x60
 80096b0:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14 | RCC_OSCILLATORTYPE_HSE;
 80096b2:	212c      	movs	r1, #44	; 0x2c
 80096b4:	187b      	adds	r3, r7, r1
 80096b6:	2211      	movs	r2, #17
 80096b8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80096ba:	187b      	adds	r3, r7, r1
 80096bc:	2205      	movs	r2, #5
 80096be:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80096c0:	187b      	adds	r3, r7, r1
 80096c2:	2201      	movs	r2, #1
 80096c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80096c6:	187b      	adds	r3, r7, r1
 80096c8:	2201      	movs	r2, #1
 80096ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80096cc:	187b      	adds	r3, r7, r1
 80096ce:	2210      	movs	r2, #16
 80096d0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80096d2:	187b      	adds	r3, r7, r1
 80096d4:	2202      	movs	r2, #2
 80096d6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80096d8:	187b      	adds	r3, r7, r1
 80096da:	2280      	movs	r2, #128	; 0x80
 80096dc:	0252      	lsls	r2, r2, #9
 80096de:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80096e0:	187b      	adds	r3, r7, r1
 80096e2:	2280      	movs	r2, #128	; 0x80
 80096e4:	0352      	lsls	r2, r2, #13
 80096e6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80096e8:	187b      	adds	r3, r7, r1
 80096ea:	2200      	movs	r2, #0
 80096ec:	631a      	str	r2, [r3, #48]	; 0x30
  if ( HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK ) {
 80096ee:	187b      	adds	r3, r7, r1
 80096f0:	0018      	movs	r0, r3
 80096f2:	f7f9 fa7f 	bl	8002bf4 <HAL_RCC_OscConfig>
 80096f6:	1e03      	subs	r3, r0, #0
 80096f8:	d001      	beq.n	80096fe <SystemClock_Config+0x52>
    Error_Handler();
 80096fa:	f7fc fc1f 	bl	8005f3c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80096fe:	211c      	movs	r1, #28
 8009700:	187b      	adds	r3, r7, r1
 8009702:	2207      	movs	r2, #7
 8009704:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009706:	187b      	adds	r3, r7, r1
 8009708:	2202      	movs	r2, #2
 800970a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800970c:	187b      	adds	r3, r7, r1
 800970e:	2200      	movs	r2, #0
 8009710:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009712:	187b      	adds	r3, r7, r1
 8009714:	2200      	movs	r2, #0
 8009716:	60da      	str	r2, [r3, #12]

  if ( HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK ) {
 8009718:	187b      	adds	r3, r7, r1
 800971a:	2101      	movs	r1, #1
 800971c:	0018      	movs	r0, r3
 800971e:	f7f9 fdc9 	bl	80032b4 <HAL_RCC_ClockConfig>
 8009722:	1e03      	subs	r3, r0, #0
 8009724:	d001      	beq.n	800972a <SystemClock_Config+0x7e>
    Error_Handler();
 8009726:	f7fc fc09 	bl	8005f3c <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1;
 800972a:	003b      	movs	r3, r7
 800972c:	2223      	movs	r2, #35	; 0x23
 800972e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8009730:	003b      	movs	r3, r7
 8009732:	2201      	movs	r2, #1
 8009734:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8009736:	003b      	movs	r3, r7
 8009738:	2280      	movs	r2, #128	; 0x80
 800973a:	0252      	lsls	r2, r2, #9
 800973c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800973e:	003b      	movs	r3, r7
 8009740:	2210      	movs	r2, #16
 8009742:	611a      	str	r2, [r3, #16]
  if ( HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK ) {
 8009744:	003b      	movs	r3, r7
 8009746:	0018      	movs	r0, r3
 8009748:	f7f9 ff5c 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 800974c:	1e03      	subs	r3, r0, #0
 800974e:	d001      	beq.n	8009754 <SystemClock_Config+0xa8>
    Error_Handler();
 8009750:	f7fc fbf4 	bl	8005f3c <Error_Handler>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8009754:	f7f9 ff36 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 8009758:	0002      	movs	r2, r0
 800975a:	23fa      	movs	r3, #250	; 0xfa
 800975c:	0099      	lsls	r1, r3, #2
 800975e:	0010      	movs	r0, r2
 8009760:	f7f6 fd36 	bl	80001d0 <__udivsi3>
 8009764:	0003      	movs	r3, r0
 8009766:	0018      	movs	r0, r3
 8009768:	f7f7 fa6b 	bl	8000c42 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800976c:	2004      	movs	r0, #4
 800976e:	f7f7 fa75 	bl	8000c5c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009772:	2301      	movs	r3, #1
 8009774:	425b      	negs	r3, r3
 8009776:	2200      	movs	r2, #0
 8009778:	2100      	movs	r1, #0
 800977a:	0018      	movs	r0, r3
 800977c:	f7f7 fa2c 	bl	8000bd8 <HAL_NVIC_SetPriority>
}
 8009780:	46c0      	nop			; (mov r8, r8)
 8009782:	46bd      	mov	sp, r7
 8009784:	b018      	add	sp, #96	; 0x60
 8009786:	bd80      	pop	{r7, pc}

08009788 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800978c:	4b1a      	ldr	r3, [pc, #104]	; (80097f8 <SystemInit+0x70>)
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	4b19      	ldr	r3, [pc, #100]	; (80097f8 <SystemInit+0x70>)
 8009792:	2101      	movs	r1, #1
 8009794:	430a      	orrs	r2, r1
 8009796:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8009798:	4b17      	ldr	r3, [pc, #92]	; (80097f8 <SystemInit+0x70>)
 800979a:	685a      	ldr	r2, [r3, #4]
 800979c:	4b16      	ldr	r3, [pc, #88]	; (80097f8 <SystemInit+0x70>)
 800979e:	4917      	ldr	r1, [pc, #92]	; (80097fc <SystemInit+0x74>)
 80097a0:	400a      	ands	r2, r1
 80097a2:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80097a4:	4b14      	ldr	r3, [pc, #80]	; (80097f8 <SystemInit+0x70>)
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	4b13      	ldr	r3, [pc, #76]	; (80097f8 <SystemInit+0x70>)
 80097aa:	4915      	ldr	r1, [pc, #84]	; (8009800 <SystemInit+0x78>)
 80097ac:	400a      	ands	r2, r1
 80097ae:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80097b0:	4b11      	ldr	r3, [pc, #68]	; (80097f8 <SystemInit+0x70>)
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	4b10      	ldr	r3, [pc, #64]	; (80097f8 <SystemInit+0x70>)
 80097b6:	4913      	ldr	r1, [pc, #76]	; (8009804 <SystemInit+0x7c>)
 80097b8:	400a      	ands	r2, r1
 80097ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80097bc:	4b0e      	ldr	r3, [pc, #56]	; (80097f8 <SystemInit+0x70>)
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	4b0d      	ldr	r3, [pc, #52]	; (80097f8 <SystemInit+0x70>)
 80097c2:	4911      	ldr	r1, [pc, #68]	; (8009808 <SystemInit+0x80>)
 80097c4:	400a      	ands	r2, r1
 80097c6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80097c8:	4b0b      	ldr	r3, [pc, #44]	; (80097f8 <SystemInit+0x70>)
 80097ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097cc:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <SystemInit+0x70>)
 80097ce:	210f      	movs	r1, #15
 80097d0:	438a      	bics	r2, r1
 80097d2:	62da      	str	r2, [r3, #44]	; 0x2c

  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 80097d4:	4b08      	ldr	r3, [pc, #32]	; (80097f8 <SystemInit+0x70>)
 80097d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097d8:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <SystemInit+0x70>)
 80097da:	490c      	ldr	r1, [pc, #48]	; (800980c <SystemInit+0x84>)
 80097dc:	400a      	ands	r2, r1
 80097de:	631a      	str	r2, [r3, #48]	; 0x30


  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80097e0:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <SystemInit+0x70>)
 80097e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097e4:	4b04      	ldr	r3, [pc, #16]	; (80097f8 <SystemInit+0x70>)
 80097e6:	2101      	movs	r1, #1
 80097e8:	438a      	bics	r2, r1
 80097ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80097ec:	4b02      	ldr	r3, [pc, #8]	; (80097f8 <SystemInit+0x70>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	609a      	str	r2, [r3, #8]

}
 80097f2:	46c0      	nop			; (mov r8, r8)
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	40021000 	.word	0x40021000
 80097fc:	08ffb80c 	.word	0x08ffb80c
 8009800:	fef6ffff 	.word	0xfef6ffff
 8009804:	fffbffff 	.word	0xfffbffff
 8009808:	ffc0ffff 	.word	0xffc0ffff
 800980c:	fffcfe2c 	.word	0xfffcfe2c

08009810 <ProcessTickCounters>:
// ********************************************************************************************************************************
//
// HLR-xxxx
// LLR-xxxx
//
void ProcessTickCounters(void) {
 8009810:	b5b0      	push	{r4, r5, r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0

  static uint32_t OldTicks;
  uint32_t CurrentTicks;
  int16_t DeltaTicks, i;

  CurrentTicks = HAL_GetTick();
 8009816:	f7f6 fff9 	bl	800080c <HAL_GetTick>
 800981a:	0003      	movs	r3, r0
 800981c:	60bb      	str	r3, [r7, #8]
  DeltaTicks = CurrentTicks - OldTicks;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	b29a      	uxth	r2, r3
 8009822:	4b39      	ldr	r3, [pc, #228]	; (8009908 <ProcessTickCounters+0xf8>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	b29b      	uxth	r3, r3
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	b29a      	uxth	r2, r3
 800982c:	1dbb      	adds	r3, r7, #6
 800982e:	801a      	strh	r2, [r3, #0]
  if (DeltaTicks == 0) {
 8009830:	1dbb      	adds	r3, r7, #6
 8009832:	2200      	movs	r2, #0
 8009834:	5e9b      	ldrsh	r3, [r3, r2]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d060      	beq.n	80098fc <ProcessTickCounters+0xec>
      goto ExitHere;
  }

  OldTicks = CurrentTicks;
 800983a:	4b33      	ldr	r3, [pc, #204]	; (8009908 <ProcessTickCounters+0xf8>)
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	601a      	str	r2, [r3, #0]
  Ticks1ms += DeltaTicks;
 8009840:	4b32      	ldr	r3, [pc, #200]	; (800990c <ProcessTickCounters+0xfc>)
 8009842:	2200      	movs	r2, #0
 8009844:	5e9b      	ldrsh	r3, [r3, r2]
 8009846:	b29a      	uxth	r2, r3
 8009848:	1dbb      	adds	r3, r7, #6
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	18d3      	adds	r3, r2, r3
 800984e:	b29b      	uxth	r3, r3
 8009850:	b21a      	sxth	r2, r3
 8009852:	4b2e      	ldr	r3, [pc, #184]	; (800990c <ProcessTickCounters+0xfc>)
 8009854:	801a      	strh	r2, [r3, #0]
  Ticks5ms += DeltaTicks;
 8009856:	4b2e      	ldr	r3, [pc, #184]	; (8009910 <ProcessTickCounters+0x100>)
 8009858:	2200      	movs	r2, #0
 800985a:	5e9b      	ldrsh	r3, [r3, r2]
 800985c:	b29a      	uxth	r2, r3
 800985e:	1dbb      	adds	r3, r7, #6
 8009860:	881b      	ldrh	r3, [r3, #0]
 8009862:	18d3      	adds	r3, r2, r3
 8009864:	b29b      	uxth	r3, r3
 8009866:	b21a      	sxth	r2, r3
 8009868:	4b29      	ldr	r3, [pc, #164]	; (8009910 <ProcessTickCounters+0x100>)
 800986a:	801a      	strh	r2, [r3, #0]
  Ticks1000ms += DeltaTicks;
 800986c:	4b29      	ldr	r3, [pc, #164]	; (8009914 <ProcessTickCounters+0x104>)
 800986e:	2200      	movs	r2, #0
 8009870:	5e9b      	ldrsh	r3, [r3, r2]
 8009872:	b29a      	uxth	r2, r3
 8009874:	1dbb      	adds	r3, r7, #6
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	18d3      	adds	r3, r2, r3
 800987a:	b29b      	uxth	r3, r3
 800987c:	b21a      	sxth	r2, r3
 800987e:	4b25      	ldr	r3, [pc, #148]	; (8009914 <ProcessTickCounters+0x104>)
 8009880:	801a      	strh	r2, [r3, #0]
  AccelTicks += DeltaTicks;
 8009882:	4b25      	ldr	r3, [pc, #148]	; (8009918 <ProcessTickCounters+0x108>)
 8009884:	2200      	movs	r2, #0
 8009886:	5e9b      	ldrsh	r3, [r3, r2]
 8009888:	b29a      	uxth	r2, r3
 800988a:	1dbb      	adds	r3, r7, #6
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	18d3      	adds	r3, r2, r3
 8009890:	b29b      	uxth	r3, r3
 8009892:	b21a      	sxth	r2, r3
 8009894:	4b20      	ldr	r3, [pc, #128]	; (8009918 <ProcessTickCounters+0x108>)
 8009896:	801a      	strh	r2, [r3, #0]
  for ( i = 0; i < 6; i++ ) {
 8009898:	230e      	movs	r3, #14
 800989a:	18fb      	adds	r3, r7, r3
 800989c:	2200      	movs	r2, #0
 800989e:	801a      	strh	r2, [r3, #0]
 80098a0:	e025      	b.n	80098ee <ProcessTickCounters+0xde>
    DIG_HandleStruct[i].FreqInputTicks += DeltaTicks;
 80098a2:	250e      	movs	r5, #14
 80098a4:	197b      	adds	r3, r7, r5
 80098a6:	2200      	movs	r2, #0
 80098a8:	5e9a      	ldrsh	r2, [r3, r2]
 80098aa:	491c      	ldr	r1, [pc, #112]	; (800991c <ProcessTickCounters+0x10c>)
 80098ac:	2046      	movs	r0, #70	; 0x46
 80098ae:	0013      	movs	r3, r2
 80098b0:	00db      	lsls	r3, r3, #3
 80098b2:	189b      	adds	r3, r3, r2
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	18cb      	adds	r3, r1, r3
 80098b8:	181b      	adds	r3, r3, r0
 80098ba:	8819      	ldrh	r1, [r3, #0]
 80098bc:	1dbb      	adds	r3, r7, #6
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	197a      	adds	r2, r7, r5
 80098c2:	2000      	movs	r0, #0
 80098c4:	5e12      	ldrsh	r2, [r2, r0]
 80098c6:	18cb      	adds	r3, r1, r3
 80098c8:	b29c      	uxth	r4, r3
 80098ca:	4914      	ldr	r1, [pc, #80]	; (800991c <ProcessTickCounters+0x10c>)
 80098cc:	2046      	movs	r0, #70	; 0x46
 80098ce:	0013      	movs	r3, r2
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	189b      	adds	r3, r3, r2
 80098d4:	00db      	lsls	r3, r3, #3
 80098d6:	18cb      	adds	r3, r1, r3
 80098d8:	181b      	adds	r3, r3, r0
 80098da:	1c22      	adds	r2, r4, #0
 80098dc:	801a      	strh	r2, [r3, #0]
  for ( i = 0; i < 6; i++ ) {
 80098de:	197b      	adds	r3, r7, r5
 80098e0:	2200      	movs	r2, #0
 80098e2:	5e9b      	ldrsh	r3, [r3, r2]
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	3301      	adds	r3, #1
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	197b      	adds	r3, r7, r5
 80098ec:	801a      	strh	r2, [r3, #0]
 80098ee:	230e      	movs	r3, #14
 80098f0:	18fb      	adds	r3, r7, r3
 80098f2:	2200      	movs	r2, #0
 80098f4:	5e9b      	ldrsh	r3, [r3, r2]
 80098f6:	2b05      	cmp	r3, #5
 80098f8:	ddd3      	ble.n	80098a2 <ProcessTickCounters+0x92>
  }

ExitHere:
 80098fa:	e000      	b.n	80098fe <ProcessTickCounters+0xee>
      goto ExitHere;
 80098fc:	46c0      	nop			; (mov r8, r8)
    return;
 80098fe:	46c0      	nop			; (mov r8, r8)
}
 8009900:	46bd      	mov	sp, r7
 8009902:	b004      	add	sp, #16
 8009904:	bdb0      	pop	{r4, r5, r7, pc}
 8009906:	46c0      	nop			; (mov r8, r8)
 8009908:	200000e8 	.word	0x200000e8
 800990c:	20001e90 	.word	0x20001e90
 8009910:	20002756 	.word	0x20002756
 8009914:	20001e8c 	.word	0x20001e8c
 8009918:	200011ac 	.word	0x200011ac
 800991c:	20001f14 	.word	0x20001f14

08009920 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009920:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8009922:	e003      	b.n	800992c <LoopCopyDataInit>

08009924 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009924:	4b0b      	ldr	r3, [pc, #44]	; (8009954 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 8009926:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009928:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800992a:	3104      	adds	r1, #4

0800992c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800992c:	480a      	ldr	r0, [pc, #40]	; (8009958 <LoopForever+0x6>)
	ldr	r3, =_edata
 800992e:	4b0b      	ldr	r3, [pc, #44]	; (800995c <LoopForever+0xa>)
	adds	r2, r0, r1
 8009930:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009932:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009934:	d3f6      	bcc.n	8009924 <CopyDataInit>
	ldr	r2, =_sbss
 8009936:	4a0a      	ldr	r2, [pc, #40]	; (8009960 <LoopForever+0xe>)
	b	LoopFillZerobss
 8009938:	e002      	b.n	8009940 <LoopFillZerobss>

0800993a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 800993a:	2300      	movs	r3, #0
 	str  r3, [r2]
 800993c:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 800993e:	3204      	adds	r2, #4

08009940 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009940:	4b08      	ldr	r3, [pc, #32]	; (8009964 <LoopForever+0x12>)
	cmp	r2, r3
 8009942:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009944:	d3f9      	bcc.n	800993a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009946:	f7ff ff1f 	bl	8009788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800994a:	f000 f80f 	bl	800996c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800994e:	f7fd fa9f 	bl	8006e90 <main>

08009952 <LoopForever>:

LoopForever:
    b LoopForever
 8009952:	e7fe      	b.n	8009952 <LoopForever>
	ldr	r3, =_sidata
 8009954:	08009e10 	.word	0x08009e10
	ldr	r0, =_sdata
 8009958:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800995c:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8009960:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8009964:	20002934 	.word	0x20002934

08009968 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009968:	e7fe      	b.n	8009968 <ADC1_COMP_IRQHandler>
	...

0800996c <__libc_init_array>:
 800996c:	b570      	push	{r4, r5, r6, lr}
 800996e:	2600      	movs	r6, #0
 8009970:	4d0c      	ldr	r5, [pc, #48]	; (80099a4 <__libc_init_array+0x38>)
 8009972:	4c0d      	ldr	r4, [pc, #52]	; (80099a8 <__libc_init_array+0x3c>)
 8009974:	1b64      	subs	r4, r4, r5
 8009976:	10a4      	asrs	r4, r4, #2
 8009978:	42a6      	cmp	r6, r4
 800997a:	d109      	bne.n	8009990 <__libc_init_array+0x24>
 800997c:	2600      	movs	r6, #0
 800997e:	f000 f843 	bl	8009a08 <_init>
 8009982:	4d0a      	ldr	r5, [pc, #40]	; (80099ac <__libc_init_array+0x40>)
 8009984:	4c0a      	ldr	r4, [pc, #40]	; (80099b0 <__libc_init_array+0x44>)
 8009986:	1b64      	subs	r4, r4, r5
 8009988:	10a4      	asrs	r4, r4, #2
 800998a:	42a6      	cmp	r6, r4
 800998c:	d105      	bne.n	800999a <__libc_init_array+0x2e>
 800998e:	bd70      	pop	{r4, r5, r6, pc}
 8009990:	00b3      	lsls	r3, r6, #2
 8009992:	58eb      	ldr	r3, [r5, r3]
 8009994:	4798      	blx	r3
 8009996:	3601      	adds	r6, #1
 8009998:	e7ee      	b.n	8009978 <__libc_init_array+0xc>
 800999a:	00b3      	lsls	r3, r6, #2
 800999c:	58eb      	ldr	r3, [r5, r3]
 800999e:	4798      	blx	r3
 80099a0:	3601      	adds	r6, #1
 80099a2:	e7f2      	b.n	800998a <__libc_init_array+0x1e>
 80099a4:	08009e08 	.word	0x08009e08
 80099a8:	08009e08 	.word	0x08009e08
 80099ac:	08009e08 	.word	0x08009e08
 80099b0:	08009e0c 	.word	0x08009e0c

080099b4 <memcmp>:
 80099b4:	b530      	push	{r4, r5, lr}
 80099b6:	2400      	movs	r4, #0
 80099b8:	42a2      	cmp	r2, r4
 80099ba:	d101      	bne.n	80099c0 <memcmp+0xc>
 80099bc:	2000      	movs	r0, #0
 80099be:	e005      	b.n	80099cc <memcmp+0x18>
 80099c0:	5d03      	ldrb	r3, [r0, r4]
 80099c2:	1c65      	adds	r5, r4, #1
 80099c4:	5d0c      	ldrb	r4, [r1, r4]
 80099c6:	42a3      	cmp	r3, r4
 80099c8:	d001      	beq.n	80099ce <memcmp+0x1a>
 80099ca:	1b18      	subs	r0, r3, r4
 80099cc:	bd30      	pop	{r4, r5, pc}
 80099ce:	002c      	movs	r4, r5
 80099d0:	e7f2      	b.n	80099b8 <memcmp+0x4>

080099d2 <memmove>:
 80099d2:	b510      	push	{r4, lr}
 80099d4:	4288      	cmp	r0, r1
 80099d6:	d902      	bls.n	80099de <memmove+0xc>
 80099d8:	188b      	adds	r3, r1, r2
 80099da:	4298      	cmp	r0, r3
 80099dc:	d303      	bcc.n	80099e6 <memmove+0x14>
 80099de:	2300      	movs	r3, #0
 80099e0:	e007      	b.n	80099f2 <memmove+0x20>
 80099e2:	5c8b      	ldrb	r3, [r1, r2]
 80099e4:	5483      	strb	r3, [r0, r2]
 80099e6:	3a01      	subs	r2, #1
 80099e8:	d2fb      	bcs.n	80099e2 <memmove+0x10>
 80099ea:	bd10      	pop	{r4, pc}
 80099ec:	5ccc      	ldrb	r4, [r1, r3]
 80099ee:	54c4      	strb	r4, [r0, r3]
 80099f0:	3301      	adds	r3, #1
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d1fa      	bne.n	80099ec <memmove+0x1a>
 80099f6:	e7f8      	b.n	80099ea <memmove+0x18>

080099f8 <memset>:
 80099f8:	0003      	movs	r3, r0
 80099fa:	1812      	adds	r2, r2, r0
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d100      	bne.n	8009a02 <memset+0xa>
 8009a00:	4770      	bx	lr
 8009a02:	7019      	strb	r1, [r3, #0]
 8009a04:	3301      	adds	r3, #1
 8009a06:	e7f9      	b.n	80099fc <memset+0x4>

08009a08 <_init>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	46c0      	nop			; (mov r8, r8)
 8009a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a0e:	bc08      	pop	{r3}
 8009a10:	469e      	mov	lr, r3
 8009a12:	4770      	bx	lr

08009a14 <_fini>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	46c0      	nop			; (mov r8, r8)
 8009a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1a:	bc08      	pop	{r3}
 8009a1c:	469e      	mov	lr, r3
 8009a1e:	4770      	bx	lr

Disassembly of section .reflash_text:

0801b800 <WaitForLastOperation>:
// ********************************************************************************************************************************
//
uint32_t MaxTimeout;
#define MAX_WAIT_TIME           0xFFFFFF00

HAL_StatusTypeDef WaitForLastOperation(void) {
 801b800:	b580      	push	{r7, lr}
 801b802:	b082      	sub	sp, #8
 801b804:	af00      	add	r7, sp, #0

  uint32_t TimeoutCounter = 0;
 801b806:	2300      	movs	r3, #0
 801b808:	607b      	str	r3, [r7, #4]

  while ( __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) ) {                                       // Macro
 801b80a:	e008      	b.n	801b81e <WaitForLastOperation+0x1e>
    if ( ++TimeoutCounter == MAX_WAIT_TIME ) {
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	3301      	adds	r3, #1
 801b810:	607b      	str	r3, [r7, #4]
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	4a18      	ldr	r2, [pc, #96]	; (801b878 <WaitForLastOperation+0x78>)
 801b816:	4293      	cmp	r3, r2
 801b818:	d101      	bne.n	801b81e <WaitForLastOperation+0x1e>
      return HAL_TIMEOUT;
 801b81a:	2303      	movs	r3, #3
 801b81c:	e028      	b.n	801b870 <WaitForLastOperation+0x70>
  while ( __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) ) {                                       // Macro
 801b81e:	4b17      	ldr	r3, [pc, #92]	; (801b87c <WaitForLastOperation+0x7c>)
 801b820:	68db      	ldr	r3, [r3, #12]
 801b822:	2201      	movs	r2, #1
 801b824:	4013      	ands	r3, r2
 801b826:	2b01      	cmp	r3, #1
 801b828:	d0f0      	beq.n	801b80c <WaitForLastOperation+0xc>
    }
  }
  if ( TimeoutCounter > MaxTimeout ) {
 801b82a:	4b15      	ldr	r3, [pc, #84]	; (801b880 <WaitForLastOperation+0x80>)
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	687a      	ldr	r2, [r7, #4]
 801b830:	429a      	cmp	r2, r3
 801b832:	d902      	bls.n	801b83a <WaitForLastOperation+0x3a>
    MaxTimeout = TimeoutCounter;
 801b834:	4b12      	ldr	r3, [pc, #72]	; (801b880 <WaitForLastOperation+0x80>)
 801b836:	687a      	ldr	r2, [r7, #4]
 801b838:	601a      	str	r2, [r3, #0]
  }

  if ( __HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) ) {                                       // Macro            /* Check FLASH End of Operation flag  */
 801b83a:	4b10      	ldr	r3, [pc, #64]	; (801b87c <WaitForLastOperation+0x7c>)
 801b83c:	68db      	ldr	r3, [r3, #12]
 801b83e:	2220      	movs	r2, #32
 801b840:	4013      	ands	r3, r2
 801b842:	2b20      	cmp	r3, #32
 801b844:	d102      	bne.n	801b84c <WaitForLastOperation+0x4c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);                     // Macro          /* Clear FLASH End of Operation pending bit */
 801b846:	4b0d      	ldr	r3, [pc, #52]	; (801b87c <WaitForLastOperation+0x7c>)
 801b848:	2220      	movs	r2, #32
 801b84a:	60da      	str	r2, [r3, #12]
  }
  if ( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) ) {       // Macro's
 801b84c:	4b0b      	ldr	r3, [pc, #44]	; (801b87c <WaitForLastOperation+0x7c>)
 801b84e:	68db      	ldr	r3, [r3, #12]
 801b850:	2210      	movs	r2, #16
 801b852:	4013      	ands	r3, r2
 801b854:	2b10      	cmp	r3, #16
 801b856:	d005      	beq.n	801b864 <WaitForLastOperation+0x64>
 801b858:	4b08      	ldr	r3, [pc, #32]	; (801b87c <WaitForLastOperation+0x7c>)
 801b85a:	68db      	ldr	r3, [r3, #12]
 801b85c:	2204      	movs	r2, #4
 801b85e:	4013      	ands	r3, r2
 801b860:	2b04      	cmp	r3, #4
 801b862:	d104      	bne.n	801b86e <WaitForLastOperation+0x6e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);   // Macro - Clear all FLASH flags
 801b864:	4b05      	ldr	r3, [pc, #20]	; (801b87c <WaitForLastOperation+0x7c>)
 801b866:	2214      	movs	r2, #20
 801b868:	60da      	str	r2, [r3, #12]
    return HAL_ERROR;
 801b86a:	2301      	movs	r3, #1
 801b86c:	e000      	b.n	801b870 <WaitForLastOperation+0x70>
  }
  return HAL_OK; /* There is no error flag set */
 801b86e:	2300      	movs	r3, #0
}
 801b870:	0018      	movs	r0, r3
 801b872:	46bd      	mov	sp, r7
 801b874:	b002      	add	sp, #8
 801b876:	bd80      	pop	{r7, pc}
 801b878:	ffffff00 	.word	0xffffff00
 801b87c:	40022000 	.word	0x40022000
 801b880:	20002930 	.word	0x20002930

0801b884 <CalculateCrcArray>:

// ******************************************************************************
// ******************************************************************************
//
uint16_t CalculateCrcArray(uint8_t *Buffer, int32_t Length) {
 801b884:	b580      	push	{r7, lr}
 801b886:	b084      	sub	sp, #16
 801b888:	af00      	add	r7, sp, #0
 801b88a:	6078      	str	r0, [r7, #4]
 801b88c:	6039      	str	r1, [r7, #0]

    int32_t i;

    CRC->INIT = 0x0000;
 801b88e:	4b10      	ldr	r3, [pc, #64]	; (801b8d0 <CalculateCrcArray+0x4c>)
 801b890:	2200      	movs	r2, #0
 801b892:	611a      	str	r2, [r3, #16]
    CRC->POL = 0x1021;
 801b894:	4b0e      	ldr	r3, [pc, #56]	; (801b8d0 <CalculateCrcArray+0x4c>)
 801b896:	4a0f      	ldr	r2, [pc, #60]	; (801b8d4 <CalculateCrcArray+0x50>)
 801b898:	615a      	str	r2, [r3, #20]
    CRC->CR = (1 << 3) | (1 << 0);          // 16-bit poly, reset
 801b89a:	4b0d      	ldr	r3, [pc, #52]	; (801b8d0 <CalculateCrcArray+0x4c>)
 801b89c:	2209      	movs	r2, #9
 801b89e:	609a      	str	r2, [r3, #8]

    for ( i = 0; i < Length; i++ ) {
 801b8a0:	2300      	movs	r3, #0
 801b8a2:	60fb      	str	r3, [r7, #12]
 801b8a4:	e008      	b.n	801b8b8 <CalculateCrcArray+0x34>
        *(uint8_t*) (&CRC->DR) = Buffer[i];
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	687a      	ldr	r2, [r7, #4]
 801b8aa:	18d3      	adds	r3, r2, r3
 801b8ac:	4a08      	ldr	r2, [pc, #32]	; (801b8d0 <CalculateCrcArray+0x4c>)
 801b8ae:	781b      	ldrb	r3, [r3, #0]
 801b8b0:	7013      	strb	r3, [r2, #0]
    for ( i = 0; i < Length; i++ ) {
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	3301      	adds	r3, #1
 801b8b6:	60fb      	str	r3, [r7, #12]
 801b8b8:	68fa      	ldr	r2, [r7, #12]
 801b8ba:	683b      	ldr	r3, [r7, #0]
 801b8bc:	429a      	cmp	r2, r3
 801b8be:	dbf2      	blt.n	801b8a6 <CalculateCrcArray+0x22>
    }
    return (CRC->DR & 0xFFFF);
 801b8c0:	4b03      	ldr	r3, [pc, #12]	; (801b8d0 <CalculateCrcArray+0x4c>)
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	b29b      	uxth	r3, r3
}
 801b8c6:	0018      	movs	r0, r3
 801b8c8:	46bd      	mov	sp, r7
 801b8ca:	b004      	add	sp, #16
 801b8cc:	bd80      	pop	{r7, pc}
 801b8ce:	46c0      	nop			; (mov r8, r8)
 801b8d0:	40023000 	.word	0x40023000
 801b8d4:	00001021 	.word	0x00001021

0801b8d8 <ReflashSerialSend>:
// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
// HLR-xxxx
//
void ReflashSerialSend(stSerial *SerialStruct) {
 801b8d8:	b5b0      	push	{r4, r5, r7, lr}
 801b8da:	b084      	sub	sp, #16
 801b8dc:	af00      	add	r7, sp, #0
 801b8de:	6078      	str	r0, [r7, #4]

  uint16_t Crc, i;

  SerialStruct->TxRxBuffer[0] = 0xAA;                    // Sync
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	695b      	ldr	r3, [r3, #20]
 801b8e4:	22aa      	movs	r2, #170	; 0xaa
 801b8e6:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[1] = 0xAA;
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	695b      	ldr	r3, [r3, #20]
 801b8ec:	3301      	adds	r3, #1
 801b8ee:	22aa      	movs	r2, #170	; 0xaa
 801b8f0:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[2] = 0xAA;
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	695b      	ldr	r3, [r3, #20]
 801b8f6:	3302      	adds	r3, #2
 801b8f8:	22aa      	movs	r2, #170	; 0xaa
 801b8fa:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[3] = 0xAA;
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	695b      	ldr	r3, [r3, #20]
 801b900:	3303      	adds	r3, #3
 801b902:	22aa      	movs	r2, #170	; 0xaa
 801b904:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[4] = 0xAA;
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	695b      	ldr	r3, [r3, #20]
 801b90a:	3304      	adds	r3, #4
 801b90c:	22aa      	movs	r2, #170	; 0xaa
 801b90e:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[5] = 0x00;
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	695b      	ldr	r3, [r3, #20]
 801b914:	3305      	adds	r3, #5
 801b916:	2200      	movs	r2, #0
 801b918:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[6] = SerialStruct->Command;                // Command
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	695b      	ldr	r3, [r3, #20]
 801b91e:	3306      	adds	r3, #6
 801b920:	687a      	ldr	r2, [r7, #4]
 801b922:	7f12      	ldrb	r2, [r2, #28]
 801b924:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[7] = SerialStruct->Length & 0xFF;          // Length
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	221e      	movs	r2, #30
 801b92a:	5e9a      	ldrsh	r2, [r3, r2]
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	695b      	ldr	r3, [r3, #20]
 801b930:	3307      	adds	r3, #7
 801b932:	b2d2      	uxtb	r2, r2
 801b934:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[8] = SerialStruct->Length >> 8;
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	221e      	movs	r2, #30
 801b93a:	5e9b      	ldrsh	r3, [r3, r2]
 801b93c:	121b      	asrs	r3, r3, #8
 801b93e:	b21a      	sxth	r2, r3
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	695b      	ldr	r3, [r3, #20]
 801b944:	3308      	adds	r3, #8
 801b946:	b2d2      	uxtb	r2, r2
 801b948:	701a      	strb	r2, [r3, #0]
  //
  //  Calculate CRC
  //
  Crc = CalculateCrcArray(&SerialStruct->TxRxBuffer[6], SerialStruct->Length + 3);
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	695b      	ldr	r3, [r3, #20]
 801b94e:	1d9a      	adds	r2, r3, #6
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	211e      	movs	r1, #30
 801b954:	5e5b      	ldrsh	r3, [r3, r1]
 801b956:	3303      	adds	r3, #3
 801b958:	250c      	movs	r5, #12
 801b95a:	197c      	adds	r4, r7, r5
 801b95c:	0019      	movs	r1, r3
 801b95e:	0010      	movs	r0, r2
 801b960:	f7ff ff90 	bl	801b884 <CalculateCrcArray>
 801b964:	0003      	movs	r3, r0
 801b966:	8023      	strh	r3, [r4, #0]
  SerialStruct->TxRxBuffer[SerialStruct->Length + 9] = Crc & 0xFF;
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	695a      	ldr	r2, [r3, #20]
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	211e      	movs	r1, #30
 801b970:	5e5b      	ldrsh	r3, [r3, r1]
 801b972:	3309      	adds	r3, #9
 801b974:	18d3      	adds	r3, r2, r3
 801b976:	197a      	adds	r2, r7, r5
 801b978:	8812      	ldrh	r2, [r2, #0]
 801b97a:	b2d2      	uxtb	r2, r2
 801b97c:	701a      	strb	r2, [r3, #0]
  SerialStruct->TxRxBuffer[SerialStruct->Length + 10] = Crc >> 8;
 801b97e:	197b      	adds	r3, r7, r5
 801b980:	881b      	ldrh	r3, [r3, #0]
 801b982:	0a1b      	lsrs	r3, r3, #8
 801b984:	b299      	uxth	r1, r3
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	695a      	ldr	r2, [r3, #20]
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	201e      	movs	r0, #30
 801b98e:	5e1b      	ldrsh	r3, [r3, r0]
 801b990:	330a      	adds	r3, #10
 801b992:	18d3      	adds	r3, r2, r3
 801b994:	b2ca      	uxtb	r2, r1
 801b996:	701a      	strb	r2, [r3, #0]
  //
  // Send Message via selected SerialMode Mode.
  //
  PC_RS485_EN_GPIO_Port->BSRR = (uint32_t) PC_RS485_EN_Pin;               // Turn on RS422/485 Driver
 801b998:	4b22      	ldr	r3, [pc, #136]	; (801ba24 <ReflashSerialSend+0x14c>)
 801b99a:	2280      	movs	r2, #128	; 0x80
 801b99c:	01d2      	lsls	r2, r2, #7
 801b99e:	619a      	str	r2, [r3, #24]

  for (i = 0 ; i < 20000  ; i++) {
 801b9a0:	230e      	movs	r3, #14
 801b9a2:	18fb      	adds	r3, r7, r3
 801b9a4:	2200      	movs	r2, #0
 801b9a6:	801a      	strh	r2, [r3, #0]
 801b9a8:	e00a      	b.n	801b9c0 <ReflashSerialSend+0xe8>
      Dummy32++;
 801b9aa:	4b1f      	ldr	r3, [pc, #124]	; (801ba28 <ReflashSerialSend+0x150>)
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	1c5a      	adds	r2, r3, #1
 801b9b0:	4b1d      	ldr	r3, [pc, #116]	; (801ba28 <ReflashSerialSend+0x150>)
 801b9b2:	601a      	str	r2, [r3, #0]
  for (i = 0 ; i < 20000  ; i++) {
 801b9b4:	210e      	movs	r1, #14
 801b9b6:	187b      	adds	r3, r7, r1
 801b9b8:	881a      	ldrh	r2, [r3, #0]
 801b9ba:	187b      	adds	r3, r7, r1
 801b9bc:	3201      	adds	r2, #1
 801b9be:	801a      	strh	r2, [r3, #0]
 801b9c0:	230e      	movs	r3, #14
 801b9c2:	18fb      	adds	r3, r7, r3
 801b9c4:	881b      	ldrh	r3, [r3, #0]
 801b9c6:	4a19      	ldr	r2, [pc, #100]	; (801ba2c <ReflashSerialSend+0x154>)
 801b9c8:	4293      	cmp	r3, r2
 801b9ca:	d9ee      	bls.n	801b9aa <ReflashSerialSend+0xd2>
  }

  for (i = 0 ; i < SerialStruct->Length + 11 ; i++) {
 801b9cc:	230e      	movs	r3, #14
 801b9ce:	18fb      	adds	r3, r7, r3
 801b9d0:	2200      	movs	r2, #0
 801b9d2:	801a      	strh	r2, [r3, #0]
 801b9d4:	e015      	b.n	801ba02 <ReflashSerialSend+0x12a>
      USART1->TDR = SerialStruct->TxRxBuffer[i];                          // Send Data
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	695a      	ldr	r2, [r3, #20]
 801b9da:	230e      	movs	r3, #14
 801b9dc:	18fb      	adds	r3, r7, r3
 801b9de:	881b      	ldrh	r3, [r3, #0]
 801b9e0:	18d3      	adds	r3, r2, r3
 801b9e2:	781a      	ldrb	r2, [r3, #0]
 801b9e4:	4b12      	ldr	r3, [pc, #72]	; (801ba30 <ReflashSerialSend+0x158>)
 801b9e6:	b292      	uxth	r2, r2
 801b9e8:	851a      	strh	r2, [r3, #40]	; 0x28
      while ( (USART1->ISR & (1 << 6)) == 0 ) {                           // Wait for Byte to be sent (Transmission Complete)
 801b9ea:	46c0      	nop			; (mov r8, r8)
 801b9ec:	4b10      	ldr	r3, [pc, #64]	; (801ba30 <ReflashSerialSend+0x158>)
 801b9ee:	69db      	ldr	r3, [r3, #28]
 801b9f0:	2240      	movs	r2, #64	; 0x40
 801b9f2:	4013      	ands	r3, r2
 801b9f4:	d0fa      	beq.n	801b9ec <ReflashSerialSend+0x114>
  for (i = 0 ; i < SerialStruct->Length + 11 ; i++) {
 801b9f6:	210e      	movs	r1, #14
 801b9f8:	187b      	adds	r3, r7, r1
 801b9fa:	881a      	ldrh	r2, [r3, #0]
 801b9fc:	187b      	adds	r3, r7, r1
 801b9fe:	3201      	adds	r2, #1
 801ba00:	801a      	strh	r2, [r3, #0]
 801ba02:	230e      	movs	r3, #14
 801ba04:	18fb      	adds	r3, r7, r3
 801ba06:	881a      	ldrh	r2, [r3, #0]
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	211e      	movs	r1, #30
 801ba0c:	5e5b      	ldrsh	r3, [r3, r1]
 801ba0e:	330b      	adds	r3, #11
 801ba10:	429a      	cmp	r2, r3
 801ba12:	dbe0      	blt.n	801b9d6 <ReflashSerialSend+0xfe>
      }
  }
  PC_RS485_EN_GPIO_Port->BRR = (uint32_t) PC_RS485_EN_Pin;               // Turn off RS422/485 Driver
 801ba14:	4b03      	ldr	r3, [pc, #12]	; (801ba24 <ReflashSerialSend+0x14c>)
 801ba16:	2280      	movs	r2, #128	; 0x80
 801ba18:	01d2      	lsls	r2, r2, #7
 801ba1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801ba1c:	46c0      	nop			; (mov r8, r8)
 801ba1e:	46bd      	mov	sp, r7
 801ba20:	b004      	add	sp, #16
 801ba22:	bdb0      	pop	{r4, r5, r7, pc}
 801ba24:	48000400 	.word	0x48000400
 801ba28:	200028dc 	.word	0x200028dc
 801ba2c:	00004e1f 	.word	0x00004e1f
 801ba30:	40013800 	.word	0x40013800

0801ba34 <GetSerialMessage>:

// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
int32_t GetSerialMessage(stSerial *SerialStruct) {
 801ba34:	b580      	push	{r7, lr}
 801ba36:	b08a      	sub	sp, #40	; 0x28
 801ba38:	af00      	add	r7, sp, #0
 801ba3a:	6078      	str	r0, [r7, #4]

  uint32_t  State, Data, SyncCount, InitialCount;
  uint32_t  CmdLen, Offset, CmdCrc;

  State = 0;
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	627b      	str	r3, [r7, #36]	; 0x24
  SyncCount = 0;
 801ba40:	2300      	movs	r3, #0
 801ba42:	623b      	str	r3, [r7, #32]

  CRC->INIT = 0x0000;
 801ba44:	4b5c      	ldr	r3, [pc, #368]	; (801bbb8 <GetSerialMessage+0x184>)
 801ba46:	2200      	movs	r2, #0
 801ba48:	611a      	str	r2, [r3, #16]
  CRC->POL = 0x1021;
 801ba4a:	4b5b      	ldr	r3, [pc, #364]	; (801bbb8 <GetSerialMessage+0x184>)
 801ba4c:	4a5b      	ldr	r2, [pc, #364]	; (801bbbc <GetSerialMessage+0x188>)
 801ba4e:	615a      	str	r2, [r3, #20]
  CRC->CR = (1 << 3) | (1 << 0);          // 16-bit poly, reset
 801ba50:	4b59      	ldr	r3, [pc, #356]	; (801bbb8 <GetSerialMessage+0x184>)
 801ba52:	2209      	movs	r2, #9
 801ba54:	609a      	str	r2, [r3, #8]

  Data = 0;
 801ba56:	2300      	movs	r3, #0
 801ba58:	60fb      	str	r3, [r7, #12]
  CmdCrc = 0;
 801ba5a:	2300      	movs	r3, #0
 801ba5c:	613b      	str	r3, [r7, #16]
  Offset = 0;
 801ba5e:	2300      	movs	r3, #0
 801ba60:	617b      	str	r3, [r7, #20]
  CmdLen = 0;
 801ba62:	2300      	movs	r3, #0
 801ba64:	61bb      	str	r3, [r7, #24]
  while ( TRUE ) {
    //
    // Wait for Data
    //
    USART1->ICR = UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF;
 801ba66:	4b56      	ldr	r3, [pc, #344]	; (801bbc0 <GetSerialMessage+0x18c>)
 801ba68:	220f      	movs	r2, #15
 801ba6a:	621a      	str	r2, [r3, #32]
    InitialCount = 0;
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	61fb      	str	r3, [r7, #28]
    while ((USART1->ISR & (1 << 5)) == 0 ) {
 801ba70:	e008      	b.n	801ba84 <GetSerialMessage+0x50>
        InitialCount++;
 801ba72:	69fb      	ldr	r3, [r7, #28]
 801ba74:	3301      	adds	r3, #1
 801ba76:	61fb      	str	r3, [r7, #28]
        if (InitialCount > 700000) {
 801ba78:	69fb      	ldr	r3, [r7, #28]
 801ba7a:	4a52      	ldr	r2, [pc, #328]	; (801bbc4 <GetSerialMessage+0x190>)
 801ba7c:	4293      	cmp	r3, r2
 801ba7e:	d901      	bls.n	801ba84 <GetSerialMessage+0x50>
            return FALSE;
 801ba80:	2300      	movs	r3, #0
 801ba82:	e095      	b.n	801bbb0 <GetSerialMessage+0x17c>
    while ((USART1->ISR & (1 << 5)) == 0 ) {
 801ba84:	4b4e      	ldr	r3, [pc, #312]	; (801bbc0 <GetSerialMessage+0x18c>)
 801ba86:	69db      	ldr	r3, [r3, #28]
 801ba88:	2220      	movs	r2, #32
 801ba8a:	4013      	ands	r3, r2
 801ba8c:	d0f1      	beq.n	801ba72 <GetSerialMessage+0x3e>
        }
    }
    Data = USART1->RDR & 0xFF;
 801ba8e:	4b4c      	ldr	r3, [pc, #304]	; (801bbc0 <GetSerialMessage+0x18c>)
 801ba90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ba92:	b29b      	uxth	r3, r3
 801ba94:	001a      	movs	r2, r3
 801ba96:	23ff      	movs	r3, #255	; 0xff
 801ba98:	4013      	ands	r3, r2
 801ba9a:	60fb      	str	r3, [r7, #12]
    //
    // NOTE:  Do not use a Switch statement, as the addresses of the cases are stored in a lookup table that is
    //  being placed in the area of flash that gets erased, causing the switch statement to blow-up!
    //
    if (State == 0) {
 801ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d112      	bne.n	801bac8 <GetSerialMessage+0x94>
        if ( Data == 0xAA ) {
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	2baa      	cmp	r3, #170	; 0xaa
 801baa6:	d103      	bne.n	801bab0 <GetSerialMessage+0x7c>
          SyncCount++;
 801baa8:	6a3b      	ldr	r3, [r7, #32]
 801baaa:	3301      	adds	r3, #1
 801baac:	623b      	str	r3, [r7, #32]
 801baae:	e7da      	b.n	801ba66 <GetSerialMessage+0x32>
        } else {
          if ( (Data == 0x00) && (SyncCount >= 3) ) {
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d105      	bne.n	801bac2 <GetSerialMessage+0x8e>
 801bab6:	6a3b      	ldr	r3, [r7, #32]
 801bab8:	2b02      	cmp	r3, #2
 801baba:	d902      	bls.n	801bac2 <GetSerialMessage+0x8e>
            State++;  // Must have received at least 3 of the 5 0xAA's
 801babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801babe:	3301      	adds	r3, #1
 801bac0:	627b      	str	r3, [r7, #36]	; 0x24
          }
          SyncCount = 0;
 801bac2:	2300      	movs	r3, #0
 801bac4:	623b      	str	r3, [r7, #32]
 801bac6:	e7ce      	b.n	801ba66 <GetSerialMessage+0x32>
         }
    } else if (State == 1) {
 801bac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801baca:	2b01      	cmp	r3, #1
 801bacc:	d10f      	bne.n	801baee <GetSerialMessage+0xba>
        CRC->CR = (1 << 3) | (1 << 0);          // 16-bit poly, reset - Initialize CRC Generator
 801bace:	4b3a      	ldr	r3, [pc, #232]	; (801bbb8 <GetSerialMessage+0x184>)
 801bad0:	2209      	movs	r2, #9
 801bad2:	609a      	str	r2, [r3, #8]
        *(uint8_t*) (&CRC->DR) = Data;
 801bad4:	4b38      	ldr	r3, [pc, #224]	; (801bbb8 <GetSerialMessage+0x184>)
 801bad6:	68fa      	ldr	r2, [r7, #12]
 801bad8:	b2d2      	uxtb	r2, r2
 801bada:	701a      	strb	r2, [r3, #0]
        State++;
 801badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bade:	3301      	adds	r3, #1
 801bae0:	627b      	str	r3, [r7, #36]	; 0x24
        if ( Data != 0xEE ) {
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	2bee      	cmp	r3, #238	; 0xee
 801bae6:	d0be      	beq.n	801ba66 <GetSerialMessage+0x32>
          State = 0;                        // Command Must be 0xEE
 801bae8:	2300      	movs	r3, #0
 801baea:	627b      	str	r3, [r7, #36]	; 0x24
 801baec:	e7bb      	b.n	801ba66 <GetSerialMessage+0x32>
        }
    } else if (State == 2) {
 801baee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801baf0:	2b02      	cmp	r3, #2
 801baf2:	d109      	bne.n	801bb08 <GetSerialMessage+0xd4>
        CmdLen = Data;                              // LSB
 801baf4:	68fb      	ldr	r3, [r7, #12]
 801baf6:	61bb      	str	r3, [r7, #24]
        *(uint8_t*) (&CRC->DR) = Data;
 801baf8:	4b2f      	ldr	r3, [pc, #188]	; (801bbb8 <GetSerialMessage+0x184>)
 801bafa:	68fa      	ldr	r2, [r7, #12]
 801bafc:	b2d2      	uxtb	r2, r2
 801bafe:	701a      	strb	r2, [r3, #0]
        State++;
 801bb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb02:	3301      	adds	r3, #1
 801bb04:	627b      	str	r3, [r7, #36]	; 0x24
 801bb06:	e7ae      	b.n	801ba66 <GetSerialMessage+0x32>
    } else if (State == 3) {
 801bb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb0a:	2b03      	cmp	r3, #3
 801bb0c:	d116      	bne.n	801bb3c <GetSerialMessage+0x108>
        CmdLen += (uint16_t) Data << 8;              // MSB
 801bb0e:	68fb      	ldr	r3, [r7, #12]
 801bb10:	b29b      	uxth	r3, r3
 801bb12:	021b      	lsls	r3, r3, #8
 801bb14:	001a      	movs	r2, r3
 801bb16:	69bb      	ldr	r3, [r7, #24]
 801bb18:	189b      	adds	r3, r3, r2
 801bb1a:	61bb      	str	r3, [r7, #24]
        *(uint8_t*) (&CRC->DR) = Data;
 801bb1c:	4b26      	ldr	r3, [pc, #152]	; (801bbb8 <GetSerialMessage+0x184>)
 801bb1e:	68fa      	ldr	r2, [r7, #12]
 801bb20:	b2d2      	uxtb	r2, r2
 801bb22:	701a      	strb	r2, [r3, #0]
        State++;
 801bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb26:	3301      	adds	r3, #1
 801bb28:	627b      	str	r3, [r7, #36]	; 0x24
        if ( CmdLen != 2052 ) {
 801bb2a:	69bb      	ldr	r3, [r7, #24]
 801bb2c:	4a26      	ldr	r2, [pc, #152]	; (801bbc8 <GetSerialMessage+0x194>)
 801bb2e:	4293      	cmp	r3, r2
 801bb30:	d001      	beq.n	801bb36 <GetSerialMessage+0x102>
          State = 0;                            // Data Length must be 2052, 4 bytes for Page Number, 2048 bytes of page Data
 801bb32:	2300      	movs	r3, #0
 801bb34:	627b      	str	r3, [r7, #36]	; 0x24
        }
        Offset = 0;
 801bb36:	2300      	movs	r3, #0
 801bb38:	617b      	str	r3, [r7, #20]
 801bb3a:	e794      	b.n	801ba66 <GetSerialMessage+0x32>
    } else if (State == 4) {
 801bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb3e:	2b04      	cmp	r3, #4
 801bb40:	d117      	bne.n	801bb72 <GetSerialMessage+0x13e>
        SerialStruct->TxRxBuffer[Offset++] = Data;
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	695a      	ldr	r2, [r3, #20]
 801bb46:	697b      	ldr	r3, [r7, #20]
 801bb48:	1c59      	adds	r1, r3, #1
 801bb4a:	6179      	str	r1, [r7, #20]
 801bb4c:	18d3      	adds	r3, r2, r3
 801bb4e:	68fa      	ldr	r2, [r7, #12]
 801bb50:	b2d2      	uxtb	r2, r2
 801bb52:	701a      	strb	r2, [r3, #0]
        *(uint8_t*) (&CRC->DR) = Data;
 801bb54:	4b18      	ldr	r3, [pc, #96]	; (801bbb8 <GetSerialMessage+0x184>)
 801bb56:	68fa      	ldr	r2, [r7, #12]
 801bb58:	b2d2      	uxtb	r2, r2
 801bb5a:	701a      	strb	r2, [r3, #0]
        CmdLen--;
 801bb5c:	69bb      	ldr	r3, [r7, #24]
 801bb5e:	3b01      	subs	r3, #1
 801bb60:	61bb      	str	r3, [r7, #24]
        if ( CmdLen == 0 ) {
 801bb62:	69bb      	ldr	r3, [r7, #24]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d000      	beq.n	801bb6a <GetSerialMessage+0x136>
 801bb68:	e77d      	b.n	801ba66 <GetSerialMessage+0x32>
          State++;
 801bb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb6c:	3301      	adds	r3, #1
 801bb6e:	627b      	str	r3, [r7, #36]	; 0x24
 801bb70:	e779      	b.n	801ba66 <GetSerialMessage+0x32>
        }
    } else if (State == 5) {
 801bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb74:	2b05      	cmp	r3, #5
 801bb76:	d105      	bne.n	801bb84 <GetSerialMessage+0x150>
        CmdCrc = Data;                          // LSB
 801bb78:	68fb      	ldr	r3, [r7, #12]
 801bb7a:	613b      	str	r3, [r7, #16]
        State++;
 801bb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb7e:	3301      	adds	r3, #1
 801bb80:	627b      	str	r3, [r7, #36]	; 0x24
 801bb82:	e770      	b.n	801ba66 <GetSerialMessage+0x32>
    } else if (State == 6) {
 801bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb86:	2b06      	cmp	r3, #6
 801bb88:	d000      	beq.n	801bb8c <GetSerialMessage+0x158>
 801bb8a:	e76c      	b.n	801ba66 <GetSerialMessage+0x32>
        State = 0;
 801bb8c:	2300      	movs	r3, #0
 801bb8e:	627b      	str	r3, [r7, #36]	; 0x24
        CmdCrc += (uint16_t) Data << 8;          // MSB
 801bb90:	68fb      	ldr	r3, [r7, #12]
 801bb92:	b29b      	uxth	r3, r3
 801bb94:	021b      	lsls	r3, r3, #8
 801bb96:	001a      	movs	r2, r3
 801bb98:	693b      	ldr	r3, [r7, #16]
 801bb9a:	189b      	adds	r3, r3, r2
 801bb9c:	613b      	str	r3, [r7, #16]
        if ( CmdCrc == (CRC->DR & 0xFFFF) ) {
 801bb9e:	4b06      	ldr	r3, [pc, #24]	; (801bbb8 <GetSerialMessage+0x184>)
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	041b      	lsls	r3, r3, #16
 801bba4:	0c1b      	lsrs	r3, r3, #16
 801bba6:	693a      	ldr	r2, [r7, #16]
 801bba8:	429a      	cmp	r2, r3
 801bbaa:	d000      	beq.n	801bbae <GetSerialMessage+0x17a>
 801bbac:	e75b      	b.n	801ba66 <GetSerialMessage+0x32>
          return TRUE;
 801bbae:	2301      	movs	r3, #1
        }
    }
  }
}
 801bbb0:	0018      	movs	r0, r3
 801bbb2:	46bd      	mov	sp, r7
 801bbb4:	b00a      	add	sp, #40	; 0x28
 801bbb6:	bd80      	pop	{r7, pc}
 801bbb8:	40023000 	.word	0x40023000
 801bbbc:	00001021 	.word	0x00001021
 801bbc0:	40013800 	.word	0x40013800
 801bbc4:	000aae60 	.word	0x000aae60
 801bbc8:	00000804 	.word	0x00000804

0801bbcc <reflash>:

// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
void reflash(stSerial *SerialStruct) {
 801bbcc:	b580      	push	{r7, lr}
 801bbce:	b086      	sub	sp, #24
 801bbd0:	af00      	add	r7, sp, #0
 801bbd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 801bbd4:	b672      	cpsid	i

  uint16_t  PageNumber, i;
  int32_t   Response, FirmwarePageNumber;

  __disable_irq();
  __HAL_RCC_CRC_CLK_ENABLE();
 801bbd6:	4b57      	ldr	r3, [pc, #348]	; (801bd34 <reflash+0x168>)
 801bbd8:	695a      	ldr	r2, [r3, #20]
 801bbda:	4b56      	ldr	r3, [pc, #344]	; (801bd34 <reflash+0x168>)
 801bbdc:	2140      	movs	r1, #64	; 0x40
 801bbde:	430a      	orrs	r2, r1
 801bbe0:	615a      	str	r2, [r3, #20]
 801bbe2:	4b54      	ldr	r3, [pc, #336]	; (801bd34 <reflash+0x168>)
 801bbe4:	695b      	ldr	r3, [r3, #20]
 801bbe6:	2240      	movs	r2, #64	; 0x40
 801bbe8:	4013      	ands	r3, r2
 801bbea:	60bb      	str	r3, [r7, #8]
 801bbec:	68bb      	ldr	r3, [r7, #8]
  //
  // Unlock FLASH
  //
  if ( HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK) ) {     // Macro
 801bbee:	4b52      	ldr	r3, [pc, #328]	; (801bd38 <reflash+0x16c>)
 801bbf0:	691b      	ldr	r3, [r3, #16]
 801bbf2:	2280      	movs	r2, #128	; 0x80
 801bbf4:	4013      	ands	r3, r2
 801bbf6:	d005      	beq.n	801bc04 <reflash+0x38>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);                 // Macro
 801bbf8:	4b4f      	ldr	r3, [pc, #316]	; (801bd38 <reflash+0x16c>)
 801bbfa:	4a50      	ldr	r2, [pc, #320]	; (801bd3c <reflash+0x170>)
 801bbfc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);                 // Macro
 801bbfe:	4b4e      	ldr	r3, [pc, #312]	; (801bd38 <reflash+0x16c>)
 801bc00:	4a4f      	ldr	r2, [pc, #316]	; (801bd40 <reflash+0x174>)
 801bc02:	605a      	str	r2, [r3, #4]
  }
  //
  // Clear Error Flags
  //
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);// Macro - Clear all FLASH flags
 801bc04:	4b4c      	ldr	r3, [pc, #304]	; (801bd38 <reflash+0x16c>)
 801bc06:	2214      	movs	r2, #20
 801bc08:	60da      	str	r2, [r3, #12]

  for (i = 0 ; i < 56 ; i++) {
 801bc0a:	2314      	movs	r3, #20
 801bc0c:	18fb      	adds	r3, r7, r3
 801bc0e:	2200      	movs	r2, #0
 801bc10:	801a      	strh	r2, [r3, #0]
 801bc12:	e058      	b.n	801bcc6 <reflash+0xfa>
      while (1) {
          SerialStruct->TxRxBuffer[9] = i;
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	695b      	ldr	r3, [r3, #20]
 801bc18:	3309      	adds	r3, #9
 801bc1a:	2214      	movs	r2, #20
 801bc1c:	18ba      	adds	r2, r7, r2
 801bc1e:	8812      	ldrh	r2, [r2, #0]
 801bc20:	b2d2      	uxtb	r2, r2
 801bc22:	701a      	strb	r2, [r3, #0]
          SerialStruct->Command = 0xEE;
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	22ee      	movs	r2, #238	; 0xee
 801bc28:	771a      	strb	r2, [r3, #28]
          SerialStruct->Length = 1;
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	2201      	movs	r2, #1
 801bc2e:	83da      	strh	r2, [r3, #30]
          ReflashSerialSend(SerialStruct);
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	0018      	movs	r0, r3
 801bc34:	f7ff fe50 	bl	801b8d8 <ReflashSerialSend>
          Response = GetSerialMessage(SerialStruct);
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	0018      	movs	r0, r3
 801bc3c:	f7ff fefa 	bl	801ba34 <GetSerialMessage>
 801bc40:	0003      	movs	r3, r0
 801bc42:	613b      	str	r3, [r7, #16]
          FirmwarePageNumber = SerialStruct->TxRxBuffer[0];
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	695b      	ldr	r3, [r3, #20]
 801bc48:	781b      	ldrb	r3, [r3, #0]
 801bc4a:	60fb      	str	r3, [r7, #12]
           if (Response && (i == FirmwarePageNumber)) {
 801bc4c:	693b      	ldr	r3, [r7, #16]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d0e0      	beq.n	801bc14 <reflash+0x48>
 801bc52:	2314      	movs	r3, #20
 801bc54:	18fb      	adds	r3, r7, r3
 801bc56:	881b      	ldrh	r3, [r3, #0]
 801bc58:	68fa      	ldr	r2, [r7, #12]
 801bc5a:	429a      	cmp	r2, r3
 801bc5c:	d1da      	bne.n	801bc14 <reflash+0x48>
              PageNumber = i;
 801bc5e:	2116      	movs	r1, #22
 801bc60:	187b      	adds	r3, r7, r1
 801bc62:	2214      	movs	r2, #20
 801bc64:	18ba      	adds	r2, r7, r2
 801bc66:	8812      	ldrh	r2, [r2, #0]
 801bc68:	801a      	strh	r2, [r3, #0]
              if (PageNumber == 55) {
 801bc6a:	187b      	adds	r3, r7, r1
 801bc6c:	881b      	ldrh	r3, [r3, #0]
 801bc6e:	2b37      	cmp	r3, #55	; 0x37
 801bc70:	d111      	bne.n	801bc96 <reflash+0xca>
                  PageNumber = 56;
 801bc72:	2316      	movs	r3, #22
 801bc74:	18fb      	adds	r3, r7, r3
 801bc76:	2238      	movs	r2, #56	; 0x38
 801bc78:	801a      	strh	r2, [r3, #0]
                  SerialStruct->TxRxBuffer[2050] = 0x55;
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	695b      	ldr	r3, [r3, #20]
 801bc7e:	4a31      	ldr	r2, [pc, #196]	; (801bd44 <reflash+0x178>)
 801bc80:	4694      	mov	ip, r2
 801bc82:	4463      	add	r3, ip
 801bc84:	2255      	movs	r2, #85	; 0x55
 801bc86:	701a      	strb	r2, [r3, #0]
                  SerialStruct->TxRxBuffer[2051] = 0xAA;
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	695b      	ldr	r3, [r3, #20]
 801bc8c:	4a2e      	ldr	r2, [pc, #184]	; (801bd48 <reflash+0x17c>)
 801bc8e:	4694      	mov	ip, r2
 801bc90:	4463      	add	r3, ip
 801bc92:	22aa      	movs	r2, #170	; 0xaa
 801bc94:	701a      	strb	r2, [r3, #0]
              }
              Response = Flash_Program(0x08000000 + (PageNumber * FLASH_PAGE_SIZE), (uint16_t *)&SerialStruct->TxRxBuffer[4]);
 801bc96:	2316      	movs	r3, #22
 801bc98:	18fb      	adds	r3, r7, r3
 801bc9a:	881b      	ldrh	r3, [r3, #0]
 801bc9c:	2280      	movs	r2, #128	; 0x80
 801bc9e:	0252      	lsls	r2, r2, #9
 801bca0:	4694      	mov	ip, r2
 801bca2:	4463      	add	r3, ip
 801bca4:	02da      	lsls	r2, r3, #11
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	695b      	ldr	r3, [r3, #20]
 801bcaa:	3304      	adds	r3, #4
 801bcac:	0019      	movs	r1, r3
 801bcae:	0010      	movs	r0, r2
 801bcb0:	f000 f856 	bl	801bd60 <Flash_Program>
 801bcb4:	0003      	movs	r3, r0
 801bcb6:	613b      	str	r3, [r7, #16]
              break;
 801bcb8:	46c0      	nop			; (mov r8, r8)
  for (i = 0 ; i < 56 ; i++) {
 801bcba:	2114      	movs	r1, #20
 801bcbc:	187b      	adds	r3, r7, r1
 801bcbe:	881a      	ldrh	r2, [r3, #0]
 801bcc0:	187b      	adds	r3, r7, r1
 801bcc2:	3201      	adds	r2, #1
 801bcc4:	801a      	strh	r2, [r3, #0]
 801bcc6:	2314      	movs	r3, #20
 801bcc8:	18fb      	adds	r3, r7, r3
 801bcca:	881b      	ldrh	r3, [r3, #0]
 801bccc:	2b37      	cmp	r3, #55	; 0x37
 801bcce:	d9a1      	bls.n	801bc14 <reflash+0x48>
          }
      }
  }

  SerialStruct->TxRxBuffer[9] = 99;
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	695b      	ldr	r3, [r3, #20]
 801bcd4:	3309      	adds	r3, #9
 801bcd6:	2263      	movs	r2, #99	; 0x63
 801bcd8:	701a      	strb	r2, [r3, #0]
  SerialStruct->Command = 0xEE;
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	22ee      	movs	r2, #238	; 0xee
 801bcde:	771a      	strb	r2, [r3, #28]
  SerialStruct->Length = 1;
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	2201      	movs	r2, #1
 801bce4:	83da      	strh	r2, [r3, #30]
  ReflashSerialSend(SerialStruct);
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	0018      	movs	r0, r3
 801bcea:	f7ff fdf5 	bl	801b8d8 <ReflashSerialSend>
  //
  // Lock Flash
  //
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);// Macro
 801bcee:	4b12      	ldr	r3, [pc, #72]	; (801bd38 <reflash+0x16c>)
 801bcf0:	691a      	ldr	r2, [r3, #16]
 801bcf2:	4b11      	ldr	r3, [pc, #68]	; (801bd38 <reflash+0x16c>)
 801bcf4:	2180      	movs	r1, #128	; 0x80
 801bcf6:	430a      	orrs	r2, r1
 801bcf8:	611a      	str	r2, [r3, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801bcfa:	f3bf 8f4f 	dsb	sy
  //
  // Issue System Reset Command
  //
  __DSB(); /* Ensure all outstanding memory accesses included buffered write are completed before reset */
  SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk);
 801bcfe:	4b13      	ldr	r3, [pc, #76]	; (801bd4c <reflash+0x180>)
 801bd00:	4a13      	ldr	r2, [pc, #76]	; (801bd50 <reflash+0x184>)
 801bd02:	60da      	str	r2, [r3, #12]
 801bd04:	f3bf 8f4f 	dsb	sy
  __DSB(); /* Ensure completion of memory access */
  //
  // Configure Watchdog
  //
  WRITE_REG(IWDG->KR, IWDG_KEY_ENABLE);
 801bd08:	4b12      	ldr	r3, [pc, #72]	; (801bd54 <reflash+0x188>)
 801bd0a:	4a13      	ldr	r2, [pc, #76]	; (801bd58 <reflash+0x18c>)
 801bd0c:	601a      	str	r2, [r3, #0]
  WRITE_REG(IWDG->KR, IWDG_KEY_WRITE_ACCESS_ENABLE);
 801bd0e:	4b11      	ldr	r3, [pc, #68]	; (801bd54 <reflash+0x188>)
 801bd10:	4a12      	ldr	r2, [pc, #72]	; (801bd5c <reflash+0x190>)
 801bd12:	601a      	str	r2, [r3, #0]
  IWDG->PR = IWDG_PRESCALER_256;
 801bd14:	4b0f      	ldr	r3, [pc, #60]	; (801bd54 <reflash+0x188>)
 801bd16:	2206      	movs	r2, #6
 801bd18:	605a      	str	r2, [r3, #4]
  IWDG->RLR = (500 * 10) / 64;
 801bd1a:	4b0e      	ldr	r3, [pc, #56]	; (801bd54 <reflash+0x188>)
 801bd1c:	224e      	movs	r2, #78	; 0x4e
 801bd1e:	609a      	str	r2, [r3, #8]
  while ( IWDG->SR != RESET ) {
 801bd20:	46c0      	nop			; (mov r8, r8)
 801bd22:	4b0c      	ldr	r3, [pc, #48]	; (801bd54 <reflash+0x188>)
 801bd24:	68db      	ldr	r3, [r3, #12]
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d1fb      	bne.n	801bd22 <reflash+0x156>
  }
  IWDG->WINR = (250 * 10) / 64;
 801bd2a:	4b0a      	ldr	r3, [pc, #40]	; (801bd54 <reflash+0x188>)
 801bd2c:	2227      	movs	r2, #39	; 0x27
 801bd2e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("nop");
 801bd30:	46c0      	nop			; (mov r8, r8)
  for ( ; ; ) {
    __NOP();            // Wait for Watchdog to timeout
 801bd32:	e7fd      	b.n	801bd30 <reflash+0x164>
 801bd34:	40021000 	.word	0x40021000
 801bd38:	40022000 	.word	0x40022000
 801bd3c:	45670123 	.word	0x45670123
 801bd40:	cdef89ab 	.word	0xcdef89ab
 801bd44:	00000802 	.word	0x00000802
 801bd48:	00000803 	.word	0x00000803
 801bd4c:	e000ed00 	.word	0xe000ed00
 801bd50:	05fa0004 	.word	0x05fa0004
 801bd54:	40003000 	.word	0x40003000
 801bd58:	0000cccc 	.word	0x0000cccc
 801bd5c:	00005555 	.word	0x00005555

0801bd60 <Flash_Program>:
}
//
// ********************************************************************************************************************************
// ********************************************************************************************************************************
//
HAL_StatusTypeDef Flash_Program(uint32_t Address, uint16_t *WordPtr) {
 801bd60:	b5b0      	push	{r4, r5, r7, lr}
 801bd62:	b084      	sub	sp, #16
 801bd64:	af00      	add	r7, sp, #0
 801bd66:	6078      	str	r0, [r7, #4]
 801bd68:	6039      	str	r1, [r7, #0]

  HAL_StatusTypeDef status;

  status = WaitForLastOperation();
 801bd6a:	250f      	movs	r5, #15
 801bd6c:	197c      	adds	r4, r7, r5
 801bd6e:	f7ff fd47 	bl	801b800 <WaitForLastOperation>
 801bd72:	0003      	movs	r3, r0
 801bd74:	7023      	strb	r3, [r4, #0]
  if ( status == HAL_OK ) {
 801bd76:	197b      	adds	r3, r7, r5
 801bd78:	781b      	ldrb	r3, [r3, #0]
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d11a      	bne.n	801bdb4 <Flash_Program+0x54>
    SET_BIT(FLASH->CR, FLASH_CR_PER);           // Erase current page
 801bd7e:	4b30      	ldr	r3, [pc, #192]	; (801be40 <Flash_Program+0xe0>)
 801bd80:	691a      	ldr	r2, [r3, #16]
 801bd82:	4b2f      	ldr	r3, [pc, #188]	; (801be40 <Flash_Program+0xe0>)
 801bd84:	2102      	movs	r1, #2
 801bd86:	430a      	orrs	r2, r1
 801bd88:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, Address);
 801bd8a:	4b2d      	ldr	r3, [pc, #180]	; (801be40 <Flash_Program+0xe0>)
 801bd8c:	687a      	ldr	r2, [r7, #4]
 801bd8e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801bd90:	4b2b      	ldr	r3, [pc, #172]	; (801be40 <Flash_Program+0xe0>)
 801bd92:	691a      	ldr	r2, [r3, #16]
 801bd94:	4b2a      	ldr	r3, [pc, #168]	; (801be40 <Flash_Program+0xe0>)
 801bd96:	2140      	movs	r1, #64	; 0x40
 801bd98:	430a      	orrs	r2, r1
 801bd9a:	611a      	str	r2, [r3, #16]
    status = WaitForLastOperation(); /* Wait for last operation to be completed */
 801bd9c:	230f      	movs	r3, #15
 801bd9e:	18fc      	adds	r4, r7, r3
 801bda0:	f7ff fd2e 	bl	801b800 <WaitForLastOperation>
 801bda4:	0003      	movs	r3, r0
 801bda6:	7023      	strb	r3, [r4, #0]
    CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 801bda8:	4b25      	ldr	r3, [pc, #148]	; (801be40 <Flash_Program+0xe0>)
 801bdaa:	691a      	ldr	r2, [r3, #16]
 801bdac:	4b24      	ldr	r3, [pc, #144]	; (801be40 <Flash_Program+0xe0>)
 801bdae:	2102      	movs	r1, #2
 801bdb0:	438a      	bics	r2, r1
 801bdb2:	611a      	str	r2, [r3, #16]
  }
  if ( status != HAL_OK ) {
 801bdb4:	230f      	movs	r3, #15
 801bdb6:	18fb      	adds	r3, r7, r3
 801bdb8:	781b      	ldrb	r3, [r3, #0]
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d003      	beq.n	801bdc6 <Flash_Program+0x66>
    return status;
 801bdbe:	230f      	movs	r3, #15
 801bdc0:	18fb      	adds	r3, r7, r3
 801bdc2:	781b      	ldrb	r3, [r3, #0]
 801bdc4:	e038      	b.n	801be38 <Flash_Program+0xd8>
  }
  status = WaitForLastOperation(); /* Wait for last operation to be completed */
 801bdc6:	250f      	movs	r5, #15
 801bdc8:	197c      	adds	r4, r7, r5
 801bdca:	f7ff fd19 	bl	801b800 <WaitForLastOperation>
 801bdce:	0003      	movs	r3, r0
 801bdd0:	7023      	strb	r3, [r4, #0]
  if ( status == HAL_OK ) {
 801bdd2:	197b      	adds	r3, r7, r5
 801bdd4:	781b      	ldrb	r3, [r3, #0]
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	d12b      	bne.n	801be32 <Flash_Program+0xd2>
    for ( uint32_t index = 0 ; index < (2048 / 2) ; index++ ) {
 801bdda:	2300      	movs	r3, #0
 801bddc:	60bb      	str	r3, [r7, #8]
 801bdde:	e022      	b.n	801be26 <Flash_Program+0xc6>
      SET_BIT(FLASH->CR, FLASH_CR_PG); /* Proceed to program the new data */
 801bde0:	4b17      	ldr	r3, [pc, #92]	; (801be40 <Flash_Program+0xe0>)
 801bde2:	691a      	ldr	r2, [r3, #16]
 801bde4:	4b16      	ldr	r3, [pc, #88]	; (801be40 <Flash_Program+0xe0>)
 801bde6:	2101      	movs	r1, #1
 801bde8:	430a      	orrs	r2, r1
 801bdea:	611a      	str	r2, [r3, #16]
      *(__IO uint16_t*) Address = WordPtr[index]; /* Write data in the address */
 801bdec:	68bb      	ldr	r3, [r7, #8]
 801bdee:	005b      	lsls	r3, r3, #1
 801bdf0:	683a      	ldr	r2, [r7, #0]
 801bdf2:	18d2      	adds	r2, r2, r3
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	8812      	ldrh	r2, [r2, #0]
 801bdf8:	801a      	strh	r2, [r3, #0]
      Address += 2;
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	3302      	adds	r3, #2
 801bdfe:	607b      	str	r3, [r7, #4]
      status = WaitForLastOperation(); /* Wait for last operation to be completed */
 801be00:	250f      	movs	r5, #15
 801be02:	197c      	adds	r4, r7, r5
 801be04:	f7ff fcfc 	bl	801b800 <WaitForLastOperation>
 801be08:	0003      	movs	r3, r0
 801be0a:	7023      	strb	r3, [r4, #0]
      CLEAR_BIT(FLASH->CR, FLASH_CR_PG); /* If the program operation is completed, disable the PG Bit */
 801be0c:	4b0c      	ldr	r3, [pc, #48]	; (801be40 <Flash_Program+0xe0>)
 801be0e:	691a      	ldr	r2, [r3, #16]
 801be10:	4b0b      	ldr	r3, [pc, #44]	; (801be40 <Flash_Program+0xe0>)
 801be12:	2101      	movs	r1, #1
 801be14:	438a      	bics	r2, r1
 801be16:	611a      	str	r2, [r3, #16]
      if ( status != HAL_OK ) {
 801be18:	197b      	adds	r3, r7, r5
 801be1a:	781b      	ldrb	r3, [r3, #0]
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d107      	bne.n	801be30 <Flash_Program+0xd0>
    for ( uint32_t index = 0 ; index < (2048 / 2) ; index++ ) {
 801be20:	68bb      	ldr	r3, [r7, #8]
 801be22:	3301      	adds	r3, #1
 801be24:	60bb      	str	r3, [r7, #8]
 801be26:	68bb      	ldr	r3, [r7, #8]
 801be28:	4a06      	ldr	r2, [pc, #24]	; (801be44 <Flash_Program+0xe4>)
 801be2a:	4293      	cmp	r3, r2
 801be2c:	d9d8      	bls.n	801bde0 <Flash_Program+0x80>
 801be2e:	e000      	b.n	801be32 <Flash_Program+0xd2>
        break;
 801be30:	46c0      	nop			; (mov r8, r8)
      }
    }
  }
  return status;
 801be32:	230f      	movs	r3, #15
 801be34:	18fb      	adds	r3, r7, r3
 801be36:	781b      	ldrb	r3, [r3, #0]
}
 801be38:	0018      	movs	r0, r3
 801be3a:	46bd      	mov	sp, r7
 801be3c:	b004      	add	sp, #16
 801be3e:	bdb0      	pop	{r4, r5, r7, pc}
 801be40:	40022000 	.word	0x40022000
 801be44:	000003ff 	.word	0x000003ff
