
CD_Throttle_Rev12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800c75c  0800c75c  0001c75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd08  0800cd08  0002be9c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd08  0800cd08  0001cd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd10  0800cd10  0002be9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd10  0800cd10  0001cd10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd14  0800cd14  0001cd14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .reflash_text 0000069c  0801b800  0801b800  0002b800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .data         00000008  20000000  0800cd18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000037f4  20000008  0800cd20  00020008  2**3
                  ALLOC
 11 ._user_heap_stack 00000404  200037fc  0800cd20  000237fc  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  0002be9c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00071d76  00000000  00000000  0002bec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000637a  00000000  00000000  0009dc3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000850  00000000  00000000  000a3fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005f0  00000000  00000000  000a4808  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000125b7  00000000  00000000  000a4df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001051d  00000000  00000000  000b73af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0004ab98  00000000  00000000  000c78cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00112464  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000161c  00000000  00000000  001124e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c06      	ldr	r4, [pc, #24]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d107      	bne.n	80001a2 <__do_global_dtors_aux+0x1a>
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <__do_global_dtors_aux+0x16>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x24>)
 800019a:	e000      	b.n	800019e <__do_global_dtors_aux+0x16>
 800019c:	bf00      	nop
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000008 	.word	0x20000008
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800c744 	.word	0x0800c744

080001b0 <frame_dummy>:
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <frame_dummy+0x14>)
 80001b2:	b510      	push	{r4, lr}
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <frame_dummy+0x10>
 80001b8:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	4804      	ldr	r0, [pc, #16]	; (80001cc <frame_dummy+0x1c>)
 80001bc:	e000      	b.n	80001c0 <frame_dummy+0x10>
 80001be:	bf00      	nop
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	46c0      	nop			; (mov r8, r8)
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	0800c744 	.word	0x0800c744

080001d0 <__udivsi3>:
 80001d0:	2200      	movs	r2, #0
 80001d2:	0843      	lsrs	r3, r0, #1
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d374      	bcc.n	80002c2 <__udivsi3+0xf2>
 80001d8:	0903      	lsrs	r3, r0, #4
 80001da:	428b      	cmp	r3, r1
 80001dc:	d35f      	bcc.n	800029e <__udivsi3+0xce>
 80001de:	0a03      	lsrs	r3, r0, #8
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d344      	bcc.n	800026e <__udivsi3+0x9e>
 80001e4:	0b03      	lsrs	r3, r0, #12
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d328      	bcc.n	800023c <__udivsi3+0x6c>
 80001ea:	0c03      	lsrs	r3, r0, #16
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d30d      	bcc.n	800020c <__udivsi3+0x3c>
 80001f0:	22ff      	movs	r2, #255	; 0xff
 80001f2:	0209      	lsls	r1, r1, #8
 80001f4:	ba12      	rev	r2, r2
 80001f6:	0c03      	lsrs	r3, r0, #16
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d302      	bcc.n	8000202 <__udivsi3+0x32>
 80001fc:	1212      	asrs	r2, r2, #8
 80001fe:	0209      	lsls	r1, r1, #8
 8000200:	d065      	beq.n	80002ce <__udivsi3+0xfe>
 8000202:	0b03      	lsrs	r3, r0, #12
 8000204:	428b      	cmp	r3, r1
 8000206:	d319      	bcc.n	800023c <__udivsi3+0x6c>
 8000208:	e000      	b.n	800020c <__udivsi3+0x3c>
 800020a:	0a09      	lsrs	r1, r1, #8
 800020c:	0bc3      	lsrs	r3, r0, #15
 800020e:	428b      	cmp	r3, r1
 8000210:	d301      	bcc.n	8000216 <__udivsi3+0x46>
 8000212:	03cb      	lsls	r3, r1, #15
 8000214:	1ac0      	subs	r0, r0, r3
 8000216:	4152      	adcs	r2, r2
 8000218:	0b83      	lsrs	r3, r0, #14
 800021a:	428b      	cmp	r3, r1
 800021c:	d301      	bcc.n	8000222 <__udivsi3+0x52>
 800021e:	038b      	lsls	r3, r1, #14
 8000220:	1ac0      	subs	r0, r0, r3
 8000222:	4152      	adcs	r2, r2
 8000224:	0b43      	lsrs	r3, r0, #13
 8000226:	428b      	cmp	r3, r1
 8000228:	d301      	bcc.n	800022e <__udivsi3+0x5e>
 800022a:	034b      	lsls	r3, r1, #13
 800022c:	1ac0      	subs	r0, r0, r3
 800022e:	4152      	adcs	r2, r2
 8000230:	0b03      	lsrs	r3, r0, #12
 8000232:	428b      	cmp	r3, r1
 8000234:	d301      	bcc.n	800023a <__udivsi3+0x6a>
 8000236:	030b      	lsls	r3, r1, #12
 8000238:	1ac0      	subs	r0, r0, r3
 800023a:	4152      	adcs	r2, r2
 800023c:	0ac3      	lsrs	r3, r0, #11
 800023e:	428b      	cmp	r3, r1
 8000240:	d301      	bcc.n	8000246 <__udivsi3+0x76>
 8000242:	02cb      	lsls	r3, r1, #11
 8000244:	1ac0      	subs	r0, r0, r3
 8000246:	4152      	adcs	r2, r2
 8000248:	0a83      	lsrs	r3, r0, #10
 800024a:	428b      	cmp	r3, r1
 800024c:	d301      	bcc.n	8000252 <__udivsi3+0x82>
 800024e:	028b      	lsls	r3, r1, #10
 8000250:	1ac0      	subs	r0, r0, r3
 8000252:	4152      	adcs	r2, r2
 8000254:	0a43      	lsrs	r3, r0, #9
 8000256:	428b      	cmp	r3, r1
 8000258:	d301      	bcc.n	800025e <__udivsi3+0x8e>
 800025a:	024b      	lsls	r3, r1, #9
 800025c:	1ac0      	subs	r0, r0, r3
 800025e:	4152      	adcs	r2, r2
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d301      	bcc.n	800026a <__udivsi3+0x9a>
 8000266:	020b      	lsls	r3, r1, #8
 8000268:	1ac0      	subs	r0, r0, r3
 800026a:	4152      	adcs	r2, r2
 800026c:	d2cd      	bcs.n	800020a <__udivsi3+0x3a>
 800026e:	09c3      	lsrs	r3, r0, #7
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__udivsi3+0xa8>
 8000274:	01cb      	lsls	r3, r1, #7
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0983      	lsrs	r3, r0, #6
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__udivsi3+0xb4>
 8000280:	018b      	lsls	r3, r1, #6
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0943      	lsrs	r3, r0, #5
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__udivsi3+0xc0>
 800028c:	014b      	lsls	r3, r1, #5
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0903      	lsrs	r3, r0, #4
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__udivsi3+0xcc>
 8000298:	010b      	lsls	r3, r1, #4
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	08c3      	lsrs	r3, r0, #3
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__udivsi3+0xd8>
 80002a4:	00cb      	lsls	r3, r1, #3
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0883      	lsrs	r3, r0, #2
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__udivsi3+0xe4>
 80002b0:	008b      	lsls	r3, r1, #2
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0843      	lsrs	r3, r0, #1
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__udivsi3+0xf0>
 80002bc:	004b      	lsls	r3, r1, #1
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	1a41      	subs	r1, r0, r1
 80002c4:	d200      	bcs.n	80002c8 <__udivsi3+0xf8>
 80002c6:	4601      	mov	r1, r0
 80002c8:	4152      	adcs	r2, r2
 80002ca:	4610      	mov	r0, r2
 80002cc:	4770      	bx	lr
 80002ce:	e7ff      	b.n	80002d0 <__udivsi3+0x100>
 80002d0:	b501      	push	{r0, lr}
 80002d2:	2000      	movs	r0, #0
 80002d4:	f000 f8f0 	bl	80004b8 <__aeabi_idiv0>
 80002d8:	bd02      	pop	{r1, pc}
 80002da:	46c0      	nop			; (mov r8, r8)

080002dc <__aeabi_uidivmod>:
 80002dc:	2900      	cmp	r1, #0
 80002de:	d0f7      	beq.n	80002d0 <__udivsi3+0x100>
 80002e0:	e776      	b.n	80001d0 <__udivsi3>
 80002e2:	4770      	bx	lr

080002e4 <__divsi3>:
 80002e4:	4603      	mov	r3, r0
 80002e6:	430b      	orrs	r3, r1
 80002e8:	d47f      	bmi.n	80003ea <__divsi3+0x106>
 80002ea:	2200      	movs	r2, #0
 80002ec:	0843      	lsrs	r3, r0, #1
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d374      	bcc.n	80003dc <__divsi3+0xf8>
 80002f2:	0903      	lsrs	r3, r0, #4
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d35f      	bcc.n	80003b8 <__divsi3+0xd4>
 80002f8:	0a03      	lsrs	r3, r0, #8
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d344      	bcc.n	8000388 <__divsi3+0xa4>
 80002fe:	0b03      	lsrs	r3, r0, #12
 8000300:	428b      	cmp	r3, r1
 8000302:	d328      	bcc.n	8000356 <__divsi3+0x72>
 8000304:	0c03      	lsrs	r3, r0, #16
 8000306:	428b      	cmp	r3, r1
 8000308:	d30d      	bcc.n	8000326 <__divsi3+0x42>
 800030a:	22ff      	movs	r2, #255	; 0xff
 800030c:	0209      	lsls	r1, r1, #8
 800030e:	ba12      	rev	r2, r2
 8000310:	0c03      	lsrs	r3, r0, #16
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__divsi3+0x38>
 8000316:	1212      	asrs	r2, r2, #8
 8000318:	0209      	lsls	r1, r1, #8
 800031a:	d065      	beq.n	80003e8 <__divsi3+0x104>
 800031c:	0b03      	lsrs	r3, r0, #12
 800031e:	428b      	cmp	r3, r1
 8000320:	d319      	bcc.n	8000356 <__divsi3+0x72>
 8000322:	e000      	b.n	8000326 <__divsi3+0x42>
 8000324:	0a09      	lsrs	r1, r1, #8
 8000326:	0bc3      	lsrs	r3, r0, #15
 8000328:	428b      	cmp	r3, r1
 800032a:	d301      	bcc.n	8000330 <__divsi3+0x4c>
 800032c:	03cb      	lsls	r3, r1, #15
 800032e:	1ac0      	subs	r0, r0, r3
 8000330:	4152      	adcs	r2, r2
 8000332:	0b83      	lsrs	r3, r0, #14
 8000334:	428b      	cmp	r3, r1
 8000336:	d301      	bcc.n	800033c <__divsi3+0x58>
 8000338:	038b      	lsls	r3, r1, #14
 800033a:	1ac0      	subs	r0, r0, r3
 800033c:	4152      	adcs	r2, r2
 800033e:	0b43      	lsrs	r3, r0, #13
 8000340:	428b      	cmp	r3, r1
 8000342:	d301      	bcc.n	8000348 <__divsi3+0x64>
 8000344:	034b      	lsls	r3, r1, #13
 8000346:	1ac0      	subs	r0, r0, r3
 8000348:	4152      	adcs	r2, r2
 800034a:	0b03      	lsrs	r3, r0, #12
 800034c:	428b      	cmp	r3, r1
 800034e:	d301      	bcc.n	8000354 <__divsi3+0x70>
 8000350:	030b      	lsls	r3, r1, #12
 8000352:	1ac0      	subs	r0, r0, r3
 8000354:	4152      	adcs	r2, r2
 8000356:	0ac3      	lsrs	r3, r0, #11
 8000358:	428b      	cmp	r3, r1
 800035a:	d301      	bcc.n	8000360 <__divsi3+0x7c>
 800035c:	02cb      	lsls	r3, r1, #11
 800035e:	1ac0      	subs	r0, r0, r3
 8000360:	4152      	adcs	r2, r2
 8000362:	0a83      	lsrs	r3, r0, #10
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x88>
 8000368:	028b      	lsls	r3, r1, #10
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0a43      	lsrs	r3, r0, #9
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x94>
 8000374:	024b      	lsls	r3, r1, #9
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0xa0>
 8000380:	020b      	lsls	r3, r1, #8
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	d2cd      	bcs.n	8000324 <__divsi3+0x40>
 8000388:	09c3      	lsrs	r3, r0, #7
 800038a:	428b      	cmp	r3, r1
 800038c:	d301      	bcc.n	8000392 <__divsi3+0xae>
 800038e:	01cb      	lsls	r3, r1, #7
 8000390:	1ac0      	subs	r0, r0, r3
 8000392:	4152      	adcs	r2, r2
 8000394:	0983      	lsrs	r3, r0, #6
 8000396:	428b      	cmp	r3, r1
 8000398:	d301      	bcc.n	800039e <__divsi3+0xba>
 800039a:	018b      	lsls	r3, r1, #6
 800039c:	1ac0      	subs	r0, r0, r3
 800039e:	4152      	adcs	r2, r2
 80003a0:	0943      	lsrs	r3, r0, #5
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d301      	bcc.n	80003aa <__divsi3+0xc6>
 80003a6:	014b      	lsls	r3, r1, #5
 80003a8:	1ac0      	subs	r0, r0, r3
 80003aa:	4152      	adcs	r2, r2
 80003ac:	0903      	lsrs	r3, r0, #4
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0xd2>
 80003b2:	010b      	lsls	r3, r1, #4
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	08c3      	lsrs	r3, r0, #3
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0xde>
 80003be:	00cb      	lsls	r3, r1, #3
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	0883      	lsrs	r3, r0, #2
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0xea>
 80003ca:	008b      	lsls	r3, r1, #2
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0xf6>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0xfe>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4152      	adcs	r2, r2
 80003e4:	4610      	mov	r0, r2
 80003e6:	4770      	bx	lr
 80003e8:	e05d      	b.n	80004a6 <__divsi3+0x1c2>
 80003ea:	0fca      	lsrs	r2, r1, #31
 80003ec:	d000      	beq.n	80003f0 <__divsi3+0x10c>
 80003ee:	4249      	negs	r1, r1
 80003f0:	1003      	asrs	r3, r0, #32
 80003f2:	d300      	bcc.n	80003f6 <__divsi3+0x112>
 80003f4:	4240      	negs	r0, r0
 80003f6:	4053      	eors	r3, r2
 80003f8:	2200      	movs	r2, #0
 80003fa:	469c      	mov	ip, r3
 80003fc:	0903      	lsrs	r3, r0, #4
 80003fe:	428b      	cmp	r3, r1
 8000400:	d32d      	bcc.n	800045e <__divsi3+0x17a>
 8000402:	0a03      	lsrs	r3, r0, #8
 8000404:	428b      	cmp	r3, r1
 8000406:	d312      	bcc.n	800042e <__divsi3+0x14a>
 8000408:	22fc      	movs	r2, #252	; 0xfc
 800040a:	0189      	lsls	r1, r1, #6
 800040c:	ba12      	rev	r2, r2
 800040e:	0a03      	lsrs	r3, r0, #8
 8000410:	428b      	cmp	r3, r1
 8000412:	d30c      	bcc.n	800042e <__divsi3+0x14a>
 8000414:	0189      	lsls	r1, r1, #6
 8000416:	1192      	asrs	r2, r2, #6
 8000418:	428b      	cmp	r3, r1
 800041a:	d308      	bcc.n	800042e <__divsi3+0x14a>
 800041c:	0189      	lsls	r1, r1, #6
 800041e:	1192      	asrs	r2, r2, #6
 8000420:	428b      	cmp	r3, r1
 8000422:	d304      	bcc.n	800042e <__divsi3+0x14a>
 8000424:	0189      	lsls	r1, r1, #6
 8000426:	d03a      	beq.n	800049e <__divsi3+0x1ba>
 8000428:	1192      	asrs	r2, r2, #6
 800042a:	e000      	b.n	800042e <__divsi3+0x14a>
 800042c:	0989      	lsrs	r1, r1, #6
 800042e:	09c3      	lsrs	r3, r0, #7
 8000430:	428b      	cmp	r3, r1
 8000432:	d301      	bcc.n	8000438 <__divsi3+0x154>
 8000434:	01cb      	lsls	r3, r1, #7
 8000436:	1ac0      	subs	r0, r0, r3
 8000438:	4152      	adcs	r2, r2
 800043a:	0983      	lsrs	r3, r0, #6
 800043c:	428b      	cmp	r3, r1
 800043e:	d301      	bcc.n	8000444 <__divsi3+0x160>
 8000440:	018b      	lsls	r3, r1, #6
 8000442:	1ac0      	subs	r0, r0, r3
 8000444:	4152      	adcs	r2, r2
 8000446:	0943      	lsrs	r3, r0, #5
 8000448:	428b      	cmp	r3, r1
 800044a:	d301      	bcc.n	8000450 <__divsi3+0x16c>
 800044c:	014b      	lsls	r3, r1, #5
 800044e:	1ac0      	subs	r0, r0, r3
 8000450:	4152      	adcs	r2, r2
 8000452:	0903      	lsrs	r3, r0, #4
 8000454:	428b      	cmp	r3, r1
 8000456:	d301      	bcc.n	800045c <__divsi3+0x178>
 8000458:	010b      	lsls	r3, r1, #4
 800045a:	1ac0      	subs	r0, r0, r3
 800045c:	4152      	adcs	r2, r2
 800045e:	08c3      	lsrs	r3, r0, #3
 8000460:	428b      	cmp	r3, r1
 8000462:	d301      	bcc.n	8000468 <__divsi3+0x184>
 8000464:	00cb      	lsls	r3, r1, #3
 8000466:	1ac0      	subs	r0, r0, r3
 8000468:	4152      	adcs	r2, r2
 800046a:	0883      	lsrs	r3, r0, #2
 800046c:	428b      	cmp	r3, r1
 800046e:	d301      	bcc.n	8000474 <__divsi3+0x190>
 8000470:	008b      	lsls	r3, r1, #2
 8000472:	1ac0      	subs	r0, r0, r3
 8000474:	4152      	adcs	r2, r2
 8000476:	d2d9      	bcs.n	800042c <__divsi3+0x148>
 8000478:	0843      	lsrs	r3, r0, #1
 800047a:	428b      	cmp	r3, r1
 800047c:	d301      	bcc.n	8000482 <__divsi3+0x19e>
 800047e:	004b      	lsls	r3, r1, #1
 8000480:	1ac0      	subs	r0, r0, r3
 8000482:	4152      	adcs	r2, r2
 8000484:	1a41      	subs	r1, r0, r1
 8000486:	d200      	bcs.n	800048a <__divsi3+0x1a6>
 8000488:	4601      	mov	r1, r0
 800048a:	4663      	mov	r3, ip
 800048c:	4152      	adcs	r2, r2
 800048e:	105b      	asrs	r3, r3, #1
 8000490:	4610      	mov	r0, r2
 8000492:	d301      	bcc.n	8000498 <__divsi3+0x1b4>
 8000494:	4240      	negs	r0, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d500      	bpl.n	800049c <__divsi3+0x1b8>
 800049a:	4249      	negs	r1, r1
 800049c:	4770      	bx	lr
 800049e:	4663      	mov	r3, ip
 80004a0:	105b      	asrs	r3, r3, #1
 80004a2:	d300      	bcc.n	80004a6 <__divsi3+0x1c2>
 80004a4:	4240      	negs	r0, r0
 80004a6:	b501      	push	{r0, lr}
 80004a8:	2000      	movs	r0, #0
 80004aa:	f000 f805 	bl	80004b8 <__aeabi_idiv0>
 80004ae:	bd02      	pop	{r1, pc}

080004b0 <__aeabi_idivmod>:
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d0f8      	beq.n	80004a6 <__divsi3+0x1c2>
 80004b4:	e716      	b.n	80002e4 <__divsi3>
 80004b6:	4770      	bx	lr

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_ldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d115      	bne.n	80004ec <__aeabi_ldivmod+0x30>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d113      	bne.n	80004ec <__aeabi_ldivmod+0x30>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	db06      	blt.n	80004d6 <__aeabi_ldivmod+0x1a>
 80004c8:	dc01      	bgt.n	80004ce <__aeabi_ldivmod+0x12>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d006      	beq.n	80004dc <__aeabi_ldivmod+0x20>
 80004ce:	2000      	movs	r0, #0
 80004d0:	43c0      	mvns	r0, r0
 80004d2:	0841      	lsrs	r1, r0, #1
 80004d4:	e002      	b.n	80004dc <__aeabi_ldivmod+0x20>
 80004d6:	2180      	movs	r1, #128	; 0x80
 80004d8:	0609      	lsls	r1, r1, #24
 80004da:	2000      	movs	r0, #0
 80004dc:	b407      	push	{r0, r1, r2}
 80004de:	4802      	ldr	r0, [pc, #8]	; (80004e8 <__aeabi_ldivmod+0x2c>)
 80004e0:	a101      	add	r1, pc, #4	; (adr r1, 80004e8 <__aeabi_ldivmod+0x2c>)
 80004e2:	1840      	adds	r0, r0, r1
 80004e4:	9002      	str	r0, [sp, #8]
 80004e6:	bd03      	pop	{r0, r1, pc}
 80004e8:	ffffffd1 	.word	0xffffffd1
 80004ec:	b403      	push	{r0, r1}
 80004ee:	4668      	mov	r0, sp
 80004f0:	b501      	push	{r0, lr}
 80004f2:	9802      	ldr	r0, [sp, #8]
 80004f4:	f000 f830 	bl	8000558 <__gnu_ldivmod_helper>
 80004f8:	9b01      	ldr	r3, [sp, #4]
 80004fa:	469e      	mov	lr, r3
 80004fc:	b002      	add	sp, #8
 80004fe:	bc0c      	pop	{r2, r3}
 8000500:	4770      	bx	lr
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_lmul>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	46ce      	mov	lr, r9
 8000508:	4647      	mov	r7, r8
 800050a:	0415      	lsls	r5, r2, #16
 800050c:	0c2d      	lsrs	r5, r5, #16
 800050e:	002e      	movs	r6, r5
 8000510:	b580      	push	{r7, lr}
 8000512:	0407      	lsls	r7, r0, #16
 8000514:	0c14      	lsrs	r4, r2, #16
 8000516:	0c3f      	lsrs	r7, r7, #16
 8000518:	4699      	mov	r9, r3
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	437e      	muls	r6, r7
 800051e:	435d      	muls	r5, r3
 8000520:	4367      	muls	r7, r4
 8000522:	4363      	muls	r3, r4
 8000524:	197f      	adds	r7, r7, r5
 8000526:	0c34      	lsrs	r4, r6, #16
 8000528:	19e4      	adds	r4, r4, r7
 800052a:	469c      	mov	ip, r3
 800052c:	42a5      	cmp	r5, r4
 800052e:	d903      	bls.n	8000538 <__aeabi_lmul+0x34>
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	025b      	lsls	r3, r3, #9
 8000534:	4698      	mov	r8, r3
 8000536:	44c4      	add	ip, r8
 8000538:	464b      	mov	r3, r9
 800053a:	4343      	muls	r3, r0
 800053c:	4351      	muls	r1, r2
 800053e:	0c25      	lsrs	r5, r4, #16
 8000540:	0436      	lsls	r6, r6, #16
 8000542:	4465      	add	r5, ip
 8000544:	0c36      	lsrs	r6, r6, #16
 8000546:	0424      	lsls	r4, r4, #16
 8000548:	19a4      	adds	r4, r4, r6
 800054a:	195b      	adds	r3, r3, r5
 800054c:	1859      	adds	r1, r3, r1
 800054e:	0020      	movs	r0, r4
 8000550:	bc0c      	pop	{r2, r3}
 8000552:	4690      	mov	r8, r2
 8000554:	4699      	mov	r9, r3
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000558 <__gnu_ldivmod_helper>:
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055a:	b083      	sub	sp, #12
 800055c:	0016      	movs	r6, r2
 800055e:	001f      	movs	r7, r3
 8000560:	9000      	str	r0, [sp, #0]
 8000562:	9101      	str	r1, [sp, #4]
 8000564:	f000 f814 	bl	8000590 <__divdi3>
 8000568:	0004      	movs	r4, r0
 800056a:	000d      	movs	r5, r1
 800056c:	0002      	movs	r2, r0
 800056e:	000b      	movs	r3, r1
 8000570:	0030      	movs	r0, r6
 8000572:	0039      	movs	r1, r7
 8000574:	f7ff ffc6 	bl	8000504 <__aeabi_lmul>
 8000578:	9a00      	ldr	r2, [sp, #0]
 800057a:	9b01      	ldr	r3, [sp, #4]
 800057c:	1a12      	subs	r2, r2, r0
 800057e:	418b      	sbcs	r3, r1
 8000580:	9908      	ldr	r1, [sp, #32]
 8000582:	0020      	movs	r0, r4
 8000584:	600a      	str	r2, [r1, #0]
 8000586:	604b      	str	r3, [r1, #4]
 8000588:	0029      	movs	r1, r5
 800058a:	b003      	add	sp, #12
 800058c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)

08000590 <__divdi3>:
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	464e      	mov	r6, r9
 8000594:	4657      	mov	r7, sl
 8000596:	46de      	mov	lr, fp
 8000598:	4645      	mov	r5, r8
 800059a:	b5e0      	push	{r5, r6, r7, lr}
 800059c:	000f      	movs	r7, r1
 800059e:	2100      	movs	r1, #0
 80005a0:	b083      	sub	sp, #12
 80005a2:	0006      	movs	r6, r0
 80005a4:	4689      	mov	r9, r1
 80005a6:	2f00      	cmp	r7, #0
 80005a8:	da06      	bge.n	80005b8 <__divdi3+0x28>
 80005aa:	0039      	movs	r1, r7
 80005ac:	2700      	movs	r7, #0
 80005ae:	4246      	negs	r6, r0
 80005b0:	418f      	sbcs	r7, r1
 80005b2:	2101      	movs	r1, #1
 80005b4:	4249      	negs	r1, r1
 80005b6:	4689      	mov	r9, r1
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	da07      	bge.n	80005cc <__divdi3+0x3c>
 80005bc:	4649      	mov	r1, r9
 80005be:	43c9      	mvns	r1, r1
 80005c0:	0010      	movs	r0, r2
 80005c2:	4689      	mov	r9, r1
 80005c4:	0019      	movs	r1, r3
 80005c6:	2300      	movs	r3, #0
 80005c8:	4242      	negs	r2, r0
 80005ca:	418b      	sbcs	r3, r1
 80005cc:	0034      	movs	r4, r6
 80005ce:	003d      	movs	r5, r7
 80005d0:	4692      	mov	sl, r2
 80005d2:	4698      	mov	r8, r3
 80005d4:	42bb      	cmp	r3, r7
 80005d6:	d869      	bhi.n	80006ac <__divdi3+0x11c>
 80005d8:	d066      	beq.n	80006a8 <__divdi3+0x118>
 80005da:	4641      	mov	r1, r8
 80005dc:	4650      	mov	r0, sl
 80005de:	f000 f8af 	bl	8000740 <__clzdi2>
 80005e2:	4683      	mov	fp, r0
 80005e4:	0039      	movs	r1, r7
 80005e6:	0030      	movs	r0, r6
 80005e8:	f000 f8aa 	bl	8000740 <__clzdi2>
 80005ec:	465b      	mov	r3, fp
 80005ee:	1a1b      	subs	r3, r3, r0
 80005f0:	469c      	mov	ip, r3
 80005f2:	3b20      	subs	r3, #32
 80005f4:	469b      	mov	fp, r3
 80005f6:	d500      	bpl.n	80005fa <__divdi3+0x6a>
 80005f8:	e075      	b.n	80006e6 <__divdi3+0x156>
 80005fa:	4651      	mov	r1, sl
 80005fc:	4658      	mov	r0, fp
 80005fe:	4081      	lsls	r1, r0
 8000600:	000b      	movs	r3, r1
 8000602:	4651      	mov	r1, sl
 8000604:	4660      	mov	r0, ip
 8000606:	4081      	lsls	r1, r0
 8000608:	000a      	movs	r2, r1
 800060a:	42bb      	cmp	r3, r7
 800060c:	d861      	bhi.n	80006d2 <__divdi3+0x142>
 800060e:	d05e      	beq.n	80006ce <__divdi3+0x13e>
 8000610:	0034      	movs	r4, r6
 8000612:	003d      	movs	r5, r7
 8000614:	4659      	mov	r1, fp
 8000616:	1aa4      	subs	r4, r4, r2
 8000618:	419d      	sbcs	r5, r3
 800061a:	2900      	cmp	r1, #0
 800061c:	da00      	bge.n	8000620 <__divdi3+0x90>
 800061e:	e07a      	b.n	8000716 <__divdi3+0x186>
 8000620:	2100      	movs	r1, #0
 8000622:	2000      	movs	r0, #0
 8000624:	2601      	movs	r6, #1
 8000626:	9000      	str	r0, [sp, #0]
 8000628:	9101      	str	r1, [sp, #4]
 800062a:	4659      	mov	r1, fp
 800062c:	408e      	lsls	r6, r1
 800062e:	9601      	str	r6, [sp, #4]
 8000630:	4661      	mov	r1, ip
 8000632:	2601      	movs	r6, #1
 8000634:	408e      	lsls	r6, r1
 8000636:	4661      	mov	r1, ip
 8000638:	9600      	str	r6, [sp, #0]
 800063a:	2900      	cmp	r1, #0
 800063c:	d050      	beq.n	80006e0 <__divdi3+0x150>
 800063e:	07d9      	lsls	r1, r3, #31
 8000640:	0856      	lsrs	r6, r2, #1
 8000642:	085f      	lsrs	r7, r3, #1
 8000644:	430e      	orrs	r6, r1
 8000646:	4663      	mov	r3, ip
 8000648:	e00e      	b.n	8000668 <__divdi3+0xd8>
 800064a:	42af      	cmp	r7, r5
 800064c:	d101      	bne.n	8000652 <__divdi3+0xc2>
 800064e:	42a6      	cmp	r6, r4
 8000650:	d80c      	bhi.n	800066c <__divdi3+0xdc>
 8000652:	1ba4      	subs	r4, r4, r6
 8000654:	41bd      	sbcs	r5, r7
 8000656:	2101      	movs	r1, #1
 8000658:	1924      	adds	r4, r4, r4
 800065a:	416d      	adcs	r5, r5
 800065c:	2200      	movs	r2, #0
 800065e:	3b01      	subs	r3, #1
 8000660:	1864      	adds	r4, r4, r1
 8000662:	4155      	adcs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	d006      	beq.n	8000676 <__divdi3+0xe6>
 8000668:	42af      	cmp	r7, r5
 800066a:	d9ee      	bls.n	800064a <__divdi3+0xba>
 800066c:	3b01      	subs	r3, #1
 800066e:	1924      	adds	r4, r4, r4
 8000670:	416d      	adcs	r5, r5
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1f8      	bne.n	8000668 <__divdi3+0xd8>
 8000676:	9800      	ldr	r0, [sp, #0]
 8000678:	9901      	ldr	r1, [sp, #4]
 800067a:	465b      	mov	r3, fp
 800067c:	1900      	adds	r0, r0, r4
 800067e:	4169      	adcs	r1, r5
 8000680:	2b00      	cmp	r3, #0
 8000682:	db3d      	blt.n	8000700 <__divdi3+0x170>
 8000684:	002e      	movs	r6, r5
 8000686:	40de      	lsrs	r6, r3
 8000688:	4663      	mov	r3, ip
 800068a:	002c      	movs	r4, r5
 800068c:	40dc      	lsrs	r4, r3
 800068e:	465b      	mov	r3, fp
 8000690:	2b00      	cmp	r3, #0
 8000692:	db4b      	blt.n	800072c <__divdi3+0x19c>
 8000694:	0034      	movs	r4, r6
 8000696:	465d      	mov	r5, fp
 8000698:	40ac      	lsls	r4, r5
 800069a:	0023      	movs	r3, r4
 800069c:	4664      	mov	r4, ip
 800069e:	40a6      	lsls	r6, r4
 80006a0:	0032      	movs	r2, r6
 80006a2:	1a80      	subs	r0, r0, r2
 80006a4:	4199      	sbcs	r1, r3
 80006a6:	e003      	b.n	80006b0 <__divdi3+0x120>
 80006a8:	42b2      	cmp	r2, r6
 80006aa:	d996      	bls.n	80005da <__divdi3+0x4a>
 80006ac:	2000      	movs	r0, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	464b      	mov	r3, r9
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d004      	beq.n	80006c0 <__divdi3+0x130>
 80006b6:	0003      	movs	r3, r0
 80006b8:	000c      	movs	r4, r1
 80006ba:	2100      	movs	r1, #0
 80006bc:	4258      	negs	r0, r3
 80006be:	41a1      	sbcs	r1, r4
 80006c0:	b003      	add	sp, #12
 80006c2:	bc3c      	pop	{r2, r3, r4, r5}
 80006c4:	4690      	mov	r8, r2
 80006c6:	4699      	mov	r9, r3
 80006c8:	46a2      	mov	sl, r4
 80006ca:	46ab      	mov	fp, r5
 80006cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ce:	42b1      	cmp	r1, r6
 80006d0:	d99e      	bls.n	8000610 <__divdi3+0x80>
 80006d2:	2100      	movs	r1, #0
 80006d4:	2000      	movs	r0, #0
 80006d6:	9000      	str	r0, [sp, #0]
 80006d8:	9101      	str	r1, [sp, #4]
 80006da:	4661      	mov	r1, ip
 80006dc:	2900      	cmp	r1, #0
 80006de:	d1ae      	bne.n	800063e <__divdi3+0xae>
 80006e0:	9800      	ldr	r0, [sp, #0]
 80006e2:	9901      	ldr	r1, [sp, #4]
 80006e4:	e7e4      	b.n	80006b0 <__divdi3+0x120>
 80006e6:	2320      	movs	r3, #32
 80006e8:	4662      	mov	r2, ip
 80006ea:	4651      	mov	r1, sl
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	40d9      	lsrs	r1, r3
 80006f0:	4640      	mov	r0, r8
 80006f2:	9100      	str	r1, [sp, #0]
 80006f4:	4661      	mov	r1, ip
 80006f6:	4088      	lsls	r0, r1
 80006f8:	0003      	movs	r3, r0
 80006fa:	9900      	ldr	r1, [sp, #0]
 80006fc:	430b      	orrs	r3, r1
 80006fe:	e780      	b.n	8000602 <__divdi3+0x72>
 8000700:	4662      	mov	r2, ip
 8000702:	2320      	movs	r3, #32
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	002a      	movs	r2, r5
 8000708:	409a      	lsls	r2, r3
 800070a:	0026      	movs	r6, r4
 800070c:	0013      	movs	r3, r2
 800070e:	4662      	mov	r2, ip
 8000710:	40d6      	lsrs	r6, r2
 8000712:	431e      	orrs	r6, r3
 8000714:	e7b8      	b.n	8000688 <__divdi3+0xf8>
 8000716:	4661      	mov	r1, ip
 8000718:	2620      	movs	r6, #32
 800071a:	2701      	movs	r7, #1
 800071c:	1a76      	subs	r6, r6, r1
 800071e:	2000      	movs	r0, #0
 8000720:	2100      	movs	r1, #0
 8000722:	40f7      	lsrs	r7, r6
 8000724:	9000      	str	r0, [sp, #0]
 8000726:	9101      	str	r1, [sp, #4]
 8000728:	9701      	str	r7, [sp, #4]
 800072a:	e781      	b.n	8000630 <__divdi3+0xa0>
 800072c:	4667      	mov	r7, ip
 800072e:	2320      	movs	r3, #32
 8000730:	4662      	mov	r2, ip
 8000732:	0035      	movs	r5, r6
 8000734:	40bc      	lsls	r4, r7
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	40dd      	lsrs	r5, r3
 800073a:	0023      	movs	r3, r4
 800073c:	432b      	orrs	r3, r5
 800073e:	e7ad      	b.n	800069c <__divdi3+0x10c>

08000740 <__clzdi2>:
 8000740:	b510      	push	{r4, lr}
 8000742:	2900      	cmp	r1, #0
 8000744:	d103      	bne.n	800074e <__clzdi2+0xe>
 8000746:	f000 f807 	bl	8000758 <__clzsi2>
 800074a:	3020      	adds	r0, #32
 800074c:	e002      	b.n	8000754 <__clzdi2+0x14>
 800074e:	1c08      	adds	r0, r1, #0
 8000750:	f000 f802 	bl	8000758 <__clzsi2>
 8000754:	bd10      	pop	{r4, pc}
 8000756:	46c0      	nop			; (mov r8, r8)

08000758 <__clzsi2>:
 8000758:	211c      	movs	r1, #28
 800075a:	2301      	movs	r3, #1
 800075c:	041b      	lsls	r3, r3, #16
 800075e:	4298      	cmp	r0, r3
 8000760:	d301      	bcc.n	8000766 <__clzsi2+0xe>
 8000762:	0c00      	lsrs	r0, r0, #16
 8000764:	3910      	subs	r1, #16
 8000766:	0a1b      	lsrs	r3, r3, #8
 8000768:	4298      	cmp	r0, r3
 800076a:	d301      	bcc.n	8000770 <__clzsi2+0x18>
 800076c:	0a00      	lsrs	r0, r0, #8
 800076e:	3908      	subs	r1, #8
 8000770:	091b      	lsrs	r3, r3, #4
 8000772:	4298      	cmp	r0, r3
 8000774:	d301      	bcc.n	800077a <__clzsi2+0x22>
 8000776:	0900      	lsrs	r0, r0, #4
 8000778:	3904      	subs	r1, #4
 800077a:	a202      	add	r2, pc, #8	; (adr r2, 8000784 <__clzsi2+0x2c>)
 800077c:	5c10      	ldrb	r0, [r2, r0]
 800077e:	1840      	adds	r0, r0, r1
 8000780:	4770      	bx	lr
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	02020304 	.word	0x02020304
 8000788:	01010101 	.word	0x01010101
	...

08000794 <InitializeAccel>:
//
// Returns:   None
//
// Requirement(s):  SYS-040
//
void InitializeAccel(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

    //
    // Only Initialize if FactoryConfiguration is valid,
    //
    if ((bFlashConfigurationValid != 0) && (bFactoryConfigurationValid != 0) && (FactoryConfiguration->AccelPresent != 0)) {
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <InitializeAccel+0x30>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00e      	beq.n	80007be <InitializeAccel+0x2a>
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <InitializeAccel+0x34>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00a      	beq.n	80007be <InitializeAccel+0x2a>
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <InitializeAccel+0x38>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	7f1b      	ldrb	r3, [r3, #28]
 80007ae:	2210      	movs	r2, #16
 80007b0:	4013      	ands	r3, r2
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d002      	beq.n	80007be <InitializeAccel+0x2a>
      bInitializeAccel = 1;
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <InitializeAccel+0x3c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
    }
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20002cf6 	.word	0x20002cf6
 80007c8:	20002f9e 	.word	0x20002f9e
 80007cc:	20001eec 	.word	0x20001eec
 80007d0:	20000024 	.word	0x20000024

080007d4 <ProcessAccelerometer>:
//
// Returns:   Accelerometer Data is stored into SysVar data structure
//
// Requirement(s):  SYS-040
//
void ProcessAccelerometer(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

    static uint8_t State, AccelDelayTimer;
    static uint8_t TmpBuffer[6];

    ExecutionStart(EXECUTION_PROCESS_ACCELEROMETER);
 80007d8:	2013      	movs	r0, #19
 80007da:	f003 ff17 	bl	800460c <ExecutionStart>

    switch (State) {
 80007de:	4b8d      	ldr	r3, [pc, #564]	; (8000a14 <ProcessAccelerometer+0x240>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d900      	bls.n	80007e8 <ProcessAccelerometer+0x14>
 80007e6:	e100      	b.n	80009ea <ProcessAccelerometer+0x216>
 80007e8:	009a      	lsls	r2, r3, #2
 80007ea:	4b8b      	ldr	r3, [pc, #556]	; (8000a18 <ProcessAccelerometer+0x244>)
 80007ec:	18d3      	adds	r3, r2, r3
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	469f      	mov	pc, r3
    case 0:
        //
        // Only proceed if I2C bus is ready and not being used
        //
        if (AccelDelayTimer < 5) {
 80007f2:	4b8a      	ldr	r3, [pc, #552]	; (8000a1c <ProcessAccelerometer+0x248>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	d805      	bhi.n	8000806 <ProcessAccelerometer+0x32>
          AccelDelayTimer++;
 80007fa:	4b88      	ldr	r3, [pc, #544]	; (8000a1c <ProcessAccelerometer+0x248>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b86      	ldr	r3, [pc, #536]	; (8000a1c <ProcessAccelerometer+0x248>)
 8000804:	701a      	strb	r2, [r3, #0]
        }
        if ((I2C2Control.Mode == I2C_MODE_IDLE) && (bFlashConfigurationValid != 0) && (bFactoryConfigurationValid != 0) && (FactoryConfiguration->AccelPresent != 0) &&
 8000806:	4b86      	ldr	r3, [pc, #536]	; (8000a20 <ProcessAccelerometer+0x24c>)
 8000808:	7a5b      	ldrb	r3, [r3, #9]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d000      	beq.n	8000810 <ProcessAccelerometer+0x3c>
 800080e:	e0f1      	b.n	80009f4 <ProcessAccelerometer+0x220>
 8000810:	4b84      	ldr	r3, [pc, #528]	; (8000a24 <ProcessAccelerometer+0x250>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d100      	bne.n	800081a <ProcessAccelerometer+0x46>
 8000818:	e0ec      	b.n	80009f4 <ProcessAccelerometer+0x220>
 800081a:	4b83      	ldr	r3, [pc, #524]	; (8000a28 <ProcessAccelerometer+0x254>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d100      	bne.n	8000824 <ProcessAccelerometer+0x50>
 8000822:	e0e7      	b.n	80009f4 <ProcessAccelerometer+0x220>
 8000824:	4b81      	ldr	r3, [pc, #516]	; (8000a2c <ProcessAccelerometer+0x258>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	7f1b      	ldrb	r3, [r3, #28]
 800082a:	2210      	movs	r2, #16
 800082c:	4013      	ands	r3, r2
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d100      	bne.n	8000836 <ProcessAccelerometer+0x62>
 8000834:	e0de      	b.n	80009f4 <ProcessAccelerometer+0x220>
          !bClearEventLog && (MessageIndexIn == MessageIndexOut) && (AccelDelayTimer >= 5)) {
 8000836:	4b7e      	ldr	r3, [pc, #504]	; (8000a30 <ProcessAccelerometer+0x25c>)
 8000838:	781b      	ldrb	r3, [r3, #0]
        if ((I2C2Control.Mode == I2C_MODE_IDLE) && (bFlashConfigurationValid != 0) && (bFactoryConfigurationValid != 0) && (FactoryConfiguration->AccelPresent != 0) &&
 800083a:	2b00      	cmp	r3, #0
 800083c:	d000      	beq.n	8000840 <ProcessAccelerometer+0x6c>
 800083e:	e0d9      	b.n	80009f4 <ProcessAccelerometer+0x220>
          !bClearEventLog && (MessageIndexIn == MessageIndexOut) && (AccelDelayTimer >= 5)) {
 8000840:	4b7c      	ldr	r3, [pc, #496]	; (8000a34 <ProcessAccelerometer+0x260>)
 8000842:	2200      	movs	r2, #0
 8000844:	569a      	ldrsb	r2, [r3, r2]
 8000846:	4b7c      	ldr	r3, [pc, #496]	; (8000a38 <ProcessAccelerometer+0x264>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b25b      	sxtb	r3, r3
 800084c:	429a      	cmp	r2, r3
 800084e:	d000      	beq.n	8000852 <ProcessAccelerometer+0x7e>
 8000850:	e0d0      	b.n	80009f4 <ProcessAccelerometer+0x220>
 8000852:	4b72      	ldr	r3, [pc, #456]	; (8000a1c <ProcessAccelerometer+0x248>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b04      	cmp	r3, #4
 8000858:	d800      	bhi.n	800085c <ProcessAccelerometer+0x88>
 800085a:	e0cb      	b.n	80009f4 <ProcessAccelerometer+0x220>
            AccelDelayTimer = 0;
 800085c:	4b6f      	ldr	r3, [pc, #444]	; (8000a1c <ProcessAccelerometer+0x248>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
            if (bInitializeAccel != 0) {
 8000862:	4b76      	ldr	r3, [pc, #472]	; (8000a3c <ProcessAccelerometer+0x268>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d012      	beq.n	8000890 <ProcessAccelerometer+0xbc>
              TmpBuffer[0] = 0;
 800086a:	4b75      	ldr	r3, [pc, #468]	; (8000a40 <ProcessAccelerometer+0x26c>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
              I2C2Control.Address = 0x2A;
 8000870:	4b6b      	ldr	r3, [pc, #428]	; (8000a20 <ProcessAccelerometer+0x24c>)
 8000872:	222a      	movs	r2, #42	; 0x2a
 8000874:	809a      	strh	r2, [r3, #4]
              I2C2Control.Length = 1;
 8000876:	4b6a      	ldr	r3, [pc, #424]	; (8000a20 <ProcessAccelerometer+0x24c>)
 8000878:	2201      	movs	r2, #1
 800087a:	80da      	strh	r2, [r3, #6]
              I2C2Control.Buffer = &TmpBuffer[0];
 800087c:	4b68      	ldr	r3, [pc, #416]	; (8000a20 <ProcessAccelerometer+0x24c>)
 800087e:	4a70      	ldr	r2, [pc, #448]	; (8000a40 <ProcessAccelerometer+0x26c>)
 8000880:	601a      	str	r2, [r3, #0]
              I2C2Control.Mode = I2C_MODE_WRITE_ACCEL;
 8000882:	4b67      	ldr	r3, [pc, #412]	; (8000a20 <ProcessAccelerometer+0x24c>)
 8000884:	2204      	movs	r2, #4
 8000886:	725a      	strb	r2, [r3, #9]
              State = 2;
 8000888:	4b62      	ldr	r3, [pc, #392]	; (8000a14 <ProcessAccelerometer+0x240>)
 800088a:	2202      	movs	r2, #2
 800088c:	701a      	strb	r2, [r3, #0]
              I2C2Control.Length = 6;
              I2C2Control.Mode = I2C_MODE_READ_ACCEL;
              State = 1;
            }
        }
        break;
 800088e:	e0b1      	b.n	80009f4 <ProcessAccelerometer+0x220>
              I2C2Control.Address = 0x1;
 8000890:	4b63      	ldr	r3, [pc, #396]	; (8000a20 <ProcessAccelerometer+0x24c>)
 8000892:	2201      	movs	r2, #1
 8000894:	809a      	strh	r2, [r3, #4]
              I2C2Control.Buffer = &TmpBuffer[0];               // Read 6 bytes, starting at address 0x1
 8000896:	4b62      	ldr	r3, [pc, #392]	; (8000a20 <ProcessAccelerometer+0x24c>)
 8000898:	4a69      	ldr	r2, [pc, #420]	; (8000a40 <ProcessAccelerometer+0x26c>)
 800089a:	601a      	str	r2, [r3, #0]
              I2C2Control.Length = 6;
 800089c:	4b60      	ldr	r3, [pc, #384]	; (8000a20 <ProcessAccelerometer+0x24c>)
 800089e:	2206      	movs	r2, #6
 80008a0:	80da      	strh	r2, [r3, #6]
              I2C2Control.Mode = I2C_MODE_READ_ACCEL;
 80008a2:	4b5f      	ldr	r3, [pc, #380]	; (8000a20 <ProcessAccelerometer+0x24c>)
 80008a4:	2203      	movs	r2, #3
 80008a6:	725a      	strb	r2, [r3, #9]
              State = 1;
 80008a8:	4b5a      	ldr	r3, [pc, #360]	; (8000a14 <ProcessAccelerometer+0x240>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
        break;
 80008ae:	e0a1      	b.n	80009f4 <ProcessAccelerometer+0x220>
        //
        //  Wait for X/Y/Z data to be read
        //
        //  Convert data so 0 Counts == -Full Scale, and 4095 counts == +Full Scale
        //
        if (I2C2Control.Mode == I2C_MODE_DONE) {
 80008b0:	4b5b      	ldr	r3, [pc, #364]	; (8000a20 <ProcessAccelerometer+0x24c>)
 80008b2:	7a5b      	ldrb	r3, [r3, #9]
 80008b4:	2b07      	cmp	r3, #7
 80008b6:	d000      	beq.n	80008ba <ProcessAccelerometer+0xe6>
 80008b8:	e09e      	b.n	80009f8 <ProcessAccelerometer+0x224>
            SysVars.AccelXCounts = HostData.bManualAccelXEnable ? HostData.ManualAccelX : (int32_t)(((uint16_t)TmpBuffer[0] << 4) + ((TmpBuffer[1] >> 4) & 0xF)) ^ 0x800;
 80008ba:	4b62      	ldr	r3, [pc, #392]	; (8000a44 <ProcessAccelerometer+0x270>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2220      	movs	r2, #32
 80008c0:	4013      	ands	r3, r2
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <ProcessAccelerometer+0xfa>
 80008c8:	4b5e      	ldr	r3, [pc, #376]	; (8000a44 <ProcessAccelerometer+0x270>)
 80008ca:	699a      	ldr	r2, [r3, #24]
 80008cc:	e00d      	b.n	80008ea <ProcessAccelerometer+0x116>
 80008ce:	4b5c      	ldr	r3, [pc, #368]	; (8000a40 <ProcessAccelerometer+0x26c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	011a      	lsls	r2, r3, #4
 80008d4:	4b5a      	ldr	r3, [pc, #360]	; (8000a40 <ProcessAccelerometer+0x26c>)
 80008d6:	785b      	ldrb	r3, [r3, #1]
 80008d8:	091b      	lsrs	r3, r3, #4
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	0019      	movs	r1, r3
 80008de:	230f      	movs	r3, #15
 80008e0:	400b      	ands	r3, r1
 80008e2:	18d3      	adds	r3, r2, r3
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	405a      	eors	r2, r3
 80008ea:	4b57      	ldr	r3, [pc, #348]	; (8000a48 <ProcessAccelerometer+0x274>)
 80008ec:	65da      	str	r2, [r3, #92]	; 0x5c
            SysVars.AccelYCounts = HostData.bManualAccelYEnable ? HostData.ManualAccelY : (int32_t)(((uint16_t)TmpBuffer[2] << 4) + ((TmpBuffer[3] >> 4) & 0xF)) ^ 0x800;
 80008ee:	4b55      	ldr	r3, [pc, #340]	; (8000a44 <ProcessAccelerometer+0x270>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2240      	movs	r2, #64	; 0x40
 80008f4:	4013      	ands	r3, r2
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d002      	beq.n	8000902 <ProcessAccelerometer+0x12e>
 80008fc:	4b51      	ldr	r3, [pc, #324]	; (8000a44 <ProcessAccelerometer+0x270>)
 80008fe:	69da      	ldr	r2, [r3, #28]
 8000900:	e00d      	b.n	800091e <ProcessAccelerometer+0x14a>
 8000902:	4b4f      	ldr	r3, [pc, #316]	; (8000a40 <ProcessAccelerometer+0x26c>)
 8000904:	789b      	ldrb	r3, [r3, #2]
 8000906:	011a      	lsls	r2, r3, #4
 8000908:	4b4d      	ldr	r3, [pc, #308]	; (8000a40 <ProcessAccelerometer+0x26c>)
 800090a:	78db      	ldrb	r3, [r3, #3]
 800090c:	091b      	lsrs	r3, r3, #4
 800090e:	b2db      	uxtb	r3, r3
 8000910:	0019      	movs	r1, r3
 8000912:	230f      	movs	r3, #15
 8000914:	400b      	ands	r3, r1
 8000916:	18d3      	adds	r3, r2, r3
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	0112      	lsls	r2, r2, #4
 800091c:	405a      	eors	r2, r3
 800091e:	4b4a      	ldr	r3, [pc, #296]	; (8000a48 <ProcessAccelerometer+0x274>)
 8000920:	669a      	str	r2, [r3, #104]	; 0x68
            SysVars.AccelZCounts = HostData.bManualAccelZEnable ? HostData.ManualAccelZ : (int32_t)(((uint16_t)TmpBuffer[4] << 4) + ((TmpBuffer[5] >> 4) & 0xF)) ^ 0x800;
 8000922:	4b48      	ldr	r3, [pc, #288]	; (8000a44 <ProcessAccelerometer+0x270>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	227f      	movs	r2, #127	; 0x7f
 8000928:	4393      	bics	r3, r2
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <ProcessAccelerometer+0x162>
 8000930:	4b44      	ldr	r3, [pc, #272]	; (8000a44 <ProcessAccelerometer+0x270>)
 8000932:	6a1a      	ldr	r2, [r3, #32]
 8000934:	e00d      	b.n	8000952 <ProcessAccelerometer+0x17e>
 8000936:	4b42      	ldr	r3, [pc, #264]	; (8000a40 <ProcessAccelerometer+0x26c>)
 8000938:	791b      	ldrb	r3, [r3, #4]
 800093a:	011a      	lsls	r2, r3, #4
 800093c:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <ProcessAccelerometer+0x26c>)
 800093e:	795b      	ldrb	r3, [r3, #5]
 8000940:	091b      	lsrs	r3, r3, #4
 8000942:	b2db      	uxtb	r3, r3
 8000944:	0019      	movs	r1, r3
 8000946:	230f      	movs	r3, #15
 8000948:	400b      	ands	r3, r1
 800094a:	18d3      	adds	r3, r2, r3
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	405a      	eors	r2, r3
 8000952:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <ProcessAccelerometer+0x274>)
 8000954:	675a      	str	r2, [r3, #116]	; 0x74
            I2C2Control.Mode = I2C_MODE_IDLE;
 8000956:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <ProcessAccelerometer+0x24c>)
 8000958:	2200      	movs	r2, #0
 800095a:	725a      	strb	r2, [r3, #9]
            State = 0;
 800095c:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <ProcessAccelerometer+0x240>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000962:	e049      	b.n	80009f8 <ProcessAccelerometer+0x224>
    case 2:
        if (I2C2Control.Mode == I2C_MODE_DONE) {
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <ProcessAccelerometer+0x24c>)
 8000966:	7a5b      	ldrb	r3, [r3, #9]
 8000968:	2b07      	cmp	r3, #7
 800096a:	d147      	bne.n	80009fc <ProcessAccelerometer+0x228>
            TmpBuffer[0] = (uint8_t)FlashConfiguration->AccelerometerScaling;
 800096c:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <ProcessAccelerometer+0x278>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <ProcessAccelerometer+0x27c>)
 8000972:	5c9b      	ldrb	r3, [r3, r2]
 8000974:	079b      	lsls	r3, r3, #30
 8000976:	0f9b      	lsrs	r3, r3, #30
 8000978:	b2db      	uxtb	r3, r3
 800097a:	001a      	movs	r2, r3
 800097c:	4b30      	ldr	r3, [pc, #192]	; (8000a40 <ProcessAccelerometer+0x26c>)
 800097e:	701a      	strb	r2, [r3, #0]
            I2C2Control.Address = 0x0E;
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <ProcessAccelerometer+0x24c>)
 8000982:	220e      	movs	r2, #14
 8000984:	809a      	strh	r2, [r3, #4]
            I2C2Control.Length = 1;
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <ProcessAccelerometer+0x24c>)
 8000988:	2201      	movs	r2, #1
 800098a:	80da      	strh	r2, [r3, #6]
            I2C2Control.Buffer = &TmpBuffer[0];
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <ProcessAccelerometer+0x24c>)
 800098e:	4a2c      	ldr	r2, [pc, #176]	; (8000a40 <ProcessAccelerometer+0x26c>)
 8000990:	601a      	str	r2, [r3, #0]
            I2C2Control.Mode = I2C_MODE_WRITE_ACCEL;
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <ProcessAccelerometer+0x24c>)
 8000994:	2204      	movs	r2, #4
 8000996:	725a      	strb	r2, [r3, #9]
            State = 3;
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <ProcessAccelerometer+0x240>)
 800099a:	2203      	movs	r2, #3
 800099c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800099e:	e02d      	b.n	80009fc <ProcessAccelerometer+0x228>
    case 3:
        if (I2C2Control.Mode == I2C_MODE_DONE) {
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <ProcessAccelerometer+0x24c>)
 80009a2:	7a5b      	ldrb	r3, [r3, #9]
 80009a4:	2b07      	cmp	r3, #7
 80009a6:	d12b      	bne.n	8000a00 <ProcessAccelerometer+0x22c>
            TmpBuffer[0] = 1;
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <ProcessAccelerometer+0x26c>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
            I2C2Control.Address = 0x2A;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <ProcessAccelerometer+0x24c>)
 80009b0:	222a      	movs	r2, #42	; 0x2a
 80009b2:	809a      	strh	r2, [r3, #4]
            I2C2Control.Length = 1;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <ProcessAccelerometer+0x24c>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	80da      	strh	r2, [r3, #6]
            I2C2Control.Buffer = &TmpBuffer[0];
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <ProcessAccelerometer+0x24c>)
 80009bc:	4a20      	ldr	r2, [pc, #128]	; (8000a40 <ProcessAccelerometer+0x26c>)
 80009be:	601a      	str	r2, [r3, #0]
            I2C2Control.Mode = I2C_MODE_WRITE_ACCEL;
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <ProcessAccelerometer+0x24c>)
 80009c2:	2204      	movs	r2, #4
 80009c4:	725a      	strb	r2, [r3, #9]
            State = 4;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <ProcessAccelerometer+0x240>)
 80009c8:	2204      	movs	r2, #4
 80009ca:	701a      	strb	r2, [r3, #0]
        }
        break;
 80009cc:	e018      	b.n	8000a00 <ProcessAccelerometer+0x22c>
    case 4:
        if (I2C2Control.Mode == I2C_MODE_DONE) {
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <ProcessAccelerometer+0x24c>)
 80009d0:	7a5b      	ldrb	r3, [r3, #9]
 80009d2:	2b07      	cmp	r3, #7
 80009d4:	d116      	bne.n	8000a04 <ProcessAccelerometer+0x230>
            bInitializeAccel = 0;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <ProcessAccelerometer+0x268>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
            I2C2Control.Mode = I2C_MODE_IDLE;
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <ProcessAccelerometer+0x24c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	725a      	strb	r2, [r3, #9]
            State = 0;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <ProcessAccelerometer+0x240>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
        }
        break;
 80009e8:	e00c      	b.n	8000a04 <ProcessAccelerometer+0x230>
    default:
        Error_Handler(FILE_ACCEL, __LINE__);
 80009ea:	21b1      	movs	r1, #177	; 0xb1
 80009ec:	2001      	movs	r0, #1
 80009ee:	f003 fcf1 	bl	80043d4 <Error_Handler>
        break;
 80009f2:	e008      	b.n	8000a06 <ProcessAccelerometer+0x232>
        break;
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	e006      	b.n	8000a06 <ProcessAccelerometer+0x232>
        break;
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	e004      	b.n	8000a06 <ProcessAccelerometer+0x232>
        break;
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	e002      	b.n	8000a06 <ProcessAccelerometer+0x232>
        break;
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	e000      	b.n	8000a06 <ProcessAccelerometer+0x232>
        break;
 8000a04:	46c0      	nop			; (mov r8, r8)
    }
    ExecutionEnd(EXECUTION_PROCESS_ACCELEROMETER);
 8000a06:	2013      	movs	r0, #19
 8000a08:	f003 fe1a 	bl	8004640 <ExecutionEnd>
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	20000025 	.word	0x20000025
 8000a18:	0800c75c 	.word	0x0800c75c
 8000a1c:	20000026 	.word	0x20000026
 8000a20:	20001c24 	.word	0x20001c24
 8000a24:	20002cf6 	.word	0x20002cf6
 8000a28:	20002f9e 	.word	0x20002f9e
 8000a2c:	20001eec 	.word	0x20001eec
 8000a30:	20001c55 	.word	0x20001c55
 8000a34:	20000c58 	.word	0x20000c58
 8000a38:	200014a0 	.word	0x200014a0
 8000a3c:	20000024 	.word	0x20000024
 8000a40:	20000028 	.word	0x20000028
 8000a44:	20002a14 	.word	0x20002a14
 8000a48:	200020c0 	.word	0x200020c0
 8000a4c:	20002f04 	.word	0x20002f04
 8000a50:	00000476 	.word	0x00000476

08000a54 <Start_DMA>:
//            uint32_t              *pData
//            uint32_t              Length
//
// Returns:   None
//
static void Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]

    STM32_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0); // Used by ADC
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2009      	movs	r0, #9
 8000a66:	f005 f9a7 	bl	8005db8 <STM32_NVIC_SetPriority>
    STM32_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a6a:	2009      	movs	r0, #9
 8000a6c:	f005 fa06 	bl	8005e7c <STM32_NVIC_EnableIRQ>

    hadc->Instance->CR |= ADC_CR_ADEN;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	689a      	ldr	r2, [r3, #8]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	609a      	str	r2, [r3, #8]
    STM32_Delay(5);
 8000a80:	2005      	movs	r0, #5
 8000a82:	f005 f981 	bl	8005d88 <STM32_Delay>
    hadc->DMA_Handle->XferCpltCallback = NULL;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
    hadc->Instance->ISR = ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	221c      	movs	r2, #28
 8000a94:	601a      	str	r2, [r3, #0]
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2103      	movs	r1, #3
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	60da      	str	r2, [r3, #12]
    hadc->DMA_Handle->Instance->CCR &= ~DMA_CCR_EN;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	438a      	bics	r2, r1
 8000ab8:	601a      	str	r2, [r3, #0]
    hadc->DMA_Handle->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hadc->DMA_Handle->ChannelIndex);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4091      	lsls	r1, r2
 8000aca:	000a      	movs	r2, r1
 8000acc:	605a      	str	r2, [r3, #4]
    hadc->DMA_Handle->Instance->CNDTR = Length;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	605a      	str	r2, [r3, #4]
    hadc->DMA_Handle->Instance->CPAR = (uint32_t)&hadc->Instance->DR;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3340      	adds	r3, #64	; 0x40
 8000ade:	001a      	movs	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	609a      	str	r2, [r3, #8]
    hadc->DMA_Handle->Instance->CMAR = (uint32_t)pData;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	60da      	str	r2, [r3, #12]
    hadc->DMA_Handle->Instance->CCR |= DMA_IT_TC;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2102      	movs	r1, #2
 8000b02:	430a      	orrs	r2, r1
 8000b04:	601a      	str	r2, [r3, #0]
    hadc->DMA_Handle->Instance->CCR &= ~(DMA_IT_HT | DMA_IT_TE);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	210c      	movs	r1, #12
 8000b16:	438a      	bics	r2, r1
 8000b18:	601a      	str	r2, [r3, #0]
    hadc->DMA_Handle->Instance->CCR |= DMA_CCR_EN;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2101      	movs	r1, #1
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR |= ADC_CR_ADSTART;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	689a      	ldr	r2, [r3, #8]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2104      	movs	r1, #4
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	609a      	str	r2, [r3, #8]
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <ProcessReadAdc>:
//
// Returns:   ADC counts are stored in SysVars data structure
//
// Requirement(s):  SYS-039
//
void ProcessReadAdc(void) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

    static uint8_t    State;
    static uint16_t   AdcCalibrationDelay;
    static uint16_t   AdcCounts[5];

    ExecutionStart(EXECUTION_PROCESS_ADC);
 8000b4c:	2012      	movs	r0, #18
 8000b4e:	f003 fd5d 	bl	800460c <ExecutionStart>

    AdcCalibrationDelay++;
 8000b52:	4b4f      	ldr	r3, [pc, #316]	; (8000c90 <ProcessReadAdc+0x148>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b4d      	ldr	r3, [pc, #308]	; (8000c90 <ProcessReadAdc+0x148>)
 8000b5c:	801a      	strh	r2, [r3, #0]
    switch (State) {
 8000b5e:	4b4d      	ldr	r3, [pc, #308]	; (8000c94 <ProcessReadAdc+0x14c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d020      	beq.n	8000ba8 <ProcessReadAdc+0x60>
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d02e      	beq.n	8000bc8 <ProcessReadAdc+0x80>
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d000      	beq.n	8000b70 <ProcessReadAdc+0x28>
 8000b6e:	e081      	b.n	8000c74 <ProcessReadAdc+0x12c>
    case 0:
        //
        // Wait for delay before performing Self-Calibration
        //
        if (AdcCalibrationDelay > ADC_CALIBRATION_DELAY) {
 8000b70:	4b47      	ldr	r3, [pc, #284]	; (8000c90 <ProcessReadAdc+0x148>)
 8000b72:	881a      	ldrh	r2, [r3, #0]
 8000b74:	2396      	movs	r3, #150	; 0x96
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d800      	bhi.n	8000b7e <ProcessReadAdc+0x36>
 8000b7c:	e07f      	b.n	8000c7e <ProcessReadAdc+0x136>
            hadc.Instance->CFGR1 &= ~(ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000b7e:	4b46      	ldr	r3, [pc, #280]	; (8000c98 <ProcessReadAdc+0x150>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	4b44      	ldr	r3, [pc, #272]	; (8000c98 <ProcessReadAdc+0x150>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2103      	movs	r1, #3
 8000b8a:	438a      	bics	r2, r1
 8000b8c:	60da      	str	r2, [r3, #12]
            hadc.Instance->CR |= ADC_CR_ADCAL;
 8000b8e:	4b42      	ldr	r3, [pc, #264]	; (8000c98 <ProcessReadAdc+0x150>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	689a      	ldr	r2, [r3, #8]
 8000b94:	4b40      	ldr	r3, [pc, #256]	; (8000c98 <ProcessReadAdc+0x150>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	0609      	lsls	r1, r1, #24
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	609a      	str	r2, [r3, #8]
            State = 1;
 8000ba0:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <ProcessReadAdc+0x14c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000ba6:	e06a      	b.n	8000c7e <ProcessReadAdc+0x136>
    case 1:
        //
        // Wait for delay before starting ADC in Circular DMA Sampling Mode
        //
        if (AdcCalibrationDelay > ADC_SAMPLING_DELAY) {
 8000ba8:	4b39      	ldr	r3, [pc, #228]	; (8000c90 <ProcessReadAdc+0x148>)
 8000baa:	881a      	ldrh	r2, [r3, #0]
 8000bac:	23fa      	movs	r3, #250	; 0xfa
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d966      	bls.n	8000c82 <ProcessReadAdc+0x13a>
          Start_DMA(&hadc, (uint32_t *)AdcCounts, 5);        //start the DMA collecting the data
 8000bb4:	4939      	ldr	r1, [pc, #228]	; (8000c9c <ProcessReadAdc+0x154>)
 8000bb6:	4b38      	ldr	r3, [pc, #224]	; (8000c98 <ProcessReadAdc+0x150>)
 8000bb8:	2205      	movs	r2, #5
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff ff4a 	bl	8000a54 <Start_DMA>
          State = 2;
 8000bc0:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <ProcessReadAdc+0x14c>)
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000bc6:	e05c      	b.n	8000c82 <ProcessReadAdc+0x13a>
        //
        // DMA stores ADC counts into AdcCounts array, this code then moves the data into the SysVar structure for use by other logic.
        //
        // For Testing, the actual ADC Counts can be replaced/overwritten by data received from a Host via serial
        //
        if (HostData.bManualTemperatureEnable != 0) {
 8000bc8:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <ProcessReadAdc+0x158>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2204      	movs	r2, #4
 8000bce:	4013      	ands	r3, r2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d004      	beq.n	8000be0 <ProcessReadAdc+0x98>
          SysVars.TemperatureCounts = HostData.ManualTemperature;
 8000bd6:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <ProcessReadAdc+0x158>)
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <ProcessReadAdc+0x15c>)
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	e004      	b.n	8000bea <ProcessReadAdc+0xa2>
        } else {
          SysVars.TemperatureCounts = AdcCounts[0];
 8000be0:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <ProcessReadAdc+0x154>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	001a      	movs	r2, r3
 8000be6:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <ProcessReadAdc+0x15c>)
 8000be8:	605a      	str	r2, [r3, #4]
        }
        if (HostData.bManualPowerInputEnable != 0) {
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <ProcessReadAdc+0x158>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d004      	beq.n	8000c02 <ProcessReadAdc+0xba>
          SysVars.PowerInputCounts = HostData.ManualPowerInput;
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <ProcessReadAdc+0x158>)
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <ProcessReadAdc+0x15c>)
 8000bfe:	641a      	str	r2, [r3, #64]	; 0x40
 8000c00:	e004      	b.n	8000c0c <ProcessReadAdc+0xc4>
        } else {
          SysVars.PowerInputCounts = AdcCounts[1];
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <ProcessReadAdc+0x154>)
 8000c04:	885b      	ldrh	r3, [r3, #2]
 8000c06:	001a      	movs	r2, r3
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <ProcessReadAdc+0x15c>)
 8000c0a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        if (HostData.bManualKmaEnable != 0) {
 8000c0c:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <ProcessReadAdc+0x158>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2202      	movs	r2, #2
 8000c12:	4013      	ands	r3, r2
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d004      	beq.n	8000c24 <ProcessReadAdc+0xdc>
          SysVars.KmaCounts = HostData.ManualKma;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <ProcessReadAdc+0x158>)
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <ProcessReadAdc+0x15c>)
 8000c20:	619a      	str	r2, [r3, #24]
 8000c22:	e004      	b.n	8000c2e <ProcessReadAdc+0xe6>
        } else {
          SysVars.KmaCounts = AdcCounts[2];
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <ProcessReadAdc+0x154>)
 8000c26:	889b      	ldrh	r3, [r3, #4]
 8000c28:	001a      	movs	r2, r3
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <ProcessReadAdc+0x15c>)
 8000c2c:	619a      	str	r2, [r3, #24]
        }
        if (HostData.bManual5VDCEnable != 0) {
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <ProcessReadAdc+0x158>)
 8000c30:	785b      	ldrb	r3, [r3, #1]
 8000c32:	2202      	movs	r2, #2
 8000c34:	4013      	ands	r3, r2
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <ProcessReadAdc+0xfe>
          SysVars.PowerRail5Counts = HostData.Manual5VDCInput;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <ProcessReadAdc+0x158>)
 8000c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <ProcessReadAdc+0x15c>)
 8000c42:	635a      	str	r2, [r3, #52]	; 0x34
 8000c44:	e004      	b.n	8000c50 <ProcessReadAdc+0x108>
        } else {
          SysVars.PowerRail5Counts = AdcCounts[3];
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <ProcessReadAdc+0x154>)
 8000c48:	88db      	ldrh	r3, [r3, #6]
 8000c4a:	001a      	movs	r2, r3
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <ProcessReadAdc+0x15c>)
 8000c4e:	635a      	str	r2, [r3, #52]	; 0x34
        }
        if (HostData.bManualIntRefEnable != 0) {
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <ProcessReadAdc+0x158>)
 8000c52:	785b      	ldrb	r3, [r3, #1]
 8000c54:	2201      	movs	r2, #1
 8000c56:	4013      	ands	r3, r2
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d004      	beq.n	8000c68 <ProcessReadAdc+0x120>
          SysVars.IntRefCounts = HostData.ManualIntRefEnable;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <ProcessReadAdc+0x158>)
 8000c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <ProcessReadAdc+0x15c>)
 8000c64:	64da      	str	r2, [r3, #76]	; 0x4c
        } else {
          SysVars.IntRefCounts = AdcCounts[4];
        }
        break;
 8000c66:	e00d      	b.n	8000c84 <ProcessReadAdc+0x13c>
          SysVars.IntRefCounts = AdcCounts[4];
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <ProcessReadAdc+0x154>)
 8000c6a:	891b      	ldrh	r3, [r3, #8]
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <ProcessReadAdc+0x15c>)
 8000c70:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8000c72:	e007      	b.n	8000c84 <ProcessReadAdc+0x13c>
    default:
        Error_Handler(FILE_ADC, __LINE__);
 8000c74:	21a9      	movs	r1, #169	; 0xa9
 8000c76:	2002      	movs	r0, #2
 8000c78:	f003 fbac 	bl	80043d4 <Error_Handler>
        break;
 8000c7c:	e002      	b.n	8000c84 <ProcessReadAdc+0x13c>
        break;
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	e000      	b.n	8000c84 <ProcessReadAdc+0x13c>
        break;
 8000c82:	46c0      	nop			; (mov r8, r8)
    }
    ExecutionEnd(EXECUTION_PROCESS_ADC);
 8000c84:	2012      	movs	r0, #18
 8000c86:	f003 fcdb 	bl	8004640 <ExecutionEnd>
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	2000002e 	.word	0x2000002e
 8000c94:	20000030 	.word	0x20000030
 8000c98:	20002fa0 	.word	0x20002fa0
 8000c9c:	20000034 	.word	0x20000034
 8000ca0:	20002a14 	.word	0x20002a14
 8000ca4:	200020c0 	.word	0x200020c0

08000ca8 <DigitalFilter>:
//          NewData         Value to be filtered
//          Gain            Gain of filter, 1=Maximum Filtering   16384=No Filtering
//
// Returns: Filtered Value  (NOTE:  Return value is 100 times greater than input value)
//
static int32_t DigitalFilter(stFilterData *FilterData, int32_t NewData, int32_t Gain) {
 8000ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000caa:	b093      	sub	sp, #76	; 0x4c
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6478      	str	r0, [r7, #68]	; 0x44
 8000cb0:	6439      	str	r1, [r7, #64]	; 0x40
 8000cb2:	63fa      	str	r2, [r7, #60]	; 0x3c

    FilterData->RunningAverage = ((FilterData->RunningAverage * (16384 - Gain)) + (((int64_t)(NewData * 100) * 8192) * Gain)) / 16384;
 8000cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	6859      	ldr	r1, [r3, #4]
 8000cba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	01db      	lsls	r3, r3, #7
 8000cc0:	1a9b      	subs	r3, r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	17db      	asrs	r3, r3, #31
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_lmul>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	000c      	movs	r4, r1
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	617c      	str	r4, [r7, #20]
 8000cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	17db      	asrs	r3, r3, #31
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68b8      	ldr	r0, [r7, #8]
 8000ce2:	68f9      	ldr	r1, [r7, #12]
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	000c      	movs	r4, r1
 8000ce8:	0f9a      	lsrs	r2, r3, #30
 8000cea:	00a6      	lsls	r6, r4, #2
 8000cec:	4316      	orrs	r6, r2
 8000cee:	009d      	lsls	r5, r3, #2
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	000c      	movs	r4, r1
 8000cf4:	195b      	adds	r3, r3, r5
 8000cf6:	4174      	adcs	r4, r6
 8000cf8:	0f9a      	lsrs	r2, r3, #30
 8000cfa:	00a0      	lsls	r0, r4, #2
 8000cfc:	6378      	str	r0, [r7, #52]	; 0x34
 8000cfe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d00:	4310      	orrs	r0, r2
 8000d02:	6378      	str	r0, [r7, #52]	; 0x34
 8000d04:	009a      	lsls	r2, r3, #2
 8000d06:	633a      	str	r2, [r7, #48]	; 0x30
 8000d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d0c:	181b      	adds	r3, r3, r0
 8000d0e:	414c      	adcs	r4, r1
 8000d10:	0c5a      	lsrs	r2, r3, #17
 8000d12:	03e0      	lsls	r0, r4, #15
 8000d14:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000d16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d18:	4310      	orrs	r0, r2
 8000d1a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000d1c:	03da      	lsls	r2, r3, #15
 8000d1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8000d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d22:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8000d24:	0018      	movs	r0, r3
 8000d26:	0021      	movs	r1, r4
 8000d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	17db      	asrs	r3, r3, #31
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f7ff fbe6 	bl	8000504 <__aeabi_lmul>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	000c      	movs	r4, r1
 8000d3c:	6939      	ldr	r1, [r7, #16]
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	18c9      	adds	r1, r1, r3
 8000d42:	4162      	adcs	r2, r4
 8000d44:	000b      	movs	r3, r1
 8000d46:	0014      	movs	r4, r2
 8000d48:	2c00      	cmp	r4, #0
 8000d4a:	da03      	bge.n	8000d54 <DigitalFilter+0xac>
 8000d4c:	4916      	ldr	r1, [pc, #88]	; (8000da8 <DigitalFilter+0x100>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	185b      	adds	r3, r3, r1
 8000d52:	4154      	adcs	r4, r2
 8000d54:	04a2      	lsls	r2, r4, #18
 8000d56:	0b99      	lsrs	r1, r3, #14
 8000d58:	6239      	str	r1, [r7, #32]
 8000d5a:	6a39      	ldr	r1, [r7, #32]
 8000d5c:	4311      	orrs	r1, r2
 8000d5e:	6239      	str	r1, [r7, #32]
 8000d60:	13a3      	asrs	r3, r4, #14
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
 8000d64:	6a3b      	ldr	r3, [r7, #32]
 8000d66:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	6054      	str	r4, [r2, #4]
    FilterData->FilterOutput = (int32_t)(FilterData->RunningAverage / 8192);
 8000d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d70:	685c      	ldr	r4, [r3, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2c00      	cmp	r4, #0
 8000d76:	da03      	bge.n	8000d80 <DigitalFilter+0xd8>
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <DigitalFilter+0x104>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	185b      	adds	r3, r3, r1
 8000d7e:	4154      	adcs	r4, r2
 8000d80:	04e2      	lsls	r2, r4, #19
 8000d82:	0b59      	lsrs	r1, r3, #13
 8000d84:	61b9      	str	r1, [r7, #24]
 8000d86:	69b9      	ldr	r1, [r7, #24]
 8000d88:	4311      	orrs	r1, r2
 8000d8a:	61b9      	str	r1, [r7, #24]
 8000d8c:	1363      	asrs	r3, r4, #13
 8000d8e:	61fb      	str	r3, [r7, #28]
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	69fc      	ldr	r4, [r7, #28]
 8000d94:	001a      	movs	r2, r3
 8000d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d98:	609a      	str	r2, [r3, #8]
    return FilterData->FilterOutput;
 8000d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d9c:	689b      	ldr	r3, [r3, #8]
}
 8000d9e:	0018      	movs	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b013      	add	sp, #76	; 0x4c
 8000da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	00003fff 	.word	0x00003fff
 8000dac:	00001fff 	.word	0x00001fff

08000db0 <ProcessAdcFilter>:
//
// Return:      Routine updates SysVars data structure
//
// Requirement:
//
void ProcessAdcFilter(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

    ExecutionStart(EXECUTION_PROCESS_ADC_FILTER);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f003 fc29 	bl	800460c <ExecutionStart>

    if ((bFactoryConfigurationValid != 0) && ((bFlashConfigurationValid != 0))) {
 8000dba:	4b6b      	ldr	r3, [pc, #428]	; (8000f68 <ProcessAdcFilter+0x1b8>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d100      	bne.n	8000dc4 <ProcessAdcFilter+0x14>
 8000dc2:	e0ca      	b.n	8000f5a <ProcessAdcFilter+0x1aa>
 8000dc4:	4b69      	ldr	r3, [pc, #420]	; (8000f6c <ProcessAdcFilter+0x1bc>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d100      	bne.n	8000dce <ProcessAdcFilter+0x1e>
 8000dcc:	e0c5      	b.n	8000f5a <ProcessAdcFilter+0x1aa>
        SysVars.FilteredPowerInputCounts = DigitalFilter(&FilterPowerInputVoltage, SysVars.PowerInputCounts, FactoryConfiguration->PowerInputFilteringGain);
 8000dce:	4b68      	ldr	r3, [pc, #416]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000dd0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000dd2:	4b68      	ldr	r3, [pc, #416]	; (8000f74 <ProcessAdcFilter+0x1c4>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	23fe      	movs	r3, #254	; 0xfe
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	58d2      	ldr	r2, [r2, r3]
 8000ddc:	4b66      	ldr	r3, [pc, #408]	; (8000f78 <ProcessAdcFilter+0x1c8>)
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff ff62 	bl	8000ca8 <DigitalFilter>
 8000de4:	0002      	movs	r2, r0
 8000de6:	4b62      	ldr	r3, [pc, #392]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000de8:	645a      	str	r2, [r3, #68]	; 0x44
        SysVars.FilteredPowerRail5Counts = DigitalFilter(&FilterPowerRail5VDC, SysVars.PowerRail5Counts, FactoryConfiguration->PowerRail5FilteringGain);
 8000dea:	4b61      	ldr	r3, [pc, #388]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000dec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dee:	4b61      	ldr	r3, [pc, #388]	; (8000f74 <ProcessAdcFilter+0x1c4>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	58d2      	ldr	r2, [r2, r3]
 8000df8:	4b60      	ldr	r3, [pc, #384]	; (8000f7c <ProcessAdcFilter+0x1cc>)
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff ff54 	bl	8000ca8 <DigitalFilter>
 8000e00:	0002      	movs	r2, r0
 8000e02:	4b5b      	ldr	r3, [pc, #364]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000e04:	639a      	str	r2, [r3, #56]	; 0x38
        SysVars.FilteredIntRefCounts = DigitalFilter(&FilterInternalReferenceCounts, SysVars.IntRefCounts, FactoryConfiguration->InternalReferenceFilteringGain);
 8000e06:	4b5a      	ldr	r3, [pc, #360]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000e08:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000e0a:	4b5a      	ldr	r3, [pc, #360]	; (8000f74 <ProcessAdcFilter+0x1c4>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	2382      	movs	r3, #130	; 0x82
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	58d2      	ldr	r2, [r2, r3]
 8000e14:	4b5a      	ldr	r3, [pc, #360]	; (8000f80 <ProcessAdcFilter+0x1d0>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff ff46 	bl	8000ca8 <DigitalFilter>
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	4b54      	ldr	r3, [pc, #336]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000e20:	651a      	str	r2, [r3, #80]	; 0x50
        SysVars.FilteredMasterIndex = DigitalFilter(&MasterIndexFiltering, SysVars.MasterIndex, FlashConfiguration->MasterIndexFilteringGain) / 100;
 8000e22:	4b53      	ldr	r3, [pc, #332]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000e24:	2298      	movs	r2, #152	; 0x98
 8000e26:	5899      	ldr	r1, [r3, r2]
 8000e28:	4b56      	ldr	r3, [pc, #344]	; (8000f84 <ProcessAdcFilter+0x1d4>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2384      	movs	r3, #132	; 0x84
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	58d2      	ldr	r2, [r2, r3]
 8000e32:	4b55      	ldr	r3, [pc, #340]	; (8000f88 <ProcessAdcFilter+0x1d8>)
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff ff37 	bl	8000ca8 <DigitalFilter>
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	2164      	movs	r1, #100	; 0x64
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff fa50 	bl	80002e4 <__divsi3>
 8000e44:	0003      	movs	r3, r0
 8000e46:	0019      	movs	r1, r3
 8000e48:	4b49      	ldr	r3, [pc, #292]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000e4a:	229c      	movs	r2, #156	; 0x9c
 8000e4c:	5099      	str	r1, [r3, r2]
        //
        // Only run filtering if hardware is present and FactoryConfiguration data is valid
        //
        if (FactoryConfiguration->RVOutputPresent != 0) {
 8000e4e:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <ProcessAdcFilter+0x1c4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	7f1b      	ldrb	r3, [r3, #28]
 8000e54:	2220      	movs	r2, #32
 8000e56:	4013      	ands	r3, r2
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d01f      	beq.n	8000e9e <ProcessAdcFilter+0xee>
            SysVars.FilteredRVOutputVoltageCounts = DigitalFilter(&FilterRVOutputVoltage, SysVars.RVOutputVoltageCounts, FactoryConfiguration->RVOutputVoltageFilteringGain);
 8000e5e:	4b44      	ldr	r3, [pc, #272]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	5899      	ldr	r1, [r3, r2]
 8000e64:	4b43      	ldr	r3, [pc, #268]	; (8000f74 <ProcessAdcFilter+0x1c4>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	2383      	movs	r3, #131	; 0x83
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	58d2      	ldr	r2, [r2, r3]
 8000e6e:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <ProcessAdcFilter+0x1dc>)
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff ff19 	bl	8000ca8 <DigitalFilter>
 8000e76:	0001      	movs	r1, r0
 8000e78:	4b3d      	ldr	r3, [pc, #244]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000e7a:	2284      	movs	r2, #132	; 0x84
 8000e7c:	5099      	str	r1, [r3, r2]
            SysVars.FilteredRVOutputCurrentCounts = DigitalFilter(&FilterRVOutputCurrentVoltage, SysVars.RVOutputCurrentCounts, FactoryConfiguration->RVOutputCurrentFilteringGain);
 8000e7e:	4b3c      	ldr	r3, [pc, #240]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000e80:	228c      	movs	r2, #140	; 0x8c
 8000e82:	5899      	ldr	r1, [r3, r2]
 8000e84:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <ProcessAdcFilter+0x1c4>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	2384      	movs	r3, #132	; 0x84
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	58d2      	ldr	r2, [r2, r3]
 8000e8e:	4b40      	ldr	r3, [pc, #256]	; (8000f90 <ProcessAdcFilter+0x1e0>)
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ff09 	bl	8000ca8 <DigitalFilter>
 8000e96:	0001      	movs	r1, r0
 8000e98:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000e9a:	2290      	movs	r2, #144	; 0x90
 8000e9c:	5099      	str	r1, [r3, r2]
        }
        //
        // Only run filtering if hardware is present and FactoryConfiguration data is valid
        //
        if (FactoryConfiguration->TempSensorPresent != 0) {
 8000e9e:	4b35      	ldr	r3, [pc, #212]	; (8000f74 <ProcessAdcFilter+0x1c4>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	7f5b      	ldrb	r3, [r3, #29]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00d      	beq.n	8000eca <ProcessAdcFilter+0x11a>
            SysVars.FilteredTemperatureCounts = DigitalFilter(&FilterTemperatureSensorVoltage, SysVars.TemperatureCounts, FactoryConfiguration->TemperatureFilteringGain);
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000eb0:	6859      	ldr	r1, [r3, #4]
 8000eb2:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <ProcessAdcFilter+0x1c4>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	2381      	movs	r3, #129	; 0x81
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	58d2      	ldr	r2, [r2, r3]
 8000ebc:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <ProcessAdcFilter+0x1e4>)
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff fef2 	bl	8000ca8 <DigitalFilter>
 8000ec4:	0002      	movs	r2, r0
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000ec8:	609a      	str	r2, [r3, #8]
        }
        //
        // Only run filtering if hardware is present and FactoryConfiguration data is valid
        //
        if (FactoryConfiguration->KmaPresent != 0) {
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <ProcessAdcFilter+0x1c4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	7f5b      	ldrb	r3, [r3, #29]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00d      	beq.n	8000ef6 <ProcessAdcFilter+0x146>
            SysVars.FilteredKmaCounts = DigitalFilter(&FilterKmaVoltage, SysVars.KmaCounts, FlashConfiguration->KmaFilteringGain);
 8000eda:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000edc:	6999      	ldr	r1, [r3, #24]
 8000ede:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <ProcessAdcFilter+0x1d4>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	2383      	movs	r3, #131	; 0x83
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	58d2      	ldr	r2, [r2, r3]
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <ProcessAdcFilter+0x1e8>)
 8000eea:	0018      	movs	r0, r3
 8000eec:	f7ff fedc 	bl	8000ca8 <DigitalFilter>
 8000ef0:	0002      	movs	r2, r0
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000ef4:	61da      	str	r2, [r3, #28]
        }
        //
        // Only run filtering if hardware is present and FactoryConfiguration data is valid
        //
        if (FactoryConfiguration->AccelPresent != 0) {
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <ProcessAdcFilter+0x1c4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	7f1b      	ldrb	r3, [r3, #28]
 8000efc:	2210      	movs	r2, #16
 8000efe:	4013      	ands	r3, r2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d029      	beq.n	8000f5a <ProcessAdcFilter+0x1aa>
            SysVars.FilteredAccelXCounts = DigitalFilter(&FilterAccelX, SysVars.AccelXCounts, FlashConfiguration->AccelXAdcFilteringGain);
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000f08:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <ProcessAdcFilter+0x1d4>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	2385      	movs	r3, #133	; 0x85
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	58d2      	ldr	r2, [r2, r3]
 8000f14:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <ProcessAdcFilter+0x1ec>)
 8000f16:	0018      	movs	r0, r3
 8000f18:	f7ff fec6 	bl	8000ca8 <DigitalFilter>
 8000f1c:	0002      	movs	r2, r0
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000f20:	661a      	str	r2, [r3, #96]	; 0x60
            SysVars.FilteredAccelYCounts = DigitalFilter(&FilterAccelY, SysVars.AccelYCounts, FlashConfiguration->AccelYAdcFilteringGain);
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000f24:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <ProcessAdcFilter+0x1d4>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	2386      	movs	r3, #134	; 0x86
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	58d2      	ldr	r2, [r2, r3]
 8000f30:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <ProcessAdcFilter+0x1f0>)
 8000f32:	0018      	movs	r0, r3
 8000f34:	f7ff feb8 	bl	8000ca8 <DigitalFilter>
 8000f38:	0002      	movs	r2, r0
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000f3c:	66da      	str	r2, [r3, #108]	; 0x6c
            SysVars.FilteredAccelZCounts = DigitalFilter(&FilterAccelZ, SysVars.AccelZCounts, FlashConfiguration->AccelZAdcFilteringGain);
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000f40:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <ProcessAdcFilter+0x1d4>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	2387      	movs	r3, #135	; 0x87
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	58d2      	ldr	r2, [r2, r3]
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <ProcessAdcFilter+0x1f4>)
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f7ff feaa 	bl	8000ca8 <DigitalFilter>
 8000f54:	0002      	movs	r2, r0
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <ProcessAdcFilter+0x1c0>)
 8000f58:	679a      	str	r2, [r3, #120]	; 0x78
        }
    }
    ExecutionEnd(EXECUTION_PROCESS_ADC_FILTER);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f003 fb70 	bl	8004640 <ExecutionEnd>
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	20002f9e 	.word	0x20002f9e
 8000f6c:	20002cf6 	.word	0x20002cf6
 8000f70:	200020c0 	.word	0x200020c0
 8000f74:	20001eec 	.word	0x20001eec
 8000f78:	20000070 	.word	0x20000070
 8000f7c:	20000050 	.word	0x20000050
 8000f80:	200000a0 	.word	0x200000a0
 8000f84:	20002f04 	.word	0x20002f04
 8000f88:	200037e8 	.word	0x200037e8
 8000f8c:	20000040 	.word	0x20000040
 8000f90:	20000090 	.word	0x20000090
 8000f94:	20000080 	.word	0x20000080
 8000f98:	20000060 	.word	0x20000060
 8000f9c:	200000b0 	.word	0x200000b0
 8000fa0:	200000c0 	.word	0x200000c0
 8000fa4:	200000d0 	.word	0x200000d0

08000fa8 <ProcessAnalogReadings>:
//
// Return:      Results of conversions are stored in SysVars data structure
//
// Requirement:
//
void ProcessAnalogReadings(void) {
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

    int32_t FullScale;

    ExecutionStart(EXECUTION_PROCESS_ANALOG_READINGS);
 8000fae:	2002      	movs	r0, #2
 8000fb0:	f003 fb2c 	bl	800460c <ExecutionStart>

    if ((bFactoryConfigurationValid != 0) && ((bFlashConfigurationValid != 0))) {
 8000fb4:	4bdb      	ldr	r3, [pc, #876]	; (8001324 <ProcessAnalogReadings+0x37c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d100      	bne.n	8000fbe <ProcessAnalogReadings+0x16>
 8000fbc:	e1aa      	b.n	8001314 <ProcessAnalogReadings+0x36c>
 8000fbe:	4bda      	ldr	r3, [pc, #872]	; (8001328 <ProcessAnalogReadings+0x380>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d100      	bne.n	8000fc8 <ProcessAnalogReadings+0x20>
 8000fc6:	e1a5      	b.n	8001314 <ProcessAnalogReadings+0x36c>
        //      on the internal Voltage Reference.  This value is then stored into VREFINT_CAL_ADDR in FLASH. - And can not be changed
        //  Now, in a user system, we also do an A/D conversion on Internal Voltage Reference.  The A/D value read in the user system should
        //      be a ratio of the value stored at VREFINT_CAL_ADDR, multiplied by 3.3.  This should result in the "actual" 3.3VDC power
        //      supply voltage.
        //
        SysVars.FactoryIntRefCounts = *VREFINT_CAL_ADDR;          // Read factory calibration value from FLASH
 8000fc8:	4bd8      	ldr	r3, [pc, #864]	; (800132c <ProcessAnalogReadings+0x384>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	4bd8      	ldr	r3, [pc, #864]	; (8001330 <ProcessAnalogReadings+0x388>)
 8000fd0:	659a      	str	r2, [r3, #88]	; 0x58
        if (SysVars.FilteredIntRefCounts != 0) {
 8000fd2:	4bd7      	ldr	r3, [pc, #860]	; (8001330 <ProcessAnalogReadings+0x388>)
 8000fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00c      	beq.n	8000ff4 <ProcessAnalogReadings+0x4c>
            SysVars.PowerRail33VDC = (int32_t)MultDivideWithRounding64(330000, SysVars.FactoryIntRefCounts, SysVars.FilteredIntRefCounts, RESULT_32);           // x.xxx V
 8000fda:	4bd5      	ldr	r3, [pc, #852]	; (8001330 <ProcessAnalogReadings+0x388>)
 8000fdc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8000fde:	4bd4      	ldr	r3, [pc, #848]	; (8001330 <ProcessAnalogReadings+0x388>)
 8000fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000fe2:	48d4      	ldr	r0, [pc, #848]	; (8001334 <ProcessAnalogReadings+0x38c>)
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f006 ffc9 	bl	8007f7c <MultDivideWithRounding64>
 8000fea:	0003      	movs	r3, r0
 8000fec:	000c      	movs	r4, r1
 8000fee:	001a      	movs	r2, r3
 8000ff0:	4bcf      	ldr	r3, [pc, #828]	; (8001330 <ProcessAnalogReadings+0x388>)
 8000ff2:	655a      	str	r2, [r3, #84]	; 0x54
        //
        //  FactoryConfiguration->Calibration33 = Measured value of 3.3 Power Supply when Sender was tested at CiES
        //
        //  The 100/342 (or 100/2046) ratio is used so the KFactor value is as close as possible to 10000 during factory testing at CiES
        //
        SysVars.PowerInputVoltage = (int32_t)MultDivideWithRounding64(FilterPowerInputVoltage.FilterOutput, FactoryConfiguration->Calibration33 * 100,
 8000ff4:	4bd0      	ldr	r3, [pc, #832]	; (8001338 <ProcessAnalogReadings+0x390>)
 8000ff6:	6898      	ldr	r0, [r3, #8]
 8000ff8:	4bd0      	ldr	r3, [pc, #832]	; (800133c <ProcessAnalogReadings+0x394>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2264      	movs	r2, #100	; 0x64
 8001000:	435a      	muls	r2, r3
 8001002:	0011      	movs	r1, r2
                                                                  FactoryConfiguration->PowerInputKFactor * 342, RESULT_32);
 8001004:	4bcd      	ldr	r3, [pc, #820]	; (800133c <ProcessAnalogReadings+0x394>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
        SysVars.PowerInputVoltage = (int32_t)MultDivideWithRounding64(FilterPowerInputVoltage.FilterOutput, FactoryConfiguration->Calibration33 * 100,
 800100a:	22ab      	movs	r2, #171	; 0xab
 800100c:	0052      	lsls	r2, r2, #1
 800100e:	435a      	muls	r2, r3
 8001010:	2302      	movs	r3, #2
 8001012:	f006 ffb3 	bl	8007f7c <MultDivideWithRounding64>
 8001016:	0003      	movs	r3, r0
 8001018:	000c      	movs	r4, r1
 800101a:	001a      	movs	r2, r3
 800101c:	4bc4      	ldr	r3, [pc, #784]	; (8001330 <ProcessAnalogReadings+0x388>)
 800101e:	649a      	str	r2, [r3, #72]	; 0x48
        SysVars.PowerRail5VDC = (int32_t)MultDivideWithRounding64(FilterPowerRail5VDC.FilterOutput, FactoryConfiguration->Calibration33 * 100, FactoryConfiguration->PowerRail5KFactor * 2046, RESULT_32);
 8001020:	4bc7      	ldr	r3, [pc, #796]	; (8001340 <ProcessAnalogReadings+0x398>)
 8001022:	6898      	ldr	r0, [r3, #8]
 8001024:	4bc5      	ldr	r3, [pc, #788]	; (800133c <ProcessAnalogReadings+0x394>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2264      	movs	r2, #100	; 0x64
 800102c:	435a      	muls	r2, r3
 800102e:	0011      	movs	r1, r2
 8001030:	4bc2      	ldr	r3, [pc, #776]	; (800133c <ProcessAnalogReadings+0x394>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	0013      	movs	r3, r2
 8001038:	029b      	lsls	r3, r3, #10
 800103a:	1a9b      	subs	r3, r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	001a      	movs	r2, r3
 8001040:	2302      	movs	r3, #2
 8001042:	f006 ff9b 	bl	8007f7c <MultDivideWithRounding64>
 8001046:	0003      	movs	r3, r0
 8001048:	000c      	movs	r4, r1
 800104a:	001a      	movs	r2, r3
 800104c:	4bb8      	ldr	r3, [pc, #736]	; (8001330 <ProcessAnalogReadings+0x388>)
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c
        //
        // Run Temperature calculations if present and Factory Configuration data is valid
        //
        if (FactoryConfiguration->TempSensorPresent != 0) {
 8001050:	4bba      	ldr	r3, [pc, #744]	; (800133c <ProcessAnalogReadings+0x394>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	7f5b      	ldrb	r3, [r3, #29]
 8001056:	2201      	movs	r2, #1
 8001058:	4013      	ands	r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d022      	beq.n	80010a6 <ProcessAnalogReadings+0xfe>
            //
            // Convert Temperature Sensor Filtered ADC counts into volts (Temperature Input Voltage) (x.xxxx V)
            //
            SysVars.TemperatureVoltage = (int32_t)MultDivideWithRounding64(FilterTemperatureSensorVoltage.FilterOutput, FactoryConfiguration->Calibration33, 40950, RESULT_32);
 8001060:	4bb8      	ldr	r3, [pc, #736]	; (8001344 <ProcessAnalogReadings+0x39c>)
 8001062:	6898      	ldr	r0, [r3, #8]
 8001064:	4bb5      	ldr	r3, [pc, #724]	; (800133c <ProcessAnalogReadings+0x394>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6819      	ldr	r1, [r3, #0]
 800106a:	4ab7      	ldr	r2, [pc, #732]	; (8001348 <ProcessAnalogReadings+0x3a0>)
 800106c:	2302      	movs	r3, #2
 800106e:	f006 ff85 	bl	8007f7c <MultDivideWithRounding64>
 8001072:	0003      	movs	r3, r0
 8001074:	000c      	movs	r4, r1
 8001076:	001a      	movs	r2, r3
 8001078:	4bad      	ldr	r3, [pc, #692]	; (8001330 <ProcessAnalogReadings+0x388>)
 800107a:	60da      	str	r2, [r3, #12]
            //
            // Convert Temperature Input Voltage into  Deg C (xx.xx C)
            //
            SysVars.TemperatureCelsius = (int32_t)MultDivideWithRounding64(SysVars.TemperatureVoltage - 18663, 1000, -1169, RESULT_32);
 800107c:	4bac      	ldr	r3, [pc, #688]	; (8001330 <ProcessAnalogReadings+0x388>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	4ab2      	ldr	r2, [pc, #712]	; (800134c <ProcessAnalogReadings+0x3a4>)
 8001082:	1898      	adds	r0, r3, r2
 8001084:	4ab2      	ldr	r2, [pc, #712]	; (8001350 <ProcessAnalogReadings+0x3a8>)
 8001086:	23fa      	movs	r3, #250	; 0xfa
 8001088:	0099      	lsls	r1, r3, #2
 800108a:	2302      	movs	r3, #2
 800108c:	f006 ff76 	bl	8007f7c <MultDivideWithRounding64>
 8001090:	0003      	movs	r3, r0
 8001092:	000c      	movs	r4, r1
 8001094:	001a      	movs	r2, r3
 8001096:	4ba6      	ldr	r3, [pc, #664]	; (8001330 <ProcessAnalogReadings+0x388>)
 8001098:	611a      	str	r2, [r3, #16]
            //
            // Convert Temperature (Deg C) into Frequency:
            //
            //  Freq = 200 + T
            //
            SysVars.TemperatureFrequency = 20000 + SysVars.TemperatureCelsius;
 800109a:	4ba5      	ldr	r3, [pc, #660]	; (8001330 <ProcessAnalogReadings+0x388>)
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	4aad      	ldr	r2, [pc, #692]	; (8001354 <ProcessAnalogReadings+0x3ac>)
 80010a0:	189a      	adds	r2, r3, r2
 80010a2:	4ba3      	ldr	r3, [pc, #652]	; (8001330 <ProcessAnalogReadings+0x388>)
 80010a4:	615a      	str	r2, [r3, #20]
        }
        //
        // Run KMA calculations only if present
        //
        if (FactoryConfiguration->KmaPresent != 0) {
 80010a6:	4ba5      	ldr	r3, [pc, #660]	; (800133c <ProcessAnalogReadings+0x394>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	7f5b      	ldrb	r3, [r3, #29]
 80010ac:	2202      	movs	r2, #2
 80010ae:	4013      	ands	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d063      	beq.n	800117e <ProcessAnalogReadings+0x1d6>
            //  the signal goes through a voltage divider (22K/39K), which reduces the input from 0.2 to 4.8V to 0.128 to 3.069V.  To eliminate errors due to
            //  the tolerances of the voltage divider, a K-Factor is added.  The K-Factor is set during testing of the board.
            //
            // The 100/261 ratio is used so the KFactor is as close as possible to 10000 during factory testing at CiES
            //
            SysVars.KmaVoltage = (int32_t)MultDivideWithRounding64(FilterKmaVoltage.FilterOutput, FactoryConfiguration->Calibration33 * 100, FactoryConfiguration->KmaKFactor * 261, RESULT_32);
 80010b6:	4ba8      	ldr	r3, [pc, #672]	; (8001358 <ProcessAnalogReadings+0x3b0>)
 80010b8:	6898      	ldr	r0, [r3, #8]
 80010ba:	4ba0      	ldr	r3, [pc, #640]	; (800133c <ProcessAnalogReadings+0x394>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2264      	movs	r2, #100	; 0x64
 80010c2:	435a      	muls	r2, r3
 80010c4:	0011      	movs	r1, r2
 80010c6:	4b9d      	ldr	r3, [pc, #628]	; (800133c <ProcessAnalogReadings+0x394>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	0013      	movs	r3, r2
 80010ce:	019b      	lsls	r3, r3, #6
 80010d0:	189b      	adds	r3, r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	189a      	adds	r2, r3, r2
 80010d6:	2302      	movs	r3, #2
 80010d8:	f006 ff50 	bl	8007f7c <MultDivideWithRounding64>
 80010dc:	0003      	movs	r3, r0
 80010de:	000c      	movs	r4, r1
 80010e0:	001a      	movs	r2, r3
 80010e2:	4b93      	ldr	r3, [pc, #588]	; (8001330 <ProcessAnalogReadings+0x388>)
 80010e4:	621a      	str	r2, [r3, #32]
            // Calculate KMA Percentage (xxx.xxx %).  Voltage output from KMA is a function of magnetic field and Vcc.
            //      Vcc is connected to +5VDC.
            //      Therefore the KMA Percentage is:
            //          Percentage = KMA Voltage / 5VDC Voltage
            //
            if (SysVars.PowerRail5VDC > 0) {
 80010e6:	4b92      	ldr	r3, [pc, #584]	; (8001330 <ProcessAnalogReadings+0x388>)
 80010e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	dd0c      	ble.n	8001108 <ProcessAnalogReadings+0x160>
                SysVars.KmaPercentage = (int32_t)MultDivideWithRounding64(SysVars.KmaVoltage, 10000, SysVars.PowerRail5VDC, RESULT_32);
 80010ee:	4b90      	ldr	r3, [pc, #576]	; (8001330 <ProcessAnalogReadings+0x388>)
 80010f0:	6a18      	ldr	r0, [r3, #32]
 80010f2:	4b8f      	ldr	r3, [pc, #572]	; (8001330 <ProcessAnalogReadings+0x388>)
 80010f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010f6:	4999      	ldr	r1, [pc, #612]	; (800135c <ProcessAnalogReadings+0x3b4>)
 80010f8:	2302      	movs	r3, #2
 80010fa:	f006 ff3f 	bl	8007f7c <MultDivideWithRounding64>
 80010fe:	0003      	movs	r3, r0
 8001100:	000c      	movs	r4, r1
 8001102:	001a      	movs	r2, r3
 8001104:	4b8a      	ldr	r3, [pc, #552]	; (8001330 <ProcessAnalogReadings+0x388>)
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
            }
            //
            // Calculate KMA Angle (xxx.xxx Deg) based on KMA Percentage.  4% = 0 Deg    96% = 180 Deg
            //
            SysVars.KmaAngle = (int32_t)MultDivideWithRounding64(SysVars.KmaPercentage - KMA_OUTPUT_AT_0_DEG, 180000, KMA_OUTPUT_AT_180_DEG - KMA_OUTPUT_AT_0_DEG, RESULT_32);
 8001108:	4b89      	ldr	r3, [pc, #548]	; (8001330 <ProcessAnalogReadings+0x388>)
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	4a94      	ldr	r2, [pc, #592]	; (8001360 <ProcessAnalogReadings+0x3b8>)
 800110e:	1898      	adds	r0, r3, r2
 8001110:	4a94      	ldr	r2, [pc, #592]	; (8001364 <ProcessAnalogReadings+0x3bc>)
 8001112:	4995      	ldr	r1, [pc, #596]	; (8001368 <ProcessAnalogReadings+0x3c0>)
 8001114:	2302      	movs	r3, #2
 8001116:	f006 ff31 	bl	8007f7c <MultDivideWithRounding64>
 800111a:	0003      	movs	r3, r0
 800111c:	000c      	movs	r4, r1
 800111e:	001a      	movs	r2, r3
 8001120:	4b83      	ldr	r3, [pc, #524]	; (8001330 <ProcessAnalogReadings+0x388>)
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
            //
            // Calculate KMA Index based on KMA Angle     0 Deg=MIN_INDEX,  180 Deg=MAX_INDEX
            //
            SysVars.KmaIndex = (int32_t)MultDivideWithRounding64(MAX_INDEX - MIN_INDEX, SysVars.KmaAngle, 180000, RESULT_32) + MIN_INDEX;             // 400-102300 xxxx.xx
 8001124:	4b82      	ldr	r3, [pc, #520]	; (8001330 <ProcessAnalogReadings+0x388>)
 8001126:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001128:	4a8f      	ldr	r2, [pc, #572]	; (8001368 <ProcessAnalogReadings+0x3c0>)
 800112a:	4890      	ldr	r0, [pc, #576]	; (800136c <ProcessAnalogReadings+0x3c4>)
 800112c:	2302      	movs	r3, #2
 800112e:	f006 ff25 	bl	8007f7c <MultDivideWithRounding64>
 8001132:	0003      	movs	r3, r0
 8001134:	000c      	movs	r4, r1
 8001136:	3391      	adds	r3, #145	; 0x91
 8001138:	33ff      	adds	r3, #255	; 0xff
 800113a:	001a      	movs	r2, r3
 800113c:	4b7c      	ldr	r3, [pc, #496]	; (8001330 <ProcessAnalogReadings+0x388>)
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
            //
            // If reverse flag is set, then 0 to 180 Deg = MAX_INDEX to MIN_INDEX
            //
            if ((FlashConfiguration->ReverseIndexKma != 0)) {
 8001140:	4b8b      	ldr	r3, [pc, #556]	; (8001370 <ProcessAnalogReadings+0x3c8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a8b      	ldr	r2, [pc, #556]	; (8001374 <ProcessAnalogReadings+0x3cc>)
 8001146:	5c9b      	ldrb	r3, [r3, r2]
 8001148:	2201      	movs	r2, #1
 800114a:	4013      	ands	r3, r2
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <ProcessAnalogReadings+0x1b6>
                SysVars.KmaIndex = (MAX_INDEX + MIN_INDEX) - SysVars.KmaIndex;
 8001152:	4b77      	ldr	r3, [pc, #476]	; (8001330 <ProcessAnalogReadings+0x388>)
 8001154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001156:	4a88      	ldr	r2, [pc, #544]	; (8001378 <ProcessAnalogReadings+0x3d0>)
 8001158:	1ad2      	subs	r2, r2, r3
 800115a:	4b75      	ldr	r3, [pc, #468]	; (8001330 <ProcessAnalogReadings+0x388>)
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
            // Calculate KMA Frequency.
            //
            // KMA Index:
            //      400-102300 (xxxx.xx)            KMA Frequency =  1638400 Hz to 6406 Hz (xxxxx.xx)
            //
            if (SysVars.KmaIndex != 0) {
 800115e:	4b74      	ldr	r3, [pc, #464]	; (8001330 <ProcessAnalogReadings+0x388>)
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00b      	beq.n	800117e <ProcessAnalogReadings+0x1d6>
              SysVars.KmaFrequency = (int32_t)MultDivideWithRounding64(655360000, 1, SysVars.KmaIndex, RESULT_32);
 8001166:	4b72      	ldr	r3, [pc, #456]	; (8001330 <ProcessAnalogReadings+0x388>)
 8001168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800116a:	4884      	ldr	r0, [pc, #528]	; (800137c <ProcessAnalogReadings+0x3d4>)
 800116c:	2302      	movs	r3, #2
 800116e:	2101      	movs	r1, #1
 8001170:	f006 ff04 	bl	8007f7c <MultDivideWithRounding64>
 8001174:	0003      	movs	r3, r0
 8001176:	000c      	movs	r4, r1
 8001178:	001a      	movs	r2, r3
 800117a:	4b6d      	ldr	r3, [pc, #436]	; (8001330 <ProcessAnalogReadings+0x388>)
 800117c:	631a      	str	r2, [r3, #48]	; 0x30
            }
        }
        //
        // Run Accelerometer calculations if present and FactoryConfiguration data is valid
        //
        if (FactoryConfiguration->AccelPresent != 0) {
 800117e:	4b6f      	ldr	r3, [pc, #444]	; (800133c <ProcessAnalogReadings+0x394>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	7f1b      	ldrb	r3, [r3, #28]
 8001184:	2210      	movs	r2, #16
 8001186:	4013      	ands	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d036      	beq.n	80011fc <ProcessAnalogReadings+0x254>
            //
            //  Convert Filtered Accelerometer Counts into g's based on accelerometer scaling (x.xxxx g)
            //  AccelerometerScaling:  0=2000, 1=4000, 2=8000
            //
            FullScale = 2000 * (int32_t)(1u << FlashConfiguration->AccelerometerScaling);
 800118e:	4b78      	ldr	r3, [pc, #480]	; (8001370 <ProcessAnalogReadings+0x3c8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a7b      	ldr	r2, [pc, #492]	; (8001380 <ProcessAnalogReadings+0x3d8>)
 8001194:	5c9b      	ldrb	r3, [r3, r2]
 8001196:	079b      	lsls	r3, r3, #30
 8001198:	0f9b      	lsrs	r3, r3, #30
 800119a:	b2db      	uxtb	r3, r3
 800119c:	001a      	movs	r2, r3
 800119e:	23fa      	movs	r3, #250	; 0xfa
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4093      	lsls	r3, r2
 80011a4:	607b      	str	r3, [r7, #4]
            SysVars.AccelGravityX = (int32_t)MultDivideWithRounding64(FilterAccelX.FilterOutput - 204800, FullScale, 20480, RESULT_32);
 80011a6:	4b77      	ldr	r3, [pc, #476]	; (8001384 <ProcessAnalogReadings+0x3dc>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	4d77      	ldr	r5, [pc, #476]	; (8001388 <ProcessAnalogReadings+0x3e0>)
 80011ac:	1958      	adds	r0, r3, r5
 80011ae:	23a0      	movs	r3, #160	; 0xa0
 80011b0:	01da      	lsls	r2, r3, #7
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	2302      	movs	r3, #2
 80011b6:	f006 fee1 	bl	8007f7c <MultDivideWithRounding64>
 80011ba:	0003      	movs	r3, r0
 80011bc:	000c      	movs	r4, r1
 80011be:	001a      	movs	r2, r3
 80011c0:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <ProcessAnalogReadings+0x388>)
 80011c2:	665a      	str	r2, [r3, #100]	; 0x64
            SysVars.AccelGravityY = (int32_t)MultDivideWithRounding64(FilterAccelY.FilterOutput - 204800, FullScale, 20480, RESULT_32);
 80011c4:	4b71      	ldr	r3, [pc, #452]	; (800138c <ProcessAnalogReadings+0x3e4>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	1958      	adds	r0, r3, r5
 80011ca:	23a0      	movs	r3, #160	; 0xa0
 80011cc:	01da      	lsls	r2, r3, #7
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	2302      	movs	r3, #2
 80011d2:	f006 fed3 	bl	8007f7c <MultDivideWithRounding64>
 80011d6:	0003      	movs	r3, r0
 80011d8:	000c      	movs	r4, r1
 80011da:	001a      	movs	r2, r3
 80011dc:	4b54      	ldr	r3, [pc, #336]	; (8001330 <ProcessAnalogReadings+0x388>)
 80011de:	671a      	str	r2, [r3, #112]	; 0x70
            SysVars.AccelGravityZ = (int32_t)MultDivideWithRounding64(FilterAccelZ.FilterOutput - 204800, FullScale, 20480, RESULT_32);
 80011e0:	4b6b      	ldr	r3, [pc, #428]	; (8001390 <ProcessAnalogReadings+0x3e8>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	1958      	adds	r0, r3, r5
 80011e6:	23a0      	movs	r3, #160	; 0xa0
 80011e8:	01da      	lsls	r2, r3, #7
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	2302      	movs	r3, #2
 80011ee:	f006 fec5 	bl	8007f7c <MultDivideWithRounding64>
 80011f2:	0003      	movs	r3, r0
 80011f4:	000c      	movs	r4, r1
 80011f6:	001a      	movs	r2, r3
 80011f8:	4b4d      	ldr	r3, [pc, #308]	; (8001330 <ProcessAnalogReadings+0x388>)
 80011fa:	67da      	str	r2, [r3, #124]	; 0x7c
        }
        //
        // Run R/V Output calculations if present and FactoryConfiguration data is valid
        //
        if (FactoryConfiguration->RVOutputPresent != 0) {
 80011fc:	4b4f      	ldr	r3, [pc, #316]	; (800133c <ProcessAnalogReadings+0x394>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	7f1b      	ldrb	r3, [r3, #28]
 8001202:	2220      	movs	r2, #32
 8001204:	4013      	ands	r3, r2
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d100      	bne.n	800120e <ProcessAnalogReadings+0x266>
 800120c:	e082      	b.n	8001314 <ProcessAnalogReadings+0x36c>
            //  Convert Filtered RV Output Voltage counts into voltage (xx.xxxx V)  To eliminate voltage divider tolerance errors, conversion includes a
            //  factory calibrated K-Factor.
            //
            //  NOTE:  Filtered Counts is multiplied by 1460 so KFactor is as close as possible to 10000
            //
            SysVars.RVOutputVoltage = (int32_t)MultDivideWithRounding64(FilterRVOutputVoltage.FilterOutput, 1460, FactoryConfiguration->RVOutputVoltageKFactor, RESULT_32);
 800120e:	4b61      	ldr	r3, [pc, #388]	; (8001394 <ProcessAnalogReadings+0x3ec>)
 8001210:	6898      	ldr	r0, [r3, #8]
 8001212:	4b4a      	ldr	r3, [pc, #296]	; (800133c <ProcessAnalogReadings+0x394>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	495f      	ldr	r1, [pc, #380]	; (8001398 <ProcessAnalogReadings+0x3f0>)
 800121a:	2302      	movs	r3, #2
 800121c:	f006 feae 	bl	8007f7c <MultDivideWithRounding64>
 8001220:	0003      	movs	r3, r0
 8001222:	000c      	movs	r4, r1
 8001224:	0019      	movs	r1, r3
 8001226:	4b42      	ldr	r3, [pc, #264]	; (8001330 <ProcessAnalogReadings+0x388>)
 8001228:	2288      	movs	r2, #136	; 0x88
 800122a:	5099      	str	r1, [r3, r2]
            //  Then add-in current used by 187K/91K feedback and 187K/39K voltage divider for A/D input  (278 || 226 = 124.7K)
            //  To eliminate voltage divider tolerance errors, conversion includes a K-Factor.
            //
            //  NOTE:  Filtered Counts is multiplied by 3114 so KFactor is as close as possible to 10000
            //
            SysVars.RVOutputCurrent = (int32_t)MultDivideWithRounding64(FilterRVOutputCurrentVoltage.FilterOutput, 3114, FactoryConfiguration->RVOutputCurrentKFactor, RESULT_32);
 800122c:	4b5b      	ldr	r3, [pc, #364]	; (800139c <ProcessAnalogReadings+0x3f4>)
 800122e:	6898      	ldr	r0, [r3, #8]
 8001230:	4b42      	ldr	r3, [pc, #264]	; (800133c <ProcessAnalogReadings+0x394>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695a      	ldr	r2, [r3, #20]
 8001236:	495a      	ldr	r1, [pc, #360]	; (80013a0 <ProcessAnalogReadings+0x3f8>)
 8001238:	2302      	movs	r3, #2
 800123a:	f006 fe9f 	bl	8007f7c <MultDivideWithRounding64>
 800123e:	0003      	movs	r3, r0
 8001240:	000c      	movs	r4, r1
 8001242:	0019      	movs	r1, r3
 8001244:	4b3a      	ldr	r3, [pc, #232]	; (8001330 <ProcessAnalogReadings+0x388>)
 8001246:	2294      	movs	r2, #148	; 0x94
 8001248:	5099      	str	r1, [r3, r2]
            SysVars.RVOutputCurrent += (int32_t)MultDivideWithRounding64(SysVars.RVOutputVoltage, 1, 1247, RESULT_32);
 800124a:	4b39      	ldr	r3, [pc, #228]	; (8001330 <ProcessAnalogReadings+0x388>)
 800124c:	2288      	movs	r2, #136	; 0x88
 800124e:	5898      	ldr	r0, [r3, r2]
 8001250:	4a54      	ldr	r2, [pc, #336]	; (80013a4 <ProcessAnalogReadings+0x3fc>)
 8001252:	2302      	movs	r3, #2
 8001254:	2101      	movs	r1, #1
 8001256:	f006 fe91 	bl	8007f7c <MultDivideWithRounding64>
 800125a:	0003      	movs	r3, r0
 800125c:	000c      	movs	r4, r1
 800125e:	0019      	movs	r1, r3
 8001260:	4b33      	ldr	r3, [pc, #204]	; (8001330 <ProcessAnalogReadings+0x388>)
 8001262:	2294      	movs	r2, #148	; 0x94
 8001264:	589b      	ldr	r3, [r3, r2]
 8001266:	18ca      	adds	r2, r1, r3
 8001268:	4b31      	ldr	r3, [pc, #196]	; (8001330 <ProcessAnalogReadings+0x388>)
 800126a:	2194      	movs	r1, #148	; 0x94
 800126c:	505a      	str	r2, [r3, r1]

            if (SysVars.RVOutputCurrent != 0) {
 800126e:	4b30      	ldr	r3, [pc, #192]	; (8001330 <ProcessAnalogReadings+0x388>)
 8001270:	2294      	movs	r2, #148	; 0x94
 8001272:	589b      	ldr	r3, [r3, r2]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00f      	beq.n	8001298 <ProcessAnalogReadings+0x2f0>
                //
                // Calculate RV Output Ohms (R = V/I).  (xxxx.xx Ohms)
                //
                SysVars.RVOutputOhms = (int32_t)MultDivideWithRounding64(SysVars.RVOutputVoltage, 10000, SysVars.RVOutputCurrent, RESULT_32);
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <ProcessAnalogReadings+0x388>)
 800127a:	2288      	movs	r2, #136	; 0x88
 800127c:	5898      	ldr	r0, [r3, r2]
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <ProcessAnalogReadings+0x388>)
 8001280:	2294      	movs	r2, #148	; 0x94
 8001282:	589a      	ldr	r2, [r3, r2]
 8001284:	4935      	ldr	r1, [pc, #212]	; (800135c <ProcessAnalogReadings+0x3b4>)
 8001286:	2302      	movs	r3, #2
 8001288:	f006 fe78 	bl	8007f7c <MultDivideWithRounding64>
 800128c:	0003      	movs	r3, r0
 800128e:	000c      	movs	r4, r1
 8001290:	0019      	movs	r1, r3
 8001292:	4b27      	ldr	r3, [pc, #156]	; (8001330 <ProcessAnalogReadings+0x388>)
 8001294:	22a4      	movs	r2, #164	; 0xa4
 8001296:	5099      	str	r1, [r3, r2]
            // P = (I*I)/R
            //
            //  Where: I = Current (xx.xxx mA)      R = Resistance of Current Sense Resistor (which is 1 Ohm)
            //          P = xxx.xxx mW
                //
            SysVars.CurrentSensePower = (int32_t)MultDivideWithRounding64(SysVars.RVOutputCurrent, SysVars.RVOutputCurrent, 1000000, RESULT_32);
 8001298:	4b25      	ldr	r3, [pc, #148]	; (8001330 <ProcessAnalogReadings+0x388>)
 800129a:	2294      	movs	r2, #148	; 0x94
 800129c:	5898      	ldr	r0, [r3, r2]
 800129e:	4b24      	ldr	r3, [pc, #144]	; (8001330 <ProcessAnalogReadings+0x388>)
 80012a0:	2294      	movs	r2, #148	; 0x94
 80012a2:	5899      	ldr	r1, [r3, r2]
 80012a4:	4a40      	ldr	r2, [pc, #256]	; (80013a8 <ProcessAnalogReadings+0x400>)
 80012a6:	2302      	movs	r3, #2
 80012a8:	f006 fe68 	bl	8007f7c <MultDivideWithRounding64>
 80012ac:	0003      	movs	r3, r0
 80012ae:	000c      	movs	r4, r1
 80012b0:	0019      	movs	r1, r3
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <ProcessAnalogReadings+0x388>)
 80012b4:	22d4      	movs	r2, #212	; 0xd4
 80012b6:	5099      	str	r1, [r3, r2]
            //  Power = xx.xxx W
            //  Current Sense Voltage = xx.xxxx V
            //
            //  V (x.xxx) = I (xx.xxx mA) * R (x.x ohms) / 10000 (Scaling Factor)
            //
            int32_t CurrentSenseVoltage = (int32_t)MultDivideWithRounding64(SysVars.RVOutputCurrent, 100, 10000, RESULT_32);
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <ProcessAnalogReadings+0x388>)
 80012ba:	2294      	movs	r2, #148	; 0x94
 80012bc:	5898      	ldr	r0, [r3, r2]
 80012be:	4a27      	ldr	r2, [pc, #156]	; (800135c <ProcessAnalogReadings+0x3b4>)
 80012c0:	2302      	movs	r3, #2
 80012c2:	2164      	movs	r1, #100	; 0x64
 80012c4:	f006 fe5a 	bl	8007f7c <MultDivideWithRounding64>
 80012c8:	0003      	movs	r3, r0
 80012ca:	000c      	movs	r4, r1
 80012cc:	603b      	str	r3, [r7, #0]
            SysVars.MosfetPower = (int32_t)MultDivideWithRounding64(SysVars.RVOutputCurrent, (SysVars.RVOutputVoltage - CurrentSenseVoltage), 10000000, RESULT_32);
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <ProcessAnalogReadings+0x388>)
 80012d0:	2294      	movs	r2, #148	; 0x94
 80012d2:	5898      	ldr	r0, [r3, r2]
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <ProcessAnalogReadings+0x388>)
 80012d6:	2288      	movs	r2, #136	; 0x88
 80012d8:	589a      	ldr	r2, [r3, r2]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	1ad1      	subs	r1, r2, r3
 80012de:	4a33      	ldr	r2, [pc, #204]	; (80013ac <ProcessAnalogReadings+0x404>)
 80012e0:	2302      	movs	r3, #2
 80012e2:	f006 fe4b 	bl	8007f7c <MultDivideWithRounding64>
 80012e6:	0003      	movs	r3, r0
 80012e8:	000c      	movs	r4, r1
 80012ea:	0019      	movs	r1, r3
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <ProcessAnalogReadings+0x388>)
 80012ee:	22c0      	movs	r2, #192	; 0xc0
 80012f0:	5099      	str	r1, [r3, r2]
            //
            // Check if Internal Current Source should be turned on or off
            //
            if (FlashConfiguration->RVOutputPullup != 0) {
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <ProcessAnalogReadings+0x3c8>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	2382      	movs	r3, #130	; 0x82
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	2204      	movs	r2, #4
 80012fe:	4013      	ands	r3, r2
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <ProcessAnalogReadings+0x366>
                EXT_PULLUP_GPIO_Port->BSRR = EXT_PULLUP_Pin;
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <ProcessAnalogReadings+0x408>)
 8001308:	2220      	movs	r2, #32
 800130a:	619a      	str	r2, [r3, #24]
 800130c:	e002      	b.n	8001314 <ProcessAnalogReadings+0x36c>
            } else {
                EXT_PULLUP_GPIO_Port->BRR = EXT_PULLUP_Pin;
 800130e:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <ProcessAnalogReadings+0x408>)
 8001310:	2220      	movs	r2, #32
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
            }
        }
    }
    ExecutionEnd(EXECUTION_PROCESS_ANALOG_READINGS);
 8001314:	2002      	movs	r0, #2
 8001316:	f003 f993 	bl	8004640 <ExecutionEnd>
}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bdb0      	pop	{r4, r5, r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	20002f9e 	.word	0x20002f9e
 8001328:	20002cf6 	.word	0x20002cf6
 800132c:	1ffff7ba 	.word	0x1ffff7ba
 8001330:	200020c0 	.word	0x200020c0
 8001334:	00050910 	.word	0x00050910
 8001338:	20000070 	.word	0x20000070
 800133c:	20001eec 	.word	0x20001eec
 8001340:	20000050 	.word	0x20000050
 8001344:	20000080 	.word	0x20000080
 8001348:	00009ff6 	.word	0x00009ff6
 800134c:	ffffb719 	.word	0xffffb719
 8001350:	fffffb6f 	.word	0xfffffb6f
 8001354:	00004e20 	.word	0x00004e20
 8001358:	20000060 	.word	0x20000060
 800135c:	00002710 	.word	0x00002710
 8001360:	fffff060 	.word	0xfffff060
 8001364:	00016760 	.word	0x00016760
 8001368:	0002bf20 	.word	0x0002bf20
 800136c:	00018e0c 	.word	0x00018e0c
 8001370:	20002f04 	.word	0x20002f04
 8001374:	00000474 	.word	0x00000474
 8001378:	0001912c 	.word	0x0001912c
 800137c:	27100000 	.word	0x27100000
 8001380:	00000476 	.word	0x00000476
 8001384:	200000b0 	.word	0x200000b0
 8001388:	fffce000 	.word	0xfffce000
 800138c:	200000c0 	.word	0x200000c0
 8001390:	200000d0 	.word	0x200000d0
 8001394:	20000040 	.word	0x20000040
 8001398:	000005b4 	.word	0x000005b4
 800139c:	20000090 	.word	0x20000090
 80013a0:	00000c2a 	.word	0x00000c2a
 80013a4:	000004df 	.word	0x000004df
 80013a8:	000f4240 	.word	0x000f4240
 80013ac:	00989680 	.word	0x00989680
 80013b0:	48000400 	.word	0x48000400

080013b4 <HAL_CAN_MspInit>:
//
// Returns:   None
//
// Requirement(s):
//
void HAL_CAN_MspInit(CAN_HandleTypeDef * hcan) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af04      	add	r7, sp, #16
 80013ba:	6078      	str	r0, [r7, #4]

  if (hcan->Instance == CAN) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a15      	ldr	r2, [pc, #84]	; (8001418 <HAL_CAN_MspInit+0x64>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d123      	bne.n	800140e <HAL_CAN_MspInit+0x5a>
    STM32_GPIO_Init(CANRXD_GPIO_Port, CANRXD_Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF4_CAN, 0);
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	0119      	lsls	r1, r3, #4
 80013ca:	2390      	movs	r3, #144	; 0x90
 80013cc:	05d8      	lsls	r0, r3, #23
 80013ce:	2300      	movs	r3, #0
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	2304      	movs	r3, #4
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	2303      	movs	r3, #3
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	2202      	movs	r2, #2
 80013de:	f004 fadb 	bl	8005998 <STM32_GPIO_Init>
    STM32_GPIO_Init(CANTXD_GPIO_Port, CANTXD_Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, GPIO_AF4_CAN, 0);
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	0159      	lsls	r1, r3, #5
 80013e6:	2390      	movs	r3, #144	; 0x90
 80013e8:	05d8      	lsls	r0, r3, #23
 80013ea:	2300      	movs	r3, #0
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	2304      	movs	r3, #4
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	2303      	movs	r3, #3
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2300      	movs	r3, #0
 80013f8:	2202      	movs	r2, #2
 80013fa:	f004 facd 	bl	8005998 <STM32_GPIO_Init>
    STM32_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	201e      	movs	r0, #30
 8001404:	f004 fcd8 	bl	8005db8 <STM32_NVIC_SetPriority>
    STM32_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8001408:	201e      	movs	r0, #30
 800140a:	f004 fd37 	bl	8005e7c <STM32_NVIC_EnableIRQ>
  }
}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	40006400 	.word	0x40006400

0800141c <STM32_CAN_AddTxMessage>:
//
// Returns:   Status of STM32 CAN Bus
//
// Requirement(s):
//
enumHAL_StatusTypeDef STM32_CAN_AddTxMessage(CAN_HandleTypeDef * hcan, CanTxMsgTypeDef  *pHeader, uint8_t aData[], uint32_t *pTxMailbox) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	603b      	str	r3, [r7, #0]

  uint32_t transmitmailbox;

  if ((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_LISTENING)) {
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	223d      	movs	r2, #61	; 0x3d
 800142e:	5c9b      	ldrb	r3, [r3, r2]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d006      	beq.n	8001444 <STM32_CAN_AddTxMessage+0x28>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	223d      	movs	r2, #61	; 0x3d
 800143a:	5c9b      	ldrb	r3, [r3, r2]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d000      	beq.n	8001444 <STM32_CAN_AddTxMessage+0x28>
 8001442:	e0a5      	b.n	8001590 <STM32_CAN_AddTxMessage+0x174>
    //
    // Check that all the Tx mailboxes are not full
    //
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != 0U) || ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U) ||
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	04db      	lsls	r3, r3, #19
 800144e:	4013      	ands	r3, r2
 8001450:	d10e      	bne.n	8001470 <STM32_CAN_AddTxMessage+0x54>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	051b      	lsls	r3, r3, #20
 800145c:	4013      	ands	r3, r2
 800145e:	d107      	bne.n	8001470 <STM32_CAN_AddTxMessage+0x54>
        ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)) {
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	055b      	lsls	r3, r3, #21
 800146a:	4013      	ands	r3, r2
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != 0U) || ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U) ||
 800146c:	d100      	bne.n	8001470 <STM32_CAN_AddTxMessage+0x54>
 800146e:	e086      	b.n	800157e <STM32_CAN_AddTxMessage+0x162>
      //
      // Select an empty transmit mailbox
      //
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	0e1b      	lsrs	r3, r3, #24
 8001478:	2203      	movs	r2, #3
 800147a:	4013      	ands	r3, r2
 800147c:	617b      	str	r3, [r7, #20]
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800147e:	2201      	movs	r2, #1
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	601a      	str	r2, [r3, #0]
      //
      // Set up the Id
      //
      if (pHeader->IDE == CAN_ID_STD) {
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10c      	bne.n	80014aa <STM32_CAN_AddTxMessage+0x8e>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) | pHeader->RTR);
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	0559      	lsls	r1, r3, #21
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4311      	orrs	r1, r2
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	3218      	adds	r2, #24
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	50d1      	str	r1, [r2, r3]
 80014a8:	e00f      	b.n	80014ca <STM32_CAN_AddTxMessage+0xae>
      }
      else {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |pHeader->IDE | pHeader->RTR);
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	00da      	lsls	r2, r3, #3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	0011      	movs	r1, r2
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4311      	orrs	r1, r2
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	3218      	adds	r2, #24
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	50d1      	str	r1, [r2, r3]
      }
      //
      // Set data length and data into mailbox
      //
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6819      	ldr	r1, [r3, #0]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3318      	adds	r3, #24
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	18cb      	adds	r3, r1, r3
 80014da:	3304      	adds	r3, #4
 80014dc:	601a      	str	r2, [r3, #0]

      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3307      	adds	r3, #7
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	061a      	lsls	r2, r3, #24
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3306      	adds	r3, #6
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3305      	adds	r3, #5
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3304      	adds	r3, #4
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	0019      	movs	r1, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	6979      	ldr	r1, [r7, #20]
 800150a:	23c6      	movs	r3, #198	; 0xc6
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	0109      	lsls	r1, r1, #4
 8001510:	1841      	adds	r1, r0, r1
 8001512:	18cb      	adds	r3, r1, r3
 8001514:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3303      	adds	r3, #3
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	061a      	lsls	r2, r3, #24
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3302      	adds	r3, #2
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	041b      	lsls	r3, r3, #16
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3301      	adds	r3, #1
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	0019      	movs	r1, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	6979      	ldr	r1, [r7, #20]
 8001540:	23c4      	movs	r3, #196	; 0xc4
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	0109      	lsls	r1, r1, #4
 8001546:	1841      	adds	r1, r0, r1
 8001548:	18cb      	adds	r3, r1, r3
 800154a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
      //
      // Set tranmission request bit
      //
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	3218      	adds	r2, #24
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	58d2      	ldr	r2, [r2, r3]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	4311      	orrs	r1, r2
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	3218      	adds	r2, #24
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	50d1      	str	r1, [r2, r3]
      CanBus.Status &= ~0x02u;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <STM32_CAN_AddTxMessage+0x180>)
 800156a:	2256      	movs	r2, #86	; 0x56
 800156c:	5c9b      	ldrb	r3, [r3, r2]
 800156e:	2202      	movs	r2, #2
 8001570:	4393      	bics	r3, r2
 8001572:	b2d9      	uxtb	r1, r3
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <STM32_CAN_AddTxMessage+0x180>)
 8001576:	2256      	movs	r2, #86	; 0x56
 8001578:	5499      	strb	r1, [r3, r2]
      return HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e009      	b.n	8001592 <STM32_CAN_AddTxMessage+0x176>
    }
    // Set transmission error if more than 3 messages are trying to be sent
    else {
      CanBus.Status |= 0x02u;
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <STM32_CAN_AddTxMessage+0x180>)
 8001580:	2256      	movs	r2, #86	; 0x56
 8001582:	5c9b      	ldrb	r3, [r3, r2]
 8001584:	2202      	movs	r2, #2
 8001586:	4313      	orrs	r3, r2
 8001588:	b2d9      	uxtb	r1, r3
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <STM32_CAN_AddTxMessage+0x180>)
 800158c:	2256      	movs	r2, #86	; 0x56
 800158e:	5499      	strb	r1, [r3, r2]
    }
  }
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	0018      	movs	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	b006      	add	sp, #24
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	200014a4 	.word	0x200014a4

080015a0 <STM32_CAN_ConfigFilter>:
//
// Returns:   Status of STM32 CAN Bus
//
// Requirement(s):
//
enumHAL_StatusTypeDef STM32_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos; // bit position of the filter in the FilterBank

  if ((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_LISTENING)) {
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	223d      	movs	r2, #61	; 0x3d
 80015ae:	5c9b      	ldrb	r3, [r3, r2]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d006      	beq.n	80015c4 <STM32_CAN_ConfigFilter+0x24>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	223d      	movs	r2, #61	; 0x3d
 80015ba:	5c9b      	ldrb	r3, [r3, r2]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d000      	beq.n	80015c4 <STM32_CAN_ConfigFilter+0x24>
 80015c2:	e0db      	b.n	800177c <STM32_CAN_ConfigFilter+0x1dc>
    //
    // To activate a filter, we need to enter inizialitation mode, deactivate the filter,
    // Set the size (16 or 32 bit) and mode (Mask/ID or ID) and assign to a FIFO
    //
    SET_BIT(hcan->Instance->FMR, CAN_FMR_FINIT);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	58d1      	ldr	r1, [r2, r3]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	2301      	movs	r3, #1
 80015d4:	4319      	orrs	r1, r3
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	50d1      	str	r1, [r2, r3]

    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	221f      	movs	r2, #31
 80015e2:	4013      	ands	r3, r2
 80015e4:	2201      	movs	r2, #1
 80015e6:	409a      	lsls	r2, r3
 80015e8:	0013      	movs	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]

    CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2387      	movs	r3, #135	; 0x87
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	58d1      	ldr	r1, [r2, r3]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43d8      	mvns	r0, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4001      	ands	r1, r0
 8001600:	2387      	movs	r3, #135	; 0x87
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	50d1      	str	r1, [r2, r3]

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT) {
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d12c      	bne.n	8001668 <STM32_CAN_ConfigFilter+0xc8>

      CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	2383      	movs	r3, #131	; 0x83
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	58d1      	ldr	r1, [r2, r3]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43d8      	mvns	r0, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4001      	ands	r1, r0
 8001622:	2383      	movs	r3, #131	; 0x83
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	50d1      	str	r1, [r2, r3]

      hcan->Instance->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	041b      	lsls	r3, r3, #16
 8001634:	0c19      	lsrs	r1, r3, #16
      hcan->Instance->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800163e:	4301      	orrs	r1, r0
      hcan->Instance->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001640:	3348      	adds	r3, #72	; 0x48
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	5099      	str	r1, [r3, r2]

      hcan->Instance->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	0c1a      	lsrs	r2, r3, #16
      hcan->Instance->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6819      	ldr	r1, [r3, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800165c:	4302      	orrs	r2, r0
      hcan->Instance->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800165e:	3348      	adds	r3, #72	; 0x48
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	18cb      	adds	r3, r1, r3
 8001664:	3304      	adds	r3, #4
 8001666:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT) {
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d12b      	bne.n	80016c8 <STM32_CAN_ConfigFilter+0x128>

      SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2383      	movs	r3, #131	; 0x83
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	58d1      	ldr	r1, [r2, r3]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4319      	orrs	r1, r3
 8001682:	2383      	movs	r3, #131	; 0x83
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	50d1      	str	r1, [r2, r3]

      hcan->Instance->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	041b      	lsls	r3, r3, #16
 8001694:	0c19      	lsrs	r1, r3, #16
      hcan->Instance->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800169e:	4301      	orrs	r1, r0
      hcan->Instance->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016a0:	3348      	adds	r3, #72	; 0x48
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	5099      	str	r1, [r3, r2]

      hcan->Instance->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	0c1a      	lsrs	r2, r3, #16
      hcan->Instance->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6819      	ldr	r1, [r3, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016bc:	4302      	orrs	r2, r0
      hcan->Instance->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016be:	3348      	adds	r3, #72	; 0x48
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	18cb      	adds	r3, r1, r3
 80016c4:	3304      	adds	r3, #4
 80016c6:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK) {
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10d      	bne.n	80016ec <STM32_CAN_ConfigFilter+0x14c>
      CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2381      	movs	r3, #129	; 0x81
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	58d1      	ldr	r1, [r2, r3]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43d8      	mvns	r0, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4001      	ands	r1, r0
 80016e4:	2381      	movs	r3, #129	; 0x81
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	50d1      	str	r1, [r2, r3]
 80016ea:	e00b      	b.n	8001704 <STM32_CAN_ConfigFilter+0x164>
    }
    else {
      SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2381      	movs	r3, #129	; 0x81
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	58d1      	ldr	r1, [r2, r3]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4319      	orrs	r1, r3
 80016fe:	2381      	movs	r3, #129	; 0x81
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	50d1      	str	r1, [r2, r3]
    }

    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0) {
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10d      	bne.n	8001728 <STM32_CAN_ConfigFilter+0x188>
      CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2385      	movs	r3, #133	; 0x85
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	58d1      	ldr	r1, [r2, r3]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	43d8      	mvns	r0, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4001      	ands	r1, r0
 8001720:	2385      	movs	r3, #133	; 0x85
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	50d1      	str	r1, [r2, r3]
 8001726:	e00b      	b.n	8001740 <STM32_CAN_ConfigFilter+0x1a0>
    }
    else {
      SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2385      	movs	r3, #133	; 0x85
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	58d1      	ldr	r1, [r2, r3]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4319      	orrs	r1, r3
 800173a:	2385      	movs	r3, #133	; 0x85
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	50d1      	str	r1, [r2, r3]
    }

    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE) {
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d10b      	bne.n	8001760 <STM32_CAN_ConfigFilter+0x1c0>
      SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2387      	movs	r3, #135	; 0x87
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	58d1      	ldr	r1, [r2, r3]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4319      	orrs	r1, r3
 800175a:	2387      	movs	r3, #135	; 0x87
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	50d1      	str	r1, [r2, r3]
    }
    //
    // Leave the initialisation mode for the filter
    //
    CLEAR_BIT(hcan->Instance->FMR, CAN_FMR_FINIT);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	58d1      	ldr	r1, [r2, r3]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	4399      	bics	r1, r3
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	50d1      	str	r1, [r2, r3]

    return HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	e007      	b.n	800178c <STM32_CAN_ConfigFilter+0x1ec>
  }
  else {
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	2280      	movs	r2, #128	; 0x80
 8001782:	02d2      	lsls	r2, r2, #11
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	641a      	str	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
  }
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b004      	add	sp, #16
 8001792:	bd80      	pop	{r7, pc}

08001794 <CAN_Filter_Init>:
//
// Returns:   None
//
// Requirement(s):
//
void CAN_Filter_Init(void) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b094      	sub	sp, #80	; 0x50
 8001798:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef CAN_FilterStruct1; // Typedef for Filter 1
  CAN_FilterTypeDef CAN_FilterStruct2; // Typedef for Filter 2
  //
  // Setup CAN Filter1 - Extended ID
  //
  CAN_FilterStruct1.FilterMode = CAN_FILTERMODE_IDMASK;
 800179a:	2128      	movs	r1, #40	; 0x28
 800179c:	187b      	adds	r3, r7, r1
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  CAN_FilterStruct1.FilterScale = CAN_FILTERSCALE_32BIT;
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2201      	movs	r2, #1
 80017a6:	61da      	str	r2, [r3, #28]

  CAN_FilterStruct1.FilterIdHigh = ((FlashConfiguration->CanAddressIn[0] >> 13) & 0xFFFF); // Ignore the 32nd bit as that should be 0
 80017a8:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <CAN_Filter_Init+0x110>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a3e      	ldr	r2, [pc, #248]	; (80018a8 <CAN_Filter_Init+0x114>)
 80017ae:	589b      	ldr	r3, [r3, r2]
 80017b0:	0b5b      	lsrs	r3, r3, #13
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	0c1a      	lsrs	r2, r3, #16
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	601a      	str	r2, [r3, #0]
  CAN_FilterStruct1.FilterIdLow = (FlashConfiguration->CanAddressIn[0] <<3 & 0xFFF8); // Ignore the first 3 bits
 80017ba:	4b3a      	ldr	r3, [pc, #232]	; (80018a4 <CAN_Filter_Init+0x110>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a3a      	ldr	r2, [pc, #232]	; (80018a8 <CAN_Filter_Init+0x114>)
 80017c0:	589b      	ldr	r3, [r3, r2]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	041b      	lsls	r3, r3, #16
 80017c6:	0c1a      	lsrs	r2, r3, #16
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	605a      	str	r2, [r3, #4]

  CAN_FilterStruct1.FilterMaskIdHigh = ((FlashConfiguration->CanMaskIn[0] >> 16) & 0xFFFF);
 80017cc:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <CAN_Filter_Init+0x110>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a36      	ldr	r2, [pc, #216]	; (80018ac <CAN_Filter_Init+0x118>)
 80017d2:	589b      	ldr	r3, [r3, r2]
 80017d4:	0c1a      	lsrs	r2, r3, #16
 80017d6:	187b      	adds	r3, r7, r1
 80017d8:	609a      	str	r2, [r3, #8]
  CAN_FilterStruct1.FilterMaskIdLow = FlashConfiguration->CanMaskIn[0] & 0xFFFF;
 80017da:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <CAN_Filter_Init+0x110>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a33      	ldr	r2, [pc, #204]	; (80018ac <CAN_Filter_Init+0x118>)
 80017e0:	589b      	ldr	r3, [r3, r2]
 80017e2:	041b      	lsls	r3, r3, #16
 80017e4:	0c1a      	lsrs	r2, r3, #16
 80017e6:	187b      	adds	r3, r7, r1
 80017e8:	60da      	str	r2, [r3, #12]

  CAN_FilterStruct1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80017ea:	187b      	adds	r3, r7, r1
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  CAN_FilterStruct1.FilterBank = 0;
 80017f0:	187b      	adds	r3, r7, r1
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  CAN_FilterStruct1.FilterActivation = ENABLE;
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	2201      	movs	r2, #1
 80017fa:	621a      	str	r2, [r3, #32]
  //
  // Setup CAN Filter2 - Standard ID
  //
  CAN_FilterStruct2.FilterMode = CAN_FILTERMODE_IDMASK; // Filter masked identifiers
 80017fc:	003b      	movs	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  CAN_FilterStruct2.FilterScale = CAN_FILTERSCALE_32BIT; // Use 32 Bit to avoid filtering 2 IDs and Masks
 8001802:	003b      	movs	r3, r7
 8001804:	2201      	movs	r2, #1
 8001806:	61da      	str	r2, [r3, #28]

  CAN_FilterStruct2.FilterIdHigh = FlashConfiguration->CanAddressIn[1] << 5;
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <CAN_Filter_Init+0x110>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	238b      	movs	r3, #139	; 0x8b
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	58d3      	ldr	r3, [r2, r3]
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	003b      	movs	r3, r7
 8001816:	601a      	str	r2, [r3, #0]
  CAN_FilterStruct2.FilterIdLow = 0;
 8001818:	003b      	movs	r3, r7
 800181a:	2200      	movs	r2, #0
 800181c:	605a      	str	r2, [r3, #4]

  CAN_FilterStruct2.FilterMaskIdHigh = FlashConfiguration->CanMaskIn[1] << 5;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <CAN_Filter_Init+0x110>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	238d      	movs	r3, #141	; 0x8d
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	58d3      	ldr	r3, [r2, r3]
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	003b      	movs	r3, r7
 800182c:	609a      	str	r2, [r3, #8]
  CAN_FilterStruct2.FilterMaskIdLow = 0;
 800182e:	003b      	movs	r3, r7
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]

  CAN_FilterStruct2.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001834:	003b      	movs	r3, r7
 8001836:	2201      	movs	r2, #1
 8001838:	611a      	str	r2, [r3, #16]
  CAN_FilterStruct2.FilterBank=1;
 800183a:	003b      	movs	r3, r7
 800183c:	2201      	movs	r2, #1
 800183e:	615a      	str	r2, [r3, #20]
  CAN_FilterStruct2.FilterActivation = ENABLE;
 8001840:	003b      	movs	r3, r7
 8001842:	2201      	movs	r2, #1
 8001844:	621a      	str	r2, [r3, #32]
  // Make sure filter configuration is error free
  if (FlashConfiguration->CanAddressIn[0] != 0) {
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <CAN_Filter_Init+0x110>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <CAN_Filter_Init+0x114>)
 800184c:	589b      	ldr	r3, [r3, r2]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00e      	beq.n	8001870 <CAN_Filter_Init+0xdc>
    if(STM32_CAN_ConfigFilter(&hcan, &CAN_FilterStruct1) != HAL_OK) {
 8001852:	2328      	movs	r3, #40	; 0x28
 8001854:	18fa      	adds	r2, r7, r3
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <CAN_Filter_Init+0x11c>)
 8001858:	0011      	movs	r1, r2
 800185a:	0018      	movs	r0, r3
 800185c:	f7ff fea0 	bl	80015a0 <STM32_CAN_ConfigFilter>
 8001860:	1e03      	subs	r3, r0, #0
 8001862:	d005      	beq.n	8001870 <CAN_Filter_Init+0xdc>
      Error_Handler(FILE_CAN, __LINE__);
 8001864:	231c      	movs	r3, #28
 8001866:	33ff      	adds	r3, #255	; 0xff
 8001868:	0019      	movs	r1, r3
 800186a:	2004      	movs	r0, #4
 800186c:	f002 fdb2 	bl	80043d4 <Error_Handler>
    }
  }
  if (FlashConfiguration->CanAddressIn[1] != 0) {
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <CAN_Filter_Init+0x110>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	238b      	movs	r3, #139	; 0x8b
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	58d3      	ldr	r3, [r2, r3]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00d      	beq.n	800189a <CAN_Filter_Init+0x106>
    if (STM32_CAN_ConfigFilter(&hcan, &CAN_FilterStruct2) != HAL_OK) {
 800187e:	003a      	movs	r2, r7
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <CAN_Filter_Init+0x11c>)
 8001882:	0011      	movs	r1, r2
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff fe8b 	bl	80015a0 <STM32_CAN_ConfigFilter>
 800188a:	1e03      	subs	r3, r0, #0
 800188c:	d005      	beq.n	800189a <CAN_Filter_Init+0x106>
      Error_Handler(FILE_CAN, __LINE__);
 800188e:	2390      	movs	r3, #144	; 0x90
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	0019      	movs	r1, r3
 8001894:	2004      	movs	r0, #4
 8001896:	f002 fd9d 	bl	80043d4 <Error_Handler>
    }
  }
}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	b014      	add	sp, #80	; 0x50
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	20002f04 	.word	0x20002f04
 80018a8:	00000454 	.word	0x00000454
 80018ac:	00000464 	.word	0x00000464
 80018b0:	20001be0 	.word	0x20001be0

080018b4 <CAN_ID_to_PGN>:
}

/*
 * This function convers the can_id (extended only) to pgn
 */
uint32_t CAN_ID_to_PGN(uint32_t can_id) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t pgn; // Parameter group number to be returned
  uint8_t pdu_format; // Protocol Data Unit - message format

  pdu_format = can_id & 0x00FF0000;
 80018bc:	210b      	movs	r1, #11
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]

  if (pdu_format >= 0xF0) {
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2bef      	cmp	r3, #239	; 0xef
 80018ca:	d905      	bls.n	80018d8 <CAN_ID_to_PGN+0x24>
      pgn = ((can_id & 0x03FFFF00) >> 8);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	0a1b      	lsrs	r3, r3, #8
 80018d0:	039b      	lsls	r3, r3, #14
 80018d2:	0b9b      	lsrs	r3, r3, #14
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	e004      	b.n	80018e2 <CAN_ID_to_PGN+0x2e>
  }
  else {
      pgn = ((can_id & 0x3FF0000) >> 8);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	4a03      	ldr	r2, [pc, #12]	; (80018ec <CAN_ID_to_PGN+0x38>)
 80018de:	4013      	ands	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  }

  return pgn;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b004      	add	sp, #16
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	0003ff00 	.word	0x0003ff00

080018f0 <CAN_MessageTx>:
//
// Returns:   Transmission mode, CAN Id to send message to, data to send
//
// Requirement(s):
//
void CAN_MessageTx(uint8_t Mode, uint32_t id, uint8_t data_tx[8]) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	; 0x30
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	210f      	movs	r1, #15
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	1c02      	adds	r2, r0, #0
 8001900:	701a      	strb	r2, [r3, #0]
  CanTxMsgTypeDef CAN_TxStruct;
  uint32_t tx_mailbox;

  switch(Mode) {
 8001902:	187b      	adds	r3, r7, r1
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b05      	cmp	r3, #5
 8001908:	d86d      	bhi.n	80019e6 <CAN_MessageTx+0xf6>
 800190a:	009a      	lsls	r2, r3, #2
 800190c:	4b40      	ldr	r3, [pc, #256]	; (8001a10 <CAN_MessageTx+0x120>)
 800190e:	18d3      	adds	r3, r2, r3
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	469f      	mov	pc, r3
  // J1939 Throttle Output Message
  case CAN_TX_0:
    CAN_TxStruct.IDE = CAN_ID_EXT; // Extended ID for normal operation
 8001914:	2114      	movs	r1, #20
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2204      	movs	r2, #4
 800191a:	609a      	str	r2, [r3, #8]
    CAN_TxStruct.ExtId = FlashConfiguration->CanAddressOut[0]; // CAN Address extended ID
 800191c:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <CAN_MessageTx+0x124>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2386      	movs	r3, #134	; 0x86
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	58d2      	ldr	r2, [r2, r3]
 8001926:	187b      	adds	r3, r7, r1
 8001928:	605a      	str	r2, [r3, #4]
    CAN_TxStruct.DLC = 8; // Sending 8 bytes
 800192a:	187b      	adds	r3, r7, r1
 800192c:	2208      	movs	r2, #8
 800192e:	611a      	str	r2, [r3, #16]
    CAN_TxStruct.RTR = CAN_RTR_DATA; // Always RTR for our purposes
 8001930:	187b      	adds	r3, r7, r1
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
    break;
 8001936:	e056      	b.n	80019e6 <CAN_MessageTx+0xf6>
  // Fault message
  case CAN_TX_1:
    CAN_TxStruct.IDE = CAN_ID_EXT;
 8001938:	2114      	movs	r1, #20
 800193a:	187b      	adds	r3, r7, r1
 800193c:	2204      	movs	r2, #4
 800193e:	609a      	str	r2, [r3, #8]
    CAN_TxStruct.ExtId = FlashConfiguration->CanAddressOut[1]; // extended ID for fault message
 8001940:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <CAN_MessageTx+0x124>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a34      	ldr	r2, [pc, #208]	; (8001a18 <CAN_MessageTx+0x128>)
 8001946:	589a      	ldr	r2, [r3, r2]
 8001948:	187b      	adds	r3, r7, r1
 800194a:	605a      	str	r2, [r3, #4]
    CAN_TxStruct.DLC = 8;
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2208      	movs	r2, #8
 8001950:	611a      	str	r2, [r3, #16]
    CAN_TxStruct.RTR = CAN_RTR_DATA;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]
    break;
 8001958:	e045      	b.n	80019e6 <CAN_MessageTx+0xf6>
  // Angular output message
  case CAN_TX_2:
    CAN_TxStruct.IDE = CAN_ID_EXT;
 800195a:	2114      	movs	r1, #20
 800195c:	187b      	adds	r3, r7, r1
 800195e:	2204      	movs	r2, #4
 8001960:	609a      	str	r2, [r3, #8]
    CAN_TxStruct.ExtId = FlashConfiguration->CanAddressOut[2];
 8001962:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <CAN_MessageTx+0x124>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2387      	movs	r3, #135	; 0x87
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	58d2      	ldr	r2, [r2, r3]
 800196c:	187b      	adds	r3, r7, r1
 800196e:	605a      	str	r2, [r3, #4]
    CAN_TxStruct.DLC =8;
 8001970:	187b      	adds	r3, r7, r1
 8001972:	2208      	movs	r2, #8
 8001974:	611a      	str	r2, [r3, #16]
    CAN_TxStruct.RTR = CAN_RTR_DATA;
 8001976:	187b      	adds	r3, r7, r1
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
    break;
 800197c:	e033      	b.n	80019e6 <CAN_MessageTx+0xf6>
  // On startup - ECU Info
  case CAN_TX_3:
    CAN_TxStruct.IDE = CAN_ID_EXT;
 800197e:	2114      	movs	r1, #20
 8001980:	187b      	adds	r3, r7, r1
 8001982:	2204      	movs	r2, #4
 8001984:	609a      	str	r2, [r3, #8]
    CAN_TxStruct.ExtId = FlashConfiguration->CanAddressOut[3];
 8001986:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <CAN_MessageTx+0x124>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a24      	ldr	r2, [pc, #144]	; (8001a1c <CAN_MessageTx+0x12c>)
 800198c:	589a      	ldr	r2, [r3, r2]
 800198e:	187b      	adds	r3, r7, r1
 8001990:	605a      	str	r2, [r3, #4]
    CAN_TxStruct.DLC =8;
 8001992:	187b      	adds	r3, r7, r1
 8001994:	2208      	movs	r2, #8
 8001996:	611a      	str	r2, [r3, #16]
    CAN_TxStruct.RTR = CAN_RTR_DATA;
 8001998:	187b      	adds	r3, r7, r1
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
    break;
 800199e:	e022      	b.n	80019e6 <CAN_MessageTx+0xf6>
  // On startup - Software Info
  case CAN_TX_4:
    CAN_TxStruct.IDE = CAN_ID_EXT;
 80019a0:	2114      	movs	r1, #20
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	2204      	movs	r2, #4
 80019a6:	609a      	str	r2, [r3, #8]
    CAN_TxStruct.ExtId = FlashConfiguration->CanAddressOut[4];
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <CAN_MessageTx+0x124>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2388      	movs	r3, #136	; 0x88
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	58d2      	ldr	r2, [r2, r3]
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	605a      	str	r2, [r3, #4]
    CAN_TxStruct.DLC =8;
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	2208      	movs	r2, #8
 80019ba:	611a      	str	r2, [r3, #16]
    CAN_TxStruct.RTR = CAN_RTR_DATA;
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
    break;
 80019c2:	e010      	b.n	80019e6 <CAN_MessageTx+0xf6>
  // On startup - Component Info
  case CAN_TX_5:
    CAN_TxStruct.IDE = CAN_ID_EXT;
 80019c4:	2114      	movs	r1, #20
 80019c6:	187b      	adds	r3, r7, r1
 80019c8:	2204      	movs	r2, #4
 80019ca:	609a      	str	r2, [r3, #8]
    CAN_TxStruct.ExtId = FlashConfiguration->CanAddressOut[5];
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <CAN_MessageTx+0x124>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <CAN_MessageTx+0x130>)
 80019d2:	589a      	ldr	r2, [r3, r2]
 80019d4:	187b      	adds	r3, r7, r1
 80019d6:	605a      	str	r2, [r3, #4]
    CAN_TxStruct.DLC =8;
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	2208      	movs	r2, #8
 80019dc:	611a      	str	r2, [r3, #16]
    CAN_TxStruct.RTR = CAN_RTR_DATA;
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
    break;
 80019e4:	46c0      	nop			; (mov r8, r8)
  }
  //
  // This will put the message in the outbox and wait for its turn to transmit
  //
  if(STM32_CAN_AddTxMessage(&hcan, &CAN_TxStruct, data_tx, &tx_mailbox) != HAL_OK) {
 80019e6:	2310      	movs	r3, #16
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	2114      	movs	r1, #20
 80019ee:	1879      	adds	r1, r7, r1
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <CAN_MessageTx+0x134>)
 80019f2:	f7ff fd13 	bl	800141c <STM32_CAN_AddTxMessage>
 80019f6:	1e03      	subs	r3, r0, #0
 80019f8:	d005      	beq.n	8001a06 <CAN_MessageTx+0x116>
    Error_Handler(FILE_CAN, __LINE__);
 80019fa:	23c4      	movs	r3, #196	; 0xc4
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	0019      	movs	r1, r3
 8001a00:	2004      	movs	r0, #4
 8001a02:	f002 fce7 	bl	80043d4 <Error_Handler>
  }
}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b00c      	add	sp, #48	; 0x30
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	0800c770 	.word	0x0800c770
 8001a14:	20002f04 	.word	0x20002f04
 8001a18:	00000434 	.word	0x00000434
 8001a1c:	0000043c 	.word	0x0000043c
 8001a20:	00000444 	.word	0x00000444
 8001a24:	20001be0 	.word	0x20001be0

08001a28 <Can_TxMultipacket>:
//
// Returns:   None
//
// Requirement(s):
//
void Can_TxMultipacket(uint8_t Mode) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	0002      	movs	r2, r0
 8001a30:	1dfb      	adds	r3, r7, #7
 8001a32:	701a      	strb	r2, [r3, #0]
  uint8_t pgnlength; // Number of SPNs in a PGN
  uint8_t sizeiter; // Picks the location of the CanBus.InfoSize pointer array to start at
  uint8_t i; // Counter for while loop to fill all 8 data byte frames of CAN message

  // 3 different CAN Multipacket messages
  switch (Mode) {
 8001a34:	1dfb      	adds	r3, r7, #7
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d00c      	beq.n	8001a56 <Can_TxMultipacket+0x2e>
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d013      	beq.n	8001a68 <Can_TxMultipacket+0x40>
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d11a      	bne.n	8001a7a <Can_TxMultipacket+0x52>

  case CAN_TX_3:
    pgnlength = sizeof(CanBus.ECUinfo) / 4;
 8001a44:	230f      	movs	r3, #15
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	2207      	movs	r2, #7
 8001a4a:	701a      	strb	r2, [r3, #0]
    sizeiter = 0;
 8001a4c:	230e      	movs	r3, #14
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
    break;
 8001a54:	e011      	b.n	8001a7a <Can_TxMultipacket+0x52>

  case CAN_TX_4:
    pgnlength = sizeof(CanBus.SWinfo) / 4;
 8001a56:	230f      	movs	r3, #15
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	701a      	strb	r2, [r3, #0]
    sizeiter = sizeof(CanBus.ECUinfo) / 4;
 8001a5e:	230e      	movs	r3, #14
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	2207      	movs	r2, #7
 8001a64:	701a      	strb	r2, [r3, #0]
    break;
 8001a66:	e008      	b.n	8001a7a <Can_TxMultipacket+0x52>

  case CAN_TX_5:
    pgnlength = sizeof(CanBus.Componentinfo) / 4;
 8001a68:	230f      	movs	r3, #15
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	701a      	strb	r2, [r3, #0]
    sizeiter = (sizeof(CanBus.ECUinfo) + sizeof(CanBus.SWinfo)) / 4;
 8001a70:	230e      	movs	r3, #14
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	2209      	movs	r2, #9
 8001a76:	701a      	strb	r2, [r3, #0]
    break;
 8001a78:	46c0      	nop			; (mov r8, r8)
  }

  if (Pgn_Count < pgnlength) {
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <Can_TxMultipacket+0x14c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	220f      	movs	r2, #15
 8001a80:	18ba      	adds	r2, r7, r2
 8001a82:	7812      	ldrb	r2, [r2, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d963      	bls.n	8001b50 <Can_TxMultipacket+0x128>
    i = 0;
 8001a88:	230d      	movs	r3, #13
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
    while (i < 8) {
 8001a90:	e051      	b.n	8001b36 <Can_TxMultipacket+0x10e>
      //
      // If we have yet to send all bytes in the SPN then we keep sending
      //
      if (Spn_Byte_Count < CanBus.InfoSize[sizeiter + Pgn_Count]) {
 8001a92:	230e      	movs	r3, #14
 8001a94:	18fb      	adds	r3, r7, r3
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4a36      	ldr	r2, [pc, #216]	; (8001b74 <Can_TxMultipacket+0x14c>)
 8001a9a:	7812      	ldrb	r2, [r2, #0]
 8001a9c:	189b      	adds	r3, r3, r2
 8001a9e:	4a36      	ldr	r2, [pc, #216]	; (8001b78 <Can_TxMultipacket+0x150>)
 8001aa0:	219c      	movs	r1, #156	; 0x9c
 8001aa2:	18d3      	adds	r3, r2, r3
 8001aa4:	185b      	adds	r3, r3, r1
 8001aa6:	781a      	ldrb	r2, [r3, #0]
 8001aa8:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <Can_TxMultipacket+0x154>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d91f      	bls.n	8001af0 <Can_TxMultipacket+0xc8>
        CanBus.Outbox[i] = CanBus.Caninfo[Mode - 3][Pgn_Count][Spn_Byte_Count];
 8001ab0:	1dfb      	adds	r3, r7, #7
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	1eda      	subs	r2, r3, #3
 8001ab6:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <Can_TxMultipacket+0x150>)
 8001ab8:	3224      	adds	r2, #36	; 0x24
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	58d2      	ldr	r2, [r2, r3]
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <Can_TxMultipacket+0x14c>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	18d3      	adds	r3, r2, r3
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2c      	ldr	r2, [pc, #176]	; (8001b7c <Can_TxMultipacket+0x154>)
 8001aca:	7812      	ldrb	r2, [r2, #0]
 8001acc:	189a      	adds	r2, r3, r2
 8001ace:	200d      	movs	r0, #13
 8001ad0:	183b      	adds	r3, r7, r0
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	7811      	ldrb	r1, [r2, #0]
 8001ad6:	4a28      	ldr	r2, [pc, #160]	; (8001b78 <Can_TxMultipacket+0x150>)
 8001ad8:	54d1      	strb	r1, [r2, r3]
        Spn_Byte_Count++;
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <Can_TxMultipacket+0x154>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <Can_TxMultipacket+0x154>)
 8001ae4:	701a      	strb	r2, [r3, #0]
        i++; // only increment i if we have filled the outbox[i] with a data bit
 8001ae6:	183b      	adds	r3, r7, r0
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	183b      	adds	r3, r7, r0
 8001aec:	3201      	adds	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
      }
      //
      // If we have sent all the bytes of SPN then go onto next SPN (if there is one) and send first byte
      //
      if (Spn_Byte_Count >= CanBus.InfoSize[sizeiter + Pgn_Count]) {
 8001af0:	230e      	movs	r3, #14
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <Can_TxMultipacket+0x14c>)
 8001af8:	7812      	ldrb	r2, [r2, #0]
 8001afa:	189b      	adds	r3, r3, r2
 8001afc:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <Can_TxMultipacket+0x150>)
 8001afe:	219c      	movs	r1, #156	; 0x9c
 8001b00:	18d3      	adds	r3, r2, r3
 8001b02:	185b      	adds	r3, r3, r1
 8001b04:	781a      	ldrb	r2, [r3, #0]
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <Can_TxMultipacket+0x154>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d808      	bhi.n	8001b20 <Can_TxMultipacket+0xf8>
        Spn_Byte_Count = 0;
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <Can_TxMultipacket+0x154>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
        Pgn_Count++;
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <Can_TxMultipacket+0x14c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <Can_TxMultipacket+0x14c>)
 8001b1e:	701a      	strb	r2, [r3, #0]
      }
      //
      // Check if any SPNs remain
      //
      if (Pgn_Count >= pgnlength) {
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <Can_TxMultipacket+0x14c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	220f      	movs	r2, #15
 8001b26:	18ba      	adds	r2, r7, r2
 8001b28:	7812      	ldrb	r2, [r2, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d803      	bhi.n	8001b36 <Can_TxMultipacket+0x10e>
        i = 8;
 8001b2e:	230d      	movs	r3, #13
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	2208      	movs	r2, #8
 8001b34:	701a      	strb	r2, [r3, #0]
    while (i < 8) {
 8001b36:	230d      	movs	r3, #13
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b07      	cmp	r3, #7
 8001b3e:	d9a8      	bls.n	8001a92 <Can_TxMultipacket+0x6a>
      }
    }
    CAN_MessageTx(Mode, 123, CanBus.Outbox);
 8001b40:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <Can_TxMultipacket+0x150>)
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	217b      	movs	r1, #123	; 0x7b
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f7ff fed1 	bl	80018f0 <CAN_MessageTx>
    //
    Pgn_Count = 0;
    Spn_Byte_Count = 0;
    CanBus.State++;
  }
}
 8001b4e:	e00d      	b.n	8001b6c <Can_TxMultipacket+0x144>
    Pgn_Count = 0;
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <Can_TxMultipacket+0x14c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
    Spn_Byte_Count = 0;
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <Can_TxMultipacket+0x154>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
    CanBus.State++;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <Can_TxMultipacket+0x150>)
 8001b5e:	2255      	movs	r2, #85	; 0x55
 8001b60:	5c9b      	ldrb	r3, [r3, r2]
 8001b62:	3301      	adds	r3, #1
 8001b64:	b2d9      	uxtb	r1, r3
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <Can_TxMultipacket+0x150>)
 8001b68:	2255      	movs	r2, #85	; 0x55
 8001b6a:	5499      	strb	r1, [r3, r2]
}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b004      	add	sp, #16
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200000e1 	.word	0x200000e1
 8001b78:	200014a4 	.word	0x200014a4
 8001b7c:	200000e0 	.word	0x200000e0

08001b80 <CAN_Tx>:
//
// Returns:   None
//
// Requirement(s):
//
void CAN_Tx(uint8_t Mode) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	0002      	movs	r2, r0
 8001b88:	1dfb      	adds	r3, r7, #7
 8001b8a:	701a      	strb	r2, [r3, #0]
  uint32_t pgn; // Parameter group number
  uint32_t address; // Address to send CAN message
  //
  // Need a counter from 0 to 15 for CAN messages - goes into msg[1]
  //
  if (tx0counter > 15) {
 8001b8c:	4bc9      	ldr	r3, [pc, #804]	; (8001eb4 <CAN_Tx+0x334>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d902      	bls.n	8001b9a <CAN_Tx+0x1a>
      tx0counter = 0;
 8001b94:	4bc7      	ldr	r3, [pc, #796]	; (8001eb4 <CAN_Tx+0x334>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
  }
  if (tx1counter > 15) {
 8001b9a:	4bc7      	ldr	r3, [pc, #796]	; (8001eb8 <CAN_Tx+0x338>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b0f      	cmp	r3, #15
 8001ba0:	d902      	bls.n	8001ba8 <CAN_Tx+0x28>
      tx1counter = 0;
 8001ba2:	4bc5      	ldr	r3, [pc, #788]	; (8001eb8 <CAN_Tx+0x338>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
  }
  if (tx2counter > 15) {
 8001ba8:	4bc4      	ldr	r3, [pc, #784]	; (8001ebc <CAN_Tx+0x33c>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b0f      	cmp	r3, #15
 8001bae:	d902      	bls.n	8001bb6 <CAN_Tx+0x36>
      tx2counter = 0;
 8001bb0:	4bc2      	ldr	r3, [pc, #776]	; (8001ebc <CAN_Tx+0x33c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
  // We need to create the messages for CAN Communication. To select the mode we
  // take an input (Mode) which will be determined by the code. If all data entries
  // are valid we will use CAN_NORMAL_TX, however, if entries are invalid, we will
  // need to select CAN_TH_FAULT.
  //
  switch(Mode) {
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d100      	bne.n	8001bc0 <CAN_Tx+0x40>
 8001bbe:	e0d9      	b.n	8001d74 <CAN_Tx+0x1f4>
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d100      	bne.n	8001bc6 <CAN_Tx+0x46>
 8001bc4:	e152      	b.n	8001e6c <CAN_Tx+0x2ec>
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d000      	beq.n	8001bcc <CAN_Tx+0x4c>
 8001bca:	e1a7      	b.n	8001f1c <CAN_Tx+0x39c>
    case CAN_TX_0:
      address = FlashConfiguration->CanAddressOut[0];
 8001bcc:	4bbc      	ldr	r3, [pc, #752]	; (8001ec0 <CAN_Tx+0x340>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2386      	movs	r3, #134	; 0x86
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	58d3      	ldr	r3, [r2, r3]
 8001bd6:	61bb      	str	r3, [r7, #24]
      pgn = CAN_ID_to_PGN(FlashConfiguration->CanAddressOut[0]);
 8001bd8:	4bb9      	ldr	r3, [pc, #740]	; (8001ec0 <CAN_Tx+0x340>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2386      	movs	r3, #134	; 0x86
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	58d3      	ldr	r3, [r2, r3]
 8001be2:	0018      	movs	r0, r3
 8001be4:	f7ff fe66 	bl	80018b4 <CAN_ID_to_PGN>
 8001be8:	0003      	movs	r3, r0
 8001bea:	61fb      	str	r3, [r7, #28]
      CanBus.Outbox[1] = (0xF0) | tx0counter;
 8001bec:	4bb1      	ldr	r3, [pc, #708]	; (8001eb4 <CAN_Tx+0x334>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	4252      	negs	r2, r2
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4bb2      	ldr	r3, [pc, #712]	; (8001ec4 <CAN_Tx+0x344>)
 8001bfa:	705a      	strb	r2, [r3, #1]
      CanBus.Outbox[2] = (0xFC) | SysVars.MatchStatus;
 8001bfc:	4bb2      	ldr	r3, [pc, #712]	; (8001ec8 <CAN_Tx+0x348>)
 8001bfe:	22e5      	movs	r2, #229	; 0xe5
 8001c00:	5c9b      	ldrb	r3, [r3, r2]
 8001c02:	071b      	lsls	r3, r3, #28
 8001c04:	0f5b      	lsrs	r3, r3, #29
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	4252      	negs	r2, r2
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	b25b      	sxtb	r3, r3
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4bab      	ldr	r3, [pc, #684]	; (8001ec4 <CAN_Tx+0x344>)
 8001c16:	709a      	strb	r2, [r3, #2]
      if (FlashConfiguration->SensorMode == 0){
 8001c18:	4ba9      	ldr	r3, [pc, #676]	; (8001ec0 <CAN_Tx+0x340>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4aab      	ldr	r2, [pc, #684]	; (8001ecc <CAN_Tx+0x34c>)
 8001c1e:	5c9b      	ldrb	r3, [r3, r2]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d124      	bne.n	8001c74 <CAN_Tx+0xf4>
        if (FlashConfiguration->Endianess != 0) {
 8001c2a:	4ba5      	ldr	r3, [pc, #660]	; (8001ec0 <CAN_Tx+0x340>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4aa8      	ldr	r2, [pc, #672]	; (8001ed0 <CAN_Tx+0x350>)
 8001c30:	5c9b      	ldrb	r3, [r3, r2]
 8001c32:	2220      	movs	r2, #32
 8001c34:	4013      	ands	r3, r2
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00d      	beq.n	8001c58 <CAN_Tx+0xd8>
          CanBus.Outbox[4] = ForeignSysVars.CanSetpoint & 0x00FF;
 8001c3c:	4ba5      	ldr	r3, [pc, #660]	; (8001ed4 <CAN_Tx+0x354>)
 8001c3e:	22d8      	movs	r2, #216	; 0xd8
 8001c40:	589b      	ldr	r3, [r3, r2]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b9f      	ldr	r3, [pc, #636]	; (8001ec4 <CAN_Tx+0x344>)
 8001c46:	711a      	strb	r2, [r3, #4]
          CanBus.Outbox[3] = (ForeignSysVars.CanSetpoint & 0xFF00) >> 8;
 8001c48:	4ba2      	ldr	r3, [pc, #648]	; (8001ed4 <CAN_Tx+0x354>)
 8001c4a:	22d8      	movs	r2, #216	; 0xd8
 8001c4c:	589b      	ldr	r3, [r3, r2]
 8001c4e:	121b      	asrs	r3, r3, #8
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b9c      	ldr	r3, [pc, #624]	; (8001ec4 <CAN_Tx+0x344>)
 8001c54:	70da      	strb	r2, [r3, #3]
 8001c56:	e031      	b.n	8001cbc <CAN_Tx+0x13c>
        }
        else {
          CanBus.Outbox[3] = ForeignSysVars.CanSetpoint & 0x00FF;
 8001c58:	4b9e      	ldr	r3, [pc, #632]	; (8001ed4 <CAN_Tx+0x354>)
 8001c5a:	22d8      	movs	r2, #216	; 0xd8
 8001c5c:	589b      	ldr	r3, [r3, r2]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b98      	ldr	r3, [pc, #608]	; (8001ec4 <CAN_Tx+0x344>)
 8001c62:	70da      	strb	r2, [r3, #3]
          CanBus.Outbox[4] = (ForeignSysVars.CanSetpoint & 0xFF00) >> 8;
 8001c64:	4b9b      	ldr	r3, [pc, #620]	; (8001ed4 <CAN_Tx+0x354>)
 8001c66:	22d8      	movs	r2, #216	; 0xd8
 8001c68:	589b      	ldr	r3, [r3, r2]
 8001c6a:	121b      	asrs	r3, r3, #8
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b95      	ldr	r3, [pc, #596]	; (8001ec4 <CAN_Tx+0x344>)
 8001c70:	711a      	strb	r2, [r3, #4]
 8001c72:	e023      	b.n	8001cbc <CAN_Tx+0x13c>
        }
      }
      else {
        if (FlashConfiguration->Endianess != 0) {
 8001c74:	4b92      	ldr	r3, [pc, #584]	; (8001ec0 <CAN_Tx+0x340>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a95      	ldr	r2, [pc, #596]	; (8001ed0 <CAN_Tx+0x350>)
 8001c7a:	5c9b      	ldrb	r3, [r3, r2]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	4013      	ands	r3, r2
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00d      	beq.n	8001ca2 <CAN_Tx+0x122>
          CanBus.Outbox[4] = SysVars.CanSetpoint & 0x00FF;
 8001c86:	4b90      	ldr	r3, [pc, #576]	; (8001ec8 <CAN_Tx+0x348>)
 8001c88:	22d8      	movs	r2, #216	; 0xd8
 8001c8a:	589b      	ldr	r3, [r3, r2]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4b8d      	ldr	r3, [pc, #564]	; (8001ec4 <CAN_Tx+0x344>)
 8001c90:	711a      	strb	r2, [r3, #4]
          CanBus.Outbox[3] = (SysVars.CanSetpoint & 0xFF00) >> 8;
 8001c92:	4b8d      	ldr	r3, [pc, #564]	; (8001ec8 <CAN_Tx+0x348>)
 8001c94:	22d8      	movs	r2, #216	; 0xd8
 8001c96:	589b      	ldr	r3, [r3, r2]
 8001c98:	121b      	asrs	r3, r3, #8
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b89      	ldr	r3, [pc, #548]	; (8001ec4 <CAN_Tx+0x344>)
 8001c9e:	70da      	strb	r2, [r3, #3]
 8001ca0:	e00c      	b.n	8001cbc <CAN_Tx+0x13c>
        }
        else {
          CanBus.Outbox[3] = SysVars.CanSetpoint & 0x00FF;
 8001ca2:	4b89      	ldr	r3, [pc, #548]	; (8001ec8 <CAN_Tx+0x348>)
 8001ca4:	22d8      	movs	r2, #216	; 0xd8
 8001ca6:	589b      	ldr	r3, [r3, r2]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b86      	ldr	r3, [pc, #536]	; (8001ec4 <CAN_Tx+0x344>)
 8001cac:	70da      	strb	r2, [r3, #3]
          CanBus.Outbox[4] = (SysVars.CanSetpoint & 0xFF00) >> 8;
 8001cae:	4b86      	ldr	r3, [pc, #536]	; (8001ec8 <CAN_Tx+0x348>)
 8001cb0:	22d8      	movs	r2, #216	; 0xd8
 8001cb2:	589b      	ldr	r3, [r3, r2]
 8001cb4:	121b      	asrs	r3, r3, #8
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b82      	ldr	r3, [pc, #520]	; (8001ec4 <CAN_Tx+0x344>)
 8001cba:	711a      	strb	r2, [r3, #4]
        }
      }
      CanBus.Outbox[5] = 7 << 3; // Always 0x38 for torque mode %
 8001cbc:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <CAN_Tx+0x344>)
 8001cbe:	2238      	movs	r2, #56	; 0x38
 8001cc0:	715a      	strb	r2, [r3, #5]
      if (FlashConfiguration->SensorMode == 0){
 8001cc2:	4b7f      	ldr	r3, [pc, #508]	; (8001ec0 <CAN_Tx+0x340>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a81      	ldr	r2, [pc, #516]	; (8001ecc <CAN_Tx+0x34c>)
 8001cc8:	5c9b      	ldrb	r3, [r3, r2]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4013      	ands	r3, r2
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d124      	bne.n	8001d1e <CAN_Tx+0x19e>
        if (FlashConfiguration->Endianess != 0) {
 8001cd4:	4b7a      	ldr	r3, [pc, #488]	; (8001ec0 <CAN_Tx+0x340>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a7d      	ldr	r2, [pc, #500]	; (8001ed0 <CAN_Tx+0x350>)
 8001cda:	5c9b      	ldrb	r3, [r3, r2]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	4013      	ands	r3, r2
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00d      	beq.n	8001d02 <CAN_Tx+0x182>
          CanBus.Outbox[7] = SysVars.CanSetpoint & 0x00FF;
 8001ce6:	4b78      	ldr	r3, [pc, #480]	; (8001ec8 <CAN_Tx+0x348>)
 8001ce8:	22d8      	movs	r2, #216	; 0xd8
 8001cea:	589b      	ldr	r3, [r3, r2]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4b75      	ldr	r3, [pc, #468]	; (8001ec4 <CAN_Tx+0x344>)
 8001cf0:	71da      	strb	r2, [r3, #7]
          CanBus.Outbox[6] = (SysVars.CanSetpoint & 0xFF00) >> 8;
 8001cf2:	4b75      	ldr	r3, [pc, #468]	; (8001ec8 <CAN_Tx+0x348>)
 8001cf4:	22d8      	movs	r2, #216	; 0xd8
 8001cf6:	589b      	ldr	r3, [r3, r2]
 8001cf8:	121b      	asrs	r3, r3, #8
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b71      	ldr	r3, [pc, #452]	; (8001ec4 <CAN_Tx+0x344>)
 8001cfe:	719a      	strb	r2, [r3, #6]
 8001d00:	e031      	b.n	8001d66 <CAN_Tx+0x1e6>
        }
        else {
          CanBus.Outbox[6] = SysVars.CanSetpoint & 0x00FF;
 8001d02:	4b71      	ldr	r3, [pc, #452]	; (8001ec8 <CAN_Tx+0x348>)
 8001d04:	22d8      	movs	r2, #216	; 0xd8
 8001d06:	589b      	ldr	r3, [r3, r2]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4b6e      	ldr	r3, [pc, #440]	; (8001ec4 <CAN_Tx+0x344>)
 8001d0c:	719a      	strb	r2, [r3, #6]
          CanBus.Outbox[7] = (SysVars.CanSetpoint & 0xFF00) >> 8;
 8001d0e:	4b6e      	ldr	r3, [pc, #440]	; (8001ec8 <CAN_Tx+0x348>)
 8001d10:	22d8      	movs	r2, #216	; 0xd8
 8001d12:	589b      	ldr	r3, [r3, r2]
 8001d14:	121b      	asrs	r3, r3, #8
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <CAN_Tx+0x344>)
 8001d1a:	71da      	strb	r2, [r3, #7]
 8001d1c:	e023      	b.n	8001d66 <CAN_Tx+0x1e6>
        }
      }
      else {
        if (FlashConfiguration->Endianess != 0) {
 8001d1e:	4b68      	ldr	r3, [pc, #416]	; (8001ec0 <CAN_Tx+0x340>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6b      	ldr	r2, [pc, #428]	; (8001ed0 <CAN_Tx+0x350>)
 8001d24:	5c9b      	ldrb	r3, [r3, r2]
 8001d26:	2220      	movs	r2, #32
 8001d28:	4013      	ands	r3, r2
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00d      	beq.n	8001d4c <CAN_Tx+0x1cc>
          CanBus.Outbox[7] = ForeignSysVars.CanSetpoint & 0x00FF;
 8001d30:	4b68      	ldr	r3, [pc, #416]	; (8001ed4 <CAN_Tx+0x354>)
 8001d32:	22d8      	movs	r2, #216	; 0xd8
 8001d34:	589b      	ldr	r3, [r3, r2]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	4b62      	ldr	r3, [pc, #392]	; (8001ec4 <CAN_Tx+0x344>)
 8001d3a:	71da      	strb	r2, [r3, #7]
          CanBus.Outbox[6] = (ForeignSysVars.CanSetpoint & 0xFF00) >> 8;
 8001d3c:	4b65      	ldr	r3, [pc, #404]	; (8001ed4 <CAN_Tx+0x354>)
 8001d3e:	22d8      	movs	r2, #216	; 0xd8
 8001d40:	589b      	ldr	r3, [r3, r2]
 8001d42:	121b      	asrs	r3, r3, #8
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4b5f      	ldr	r3, [pc, #380]	; (8001ec4 <CAN_Tx+0x344>)
 8001d48:	719a      	strb	r2, [r3, #6]
 8001d4a:	e00c      	b.n	8001d66 <CAN_Tx+0x1e6>
        }
        else {
          CanBus.Outbox[6] = ForeignSysVars.CanSetpoint & 0x00FF;
 8001d4c:	4b61      	ldr	r3, [pc, #388]	; (8001ed4 <CAN_Tx+0x354>)
 8001d4e:	22d8      	movs	r2, #216	; 0xd8
 8001d50:	589b      	ldr	r3, [r3, r2]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <CAN_Tx+0x344>)
 8001d56:	719a      	strb	r2, [r3, #6]
          CanBus.Outbox[7] = (ForeignSysVars.CanSetpoint & 0xFF00) >> 8;
 8001d58:	4b5e      	ldr	r3, [pc, #376]	; (8001ed4 <CAN_Tx+0x354>)
 8001d5a:	22d8      	movs	r2, #216	; 0xd8
 8001d5c:	589b      	ldr	r3, [r3, r2]
 8001d5e:	121b      	asrs	r3, r3, #8
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4b58      	ldr	r3, [pc, #352]	; (8001ec4 <CAN_Tx+0x344>)
 8001d64:	71da      	strb	r2, [r3, #7]
        }
      }
      tx0counter++;
 8001d66:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <CAN_Tx+0x334>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4b51      	ldr	r3, [pc, #324]	; (8001eb4 <CAN_Tx+0x334>)
 8001d70:	701a      	strb	r2, [r3, #0]
      break;
 8001d72:	e0d3      	b.n	8001f1c <CAN_Tx+0x39c>
    case CAN_TX_1:
      address = FlashConfiguration->CanAddressOut[1];
 8001d74:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <CAN_Tx+0x340>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a57      	ldr	r2, [pc, #348]	; (8001ed8 <CAN_Tx+0x358>)
 8001d7a:	589b      	ldr	r3, [r3, r2]
 8001d7c:	61bb      	str	r3, [r7, #24]
      pgn = CAN_ID_to_PGN(FlashConfiguration->CanAddressOut[1]);
 8001d7e:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <CAN_Tx+0x340>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a55      	ldr	r2, [pc, #340]	; (8001ed8 <CAN_Tx+0x358>)
 8001d84:	589b      	ldr	r3, [r3, r2]
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7ff fd94 	bl	80018b4 <CAN_ID_to_PGN>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	61fb      	str	r3, [r7, #28]
      CanBus.Outbox[1] = (0xF0) | tx1counter;
 8001d90:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <CAN_Tx+0x338>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2210      	movs	r2, #16
 8001d96:	4252      	negs	r2, r2
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	4b49      	ldr	r3, [pc, #292]	; (8001ec4 <CAN_Tx+0x344>)
 8001d9e:	705a      	strb	r2, [r3, #1]
      CanBus.Outbox[2] = (0xF8) | SysVars.ErrorType;
 8001da0:	4b49      	ldr	r3, [pc, #292]	; (8001ec8 <CAN_Tx+0x348>)
 8001da2:	22e4      	movs	r2, #228	; 0xe4
 8001da4:	5a9b      	ldrh	r3, [r3, r2]
 8001da6:	05db      	lsls	r3, r3, #23
 8001da8:	0f5b      	lsrs	r3, r3, #29
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	2208      	movs	r2, #8
 8001db0:	4252      	negs	r2, r2
 8001db2:	4313      	orrs	r3, r2
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b42      	ldr	r3, [pc, #264]	; (8001ec4 <CAN_Tx+0x344>)
 8001dba:	709a      	strb	r2, [r3, #2]
      if (FlashConfiguration->Endianess != 0) {
 8001dbc:	4b40      	ldr	r3, [pc, #256]	; (8001ec0 <CAN_Tx+0x340>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a43      	ldr	r2, [pc, #268]	; (8001ed0 <CAN_Tx+0x350>)
 8001dc2:	5c9b      	ldrb	r3, [r3, r2]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00e      	beq.n	8001dec <CAN_Tx+0x26c>
        CanBus.Outbox[4] = SysVars.CriticalFault & 0xFF;
 8001dce:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <CAN_Tx+0x348>)
 8001dd0:	22ec      	movs	r2, #236	; 0xec
 8001dd2:	5a9b      	ldrh	r3, [r3, r2]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <CAN_Tx+0x344>)
 8001dd8:	711a      	strb	r2, [r3, #4]
        CanBus.Outbox[3] = SysVars.CriticalFault >> 8;
 8001dda:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <CAN_Tx+0x348>)
 8001ddc:	22ec      	movs	r2, #236	; 0xec
 8001dde:	5a9b      	ldrh	r3, [r3, r2]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <CAN_Tx+0x344>)
 8001de8:	70da      	strb	r2, [r3, #3]
 8001dea:	e00d      	b.n	8001e08 <CAN_Tx+0x288>
      }
      else {
        CanBus.Outbox[3] = SysVars.CriticalFault & 0xFF;
 8001dec:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <CAN_Tx+0x348>)
 8001dee:	22ec      	movs	r2, #236	; 0xec
 8001df0:	5a9b      	ldrh	r3, [r3, r2]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b33      	ldr	r3, [pc, #204]	; (8001ec4 <CAN_Tx+0x344>)
 8001df6:	70da      	strb	r2, [r3, #3]
        CanBus.Outbox[4] = SysVars.CriticalFault >> 8;
 8001df8:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <CAN_Tx+0x348>)
 8001dfa:	22ec      	movs	r2, #236	; 0xec
 8001dfc:	5a9b      	ldrh	r3, [r3, r2]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <CAN_Tx+0x344>)
 8001e06:	711a      	strb	r2, [r3, #4]
      }
      if (FlashConfiguration->Endianess != 0) {
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <CAN_Tx+0x340>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a30      	ldr	r2, [pc, #192]	; (8001ed0 <CAN_Tx+0x350>)
 8001e0e:	5c9b      	ldrb	r3, [r3, r2]
 8001e10:	2220      	movs	r2, #32
 8001e12:	4013      	ands	r3, r2
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00e      	beq.n	8001e38 <CAN_Tx+0x2b8>
        CanBus.Outbox[6] = SysVars.MajorFault & 0xFF;
 8001e1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <CAN_Tx+0x348>)
 8001e1c:	22ee      	movs	r2, #238	; 0xee
 8001e1e:	5a9b      	ldrh	r3, [r3, r2]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <CAN_Tx+0x344>)
 8001e24:	719a      	strb	r2, [r3, #6]
        CanBus.Outbox[5] = SysVars.MajorFault >> 8;
 8001e26:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <CAN_Tx+0x348>)
 8001e28:	22ee      	movs	r2, #238	; 0xee
 8001e2a:	5a9b      	ldrh	r3, [r3, r2]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <CAN_Tx+0x344>)
 8001e34:	715a      	strb	r2, [r3, #5]
 8001e36:	e00d      	b.n	8001e54 <CAN_Tx+0x2d4>
      }
      else {
        CanBus.Outbox[5] = SysVars.MajorFault & 0xFF;
 8001e38:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <CAN_Tx+0x348>)
 8001e3a:	22ee      	movs	r2, #238	; 0xee
 8001e3c:	5a9b      	ldrh	r3, [r3, r2]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <CAN_Tx+0x344>)
 8001e42:	715a      	strb	r2, [r3, #5]
        CanBus.Outbox[6] = SysVars.MajorFault >> 8;
 8001e44:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <CAN_Tx+0x348>)
 8001e46:	22ee      	movs	r2, #238	; 0xee
 8001e48:	5a9b      	ldrh	r3, [r3, r2]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <CAN_Tx+0x344>)
 8001e52:	719a      	strb	r2, [r3, #6]
      }
      CanBus.Outbox[7] = SysVars.MinorFault;
 8001e54:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <CAN_Tx+0x348>)
 8001e56:	22f0      	movs	r2, #240	; 0xf0
 8001e58:	5c9a      	ldrb	r2, [r3, r2]
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <CAN_Tx+0x344>)
 8001e5c:	71da      	strb	r2, [r3, #7]
      tx1counter++;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <CAN_Tx+0x338>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <CAN_Tx+0x338>)
 8001e68:	701a      	strb	r2, [r3, #0]
      break;
 8001e6a:	e057      	b.n	8001f1c <CAN_Tx+0x39c>
    case CAN_TX_2:
      address = FlashConfiguration->CanAddressOut[2];
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <CAN_Tx+0x340>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2387      	movs	r3, #135	; 0x87
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	58d3      	ldr	r3, [r2, r3]
 8001e76:	61bb      	str	r3, [r7, #24]
      pgn = CAN_ID_to_PGN(FlashConfiguration->CanAddressOut[2]);
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <CAN_Tx+0x340>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	2387      	movs	r3, #135	; 0x87
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	58d3      	ldr	r3, [r2, r3]
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7ff fd16 	bl	80018b4 <CAN_ID_to_PGN>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	61fb      	str	r3, [r7, #28]
      if (FlashConfiguration->SensorMode == 0) {
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <CAN_Tx+0x340>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <CAN_Tx+0x34c>)
 8001e92:	5c9b      	ldrb	r3, [r3, r2]
 8001e94:	2201      	movs	r2, #1
 8001e96:	4013      	ands	r3, r2
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d11e      	bne.n	8001edc <CAN_Tx+0x35c>
        CanBus.Outbox[0] = SysVars.SensorAngle;
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <CAN_Tx+0x348>)
 8001ea0:	22f8      	movs	r2, #248	; 0xf8
 8001ea2:	5c9a      	ldrb	r2, [r3, r2]
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <CAN_Tx+0x344>)
 8001ea6:	701a      	strb	r2, [r3, #0]
        CanBus.Outbox[1] = ForeignSysVars.SensorAngle;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <CAN_Tx+0x354>)
 8001eaa:	22f8      	movs	r2, #248	; 0xf8
 8001eac:	5c9a      	ldrb	r2, [r3, r2]
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <CAN_Tx+0x344>)
 8001eb0:	705a      	strb	r2, [r3, #1]
 8001eb2:	e01d      	b.n	8001ef0 <CAN_Tx+0x370>
 8001eb4:	20000107 	.word	0x20000107
 8001eb8:	20000108 	.word	0x20000108
 8001ebc:	20000109 	.word	0x20000109
 8001ec0:	20002f04 	.word	0x20002f04
 8001ec4:	200014a4 	.word	0x200014a4
 8001ec8:	200020c0 	.word	0x200020c0
 8001ecc:	00000225 	.word	0x00000225
 8001ed0:	00000227 	.word	0x00000227
 8001ed4:	20001f20 	.word	0x20001f20
 8001ed8:	00000434 	.word	0x00000434
      }
      else {
        CanBus.Outbox[0] = ForeignSysVars.SensorAngle;
 8001edc:	4b4c      	ldr	r3, [pc, #304]	; (8002010 <CAN_Tx+0x490>)
 8001ede:	22f8      	movs	r2, #248	; 0xf8
 8001ee0:	5c9a      	ldrb	r2, [r3, r2]
 8001ee2:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <CAN_Tx+0x494>)
 8001ee4:	701a      	strb	r2, [r3, #0]
        CanBus.Outbox[1] = SysVars.SensorAngle;
 8001ee6:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <CAN_Tx+0x498>)
 8001ee8:	22f8      	movs	r2, #248	; 0xf8
 8001eea:	5c9a      	ldrb	r2, [r3, r2]
 8001eec:	4b49      	ldr	r3, [pc, #292]	; (8002014 <CAN_Tx+0x494>)
 8001eee:	705a      	strb	r2, [r3, #1]
      }
      CanBus.Outbox[3] = 0xFF;
 8001ef0:	4b48      	ldr	r3, [pc, #288]	; (8002014 <CAN_Tx+0x494>)
 8001ef2:	22ff      	movs	r2, #255	; 0xff
 8001ef4:	70da      	strb	r2, [r3, #3]
      CanBus.Outbox[4] = 0xFF;
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <CAN_Tx+0x494>)
 8001ef8:	22ff      	movs	r2, #255	; 0xff
 8001efa:	711a      	strb	r2, [r3, #4]
      CanBus.Outbox[5] = 0xFF;
 8001efc:	4b45      	ldr	r3, [pc, #276]	; (8002014 <CAN_Tx+0x494>)
 8001efe:	22ff      	movs	r2, #255	; 0xff
 8001f00:	715a      	strb	r2, [r3, #5]
      CanBus.Outbox[6] = 0xFF;
 8001f02:	4b44      	ldr	r3, [pc, #272]	; (8002014 <CAN_Tx+0x494>)
 8001f04:	22ff      	movs	r2, #255	; 0xff
 8001f06:	719a      	strb	r2, [r3, #6]
      CanBus.Outbox[7] = 0xFF;
 8001f08:	4b42      	ldr	r3, [pc, #264]	; (8002014 <CAN_Tx+0x494>)
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	71da      	strb	r2, [r3, #7]
      tx2counter++;
 8001f0e:	4b43      	ldr	r3, [pc, #268]	; (800201c <CAN_Tx+0x49c>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	3301      	adds	r3, #1
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4b41      	ldr	r3, [pc, #260]	; (800201c <CAN_Tx+0x49c>)
 8001f18:	701a      	strb	r2, [r3, #0]
      break;
 8001f1a:	46c0      	nop			; (mov r8, r8)
  }
  if (FlashConfiguration->CanCrcEnable != 0) {
 8001f1c:	4b40      	ldr	r3, [pc, #256]	; (8002020 <CAN_Tx+0x4a0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a40      	ldr	r2, [pc, #256]	; (8002024 <CAN_Tx+0x4a4>)
 8001f22:	5c9b      	ldrb	r3, [r3, r2]
 8001f24:	2208      	movs	r2, #8
 8001f26:	4013      	ands	r3, r2
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d048      	beq.n	8001fc0 <CAN_Tx+0x440>
    //
    // Setup crc data
    //
    crc_buffer[0] = CanBus.Outbox[1];
 8001f2e:	4b39      	ldr	r3, [pc, #228]	; (8002014 <CAN_Tx+0x494>)
 8001f30:	785a      	ldrb	r2, [r3, #1]
 8001f32:	210c      	movs	r1, #12
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	701a      	strb	r2, [r3, #0]
    crc_buffer[1] = CanBus.Outbox[2];
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <CAN_Tx+0x494>)
 8001f3a:	789a      	ldrb	r2, [r3, #2]
 8001f3c:	187b      	adds	r3, r7, r1
 8001f3e:	705a      	strb	r2, [r3, #1]
    crc_buffer[2] = CanBus.Outbox[3];
 8001f40:	4b34      	ldr	r3, [pc, #208]	; (8002014 <CAN_Tx+0x494>)
 8001f42:	78da      	ldrb	r2, [r3, #3]
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	709a      	strb	r2, [r3, #2]
    crc_buffer[3] = CanBus.Outbox[4];
 8001f48:	4b32      	ldr	r3, [pc, #200]	; (8002014 <CAN_Tx+0x494>)
 8001f4a:	791a      	ldrb	r2, [r3, #4]
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	70da      	strb	r2, [r3, #3]
    crc_buffer[4] = CanBus.Outbox[5];
 8001f50:	4b30      	ldr	r3, [pc, #192]	; (8002014 <CAN_Tx+0x494>)
 8001f52:	795a      	ldrb	r2, [r3, #5]
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	711a      	strb	r2, [r3, #4]
    crc_buffer[5] = CanBus.Outbox[6];
 8001f58:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <CAN_Tx+0x494>)
 8001f5a:	799a      	ldrb	r2, [r3, #6]
 8001f5c:	187b      	adds	r3, r7, r1
 8001f5e:	715a      	strb	r2, [r3, #5]
    crc_buffer[6] = CanBus.Outbox[7];
 8001f60:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <CAN_Tx+0x494>)
 8001f62:	79da      	ldrb	r2, [r3, #7]
 8001f64:	187b      	adds	r3, r7, r1
 8001f66:	719a      	strb	r2, [r3, #6]
    crc_buffer[7] = (address & 0xFF);
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	71da      	strb	r2, [r3, #7]
    crc_buffer[8] = pgn & 0xFF;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	721a      	strb	r2, [r3, #8]
    crc_buffer[9] = ((pgn & 0xFF00) >> 8);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	725a      	strb	r2, [r3, #9]
    crc_buffer[10] = ((pgn & 0xFF0000) >> 16);
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	729a      	strb	r2, [r3, #10]
    //
    // Calculate crc8
    //
    if (Mode == CAN_TX_2) {
 8001f8c:	1dfb      	adds	r3, r7, #7
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d10a      	bne.n	8001faa <CAN_Tx+0x42a>
      CanBus.Outbox[2] = CalcCrc8(crc_buffer, sizeof(crc_buffer));
 8001f94:	230c      	movs	r3, #12
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	210b      	movs	r1, #11
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f000 fdf2 	bl	8002b84 <CalcCrc8>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <CAN_Tx+0x494>)
 8001fa6:	709a      	strb	r2, [r3, #2]
 8001fa8:	e015      	b.n	8001fd6 <CAN_Tx+0x456>
    }
    else {
      CanBus.Outbox[0] = CalcCrc8(crc_buffer, sizeof(crc_buffer));
 8001faa:	230c      	movs	r3, #12
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	210b      	movs	r1, #11
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f000 fde7 	bl	8002b84 <CalcCrc8>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	001a      	movs	r2, r3
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <CAN_Tx+0x494>)
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	e00a      	b.n	8001fd6 <CAN_Tx+0x456>
    }
  }
  else {
    if (Mode == CAN_TX_2) {
 8001fc0:	1dfb      	adds	r3, r7, #7
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d103      	bne.n	8001fd0 <CAN_Tx+0x450>
      CanBus.Outbox[2] = 0xFF;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <CAN_Tx+0x494>)
 8001fca:	22ff      	movs	r2, #255	; 0xff
 8001fcc:	709a      	strb	r2, [r3, #2]
 8001fce:	e002      	b.n	8001fd6 <CAN_Tx+0x456>
    }
    else {
      CanBus.Outbox[0] = 0xFF; // Fill Crc with 1s if disabled
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <CAN_Tx+0x494>)
 8001fd2:	22ff      	movs	r2, #255	; 0xff
 8001fd4:	701a      	strb	r2, [r3, #0]
    }
  }

  // If echo mode is enabled, store the last message send to validate echoing
  if ((FlashConfiguration->CanEcho != 0) && (Mode == CAN_TX_0)) {
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <CAN_Tx+0x4a0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <CAN_Tx+0x4a4>)
 8001fdc:	5c9b      	ldrb	r3, [r3, r2]
 8001fde:	2204      	movs	r2, #4
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <CAN_Tx+0x47a>
 8001fe8:	1dfb      	adds	r3, r7, #7
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d104      	bne.n	8001ffa <CAN_Tx+0x47a>
    memmove(&CanBus.LastMsg, &CanBus.Outbox, sizeof(CanBus.Outbox));
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <CAN_Tx+0x494>)
 8001ff2:	4a08      	ldr	r2, [pc, #32]	; (8002014 <CAN_Tx+0x494>)
 8001ff4:	3308      	adds	r3, #8
 8001ff6:	ca03      	ldmia	r2!, {r0, r1}
 8001ff8:	c303      	stmia	r3!, {r0, r1}
  }

  //
  // Output message via CANBus as long as all 3 mailboxes are not full
  //
  CAN_MessageTx(Mode, 123, CanBus.Outbox);
 8001ffa:	4a06      	ldr	r2, [pc, #24]	; (8002014 <CAN_Tx+0x494>)
 8001ffc:	1dfb      	adds	r3, r7, #7
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	217b      	movs	r1, #123	; 0x7b
 8002002:	0018      	movs	r0, r3
 8002004:	f7ff fc74 	bl	80018f0 <CAN_MessageTx>
}
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b008      	add	sp, #32
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20001f20 	.word	0x20001f20
 8002014:	200014a4 	.word	0x200014a4
 8002018:	200020c0 	.word	0x200020c0
 800201c:	20000109 	.word	0x20000109
 8002020:	20002f04 	.word	0x20002f04
 8002024:	00000226 	.word	0x00000226

08002028 <VerifyCanRxTimes>:
//
// Returns:   0 if no issues, 1 if message is too late
//
// Requirement(s):
//
void VerifyCanRxTimes(uint8_t AddressIdx, uint8_t Tolerance) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	0002      	movs	r2, r0
 8002030:	1dfb      	adds	r3, r7, #7
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	1dbb      	adds	r3, r7, #6
 8002036:	1c0a      	adds	r2, r1, #0
 8002038:	701a      	strb	r2, [r3, #0]
  if (FlashConfiguration->CanMsgInTime[AddressIdx] != 0) {
 800203a:	4b39      	ldr	r3, [pc, #228]	; (8002120 <VerifyCanRxTimes+0xf8>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	1dfb      	adds	r3, r7, #7
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	3317      	adds	r3, #23
 8002044:	33ff      	adds	r3, #255	; 0xff
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	18d3      	adds	r3, r2, r3
 800204a:	3304      	adds	r3, #4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d056      	beq.n	8002100 <VerifyCanRxTimes+0xd8>
    // When a message is received, ensure it is received within the allotted amount of time
    if (bMsgReceived[AddressIdx] != 0) {
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	4a33      	ldr	r2, [pc, #204]	; (8002124 <VerifyCanRxTimes+0xfc>)
 8002058:	5cd3      	ldrb	r3, [r2, r3]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d033      	beq.n	80020c6 <VerifyCanRxTimes+0x9e>
      if (MsgNotReceivedTmr[AddressIdx] > (FlashConfiguration->CanMsgInTime[AddressIdx] + Tolerance)) {
 800205e:	1dfb      	adds	r3, r7, #7
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	4b31      	ldr	r3, [pc, #196]	; (8002128 <VerifyCanRxTimes+0x100>)
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	58d2      	ldr	r2, [r2, r3]
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <VerifyCanRxTimes+0xf8>)
 800206a:	6819      	ldr	r1, [r3, #0]
 800206c:	1dfb      	adds	r3, r7, #7
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	3317      	adds	r3, #23
 8002072:	33ff      	adds	r3, #255	; 0xff
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	18cb      	adds	r3, r1, r3
 8002078:	3304      	adds	r3, #4
 800207a:	6819      	ldr	r1, [r3, #0]
 800207c:	1dbb      	adds	r3, r7, #6
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	18cb      	adds	r3, r1, r3
 8002082:	429a      	cmp	r2, r3
 8002084:	d90e      	bls.n	80020a4 <VerifyCanRxTimes+0x7c>
        MissedMsgIn[AddressIdx]++;
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	4a28      	ldr	r2, [pc, #160]	; (800212c <VerifyCanRxTimes+0x104>)
 800208c:	5cd2      	ldrb	r2, [r2, r3]
 800208e:	3201      	adds	r2, #1
 8002090:	b2d1      	uxtb	r1, r2
 8002092:	4a26      	ldr	r2, [pc, #152]	; (800212c <VerifyCanRxTimes+0x104>)
 8002094:	54d1      	strb	r1, [r2, r3]
        MsgNotReceivedTmr[AddressIdx] = 0;
 8002096:	1dfb      	adds	r3, r7, #7
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	4b23      	ldr	r3, [pc, #140]	; (8002128 <VerifyCanRxTimes+0x100>)
 800209c:	0092      	lsls	r2, r2, #2
 800209e:	2100      	movs	r1, #0
 80020a0:	50d1      	str	r1, [r2, r3]
 80020a2:	e00a      	b.n	80020ba <VerifyCanRxTimes+0x92>
      }
      else {
        MissedMsgIn[AddressIdx] = 0;
 80020a4:	1dfb      	adds	r3, r7, #7
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4a20      	ldr	r2, [pc, #128]	; (800212c <VerifyCanRxTimes+0x104>)
 80020aa:	2100      	movs	r1, #0
 80020ac:	54d1      	strb	r1, [r2, r3]
        MsgNotReceivedTmr[AddressIdx] = 0;
 80020ae:	1dfb      	adds	r3, r7, #7
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <VerifyCanRxTimes+0x100>)
 80020b4:	0092      	lsls	r2, r2, #2
 80020b6:	2100      	movs	r1, #0
 80020b8:	50d1      	str	r1, [r2, r3]
      }
      bMsgReceived[AddressIdx] = 0; // Clear received flag
 80020ba:	1dfb      	adds	r3, r7, #7
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	4a19      	ldr	r2, [pc, #100]	; (8002124 <VerifyCanRxTimes+0xfc>)
 80020c0:	2100      	movs	r1, #0
 80020c2:	54d1      	strb	r1, [r2, r3]
  }
  else {
    MissedMsgIn[AddressIdx] = 0;
    MsgNotReceivedTmr[AddressIdx] = 0;
  }
}
 80020c4:	e027      	b.n	8002116 <VerifyCanRxTimes+0xee>
      if (MsgNotReceivedTmr[AddressIdx] > (FlashConfiguration->CanMsgInTime[AddressIdx] + Tolerance)) {
 80020c6:	1dfb      	adds	r3, r7, #7
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <VerifyCanRxTimes+0x100>)
 80020cc:	0092      	lsls	r2, r2, #2
 80020ce:	58d2      	ldr	r2, [r2, r3]
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <VerifyCanRxTimes+0xf8>)
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	1dfb      	adds	r3, r7, #7
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	3317      	adds	r3, #23
 80020da:	33ff      	adds	r3, #255	; 0xff
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	18cb      	adds	r3, r1, r3
 80020e0:	3304      	adds	r3, #4
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	1dbb      	adds	r3, r7, #6
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	18cb      	adds	r3, r1, r3
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d913      	bls.n	8002116 <VerifyCanRxTimes+0xee>
        MissedMsgIn[AddressIdx]++;
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	4a0e      	ldr	r2, [pc, #56]	; (800212c <VerifyCanRxTimes+0x104>)
 80020f4:	5cd2      	ldrb	r2, [r2, r3]
 80020f6:	3201      	adds	r2, #1
 80020f8:	b2d1      	uxtb	r1, r2
 80020fa:	4a0c      	ldr	r2, [pc, #48]	; (800212c <VerifyCanRxTimes+0x104>)
 80020fc:	54d1      	strb	r1, [r2, r3]
}
 80020fe:	e00a      	b.n	8002116 <VerifyCanRxTimes+0xee>
    MissedMsgIn[AddressIdx] = 0;
 8002100:	1dfb      	adds	r3, r7, #7
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4a09      	ldr	r2, [pc, #36]	; (800212c <VerifyCanRxTimes+0x104>)
 8002106:	2100      	movs	r1, #0
 8002108:	54d1      	strb	r1, [r2, r3]
    MsgNotReceivedTmr[AddressIdx] = 0;
 800210a:	1dfb      	adds	r3, r7, #7
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <VerifyCanRxTimes+0x100>)
 8002110:	0092      	lsls	r2, r2, #2
 8002112:	2100      	movs	r1, #0
 8002114:	50d1      	str	r1, [r2, r3]
}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	46bd      	mov	sp, r7
 800211a:	b002      	add	sp, #8
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	20002f04 	.word	0x20002f04
 8002124:	200000fc 	.word	0x200000fc
 8002128:	200000f0 	.word	0x200000f0
 800212c:	200000f8 	.word	0x200000f8

08002130 <VerifyCanRx>:
// Returns:   1 if messages are being properly echoes, 0 if the
//            echoes message is wrong or did not updated
//
// Requirement(s):
//
void VerifyCanRx (stCanInbox CanData) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	6018      	str	r0, [r3, #0]
 800213a:	6059      	str	r1, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
  uint8_t crc_buffer[11]; // Data for CRC8 calculation
  uint32_t pgn; // Paramter group number
  uint32_t addressin; // Address of message to calculate pgn

  // Check if echoes messages match the previous message sent
  if (FlashConfiguration->CanEcho != 0) {
 800213e:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <VerifyCanRx+0x170>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a58      	ldr	r2, [pc, #352]	; (80022a4 <VerifyCanRx+0x174>)
 8002144:	5c9b      	ldrb	r3, [r3, r2]
 8002146:	2204      	movs	r2, #4
 8002148:	4013      	ands	r3, r2
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d030      	beq.n	80021b2 <VerifyCanRx+0x82>
    for (uint8_t i=0; i<8; i++) {
 8002150:	2327      	movs	r3, #39	; 0x27
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
 8002158:	e025      	b.n	80021a6 <VerifyCanRx+0x76>
      if (CanBus.LastMsg[i] != CanBus.Inbox[0].Data[i]) {
 800215a:	2127      	movs	r1, #39	; 0x27
 800215c:	187b      	adds	r3, r7, r1
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4a51      	ldr	r2, [pc, #324]	; (80022a8 <VerifyCanRx+0x178>)
 8002162:	18d3      	adds	r3, r2, r3
 8002164:	7a1a      	ldrb	r2, [r3, #8]
 8002166:	187b      	adds	r3, r7, r1
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	494f      	ldr	r1, [pc, #316]	; (80022a8 <VerifyCanRx+0x178>)
 800216c:	18cb      	adds	r3, r1, r3
 800216e:	7d1b      	ldrb	r3, [r3, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	d009      	beq.n	8002188 <VerifyCanRx+0x58>
        CanBus.Status |= 0x04u;
 8002174:	4b4c      	ldr	r3, [pc, #304]	; (80022a8 <VerifyCanRx+0x178>)
 8002176:	2256      	movs	r2, #86	; 0x56
 8002178:	5c9b      	ldrb	r3, [r3, r2]
 800217a:	2204      	movs	r2, #4
 800217c:	4313      	orrs	r3, r2
 800217e:	b2d9      	uxtb	r1, r3
 8002180:	4b49      	ldr	r3, [pc, #292]	; (80022a8 <VerifyCanRx+0x178>)
 8002182:	2256      	movs	r2, #86	; 0x56
 8002184:	5499      	strb	r1, [r3, r2]
        break;
 8002186:	e01d      	b.n	80021c4 <VerifyCanRx+0x94>
      }
      else {
        CanBus.Status &= ~0x04u;
 8002188:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <VerifyCanRx+0x178>)
 800218a:	2256      	movs	r2, #86	; 0x56
 800218c:	5c9b      	ldrb	r3, [r3, r2]
 800218e:	2204      	movs	r2, #4
 8002190:	4393      	bics	r3, r2
 8002192:	b2d9      	uxtb	r1, r3
 8002194:	4b44      	ldr	r3, [pc, #272]	; (80022a8 <VerifyCanRx+0x178>)
 8002196:	2256      	movs	r2, #86	; 0x56
 8002198:	5499      	strb	r1, [r3, r2]
    for (uint8_t i=0; i<8; i++) {
 800219a:	2127      	movs	r1, #39	; 0x27
 800219c:	187b      	adds	r3, r7, r1
 800219e:	781a      	ldrb	r2, [r3, #0]
 80021a0:	187b      	adds	r3, r7, r1
 80021a2:	3201      	adds	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	2327      	movs	r3, #39	; 0x27
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b07      	cmp	r3, #7
 80021ae:	d9d4      	bls.n	800215a <VerifyCanRx+0x2a>
 80021b0:	e008      	b.n	80021c4 <VerifyCanRx+0x94>
      }
    }
  }
  else {
    CanBus.Status &= ~0x04u;
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <VerifyCanRx+0x178>)
 80021b4:	2256      	movs	r2, #86	; 0x56
 80021b6:	5c9b      	ldrb	r3, [r3, r2]
 80021b8:	2204      	movs	r2, #4
 80021ba:	4393      	bics	r3, r2
 80021bc:	b2d9      	uxtb	r1, r3
 80021be:	4b3a      	ldr	r3, [pc, #232]	; (80022a8 <VerifyCanRx+0x178>)
 80021c0:	2256      	movs	r2, #86	; 0x56
 80021c2:	5499      	strb	r1, [r3, r2]
  }
  // If echoing is not available but CRC is, then
  // validate CRC in messages vs calculated CRC
  if (FlashConfiguration->CanCrcEnable != 0) {
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <VerifyCanRx+0x170>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a36      	ldr	r2, [pc, #216]	; (80022a4 <VerifyCanRx+0x174>)
 80021ca:	5c9b      	ldrb	r3, [r3, r2]
 80021cc:	2208      	movs	r2, #8
 80021ce:	4013      	ands	r3, r2
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d056      	beq.n	8002284 <VerifyCanRx+0x154>
    addressin = CanData.Address;
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	623b      	str	r3, [r7, #32]
    pgn = CAN_ID_to_PGN(addressin);
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	0018      	movs	r0, r3
 80021e0:	f7ff fb68 	bl	80018b4 <CAN_ID_to_PGN>
 80021e4:	0003      	movs	r3, r0
 80021e6:	61fb      	str	r3, [r7, #28]
    crc_buffer[0] = CanData.Data[1];
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	795a      	ldrb	r2, [r3, #5]
 80021ec:	2110      	movs	r1, #16
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	701a      	strb	r2, [r3, #0]
    crc_buffer[1] = CanData.Data[2];
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	799a      	ldrb	r2, [r3, #6]
 80021f6:	187b      	adds	r3, r7, r1
 80021f8:	705a      	strb	r2, [r3, #1]
    crc_buffer[2] = CanData.Data[3];
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	79da      	ldrb	r2, [r3, #7]
 80021fe:	187b      	adds	r3, r7, r1
 8002200:	709a      	strb	r2, [r3, #2]
    crc_buffer[3] = CanData.Data[4];
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	7a1a      	ldrb	r2, [r3, #8]
 8002206:	187b      	adds	r3, r7, r1
 8002208:	70da      	strb	r2, [r3, #3]
    crc_buffer[4] = CanData.Data[5];
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	7a5a      	ldrb	r2, [r3, #9]
 800220e:	187b      	adds	r3, r7, r1
 8002210:	711a      	strb	r2, [r3, #4]
    crc_buffer[5] = CanData.Data[6];
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	7a9a      	ldrb	r2, [r3, #10]
 8002216:	187b      	adds	r3, r7, r1
 8002218:	715a      	strb	r2, [r3, #5]
    crc_buffer[6] = CanData.Data[7];
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	7ada      	ldrb	r2, [r3, #11]
 800221e:	187b      	adds	r3, r7, r1
 8002220:	719a      	strb	r2, [r3, #6]
    crc_buffer[7] = (addressin & 0xFF);
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	187b      	adds	r3, r7, r1
 8002228:	71da      	strb	r2, [r3, #7]
    crc_buffer[8] = pgn & 0xFF;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	187b      	adds	r3, r7, r1
 8002230:	721a      	strb	r2, [r3, #8]
    crc_buffer[9] = ((pgn & 0xFF00) >> 8);
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	b2da      	uxtb	r2, r3
 8002238:	187b      	adds	r3, r7, r1
 800223a:	725a      	strb	r2, [r3, #9]
    crc_buffer[10] = ((pgn & 0xFF0000) >> 16);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	0c1b      	lsrs	r3, r3, #16
 8002240:	b2da      	uxtb	r2, r3
 8002242:	187b      	adds	r3, r7, r1
 8002244:	729a      	strb	r2, [r3, #10]

    if (CalcCrc8(crc_buffer, sizeof(crc_buffer)) != CanData.Data[0]) {
 8002246:	187b      	adds	r3, r7, r1
 8002248:	210b      	movs	r1, #11
 800224a:	0018      	movs	r0, r3
 800224c:	f000 fc9a 	bl	8002b84 <CalcCrc8>
 8002250:	0003      	movs	r3, r0
 8002252:	001a      	movs	r2, r3
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	791b      	ldrb	r3, [r3, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	d009      	beq.n	8002270 <VerifyCanRx+0x140>
      CanBus.Status |= 0x08u;
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <VerifyCanRx+0x178>)
 800225e:	2256      	movs	r2, #86	; 0x56
 8002260:	5c9b      	ldrb	r3, [r3, r2]
 8002262:	2208      	movs	r2, #8
 8002264:	4313      	orrs	r3, r2
 8002266:	b2d9      	uxtb	r1, r3
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <VerifyCanRx+0x178>)
 800226a:	2256      	movs	r2, #86	; 0x56
 800226c:	5499      	strb	r1, [r3, r2]
  // validation is required
  else {
    // Ensure Echo and CRC invalid bits are not set
    CanBus.Status &= ~0x08u;
  }
}
 800226e:	e012      	b.n	8002296 <VerifyCanRx+0x166>
      CanBus.Status &= ~0x08u;
 8002270:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <VerifyCanRx+0x178>)
 8002272:	2256      	movs	r2, #86	; 0x56
 8002274:	5c9b      	ldrb	r3, [r3, r2]
 8002276:	2208      	movs	r2, #8
 8002278:	4393      	bics	r3, r2
 800227a:	b2d9      	uxtb	r1, r3
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <VerifyCanRx+0x178>)
 800227e:	2256      	movs	r2, #86	; 0x56
 8002280:	5499      	strb	r1, [r3, r2]
}
 8002282:	e008      	b.n	8002296 <VerifyCanRx+0x166>
    CanBus.Status &= ~0x08u;
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <VerifyCanRx+0x178>)
 8002286:	2256      	movs	r2, #86	; 0x56
 8002288:	5c9b      	ldrb	r3, [r3, r2]
 800228a:	2208      	movs	r2, #8
 800228c:	4393      	bics	r3, r2
 800228e:	b2d9      	uxtb	r1, r3
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <VerifyCanRx+0x178>)
 8002292:	2256      	movs	r2, #86	; 0x56
 8002294:	5499      	strb	r1, [r3, r2]
}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	46bd      	mov	sp, r7
 800229a:	b00a      	add	sp, #40	; 0x28
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	20002f04 	.word	0x20002f04
 80022a4:	00000226 	.word	0x00000226
 80022a8:	200014a4 	.word	0x200014a4

080022ac <CAN_Rx>:
//
// Returns:   None
//
// Requirement(s):
//
void CAN_Rx (CAN_HandleTypeDef *hcan, uint8_t AddressIdx) {
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	000a      	movs	r2, r1
 80022b6:	1cfb      	adds	r3, r7, #3
 80022b8:	701a      	strb	r2, [r3, #0]

  //
  // Routine to receive can messages
  //
  // If RX FIFO 0 is not empty read the data
  if (AddressIdx % 2 == 0) {
 80022ba:	1cfb      	adds	r3, r7, #3
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2201      	movs	r2, #1
 80022c0:	4013      	ands	r3, r2
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d104      	bne.n	80022d2 <CAN_Rx+0x26>
    FIFO = 0;
 80022c8:	230f      	movs	r3, #15
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
 80022d0:	e003      	b.n	80022da <CAN_Rx+0x2e>
  }
  else {
    FIFO = 1;
 80022d2:	230f      	movs	r3, #15
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
  }
  // Read the FIFO for corresponding AddressIdx out if a message is pending
  if (((FIFO == 1) && (hcan->Instance->RF1R & 0x03)) || ((FIFO == 0) && (hcan->Instance->RF0R & 0x03))) {
 80022da:	230f      	movs	r3, #15
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d105      	bne.n	80022f0 <CAN_Rx+0x44>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2203      	movs	r2, #3
 80022ec:	4013      	ands	r3, r2
 80022ee:	d10c      	bne.n	800230a <CAN_Rx+0x5e>
 80022f0:	230f      	movs	r3, #15
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d000      	beq.n	80022fc <CAN_Rx+0x50>
 80022fa:	e103      	b.n	8002504 <CAN_Rx+0x258>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2203      	movs	r2, #3
 8002304:	4013      	ands	r3, r2
 8002306:	d100      	bne.n	800230a <CAN_Rx+0x5e>
 8002308:	e0fc      	b.n	8002504 <CAN_Rx+0x258>
    CanBus.Inbox[FIFO].Address = (FlashConfiguration->CanMaskIn[AddressIdx] & CAN->sFIFOMailBox[FIFO].RIR) >> 3u;;
 800230a:	4b80      	ldr	r3, [pc, #512]	; (800250c <CAN_Rx+0x260>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	1cfb      	adds	r3, r7, #3
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	3319      	adds	r3, #25
 8002314:	33ff      	adds	r3, #255	; 0xff
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	18d3      	adds	r3, r2, r3
 800231a:	3304      	adds	r3, #4
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	497c      	ldr	r1, [pc, #496]	; (8002510 <CAN_Rx+0x264>)
 8002320:	240f      	movs	r4, #15
 8002322:	193a      	adds	r2, r7, r4
 8002324:	7812      	ldrb	r2, [r2, #0]
 8002326:	321b      	adds	r2, #27
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	5852      	ldr	r2, [r2, r1]
 800232c:	4013      	ands	r3, r2
 800232e:	193a      	adds	r2, r7, r4
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	08d9      	lsrs	r1, r3, #3
 8002334:	4877      	ldr	r0, [pc, #476]	; (8002514 <CAN_Rx+0x268>)
 8002336:	0013      	movs	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	189b      	adds	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	18c3      	adds	r3, r0, r3
 8002340:	3310      	adds	r3, #16
 8002342:	6019      	str	r1, [r3, #0]
    CanBus.Inbox[FIFO].Data[0] = ((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFO].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6819      	ldr	r1, [r3, #0]
 8002348:	193b      	adds	r3, r7, r4
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	23dc      	movs	r3, #220	; 0xdc
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	188a      	adds	r2, r1, r2
 8002354:	18d3      	adds	r3, r2, r3
 8002356:	6819      	ldr	r1, [r3, #0]
 8002358:	193b      	adds	r3, r7, r4
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	b2c8      	uxtb	r0, r1
 800235e:	496d      	ldr	r1, [pc, #436]	; (8002514 <CAN_Rx+0x268>)
 8002360:	0013      	movs	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	189b      	adds	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	18cb      	adds	r3, r1, r3
 800236a:	3314      	adds	r3, #20
 800236c:	1c02      	adds	r2, r0, #0
 800236e:	701a      	strb	r2, [r3, #0]
    CanBus.Inbox[FIFO].Data[1] = ((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFO].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	193b      	adds	r3, r7, r4
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	23dc      	movs	r3, #220	; 0xdc
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	188a      	adds	r2, r1, r2
 8002380:	18d3      	adds	r3, r2, r3
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0a19      	lsrs	r1, r3, #8
 8002386:	193b      	adds	r3, r7, r4
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	b2c8      	uxtb	r0, r1
 800238c:	4961      	ldr	r1, [pc, #388]	; (8002514 <CAN_Rx+0x268>)
 800238e:	0013      	movs	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	189b      	adds	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	18cb      	adds	r3, r1, r3
 8002398:	3315      	adds	r3, #21
 800239a:	1c02      	adds	r2, r0, #0
 800239c:	701a      	strb	r2, [r3, #0]
    CanBus.Inbox[FIFO].Data[2] = ((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFO].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6819      	ldr	r1, [r3, #0]
 80023a2:	193b      	adds	r3, r7, r4
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	23dc      	movs	r3, #220	; 0xdc
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	188a      	adds	r2, r1, r2
 80023ae:	18d3      	adds	r3, r2, r3
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0c19      	lsrs	r1, r3, #16
 80023b4:	193b      	adds	r3, r7, r4
 80023b6:	781a      	ldrb	r2, [r3, #0]
 80023b8:	b2c8      	uxtb	r0, r1
 80023ba:	4956      	ldr	r1, [pc, #344]	; (8002514 <CAN_Rx+0x268>)
 80023bc:	0013      	movs	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	189b      	adds	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	18cb      	adds	r3, r1, r3
 80023c6:	3316      	adds	r3, #22
 80023c8:	1c02      	adds	r2, r0, #0
 80023ca:	701a      	strb	r2, [r3, #0]
    CanBus.Inbox[FIFO].Data[3] = ((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFO].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6819      	ldr	r1, [r3, #0]
 80023d0:	193b      	adds	r3, r7, r4
 80023d2:	781a      	ldrb	r2, [r3, #0]
 80023d4:	23dc      	movs	r3, #220	; 0xdc
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	188a      	adds	r2, r1, r2
 80023dc:	18d3      	adds	r3, r2, r3
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0e19      	lsrs	r1, r3, #24
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	781a      	ldrb	r2, [r3, #0]
 80023e6:	b2c8      	uxtb	r0, r1
 80023e8:	494a      	ldr	r1, [pc, #296]	; (8002514 <CAN_Rx+0x268>)
 80023ea:	0013      	movs	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	189b      	adds	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	18cb      	adds	r3, r1, r3
 80023f4:	3317      	adds	r3, #23
 80023f6:	1c02      	adds	r2, r0, #0
 80023f8:	701a      	strb	r2, [r3, #0]
    CanBus.Inbox[FIFO].Data[4] = ((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFO].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6819      	ldr	r1, [r3, #0]
 80023fe:	193b      	adds	r3, r7, r4
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	23de      	movs	r3, #222	; 0xde
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	188a      	adds	r2, r1, r2
 800240a:	18d3      	adds	r3, r2, r3
 800240c:	6819      	ldr	r1, [r3, #0]
 800240e:	193b      	adds	r3, r7, r4
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	b2c8      	uxtb	r0, r1
 8002414:	493f      	ldr	r1, [pc, #252]	; (8002514 <CAN_Rx+0x268>)
 8002416:	0013      	movs	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	189b      	adds	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	18cb      	adds	r3, r1, r3
 8002420:	3318      	adds	r3, #24
 8002422:	1c02      	adds	r2, r0, #0
 8002424:	701a      	strb	r2, [r3, #0]
    CanBus.Inbox[FIFO].Data[5] = ((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[FIFO].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6819      	ldr	r1, [r3, #0]
 800242a:	193b      	adds	r3, r7, r4
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	23de      	movs	r3, #222	; 0xde
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	0112      	lsls	r2, r2, #4
 8002434:	188a      	adds	r2, r1, r2
 8002436:	18d3      	adds	r3, r2, r3
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	0a19      	lsrs	r1, r3, #8
 800243c:	193b      	adds	r3, r7, r4
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	b2c8      	uxtb	r0, r1
 8002442:	4934      	ldr	r1, [pc, #208]	; (8002514 <CAN_Rx+0x268>)
 8002444:	0013      	movs	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	189b      	adds	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	18cb      	adds	r3, r1, r3
 800244e:	3319      	adds	r3, #25
 8002450:	1c02      	adds	r2, r0, #0
 8002452:	701a      	strb	r2, [r3, #0]
    CanBus.Inbox[FIFO].Data[6] = ((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[FIFO].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6819      	ldr	r1, [r3, #0]
 8002458:	193b      	adds	r3, r7, r4
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	23de      	movs	r3, #222	; 0xde
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	188a      	adds	r2, r1, r2
 8002464:	18d3      	adds	r3, r2, r3
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0c19      	lsrs	r1, r3, #16
 800246a:	193b      	adds	r3, r7, r4
 800246c:	781a      	ldrb	r2, [r3, #0]
 800246e:	b2c8      	uxtb	r0, r1
 8002470:	4928      	ldr	r1, [pc, #160]	; (8002514 <CAN_Rx+0x268>)
 8002472:	0013      	movs	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	189b      	adds	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	18cb      	adds	r3, r1, r3
 800247c:	331a      	adds	r3, #26
 800247e:	1c02      	adds	r2, r0, #0
 8002480:	701a      	strb	r2, [r3, #0]
    CanBus.Inbox[FIFO].Data[7] = ((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[FIFO].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6819      	ldr	r1, [r3, #0]
 8002486:	193b      	adds	r3, r7, r4
 8002488:	781a      	ldrb	r2, [r3, #0]
 800248a:	23de      	movs	r3, #222	; 0xde
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	0112      	lsls	r2, r2, #4
 8002490:	188a      	adds	r2, r1, r2
 8002492:	18d3      	adds	r3, r2, r3
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	0e19      	lsrs	r1, r3, #24
 8002498:	193b      	adds	r3, r7, r4
 800249a:	781a      	ldrb	r2, [r3, #0]
 800249c:	b2c8      	uxtb	r0, r1
 800249e:	491d      	ldr	r1, [pc, #116]	; (8002514 <CAN_Rx+0x268>)
 80024a0:	0013      	movs	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	189b      	adds	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	18cb      	adds	r3, r1, r3
 80024aa:	331b      	adds	r3, #27
 80024ac:	1c02      	adds	r2, r0, #0
 80024ae:	701a      	strb	r2, [r3, #0]
    //Clear the appropriate FIFO
    if (FIFO == 1) {
 80024b0:	193b      	adds	r3, r7, r4
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d108      	bne.n	80024ca <CAN_Rx+0x21e>
      hcan->Instance->RF1R |= CAN_RF1R_RFOM1; // Release the receive mailbox
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2120      	movs	r1, #32
 80024c4:	430a      	orrs	r2, r1
 80024c6:	611a      	str	r2, [r3, #16]
 80024c8:	e007      	b.n	80024da <CAN_Rx+0x22e>
    }
    else {
      hcan->Instance->RF0R |= CAN_RF0R_RFOM0; // Release the receive mailbox
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2120      	movs	r1, #32
 80024d6:	430a      	orrs	r2, r1
 80024d8:	60da      	str	r2, [r3, #12]
    }
    bMsgReceived[AddressIdx] = 1;
 80024da:	1cfb      	adds	r3, r7, #3
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <CAN_Rx+0x26c>)
 80024e0:	2101      	movs	r1, #1
 80024e2:	54d1      	strb	r1, [r2, r3]
    VerifyCanRx (CanBus.Inbox[FIFO]);
 80024e4:	230f      	movs	r3, #15
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	490a      	ldr	r1, [pc, #40]	; (8002514 <CAN_Rx+0x268>)
 80024ec:	2010      	movs	r0, #16
 80024ee:	0013      	movs	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	189b      	adds	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	18cb      	adds	r3, r1, r3
 80024f8:	181b      	adds	r3, r3, r0
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	6859      	ldr	r1, [r3, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	f7ff fe16 	bl	8002130 <VerifyCanRx>
  }


}
 8002504:	46c0      	nop			; (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b005      	add	sp, #20
 800250a:	bd90      	pop	{r4, r7, pc}
 800250c:	20002f04 	.word	0x20002f04
 8002510:	40006400 	.word	0x40006400
 8002514:	200014a4 	.word	0x200014a4
 8002518:	200000fc 	.word	0x200000fc

0800251c <GetCanTxStatus>:
//
// Returns:   None
//
// Requirement(s):
//
void GetCanTxStatus(CAN_HandleTypeDef * hcan) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  // Get error counters from the ESR register
  TEC = (hcan->Instance->ESR & CAN_ESR_TEC_Msk) >> CAN_ESR_TEC_Pos;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	0c1b      	lsrs	r3, r3, #16
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <GetCanTxStatus+0x84>)
 8002530:	701a      	strb	r2, [r3, #0]
  // If the TEC counter has increased by 16, then temporarily stop messaging
  if (TEC >= (PrevTEC + 16)) {
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <GetCanTxStatus+0x84>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	001a      	movs	r2, r3
 8002538:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <GetCanTxStatus+0x88>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	3310      	adds	r3, #16
 800253e:	429a      	cmp	r2, r3
 8002540:	db03      	blt.n	800254a <GetCanTxStatus+0x2e>
    bCanReady = 0;
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <GetCanTxStatus+0x8c>)
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	e006      	b.n	8002558 <GetCanTxStatus+0x3c>
  }
  // If TEC Counter is decreasing, so should the PrevTEC as TEC
  // decreases on successful transmissions
  else {
    bCanReady = 1;
 800254a:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <GetCanTxStatus+0x8c>)
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
    PrevTEC = TEC;
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <GetCanTxStatus+0x84>)
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <GetCanTxStatus+0x88>)
 8002556:	701a      	strb	r2, [r3, #0]
  }
  // after CanSamplingDelay, try sending messages again
  if (bCanReady == 0) {
 8002558:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <GetCanTxStatus+0x8c>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d11a      	bne.n	8002596 <GetCanTxStatus+0x7a>
    if (CanWaitTimer > FlashConfiguration->CanSamplingDelay) {
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <GetCanTxStatus+0x90>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	0019      	movs	r1, r3
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <GetCanTxStatus+0x94>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	238e      	movs	r3, #142	; 0x8e
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	58d3      	ldr	r3, [r2, r3]
 8002570:	4299      	cmp	r1, r3
 8002572:	dd0a      	ble.n	800258a <GetCanTxStatus+0x6e>
      bCanReady = 1;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <GetCanTxStatus+0x8c>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
      CanWaitTimer = 0;
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <GetCanTxStatus+0x90>)
 800257c:	2200      	movs	r2, #0
 800257e:	801a      	strh	r2, [r3, #0]
      PrevTEC = TEC;
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <GetCanTxStatus+0x84>)
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <GetCanTxStatus+0x88>)
 8002586:	701a      	strb	r2, [r3, #0]
    }
    else {
      CanWaitTimer++;
    }
  }
}
 8002588:	e005      	b.n	8002596 <GetCanTxStatus+0x7a>
      CanWaitTimer++;
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <GetCanTxStatus+0x90>)
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <GetCanTxStatus+0x90>)
 8002594:	801a      	strh	r2, [r3, #0]
}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	46bd      	mov	sp, r7
 800259a:	b002      	add	sp, #8
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	20000102 	.word	0x20000102
 80025a4:	20000103 	.word	0x20000103
 80025a8:	20000106 	.word	0x20000106
 80025ac:	20000104 	.word	0x20000104
 80025b0:	20002f04 	.word	0x20002f04

080025b4 <ProcessCan>:
//
// Returns:   None
//
// Requirement(s):
//
void ProcessCan (void) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0

  ExecutionStart(EXECUTION_PROCESS_CAN);
 80025ba:	201a      	movs	r0, #26
 80025bc:	f002 f826 	bl	800460c <ExecutionStart>

  // Implement a time delay before sending or receiving messages
  // Note that if DIGIO1 is sending and receiving serial messages
  // then there is a delay if the CAN message timing matches the
  // time delay timing.
  if (CanStartupDelay >= FlashConfiguration->OutputStartupDelay) {
 80025c0:	4b98      	ldr	r3, [pc, #608]	; (8002824 <ProcessCan+0x270>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	5e9b      	ldrsh	r3, [r3, r2]
 80025c6:	0019      	movs	r1, r3
 80025c8:	4b97      	ldr	r3, [pc, #604]	; (8002828 <ProcessCan+0x274>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a97      	ldr	r2, [pc, #604]	; (800282c <ProcessCan+0x278>)
 80025ce:	589b      	ldr	r3, [r3, r2]
 80025d0:	4299      	cmp	r1, r3
 80025d2:	db03      	blt.n	80025dc <ProcessCan+0x28>
    bDelayComplete = 1;
 80025d4:	4b96      	ldr	r3, [pc, #600]	; (8002830 <ProcessCan+0x27c>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e00b      	b.n	80025f4 <ProcessCan+0x40>
  }
  else {
    bDelayComplete = 0;
 80025dc:	4b94      	ldr	r3, [pc, #592]	; (8002830 <ProcessCan+0x27c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
    CanStartupDelay++;
 80025e2:	4b90      	ldr	r3, [pc, #576]	; (8002824 <ProcessCan+0x270>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	5e9b      	ldrsh	r3, [r3, r2]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	b21a      	sxth	r2, r3
 80025f0:	4b8c      	ldr	r3, [pc, #560]	; (8002824 <ProcessCan+0x270>)
 80025f2:	801a      	strh	r2, [r3, #0]
  }

  if ((bDelayComplete != 0) && (FlashConfiguration->CanUse != 0)) {
 80025f4:	4b8e      	ldr	r3, [pc, #568]	; (8002830 <ProcessCan+0x27c>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d100      	bne.n	80025fe <ProcessCan+0x4a>
 80025fc:	e107      	b.n	800280e <ProcessCan+0x25a>
 80025fe:	4b8a      	ldr	r3, [pc, #552]	; (8002828 <ProcessCan+0x274>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a8c      	ldr	r2, [pc, #560]	; (8002834 <ProcessCan+0x280>)
 8002604:	5c9b      	ldrb	r3, [r3, r2]
 8002606:	2202      	movs	r2, #2
 8002608:	4013      	ands	r3, r2
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d100      	bne.n	8002612 <ProcessCan+0x5e>
 8002610:	e0fd      	b.n	800280e <ProcessCan+0x25a>

    // Routine increments the following timers (if enabled) every 10 mSec
    if (FlashConfiguration->CanMsgInTime[0] != 0){
 8002612:	4b85      	ldr	r3, [pc, #532]	; (8002828 <ProcessCan+0x274>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a88      	ldr	r2, [pc, #544]	; (8002838 <ProcessCan+0x284>)
 8002618:	589b      	ldr	r3, [r3, r2]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <ProcessCan+0x76>
      MsgNotReceivedTmr[0] += 10;
 800261e:	4b87      	ldr	r3, [pc, #540]	; (800283c <ProcessCan+0x288>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330a      	adds	r3, #10
 8002624:	001a      	movs	r2, r3
 8002626:	4b85      	ldr	r3, [pc, #532]	; (800283c <ProcessCan+0x288>)
 8002628:	601a      	str	r2, [r3, #0]
    }
    if (FlashConfiguration->CanMsgInTime[1] != 0){
 800262a:	4b7f      	ldr	r3, [pc, #508]	; (8002828 <ProcessCan+0x274>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	238c      	movs	r3, #140	; 0x8c
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	58d3      	ldr	r3, [r2, r3]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <ProcessCan+0x90>
      MsgNotReceivedTmr[1] += 10;
 8002638:	4b80      	ldr	r3, [pc, #512]	; (800283c <ProcessCan+0x288>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	330a      	adds	r3, #10
 800263e:	001a      	movs	r2, r3
 8002640:	4b7e      	ldr	r3, [pc, #504]	; (800283c <ProcessCan+0x288>)
 8002642:	605a      	str	r2, [r3, #4]
    }

    // Check that CAN Transmissions are working properly
    GetCanTxStatus(&hcan);
 8002644:	4b7e      	ldr	r3, [pc, #504]	; (8002840 <ProcessCan+0x28c>)
 8002646:	0018      	movs	r0, r3
 8002648:	f7ff ff68 	bl	800251c <GetCanTxStatus>

    // Transmit messages if enabled
    switch (CanBus.State) {
 800264c:	4b7d      	ldr	r3, [pc, #500]	; (8002844 <ProcessCan+0x290>)
 800264e:	2255      	movs	r2, #85	; 0x55
 8002650:	5c9b      	ldrb	r3, [r3, r2]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d01b      	beq.n	800268e <ProcessCan+0xda>
 8002656:	dc02      	bgt.n	800265e <ProcessCan+0xaa>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <ProcessCan+0xb4>
      else {
        CanBus.Status &= ~0x01u;
      }
      break;
    }
  }
 800265c:	e0db      	b.n	8002816 <ProcessCan+0x262>
    switch (CanBus.State) {
 800265e:	2b02      	cmp	r3, #2
 8002660:	d029      	beq.n	80026b6 <ProcessCan+0x102>
 8002662:	2b03      	cmp	r3, #3
 8002664:	d03a      	beq.n	80026dc <ProcessCan+0x128>
  }
 8002666:	e0d6      	b.n	8002816 <ProcessCan+0x262>
      if (FlashConfiguration->CanAddressOut[3] != 0) {
 8002668:	4b6f      	ldr	r3, [pc, #444]	; (8002828 <ProcessCan+0x274>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a76      	ldr	r2, [pc, #472]	; (8002848 <ProcessCan+0x294>)
 800266e:	589b      	ldr	r3, [r3, r2]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <ProcessCan+0xc8>
        Can_TxMultipacket(CAN_TX_3);
 8002674:	2003      	movs	r0, #3
 8002676:	f7ff f9d7 	bl	8001a28 <Can_TxMultipacket>
      break;
 800267a:	e0c7      	b.n	800280c <ProcessCan+0x258>
        CanBus.State++;
 800267c:	4b71      	ldr	r3, [pc, #452]	; (8002844 <ProcessCan+0x290>)
 800267e:	2255      	movs	r2, #85	; 0x55
 8002680:	5c9b      	ldrb	r3, [r3, r2]
 8002682:	3301      	adds	r3, #1
 8002684:	b2d9      	uxtb	r1, r3
 8002686:	4b6f      	ldr	r3, [pc, #444]	; (8002844 <ProcessCan+0x290>)
 8002688:	2255      	movs	r2, #85	; 0x55
 800268a:	5499      	strb	r1, [r3, r2]
      break;
 800268c:	e0be      	b.n	800280c <ProcessCan+0x258>
      if (FlashConfiguration->CanAddressOut[4] != 0) {
 800268e:	4b66      	ldr	r3, [pc, #408]	; (8002828 <ProcessCan+0x274>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	2388      	movs	r3, #136	; 0x88
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	58d3      	ldr	r3, [r2, r3]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <ProcessCan+0xf0>
        Can_TxMultipacket(CAN_TX_4);
 800269c:	2004      	movs	r0, #4
 800269e:	f7ff f9c3 	bl	8001a28 <Can_TxMultipacket>
      break;
 80026a2:	e0b3      	b.n	800280c <ProcessCan+0x258>
        CanBus.State++;
 80026a4:	4b67      	ldr	r3, [pc, #412]	; (8002844 <ProcessCan+0x290>)
 80026a6:	2255      	movs	r2, #85	; 0x55
 80026a8:	5c9b      	ldrb	r3, [r3, r2]
 80026aa:	3301      	adds	r3, #1
 80026ac:	b2d9      	uxtb	r1, r3
 80026ae:	4b65      	ldr	r3, [pc, #404]	; (8002844 <ProcessCan+0x290>)
 80026b0:	2255      	movs	r2, #85	; 0x55
 80026b2:	5499      	strb	r1, [r3, r2]
      break;
 80026b4:	e0aa      	b.n	800280c <ProcessCan+0x258>
      if (FlashConfiguration->CanAddressOut[5] != 0) {
 80026b6:	4b5c      	ldr	r3, [pc, #368]	; (8002828 <ProcessCan+0x274>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a64      	ldr	r2, [pc, #400]	; (800284c <ProcessCan+0x298>)
 80026bc:	589b      	ldr	r3, [r3, r2]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <ProcessCan+0x116>
        Can_TxMultipacket(CAN_TX_5);
 80026c2:	2005      	movs	r0, #5
 80026c4:	f7ff f9b0 	bl	8001a28 <Can_TxMultipacket>
      break;
 80026c8:	e0a0      	b.n	800280c <ProcessCan+0x258>
        CanBus.State++;
 80026ca:	4b5e      	ldr	r3, [pc, #376]	; (8002844 <ProcessCan+0x290>)
 80026cc:	2255      	movs	r2, #85	; 0x55
 80026ce:	5c9b      	ldrb	r3, [r3, r2]
 80026d0:	3301      	adds	r3, #1
 80026d2:	b2d9      	uxtb	r1, r3
 80026d4:	4b5b      	ldr	r3, [pc, #364]	; (8002844 <ProcessCan+0x290>)
 80026d6:	2255      	movs	r2, #85	; 0x55
 80026d8:	5499      	strb	r1, [r3, r2]
      break;
 80026da:	e097      	b.n	800280c <ProcessCan+0x258>
      for (uint8_t i = 0; i<CAN_TX_MODES-3; i++) {
 80026dc:	1dfb      	adds	r3, r7, #7
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	e034      	b.n	800274e <ProcessCan+0x19a>
        if (FlashConfiguration->CanAddressOut[i] != 0) {
 80026e4:	4b50      	ldr	r3, [pc, #320]	; (8002828 <ProcessCan+0x274>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	1dfa      	adds	r2, r7, #7
 80026ea:	7812      	ldrb	r2, [r2, #0]
 80026ec:	320d      	adds	r2, #13
 80026ee:	32ff      	adds	r2, #255	; 0xff
 80026f0:	0092      	lsls	r2, r2, #2
 80026f2:	58d3      	ldr	r3, [r2, r3]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d025      	beq.n	8002744 <ProcessCan+0x190>
          CanMsgOutTmr[i] += 10;
 80026f8:	1dfb      	adds	r3, r7, #7
 80026fa:	781a      	ldrb	r2, [r3, #0]
 80026fc:	4b54      	ldr	r3, [pc, #336]	; (8002850 <ProcessCan+0x29c>)
 80026fe:	0092      	lsls	r2, r2, #2
 8002700:	58d3      	ldr	r3, [r2, r3]
 8002702:	1dfa      	adds	r2, r7, #7
 8002704:	7812      	ldrb	r2, [r2, #0]
 8002706:	330a      	adds	r3, #10
 8002708:	0019      	movs	r1, r3
 800270a:	4b51      	ldr	r3, [pc, #324]	; (8002850 <ProcessCan+0x29c>)
 800270c:	0092      	lsls	r2, r2, #2
 800270e:	50d1      	str	r1, [r2, r3]
          if (CanMsgOutTmr[i] >= FlashConfiguration->CanMsgOutTime[i]) {
 8002710:	1dfb      	adds	r3, r7, #7
 8002712:	781a      	ldrb	r2, [r3, #0]
 8002714:	4b4e      	ldr	r3, [pc, #312]	; (8002850 <ProcessCan+0x29c>)
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	58d2      	ldr	r2, [r2, r3]
 800271a:	4b43      	ldr	r3, [pc, #268]	; (8002828 <ProcessCan+0x274>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	1df9      	adds	r1, r7, #7
 8002720:	7809      	ldrb	r1, [r1, #0]
 8002722:	3113      	adds	r1, #19
 8002724:	31ff      	adds	r1, #255	; 0xff
 8002726:	0089      	lsls	r1, r1, #2
 8002728:	58cb      	ldr	r3, [r1, r3]
 800272a:	429a      	cmp	r2, r3
 800272c:	d30a      	bcc.n	8002744 <ProcessCan+0x190>
            CAN_Tx(i);
 800272e:	1dfb      	adds	r3, r7, #7
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	0018      	movs	r0, r3
 8002734:	f7ff fa24 	bl	8001b80 <CAN_Tx>
            CanMsgOutTmr[i] = 0;
 8002738:	1dfb      	adds	r3, r7, #7
 800273a:	781a      	ldrb	r2, [r3, #0]
 800273c:	4b44      	ldr	r3, [pc, #272]	; (8002850 <ProcessCan+0x29c>)
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	2100      	movs	r1, #0
 8002742:	50d1      	str	r1, [r2, r3]
      for (uint8_t i = 0; i<CAN_TX_MODES-3; i++) {
 8002744:	1dfb      	adds	r3, r7, #7
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	1dfb      	adds	r3, r7, #7
 800274a:	3201      	adds	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	1dfb      	adds	r3, r7, #7
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d9c6      	bls.n	80026e4 <ProcessCan+0x130>
      if (FlashConfiguration->CanAddressIn[0] != 0) {
 8002756:	4b34      	ldr	r3, [pc, #208]	; (8002828 <ProcessCan+0x274>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a3e      	ldr	r2, [pc, #248]	; (8002854 <ProcessCan+0x2a0>)
 800275c:	589b      	ldr	r3, [r3, r2]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00f      	beq.n	8002782 <ProcessCan+0x1ce>
        while(hcan.Instance->RF0R != 0) {
 8002762:	e004      	b.n	800276e <ProcessCan+0x1ba>
          CAN_Rx(&hcan, 0);
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <ProcessCan+0x28c>)
 8002766:	2100      	movs	r1, #0
 8002768:	0018      	movs	r0, r3
 800276a:	f7ff fd9f 	bl	80022ac <CAN_Rx>
        while(hcan.Instance->RF0R != 0) {
 800276e:	4b34      	ldr	r3, [pc, #208]	; (8002840 <ProcessCan+0x28c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f5      	bne.n	8002764 <ProcessCan+0x1b0>
        VerifyCanRxTimes(0, 10);
 8002778:	210a      	movs	r1, #10
 800277a:	2000      	movs	r0, #0
 800277c:	f7ff fc54 	bl	8002028 <VerifyCanRxTimes>
 8002780:	e002      	b.n	8002788 <ProcessCan+0x1d4>
        MissedMsgIn[0] = 0;
 8002782:	4b35      	ldr	r3, [pc, #212]	; (8002858 <ProcessCan+0x2a4>)
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
      if (FlashConfiguration->CanAddressIn[1] != 0) {
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <ProcessCan+0x274>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	238b      	movs	r3, #139	; 0x8b
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	58d3      	ldr	r3, [r2, r3]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00f      	beq.n	80027b6 <ProcessCan+0x202>
        while(hcan.Instance->RF1R != 0) {
 8002796:	e004      	b.n	80027a2 <ProcessCan+0x1ee>
          CAN_Rx(&hcan, 1);
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <ProcessCan+0x28c>)
 800279a:	2101      	movs	r1, #1
 800279c:	0018      	movs	r0, r3
 800279e:	f7ff fd85 	bl	80022ac <CAN_Rx>
        while(hcan.Instance->RF1R != 0) {
 80027a2:	4b27      	ldr	r3, [pc, #156]	; (8002840 <ProcessCan+0x28c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f5      	bne.n	8002798 <ProcessCan+0x1e4>
        VerifyCanRxTimes(1, 10);
 80027ac:	210a      	movs	r1, #10
 80027ae:	2001      	movs	r0, #1
 80027b0:	f7ff fc3a 	bl	8002028 <VerifyCanRxTimes>
 80027b4:	e002      	b.n	80027bc <ProcessCan+0x208>
        MissedMsgIn[1] = 0;
 80027b6:	4b28      	ldr	r3, [pc, #160]	; (8002858 <ProcessCan+0x2a4>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	705a      	strb	r2, [r3, #1]
      if ((MissedMsgIn[0] >= MAX_MSG_MISSED) || (MissedMsgIn[1] >= MAX_MSG_MISSED)) {
 80027bc:	4b26      	ldr	r3, [pc, #152]	; (8002858 <ProcessCan+0x2a4>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b63      	cmp	r3, #99	; 0x63
 80027c2:	d803      	bhi.n	80027cc <ProcessCan+0x218>
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <ProcessCan+0x2a4>)
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	2b63      	cmp	r3, #99	; 0x63
 80027ca:	d914      	bls.n	80027f6 <ProcessCan+0x242>
        CanBus.Status |= 0x01u;
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <ProcessCan+0x290>)
 80027ce:	2256      	movs	r2, #86	; 0x56
 80027d0:	5c9b      	ldrb	r3, [r3, r2]
 80027d2:	2201      	movs	r2, #1
 80027d4:	4313      	orrs	r3, r2
 80027d6:	b2d9      	uxtb	r1, r3
 80027d8:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <ProcessCan+0x290>)
 80027da:	2256      	movs	r2, #86	; 0x56
 80027dc:	5499      	strb	r1, [r3, r2]
        if (MissedMsgIn[0] >= MAX_MSG_MISSED) {
 80027de:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <ProcessCan+0x2a4>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b63      	cmp	r3, #99	; 0x63
 80027e4:	d903      	bls.n	80027ee <ProcessCan+0x23a>
          MissedMsgIn[0] = MAX_MSG_MISSED;
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <ProcessCan+0x2a4>)
 80027e8:	2264      	movs	r2, #100	; 0x64
 80027ea:	701a      	strb	r2, [r3, #0]
        if (MissedMsgIn[0] >= MAX_MSG_MISSED) {
 80027ec:	e00d      	b.n	800280a <ProcessCan+0x256>
          MissedMsgIn[1] = MAX_MSG_MISSED;
 80027ee:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <ProcessCan+0x2a4>)
 80027f0:	2264      	movs	r2, #100	; 0x64
 80027f2:	705a      	strb	r2, [r3, #1]
        if (MissedMsgIn[0] >= MAX_MSG_MISSED) {
 80027f4:	e009      	b.n	800280a <ProcessCan+0x256>
        CanBus.Status &= ~0x01u;
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <ProcessCan+0x290>)
 80027f8:	2256      	movs	r2, #86	; 0x56
 80027fa:	5c9b      	ldrb	r3, [r3, r2]
 80027fc:	2201      	movs	r2, #1
 80027fe:	4393      	bics	r3, r2
 8002800:	b2d9      	uxtb	r1, r3
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <ProcessCan+0x290>)
 8002804:	2256      	movs	r2, #86	; 0x56
 8002806:	5499      	strb	r1, [r3, r2]
      break;
 8002808:	e7ff      	b.n	800280a <ProcessCan+0x256>
 800280a:	46c0      	nop			; (mov r8, r8)
  }
 800280c:	e003      	b.n	8002816 <ProcessCan+0x262>
  else {
    CanBus.Status = 0;
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <ProcessCan+0x290>)
 8002810:	2256      	movs	r2, #86	; 0x56
 8002812:	2100      	movs	r1, #0
 8002814:	5499      	strb	r1, [r3, r2]
  }

  ExecutionEnd(EXECUTION_PROCESS_CAN);
 8002816:	201a      	movs	r0, #26
 8002818:	f001 ff12 	bl	8004640 <ExecutionEnd>
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b002      	add	sp, #8
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000100 	.word	0x20000100
 8002828:	20002f04 	.word	0x20002f04
 800282c:	0000046c 	.word	0x0000046c
 8002830:	200000fe 	.word	0x200000fe
 8002834:	00000225 	.word	0x00000225
 8002838:	0000045c 	.word	0x0000045c
 800283c:	200000f0 	.word	0x200000f0
 8002840:	20001be0 	.word	0x20001be0
 8002844:	200014a4 	.word	0x200014a4
 8002848:	0000043c 	.word	0x0000043c
 800284c:	00000444 	.word	0x00000444
 8002850:	200000e4 	.word	0x200000e4
 8002854:	00000454 	.word	0x00000454
 8002858:	200000f8 	.word	0x200000f8

0800285c <STM32_CAN_Init>:
//
// Returns:   Status - HAL_OK: No error
//
// Requirement(s):
//
enumHAL_StatusTypeDef STM32_CAN_Init(CAN_HandleTypeDef * hcan) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

	/* Init the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspInit(hcan);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0018      	movs	r0, r3
 8002868:	f7fe fda4 	bl	80013b4 <HAL_CAN_MspInit>


    /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2102      	movs	r1, #2
 8002878:	438a      	bics	r2, r1
 800287a:	601a      	str	r2, [r3, #0]


    /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U) {}
 800287c:	46c0      	nop			; (mov r8, r8)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	4013      	ands	r3, r2
 8002888:	d1f9      	bne.n	800287e <STM32_CAN_Init+0x22>

    /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]

    /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U) {}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	4013      	ands	r3, r2
 80028a6:	d0f9      	beq.n	800289c <STM32_CAN_Init+0x40>

    /* Set the time triggered communication mode */
  if (hcan->Init.TTCM == ENABLE) {
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d108      	bne.n	80028c2 <STM32_CAN_Init+0x66>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e007      	b.n	80028d2 <STM32_CAN_Init+0x76>
  }
  else {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	438a      	bics	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
  }
    /* Set the automatic bus-off management */
  if (hcan->Init.ABOM == ENABLE) {
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d108      	bne.n	80028ec <STM32_CAN_Init+0x90>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2140      	movs	r1, #64	; 0x40
 80028e6:	430a      	orrs	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e007      	b.n	80028fc <STM32_CAN_Init+0xa0>
  }
  else {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2140      	movs	r1, #64	; 0x40
 80028f8:	438a      	bics	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
  }

    /* Set the automatic wake-up mode */
  if (hcan->Init.AWUM == ENABLE) {
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d108      	bne.n	8002916 <STM32_CAN_Init+0xba>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2120      	movs	r1, #32
 8002910:	430a      	orrs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	e007      	b.n	8002926 <STM32_CAN_Init+0xca>
  }
  else {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2120      	movs	r1, #32
 8002922:	438a      	bics	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
  }

    /* Set the automatic retransmission */
  if (hcan->Init.NART == ENABLE) {
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	2b01      	cmp	r3, #1
 800292c:	d108      	bne.n	8002940 <STM32_CAN_Init+0xe4>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2110      	movs	r1, #16
 800293a:	438a      	bics	r2, r1
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e007      	b.n	8002950 <STM32_CAN_Init+0xf4>
  }
  else {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2110      	movs	r1, #16
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]
  }

    /* Set the receive FIFO not locked mode */
  if (hcan->Init.RFLM == ENABLE) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	2b01      	cmp	r3, #1
 8002956:	d108      	bne.n	800296a <STM32_CAN_Init+0x10e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2108      	movs	r1, #8
 8002964:	430a      	orrs	r2, r1
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e007      	b.n	800297a <STM32_CAN_Init+0x11e>
  }
  else {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2108      	movs	r1, #8
 8002976:	438a      	bics	r2, r1
 8002978:	601a      	str	r2, [r3, #0]
  }

    /* Set the transmit FIFO priority */
  if (hcan->Init.TXFP == ENABLE) {
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	2b01      	cmp	r3, #1
 8002980:	d108      	bne.n	8002994 <STM32_CAN_Init+0x138>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2104      	movs	r1, #4
 800298e:	430a      	orrs	r2, r1
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e007      	b.n	80029a4 <STM32_CAN_Init+0x148>
  }
  else {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2104      	movs	r1, #4
 80029a0:	438a      	bics	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]
  }

    /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode | hcan->Init.SJW  | hcan->Init.BS1 | hcan->Init.BS2 | (hcan->Init.Prescaler - 1U)));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	0011      	movs	r1, r2
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	1e5a      	subs	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	61da      	str	r2, [r3, #28]
   /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	223d      	movs	r2, #61	; 0x3d
 80029d4:	2101      	movs	r1, #1
 80029d6:	5499      	strb	r1, [r3, r2]

    /* Return function status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b002      	add	sp, #8
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <MX_CAN_Init>:
//
// Returns:   None
//
// Requirement(s):
//
void MX_CAN_Init(void) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0

  if ((bFlashConfigurationValid != 0) && FlashConfiguration->CanUse != 0) {
 80029e8:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <MX_CAN_Init+0xc4>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d057      	beq.n	8002aa0 <MX_CAN_Init+0xbc>
 80029f0:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <MX_CAN_Init+0xc8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a2e      	ldr	r2, [pc, #184]	; (8002ab0 <MX_CAN_Init+0xcc>)
 80029f6:	5c9b      	ldrb	r3, [r3, r2]
 80029f8:	2202      	movs	r2, #2
 80029fa:	4013      	ands	r3, r2
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d04e      	beq.n	8002aa0 <MX_CAN_Init+0xbc>
    // Setup can initialization parameters
    hcan.Instance = CAN;
 8002a02:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a04:	4a2c      	ldr	r2, [pc, #176]	; (8002ab8 <MX_CAN_Init+0xd4>)
 8002a06:	601a      	str	r2, [r3, #0]
    if (FlashConfiguration->CanPrescaler != 0) {
 8002a08:	4b28      	ldr	r3, [pc, #160]	; (8002aac <MX_CAN_Init+0xc8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2b      	ldr	r2, [pc, #172]	; (8002abc <MX_CAN_Init+0xd8>)
 8002a0e:	5a9b      	ldrh	r3, [r3, r2]
 8002a10:	4a2b      	ldr	r2, [pc, #172]	; (8002ac0 <MX_CAN_Init+0xdc>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <MX_CAN_Init+0x4c>
      hcan.Init.Prescaler = FlashConfiguration->CanPrescaler;
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <MX_CAN_Init+0xc8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a27      	ldr	r2, [pc, #156]	; (8002abc <MX_CAN_Init+0xd8>)
 8002a20:	5a9b      	ldrh	r3, [r3, r2]
 8002a22:	04db      	lsls	r3, r3, #19
 8002a24:	0ddb      	lsrs	r3, r3, #23
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	001a      	movs	r2, r3
 8002a2a:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	e002      	b.n	8002a36 <MX_CAN_Init+0x52>
    }
    // As a default, set the baud rate to 1000
    else {
      hcan.Init.Prescaler = 3;
 8002a30:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a32:	2203      	movs	r2, #3
 8002a34:	605a      	str	r2, [r3, #4]
    }
    hcan.Init.Mode = CAN_MODE_NORMAL;
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
    hcan.Init.SJW = CAN_SJW_1TQ;
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	60da      	str	r2, [r3, #12]
    hcan.Init.BS1 = CAN_BS1_13TQ;
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a44:	22c0      	movs	r2, #192	; 0xc0
 8002a46:	0312      	lsls	r2, r2, #12
 8002a48:	611a      	str	r2, [r3, #16]
    hcan.Init.BS2 = CAN_BS2_2TQ;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	0352      	lsls	r2, r2, #13
 8002a50:	615a      	str	r2, [r3, #20]
    hcan.Init.TTCM = DISABLE;
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	619a      	str	r2, [r3, #24]
    hcan.Init.ABOM = DISABLE;
 8002a58:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	61da      	str	r2, [r3, #28]
    hcan.Init.AWUM = DISABLE;
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	621a      	str	r2, [r3, #32]
    hcan.Init.NART = ENABLE;
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24
    hcan.Init.RFLM = DISABLE;
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
    hcan.Init.TXFP = DISABLE;
 8002a70:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c
    STM32_CAN_Init(&hcan);
 8002a76:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7ff feef 	bl	800285c <STM32_CAN_Init>

    CAN_Filter_Init();
 8002a7e:	f7fe fe89 	bl	8001794 <CAN_Filter_Init>

    // Exit Initialization mode
    CLEAR_BIT(hcan.Instance->MCR, CAN_MCR_INRQ);
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	438a      	bics	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
    while((hcan.Instance->MSR & CAN_MSR_INAK) != 0U) {}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <MX_CAN_Init+0xd0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d1f9      	bne.n	8002a94 <MX_CAN_Init+0xb0>
  }
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	20002cf6 	.word	0x20002cf6
 8002aac:	20002f04 	.word	0x20002f04
 8002ab0:	00000225 	.word	0x00000225
 8002ab4:	20001be0 	.word	0x20001be0
 8002ab8:	40006400 	.word	0x40006400
 8002abc:	00000226 	.word	0x00000226
 8002ac0:	00001ff0 	.word	0x00001ff0

08002ac4 <CalcCrc16>:
// Params:  Val - 8-bit value
//          Crc1 - Current CRC16 value
//
// Returns: New Crc16 value
//
uint16_t CalcCrc16(uint8_t Val, uint16_t Crc1) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	0002      	movs	r2, r0
 8002acc:	1dfb      	adds	r3, r7, #7
 8002ace:	701a      	strb	r2, [r3, #0]
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	1c0a      	adds	r2, r1, #0
 8002ad4:	801a      	strh	r2, [r3, #0]

  uint16_t TableValue;

  TableValue = CrcTable[(Crc1 >> 8) ^ Val];
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	001a      	movs	r2, r3
 8002ae0:	1dfb      	adds	r3, r7, #7
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	405a      	eors	r2, r3
 8002ae6:	0011      	movs	r1, r2
 8002ae8:	200e      	movs	r0, #14
 8002aea:	183b      	adds	r3, r7, r0
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <CalcCrc16+0x54>)
 8002aee:	0049      	lsls	r1, r1, #1
 8002af0:	5a8a      	ldrh	r2, [r1, r2]
 8002af2:	801a      	strh	r2, [r3, #0]
  Crc1 = (Crc1 << 8) ^ TableValue;
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	b21a      	sxth	r2, r3
 8002afc:	183b      	adds	r3, r7, r0
 8002afe:	2100      	movs	r1, #0
 8002b00:	5e5b      	ldrsh	r3, [r3, r1]
 8002b02:	4053      	eors	r3, r2
 8002b04:	b21a      	sxth	r2, r3
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	801a      	strh	r2, [r3, #0]
  return Crc1;
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	881b      	ldrh	r3, [r3, #0]
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b004      	add	sp, #16
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	0800c788 	.word	0x0800c788

08002b1c <CalcCrc16Array>:
// Params:  Buffer - Address to Buffer
//          Length - Length of Buffer
//
// Returns  CRC16
//
uint16_t CalcCrc16Array(uint8_t *Buffer, int32_t Length) {
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]

  int32_t i;
  uint16_t Crc16;

  Crc16 = 0;
 8002b26:	230a      	movs	r3, #10
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < Length; i++) {
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e01a      	b.n	8002b6a <CalcCrc16Array+0x4e>
    Crc16 = (Crc16 << 8) ^ CrcTable[(Crc16 >> 8) ^ Buffer[i]];
 8002b34:	240a      	movs	r4, #10
 8002b36:	193b      	adds	r3, r7, r4
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	b21a      	sxth	r2, r3
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	0018      	movs	r0, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	18cb      	adds	r3, r1, r3
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	0001      	movs	r1, r0
 8002b52:	4059      	eors	r1, r3
 8002b54:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <CalcCrc16Array+0x64>)
 8002b56:	0049      	lsls	r1, r1, #1
 8002b58:	5acb      	ldrh	r3, [r1, r3]
 8002b5a:	b21b      	sxth	r3, r3
 8002b5c:	4053      	eors	r3, r2
 8002b5e:	b21a      	sxth	r2, r3
 8002b60:	193b      	adds	r3, r7, r4
 8002b62:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < Length; i++) {
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3301      	adds	r3, #1
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	dbe0      	blt.n	8002b34 <CalcCrc16Array+0x18>
  }
  return Crc16;
 8002b72:	230a      	movs	r3, #10
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	881b      	ldrh	r3, [r3, #0]
}
 8002b78:	0018      	movs	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b005      	add	sp, #20
 8002b7e:	bd90      	pop	{r4, r7, pc}
 8002b80:	0800c788 	.word	0x0800c788

08002b84 <CalcCrc8>:
//
// Returns:   Crc8 - the calculated CRC8 value for the data array
//
// Requirement(s):
//
uint8_t CalcCrc8(uint8_t *data, uint8_t Length) {
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	000a      	movs	r2, r1
 8002b8e:	1cfb      	adds	r3, r7, #3
 8002b90:	701a      	strb	r2, [r3, #0]
  // First put together polynomial
  uint8_t Crc8; // Initial value is 0xFF
  uint8_t i;

  Crc8 = 0xFF;
 8002b92:	230f      	movs	r3, #15
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	22ff      	movs	r2, #255	; 0xff
 8002b98:	701a      	strb	r2, [r3, #0]

  for (i = 0; i < Length; i++) {
 8002b9a:	230e      	movs	r3, #14
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e014      	b.n	8002bce <CalcCrc8+0x4a>
    Crc8 = CANcrc8Table[Crc8 ^ data[i]];
 8002ba4:	200e      	movs	r0, #14
 8002ba6:	183b      	adds	r3, r7, r0
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	18d3      	adds	r3, r2, r3
 8002bae:	781a      	ldrb	r2, [r3, #0]
 8002bb0:	240f      	movs	r4, #15
 8002bb2:	193b      	adds	r3, r7, r4
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	4053      	eors	r3, r2
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	0019      	movs	r1, r3
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	4a0b      	ldr	r2, [pc, #44]	; (8002bec <CalcCrc8+0x68>)
 8002bc0:	5c52      	ldrb	r2, [r2, r1]
 8002bc2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Length; i++) {
 8002bc4:	183b      	adds	r3, r7, r0
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	183b      	adds	r3, r7, r0
 8002bca:	3201      	adds	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	230e      	movs	r3, #14
 8002bd0:	18fa      	adds	r2, r7, r3
 8002bd2:	1cfb      	adds	r3, r7, #3
 8002bd4:	7812      	ldrb	r2, [r2, #0]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d3e3      	bcc.n	8002ba4 <CalcCrc8+0x20>
  }
  return Crc8;
 8002bdc:	230f      	movs	r3, #15
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	781b      	ldrb	r3, [r3, #0]
}
 8002be2:	0018      	movs	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b005      	add	sp, #20
 8002be8:	bd90      	pop	{r4, r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	0800c988 	.word	0x0800c988

08002bf0 <ProcessLogDefaultProfile>:
//                          Local Variables
// ------------------------------------------------------------------------
static uint8_t TmpBuffer[2304]; // 2048+256 = 18 pages of 128 bytes
// ------------------------------------------------------------------------

void ProcessLogDefaultProfile(void) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0

  static uint8_t State, i;
  static uint16_t Idx;

  switch(State) {
 8002bf4:	4b54      	ldr	r3, [pc, #336]	; (8002d48 <ProcessLogDefaultProfile+0x158>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d059      	beq.n	8002cb0 <ProcessLogDefaultProfile+0xc0>
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d100      	bne.n	8002c02 <ProcessLogDefaultProfile+0x12>
 8002c00:	e07a      	b.n	8002cf8 <ProcessLogDefaultProfile+0x108>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d000      	beq.n	8002c08 <ProcessLogDefaultProfile+0x18>
        State = 1;
      }
    }
    break;
  }
}
 8002c06:	e09b      	b.n	8002d40 <ProcessLogDefaultProfile+0x150>
    if ((bLogDefaultProfile != 0) && (I2C2Control.Mode == I2C_MODE_IDLE)) {
 8002c08:	4b50      	ldr	r3, [pc, #320]	; (8002d4c <ProcessLogDefaultProfile+0x15c>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d100      	bne.n	8002c12 <ProcessLogDefaultProfile+0x22>
 8002c10:	e091      	b.n	8002d36 <ProcessLogDefaultProfile+0x146>
 8002c12:	4b4f      	ldr	r3, [pc, #316]	; (8002d50 <ProcessLogDefaultProfile+0x160>)
 8002c14:	7a5b      	ldrb	r3, [r3, #9]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d000      	beq.n	8002c1c <ProcessLogDefaultProfile+0x2c>
 8002c1a:	e08c      	b.n	8002d36 <ProcessLogDefaultProfile+0x146>
      TmpBuffer[0] = 0xAA;
 8002c1c:	4b4d      	ldr	r3, [pc, #308]	; (8002d54 <ProcessLogDefaultProfile+0x164>)
 8002c1e:	22aa      	movs	r2, #170	; 0xaa
 8002c20:	701a      	strb	r2, [r3, #0]
      TmpBuffer[1] = 0xAA;
 8002c22:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <ProcessLogDefaultProfile+0x164>)
 8002c24:	22aa      	movs	r2, #170	; 0xaa
 8002c26:	705a      	strb	r2, [r3, #1]
      TmpBuffer[2] = 0xAA;
 8002c28:	4b4a      	ldr	r3, [pc, #296]	; (8002d54 <ProcessLogDefaultProfile+0x164>)
 8002c2a:	22aa      	movs	r2, #170	; 0xaa
 8002c2c:	709a      	strb	r2, [r3, #2]
      TmpBuffer[3] = 0xAA;
 8002c2e:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <ProcessLogDefaultProfile+0x164>)
 8002c30:	22aa      	movs	r2, #170	; 0xaa
 8002c32:	70da      	strb	r2, [r3, #3]
      TmpBuffer[4] = 0xAA;
 8002c34:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <ProcessLogDefaultProfile+0x164>)
 8002c36:	22aa      	movs	r2, #170	; 0xaa
 8002c38:	711a      	strb	r2, [r3, #4]
      TmpBuffer[5] = 0x00;
 8002c3a:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <ProcessLogDefaultProfile+0x164>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	715a      	strb	r2, [r3, #5]
      memmove(&TmpBuffer[6], FlashConfiguration, sizeof(stFlashConfiguration));
 8002c40:	4b45      	ldr	r3, [pc, #276]	; (8002d58 <ProcessLogDefaultProfile+0x168>)
 8002c42:	6819      	ldr	r1, [r3, #0]
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	011a      	lsls	r2, r3, #4
 8002c48:	4b44      	ldr	r3, [pc, #272]	; (8002d5c <ProcessLogDefaultProfile+0x16c>)
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f009 fd5f 	bl	800c70e <memmove>
      Idx = sizeof(stFlashConfiguration) + 6;
 8002c50:	4b43      	ldr	r3, [pc, #268]	; (8002d60 <ProcessLogDefaultProfile+0x170>)
 8002c52:	4a44      	ldr	r2, [pc, #272]	; (8002d64 <ProcessLogDefaultProfile+0x174>)
 8002c54:	801a      	strh	r2, [r3, #0]
      TmpBuffer[Idx++] = 0xBB;
 8002c56:	4b42      	ldr	r3, [pc, #264]	; (8002d60 <ProcessLogDefaultProfile+0x170>)
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	b291      	uxth	r1, r2
 8002c5e:	4a40      	ldr	r2, [pc, #256]	; (8002d60 <ProcessLogDefaultProfile+0x170>)
 8002c60:	8011      	strh	r1, [r2, #0]
 8002c62:	001a      	movs	r2, r3
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <ProcessLogDefaultProfile+0x164>)
 8002c66:	21bb      	movs	r1, #187	; 0xbb
 8002c68:	5499      	strb	r1, [r3, r2]
      TmpBuffer[Idx++] = 0xBB;
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	; (8002d60 <ProcessLogDefaultProfile+0x170>)
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	b291      	uxth	r1, r2
 8002c72:	4a3b      	ldr	r2, [pc, #236]	; (8002d60 <ProcessLogDefaultProfile+0x170>)
 8002c74:	8011      	strh	r1, [r2, #0]
 8002c76:	001a      	movs	r2, r3
 8002c78:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <ProcessLogDefaultProfile+0x164>)
 8002c7a:	21bb      	movs	r1, #187	; 0xbb
 8002c7c:	5499      	strb	r1, [r3, r2]
      memset(&TmpBuffer[Idx], 0xFF, sizeof(TmpBuffer) - Idx);
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <ProcessLogDefaultProfile+0x170>)
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	001a      	movs	r2, r3
 8002c84:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <ProcessLogDefaultProfile+0x164>)
 8002c86:	18d0      	adds	r0, r2, r3
 8002c88:	4b35      	ldr	r3, [pc, #212]	; (8002d60 <ProcessLogDefaultProfile+0x170>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	2390      	movs	r3, #144	; 0x90
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	001a      	movs	r2, r3
 8002c96:	21ff      	movs	r1, #255	; 0xff
 8002c98:	f009 fd4c 	bl	800c734 <memset>
      i = 0; // make sure message counter is reset
 8002c9c:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <ProcessLogDefaultProfile+0x178>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
      State++;
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <ProcessLogDefaultProfile+0x158>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <ProcessLogDefaultProfile+0x158>)
 8002cac:	701a      	strb	r2, [r3, #0]
    break;
 8002cae:	e042      	b.n	8002d36 <ProcessLogDefaultProfile+0x146>
    if ((bLogDefaultProfile != 0)) {
 8002cb0:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <ProcessLogDefaultProfile+0x15c>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d040      	beq.n	8002d3a <ProcessLogDefaultProfile+0x14a>
      I2C2Control.Address = EEPROM_EVENT_DATA_OFFSET + ((i + 238) * 128);
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <ProcessLogDefaultProfile+0x178>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	33ee      	adds	r3, #238	; 0xee
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	01db      	lsls	r3, r3, #7
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <ProcessLogDefaultProfile+0x160>)
 8002cc6:	809a      	strh	r2, [r3, #4]
      Idx = i*128;
 8002cc8:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <ProcessLogDefaultProfile+0x178>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	01db      	lsls	r3, r3, #7
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <ProcessLogDefaultProfile+0x170>)
 8002cd4:	801a      	strh	r2, [r3, #0]
      I2C2Control.Buffer = &TmpBuffer[Idx];
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <ProcessLogDefaultProfile+0x170>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	001a      	movs	r2, r3
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <ProcessLogDefaultProfile+0x164>)
 8002cde:	18d2      	adds	r2, r2, r3
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <ProcessLogDefaultProfile+0x160>)
 8002ce2:	601a      	str	r2, [r3, #0]
      I2C2Control.Length = 128;
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <ProcessLogDefaultProfile+0x160>)
 8002ce6:	2280      	movs	r2, #128	; 0x80
 8002ce8:	80da      	strh	r2, [r3, #6]
      I2C2Control.Mode = I2C_MODE_WRITE_EEPROM;
 8002cea:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <ProcessLogDefaultProfile+0x160>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	725a      	strb	r2, [r3, #9]
      State = 2;
 8002cf0:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <ProcessLogDefaultProfile+0x158>)
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	701a      	strb	r2, [r3, #0]
    break;
 8002cf6:	e020      	b.n	8002d3a <ProcessLogDefaultProfile+0x14a>
    if (I2C2Control.Mode == I2C_MODE_DONE) {
 8002cf8:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <ProcessLogDefaultProfile+0x160>)
 8002cfa:	7a5b      	ldrb	r3, [r3, #9]
 8002cfc:	2b07      	cmp	r3, #7
 8002cfe:	d11e      	bne.n	8002d3e <ProcessLogDefaultProfile+0x14e>
      i++;
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <ProcessLogDefaultProfile+0x178>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <ProcessLogDefaultProfile+0x178>)
 8002d0a:	701a      	strb	r2, [r3, #0]
      if (i >= 18) {
 8002d0c:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <ProcessLogDefaultProfile+0x178>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b11      	cmp	r3, #17
 8002d12:	d90c      	bls.n	8002d2e <ProcessLogDefaultProfile+0x13e>
        bLogDefaultProfile = 0;
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <ProcessLogDefaultProfile+0x15c>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
        I2C2Control.Mode = I2C_MODE_IDLE;
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <ProcessLogDefaultProfile+0x160>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	725a      	strb	r2, [r3, #9]
        bGetDefaultProfile = 1; // Retrieve profile anytime a new one has attempted to load. That way, if corrupt, we have a valid one
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <ProcessLogDefaultProfile+0x17c>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
        State = 0;
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <ProcessLogDefaultProfile+0x158>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
    break;
 8002d2c:	e007      	b.n	8002d3e <ProcessLogDefaultProfile+0x14e>
        State = 1;
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <ProcessLogDefaultProfile+0x158>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
    break;
 8002d34:	e003      	b.n	8002d3e <ProcessLogDefaultProfile+0x14e>
    break;
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	e002      	b.n	8002d40 <ProcessLogDefaultProfile+0x150>
    break;
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	e000      	b.n	8002d40 <ProcessLogDefaultProfile+0x150>
    break;
 8002d3e:	46c0      	nop			; (mov r8, r8)
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	20000a0c 	.word	0x20000a0c
 8002d4c:	200037b4 	.word	0x200037b4
 8002d50:	20001c24 	.word	0x20001c24
 8002d54:	2000010c 	.word	0x2000010c
 8002d58:	20002f04 	.word	0x20002f04
 8002d5c:	20000112 	.word	0x20000112
 8002d60:	20000a0e 	.word	0x20000a0e
 8002d64:	00000806 	.word	0x00000806
 8002d68:	20000a10 	.word	0x20000a10
 8002d6c:	20001584 	.word	0x20001584

08002d70 <ProcessDefaultProfile>:

void ProcessDefaultProfile(void) {
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
  uint8_t j, VerifyResults;
  static int8_t SyncCount = 0;
  uint32_t *FirmwarePointer;

  // Load in Flash Configuration Profile
  if (bFlashConfigurationValid == 0 && bGetDefaultProfile != 0 && I2C2Control.Mode == I2C_MODE_IDLE) {
 8002d76:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <ProcessDefaultProfile+0xa8>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d138      	bne.n	8002df0 <ProcessDefaultProfile+0x80>
 8002d7e:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <ProcessDefaultProfile+0xac>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d034      	beq.n	8002df0 <ProcessDefaultProfile+0x80>
 8002d86:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <ProcessDefaultProfile+0xb0>)
 8002d88:	7a5b      	ldrb	r3, [r3, #9]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d130      	bne.n	8002df0 <ProcessDefaultProfile+0x80>
    for (j = 0; j< 18; j++) {
 8002d8e:	1dfb      	adds	r3, r7, #7
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e01f      	b.n	8002dd6 <ProcessDefaultProfile+0x66>
      I2C2Control.Address = EEPROM_EVENT_DATA_OFFSET + ((238 + j) * 128); // read  128 bytes from EEPROM at a time
 8002d96:	1dfb      	adds	r3, r7, #7
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	33ee      	adds	r3, #238	; 0xee
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	01db      	lsls	r3, r3, #7
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	4b1f      	ldr	r3, [pc, #124]	; (8002e20 <ProcessDefaultProfile+0xb0>)
 8002da4:	809a      	strh	r2, [r3, #4]
      I2C2Control.Length = 128;
 8002da6:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <ProcessDefaultProfile+0xb0>)
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	80da      	strh	r2, [r3, #6]
      I2C2Control.Buffer = &TmpBuffer[128 * j];
 8002dac:	1dfb      	adds	r3, r7, #7
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	01da      	lsls	r2, r3, #7
 8002db2:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <ProcessDefaultProfile+0xb4>)
 8002db4:	18d2      	adds	r2, r2, r3
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <ProcessDefaultProfile+0xb0>)
 8002db8:	601a      	str	r2, [r3, #0]
      I2C2Control.Mode = I2C_MODE_READ_EEPROM;
 8002dba:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <ProcessDefaultProfile+0xb0>)
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	725a      	strb	r2, [r3, #9]
      do {
        ProcessI2C2();
 8002dc0:	f003 f9e0 	bl	8006184 <ProcessI2C2>
      } while (I2C2Control.Mode != I2C_MODE_DONE);
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <ProcessDefaultProfile+0xb0>)
 8002dc6:	7a5b      	ldrb	r3, [r3, #9]
 8002dc8:	2b07      	cmp	r3, #7
 8002dca:	d1f9      	bne.n	8002dc0 <ProcessDefaultProfile+0x50>
    for (j = 0; j< 18; j++) {
 8002dcc:	1dfb      	adds	r3, r7, #7
 8002dce:	781a      	ldrb	r2, [r3, #0]
 8002dd0:	1dfb      	adds	r3, r7, #7
 8002dd2:	3201      	adds	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	1dfb      	adds	r3, r7, #7
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b11      	cmp	r3, #17
 8002ddc:	d9db      	bls.n	8002d96 <ProcessDefaultProfile+0x26>
    }
    I2C2Control.Mode = I2C_MODE_IDLE;
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <ProcessDefaultProfile+0xb0>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	725a      	strb	r2, [r3, #9]
    bGetDefaultProfile = 0;
 8002de4:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <ProcessDefaultProfile+0xac>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
    bDefaultProfileLoaded = 0;
 8002dea:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <ProcessDefaultProfile+0xb8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]

  //
  // Load in default profile. Try first to get it from the EEPROM but if the backup
  // is bad (EEPROM) then use hard coded backup
  //
  if (bFlashConfigurationValid == 0 && bDefaultProfileLoaded == 0 && bGetDefaultProfile == 0) {
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <ProcessDefaultProfile+0xa8>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d000      	beq.n	8002dfa <ProcessDefaultProfile+0x8a>
 8002df8:	e2a3      	b.n	8003342 <ProcessDefaultProfile+0x5d2>
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <ProcessDefaultProfile+0xb8>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d000      	beq.n	8002e04 <ProcessDefaultProfile+0x94>
 8002e02:	e29e      	b.n	8003342 <ProcessDefaultProfile+0x5d2>
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <ProcessDefaultProfile+0xac>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d000      	beq.n	8002e0e <ProcessDefaultProfile+0x9e>
 8002e0c:	e299      	b.n	8003342 <ProcessDefaultProfile+0x5d2>
    // Check if EEPROM data is valid
    for (j = 0; j < 5; j++) {
 8002e0e:	1dfb      	adds	r3, r7, #7
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e01e      	b.n	8002e54 <ProcessDefaultProfile+0xe4>
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	20002cf6 	.word	0x20002cf6
 8002e1c:	20001584 	.word	0x20001584
 8002e20:	20001c24 	.word	0x20001c24
 8002e24:	2000010c 	.word	0x2000010c
 8002e28:	200020bc 	.word	0x200020bc
      if (TmpBuffer[j] == 0xAA) {
 8002e2c:	1dfb      	adds	r3, r7, #7
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	4af4      	ldr	r2, [pc, #976]	; (8003204 <ProcessDefaultProfile+0x494>)
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	2baa      	cmp	r3, #170	; 0xaa
 8002e36:	d108      	bne.n	8002e4a <ProcessDefaultProfile+0xda>
        SyncCount++;
 8002e38:	4bf3      	ldr	r3, [pc, #972]	; (8003208 <ProcessDefaultProfile+0x498>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	b25b      	sxtb	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	3301      	adds	r3, #1
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	b25a      	sxtb	r2, r3
 8002e46:	4bf0      	ldr	r3, [pc, #960]	; (8003208 <ProcessDefaultProfile+0x498>)
 8002e48:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 5; j++) {
 8002e4a:	1dfb      	adds	r3, r7, #7
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	1dfb      	adds	r3, r7, #7
 8002e50:	3201      	adds	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	1dfb      	adds	r3, r7, #7
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d9e7      	bls.n	8002e2c <ProcessDefaultProfile+0xbc>
      }
    }
    if (TmpBuffer[5] == 0x00) {
 8002e5c:	4be9      	ldr	r3, [pc, #932]	; (8003204 <ProcessDefaultProfile+0x494>)
 8002e5e:	795b      	ldrb	r3, [r3, #5]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d108      	bne.n	8002e76 <ProcessDefaultProfile+0x106>
      SyncCount++;
 8002e64:	4be8      	ldr	r3, [pc, #928]	; (8003208 <ProcessDefaultProfile+0x498>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	b25a      	sxtb	r2, r3
 8002e72:	4be5      	ldr	r3, [pc, #916]	; (8003208 <ProcessDefaultProfile+0x498>)
 8002e74:	701a      	strb	r2, [r3, #0]
    }
    if (TmpBuffer[sizeof(stFlashConfiguration) + 6] == 0xBB) {
 8002e76:	4be3      	ldr	r3, [pc, #908]	; (8003204 <ProcessDefaultProfile+0x494>)
 8002e78:	4ae4      	ldr	r2, [pc, #912]	; (800320c <ProcessDefaultProfile+0x49c>)
 8002e7a:	5c9b      	ldrb	r3, [r3, r2]
 8002e7c:	2bbb      	cmp	r3, #187	; 0xbb
 8002e7e:	d108      	bne.n	8002e92 <ProcessDefaultProfile+0x122>
      SyncCount++;
 8002e80:	4be1      	ldr	r3, [pc, #900]	; (8003208 <ProcessDefaultProfile+0x498>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	b25b      	sxtb	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	b25a      	sxtb	r2, r3
 8002e8e:	4bde      	ldr	r3, [pc, #888]	; (8003208 <ProcessDefaultProfile+0x498>)
 8002e90:	701a      	strb	r2, [r3, #0]
    }
    if (TmpBuffer[sizeof(stFlashConfiguration) + 7] == 0xBB) {
 8002e92:	4bdc      	ldr	r3, [pc, #880]	; (8003204 <ProcessDefaultProfile+0x494>)
 8002e94:	4ade      	ldr	r2, [pc, #888]	; (8003210 <ProcessDefaultProfile+0x4a0>)
 8002e96:	5c9b      	ldrb	r3, [r3, r2]
 8002e98:	2bbb      	cmp	r3, #187	; 0xbb
 8002e9a:	d108      	bne.n	8002eae <ProcessDefaultProfile+0x13e>
      SyncCount++;
 8002e9c:	4bda      	ldr	r3, [pc, #872]	; (8003208 <ProcessDefaultProfile+0x498>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	b25b      	sxtb	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	b25a      	sxtb	r2, r3
 8002eaa:	4bd7      	ldr	r3, [pc, #860]	; (8003208 <ProcessDefaultProfile+0x498>)
 8002eac:	701a      	strb	r2, [r3, #0]
    }

    // If data retrieved is valid, then store into default data structure
    if (SyncCount >= 8) {
 8002eae:	4bd6      	ldr	r3, [pc, #856]	; (8003208 <ProcessDefaultProfile+0x498>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	b25b      	sxtb	r3, r3
 8002eb4:	2b07      	cmp	r3, #7
 8002eb6:	dd0b      	ble.n	8002ed0 <ProcessDefaultProfile+0x160>
      memmove(&DefaultData, &TmpBuffer[6], sizeof(stFlashConfiguration));
 8002eb8:	4ad6      	ldr	r2, [pc, #856]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002eba:	4bd7      	ldr	r3, [pc, #860]	; (8003218 <ProcessDefaultProfile+0x4a8>)
 8002ebc:	0010      	movs	r0, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	f009 fc19 	bl	800c6fc <memcpy>
      bGetDefaultProfile = 0;
 8002eca:	4bd4      	ldr	r3, [pc, #848]	; (800321c <ProcessDefaultProfile+0x4ac>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
    }
    VerifyResults = VerifyFlashData(&DefaultData);
 8002ed0:	1dbc      	adds	r4, r7, #6
 8002ed2:	4bd0      	ldr	r3, [pc, #832]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f006 f841 	bl	8008f5c <VerifyFlashData>
 8002eda:	0003      	movs	r3, r0
 8002edc:	7023      	strb	r3, [r4, #0]
    if (SyncCount < 8 || VerifyResults != 0) {
 8002ede:	4bca      	ldr	r3, [pc, #808]	; (8003208 <ProcessDefaultProfile+0x498>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	2b07      	cmp	r3, #7
 8002ee6:	dd04      	ble.n	8002ef2 <ProcessDefaultProfile+0x182>
 8002ee8:	1dbb      	adds	r3, r7, #6
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d100      	bne.n	8002ef2 <ProcessDefaultProfile+0x182>
 8002ef0:	e1dd      	b.n	80032ae <ProcessDefaultProfile+0x53e>
      // Stop trying to get a default profile and use the default hard coded settings
      memset(&DefaultData, 0x00, sizeof(DefaultData));
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	011a      	lsls	r2, r3, #4
 8002ef6:	4bc7      	ldr	r3, [pc, #796]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002ef8:	2100      	movs	r1, #0
 8002efa:	0018      	movs	r0, r3
 8002efc:	f009 fc1a 	bl	800c734 <memset>

      DefaultData.SetpointTable.TableLength = 2;
 8002f00:	4bc4      	ldr	r3, [pc, #784]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f02:	2202      	movs	r2, #2
 8002f04:	601a      	str	r2, [r3, #0]
      DefaultData.SetpointTable.TablePoint[0].Point1 = 400;
 8002f06:	4bc3      	ldr	r3, [pc, #780]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f08:	22c8      	movs	r2, #200	; 0xc8
 8002f0a:	0052      	lsls	r2, r2, #1
 8002f0c:	605a      	str	r2, [r3, #4]
      DefaultData.SetpointTable.TablePoint[0].Point2 = 0; // 0 V output
 8002f0e:	4bc1      	ldr	r3, [pc, #772]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
      DefaultData.SetpointTable.TablePoint[1].Point1 = 102300;
 8002f14:	4bbf      	ldr	r3, [pc, #764]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f16:	4ac2      	ldr	r2, [pc, #776]	; (8003220 <ProcessDefaultProfile+0x4b0>)
 8002f18:	60da      	str	r2, [r3, #12]
      DefaultData.SetpointTable.TablePoint[1].Point2 = 5000; // 5V output
 8002f1a:	4bbe      	ldr	r3, [pc, #760]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f1c:	4ac1      	ldr	r2, [pc, #772]	; (8003224 <ProcessDefaultProfile+0x4b4>)
 8002f1e:	611a      	str	r2, [r3, #16]


      DefaultData.MasterFreqTable.TableLength = 2;
 8002f20:	4abc      	ldr	r2, [pc, #752]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f22:	2382      	movs	r3, #130	; 0x82
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	2102      	movs	r1, #2
 8002f28:	50d1      	str	r1, [r2, r3]
      DefaultData.MasterFreqTable.TablePoint[0].Point1 = 400;
 8002f2a:	4aba      	ldr	r2, [pc, #744]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f2c:	2384      	movs	r3, #132	; 0x84
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	21c8      	movs	r1, #200	; 0xc8
 8002f32:	0049      	lsls	r1, r1, #1
 8002f34:	50d1      	str	r1, [r2, r3]
      DefaultData.MasterFreqTable.TablePoint[0].Point2 = 0; // 0 Hz output
 8002f36:	4ab7      	ldr	r2, [pc, #732]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f38:	2386      	movs	r3, #134	; 0x86
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	50d1      	str	r1, [r2, r3]
      DefaultData.MasterFreqTable.TablePoint[1].Point1 = 102300;
 8002f40:	4ab4      	ldr	r2, [pc, #720]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f42:	2388      	movs	r3, #136	; 0x88
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	49b6      	ldr	r1, [pc, #728]	; (8003220 <ProcessDefaultProfile+0x4b0>)
 8002f48:	50d1      	str	r1, [r2, r3]
      DefaultData.MasterFreqTable.TablePoint[1].Point2 = 1000000; // 10 kHz output
 8002f4a:	4ab2      	ldr	r2, [pc, #712]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f4c:	238a      	movs	r3, #138	; 0x8a
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	49b5      	ldr	r1, [pc, #724]	; (8003228 <ProcessDefaultProfile+0x4b8>)
 8002f52:	50d1      	str	r1, [r2, r3]

      DefaultData.RVOutputMode = 1; // Default is voltage
 8002f54:	4aaf      	ldr	r2, [pc, #700]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f56:	2382      	movs	r3, #130	; 0x82
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	5cd1      	ldrb	r1, [r2, r3]
 8002f5c:	2003      	movs	r0, #3
 8002f5e:	4381      	bics	r1, r0
 8002f60:	1c08      	adds	r0, r1, #0
 8002f62:	2101      	movs	r1, #1
 8002f64:	4301      	orrs	r1, r0
 8002f66:	54d1      	strb	r1, [r2, r3]
      DefaultData.RVOutputPullup = 1; // Default is pull-up enabled
 8002f68:	4aaa      	ldr	r2, [pc, #680]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f6a:	2382      	movs	r3, #130	; 0x82
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	5cd1      	ldrb	r1, [r2, r3]
 8002f70:	2004      	movs	r0, #4
 8002f72:	4301      	orrs	r1, r0
 8002f74:	54d1      	strb	r1, [r2, r3]
      DefaultData.ErrorConditionActiveState = 0;  // Default is active low
 8002f76:	4aa7      	ldr	r2, [pc, #668]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f78:	2382      	movs	r3, #130	; 0x82
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	5cd1      	ldrb	r1, [r2, r3]
 8002f7e:	2008      	movs	r0, #8
 8002f80:	4381      	bics	r1, r0
 8002f82:	54d1      	strb	r1, [r2, r3]
      DefaultData.MasterFreqMode = 0;  // Default is frequency table
 8002f84:	4aa3      	ldr	r2, [pc, #652]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f86:	2382      	movs	r3, #130	; 0x82
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	5cd1      	ldrb	r1, [r2, r3]
 8002f8c:	2010      	movs	r0, #16
 8002f8e:	4381      	bics	r1, r0
 8002f90:	54d1      	strb	r1, [r2, r3]

      DefaultData.KmaFilteringGain = 500;
 8002f92:	4aa0      	ldr	r2, [pc, #640]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002f94:	2383      	movs	r3, #131	; 0x83
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	21fa      	movs	r1, #250	; 0xfa
 8002f9a:	0049      	lsls	r1, r1, #1
 8002f9c:	50d1      	str	r1, [r2, r3]
      DefaultData.MasterIndexFilteringGain = 500;
 8002f9e:	4a9d      	ldr	r2, [pc, #628]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002fa0:	2384      	movs	r3, #132	; 0x84
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	21fa      	movs	r1, #250	; 0xfa
 8002fa6:	0049      	lsls	r1, r1, #1
 8002fa8:	50d1      	str	r1, [r2, r3]
      DefaultData.AccelXAdcFilteringGain = 200;
 8002faa:	4a9a      	ldr	r2, [pc, #616]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002fac:	2385      	movs	r3, #133	; 0x85
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	21c8      	movs	r1, #200	; 0xc8
 8002fb2:	50d1      	str	r1, [r2, r3]
      DefaultData.AccelYAdcFilteringGain = 200;
 8002fb4:	4a97      	ldr	r2, [pc, #604]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002fb6:	2386      	movs	r3, #134	; 0x86
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	21c8      	movs	r1, #200	; 0xc8
 8002fbc:	50d1      	str	r1, [r2, r3]
      DefaultData.AccelZAdcFilteringGain = 200;
 8002fbe:	4a95      	ldr	r2, [pc, #596]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002fc0:	2387      	movs	r3, #135	; 0x87
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	21c8      	movs	r1, #200	; 0xc8
 8002fc6:	50d1      	str	r1, [r2, r3]

      DefaultData.Digio1 = CONFIG_DIG_MASTER_FREQ_OUT;
 8002fc8:	4a92      	ldr	r2, [pc, #584]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002fca:	2388      	movs	r3, #136	; 0x88
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	5cd1      	ldrb	r1, [r2, r3]
 8002fd0:	201f      	movs	r0, #31
 8002fd2:	4381      	bics	r1, r0
 8002fd4:	1c08      	adds	r0, r1, #0
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4301      	orrs	r1, r0
 8002fda:	54d1      	strb	r1, [r2, r3]
      DefaultData.Digio2 = CONFIG_DIG_DISABLED;
 8002fdc:	4a8d      	ldr	r2, [pc, #564]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002fde:	2388      	movs	r3, #136	; 0x88
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	5ad1      	ldrh	r1, [r2, r3]
 8002fe4:	4891      	ldr	r0, [pc, #580]	; (800322c <ProcessDefaultProfile+0x4bc>)
 8002fe6:	4001      	ands	r1, r0
 8002fe8:	52d1      	strh	r1, [r2, r3]
      DefaultData.Digio3 = CONFIG_DIG_DISABLED;
 8002fea:	4a8a      	ldr	r2, [pc, #552]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002fec:	2388      	movs	r3, #136	; 0x88
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	18d3      	adds	r3, r2, r3
 8002ff2:	785a      	ldrb	r2, [r3, #1]
 8002ff4:	217c      	movs	r1, #124	; 0x7c
 8002ff6:	438a      	bics	r2, r1
 8002ff8:	705a      	strb	r2, [r3, #1]
      DefaultData.Digio4 = CONFIG_DIG_DISABLED;
 8002ffa:	4a86      	ldr	r2, [pc, #536]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8002ffc:	2388      	movs	r3, #136	; 0x88
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	58d1      	ldr	r1, [r2, r3]
 8003002:	488b      	ldr	r0, [pc, #556]	; (8003230 <ProcessDefaultProfile+0x4c0>)
 8003004:	4001      	ands	r1, r0
 8003006:	50d1      	str	r1, [r2, r3]
      DefaultData.Digio5 = CONFIG_DIG_DISABLED;
 8003008:	4a82      	ldr	r2, [pc, #520]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 800300a:	2388      	movs	r3, #136	; 0x88
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	18d3      	adds	r3, r2, r3
 8003010:	885a      	ldrh	r2, [r3, #2]
 8003012:	4988      	ldr	r1, [pc, #544]	; (8003234 <ProcessDefaultProfile+0x4c4>)
 8003014:	400a      	ands	r2, r1
 8003016:	805a      	strh	r2, [r3, #2]
      DefaultData.Digio6 = CONFIG_DIG_DISABLED;
 8003018:	4a7e      	ldr	r2, [pc, #504]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 800301a:	2388      	movs	r3, #136	; 0x88
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	18d3      	adds	r3, r2, r3
 8003020:	78da      	ldrb	r2, [r3, #3]
 8003022:	213e      	movs	r1, #62	; 0x3e
 8003024:	438a      	bics	r2, r1
 8003026:	70da      	strb	r2, [r3, #3]

      DefaultData.DefaultOutput = 4;    // CAN Bus is default output
 8003028:	4a7a      	ldr	r2, [pc, #488]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 800302a:	2389      	movs	r3, #137	; 0x89
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	2104      	movs	r1, #4
 8003030:	54d1      	strb	r1, [r2, r3]
      DefaultData.SensorMode = 0;       // Default is A
 8003032:	4a78      	ldr	r2, [pc, #480]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003034:	2389      	movs	r3, #137	; 0x89
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	18d3      	adds	r3, r2, r3
 800303a:	785a      	ldrb	r2, [r3, #1]
 800303c:	2101      	movs	r1, #1
 800303e:	438a      	bics	r2, r1
 8003040:	705a      	strb	r2, [r3, #1]
      DefaultData.CanUse = 1;           // Default is CAN Enabled and used
 8003042:	4a74      	ldr	r2, [pc, #464]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003044:	2389      	movs	r3, #137	; 0x89
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	18d3      	adds	r3, r2, r3
 800304a:	785a      	ldrb	r2, [r3, #1]
 800304c:	2102      	movs	r1, #2
 800304e:	430a      	orrs	r2, r1
 8003050:	705a      	strb	r2, [r3, #1]
      DefaultData.SourceAddress = 0;
 8003052:	4a70      	ldr	r2, [pc, #448]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003054:	2389      	movs	r3, #137	; 0x89
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	58d1      	ldr	r1, [r2, r3]
 800305a:	4877      	ldr	r0, [pc, #476]	; (8003238 <ProcessDefaultProfile+0x4c8>)
 800305c:	4001      	ands	r1, r0
 800305e:	50d1      	str	r1, [r2, r3]
      DefaultData.CanEcho = 0;
 8003060:	4a6c      	ldr	r2, [pc, #432]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003062:	2389      	movs	r3, #137	; 0x89
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	18d3      	adds	r3, r2, r3
 8003068:	789a      	ldrb	r2, [r3, #2]
 800306a:	2104      	movs	r1, #4
 800306c:	438a      	bics	r2, r1
 800306e:	709a      	strb	r2, [r3, #2]
      DefaultData.CanCrcEnable = 0;
 8003070:	4a68      	ldr	r2, [pc, #416]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003072:	2389      	movs	r3, #137	; 0x89
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	18d3      	adds	r3, r2, r3
 8003078:	789a      	ldrb	r2, [r3, #2]
 800307a:	2108      	movs	r1, #8
 800307c:	438a      	bics	r2, r1
 800307e:	709a      	strb	r2, [r3, #2]
      DefaultData.CanPrescaler = 3; // 1 MBit baud rate
 8003080:	4a64      	ldr	r2, [pc, #400]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003082:	2389      	movs	r3, #137	; 0x89
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	18d3      	adds	r3, r2, r3
 8003088:	885a      	ldrh	r2, [r3, #2]
 800308a:	496c      	ldr	r1, [pc, #432]	; (800323c <ProcessDefaultProfile+0x4cc>)
 800308c:	400a      	ands	r2, r1
 800308e:	1c11      	adds	r1, r2, #0
 8003090:	2230      	movs	r2, #48	; 0x30
 8003092:	430a      	orrs	r2, r1
 8003094:	805a      	strh	r2, [r3, #2]
      DefaultData.Endianess = 1;    // Big endian is default
 8003096:	4a5f      	ldr	r2, [pc, #380]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003098:	2389      	movs	r3, #137	; 0x89
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	18d3      	adds	r3, r2, r3
 800309e:	78da      	ldrb	r2, [r3, #3]
 80030a0:	2120      	movs	r1, #32
 80030a2:	430a      	orrs	r2, r1
 80030a4:	70da      	strb	r2, [r3, #3]

      DefaultData.CanTable.TableLength = 2;
 80030a6:	4a5b      	ldr	r2, [pc, #364]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80030a8:	238a      	movs	r3, #138	; 0x8a
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	2102      	movs	r1, #2
 80030ae:	50d1      	str	r1, [r2, r3]
      DefaultData.CanTable.TablePoint[0].Point1 = 400;
 80030b0:	4a58      	ldr	r2, [pc, #352]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80030b2:	238b      	movs	r3, #139	; 0x8b
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	21c8      	movs	r1, #200	; 0xc8
 80030b8:	0049      	lsls	r1, r1, #1
 80030ba:	50d1      	str	r1, [r2, r3]
      DefaultData.CanTable.TablePoint[0].Point2 = 32000; // 0% output per J1939
 80030bc:	4a55      	ldr	r2, [pc, #340]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80030be:	238c      	movs	r3, #140	; 0x8c
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	21fa      	movs	r1, #250	; 0xfa
 80030c4:	01c9      	lsls	r1, r1, #7
 80030c6:	50d1      	str	r1, [r2, r3]
      DefaultData.CanTable.TablePoint[1].Point1 = 102300;
 80030c8:	4a52      	ldr	r2, [pc, #328]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80030ca:	238d      	movs	r3, #141	; 0x8d
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4954      	ldr	r1, [pc, #336]	; (8003220 <ProcessDefaultProfile+0x4b0>)
 80030d0:	50d1      	str	r1, [r2, r3]
      DefaultData.CanTable.TablePoint[1].Point2 = 57600; // 100% Output per J1939
 80030d2:	4a50      	ldr	r2, [pc, #320]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80030d4:	238e      	movs	r3, #142	; 0x8e
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	21e1      	movs	r1, #225	; 0xe1
 80030da:	0209      	lsls	r1, r1, #8
 80030dc:	50d1      	str	r1, [r2, r3]


      DefaultData.AngularOutput.TableLength = 2;
 80030de:	4a4d      	ldr	r2, [pc, #308]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80030e0:	23cb      	movs	r3, #203	; 0xcb
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	2102      	movs	r1, #2
 80030e6:	50d1      	str	r1, [r2, r3]
      DefaultData.AngularOutput.TablePoint[0].Point1 = 400;
 80030e8:	4a4a      	ldr	r2, [pc, #296]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80030ea:	23cc      	movs	r3, #204	; 0xcc
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	21c8      	movs	r1, #200	; 0xc8
 80030f0:	0049      	lsls	r1, r1, #1
 80030f2:	50d1      	str	r1, [r2, r3]
      DefaultData.AngularOutput.TablePoint[0].Point2 = 0; // 0% output per J1939
 80030f4:	4a47      	ldr	r2, [pc, #284]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80030f6:	23cd      	movs	r3, #205	; 0xcd
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	2100      	movs	r1, #0
 80030fc:	50d1      	str	r1, [r2, r3]
      DefaultData.AngularOutput.TablePoint[1].Point1 = 102300;
 80030fe:	4a45      	ldr	r2, [pc, #276]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003100:	23ce      	movs	r3, #206	; 0xce
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4946      	ldr	r1, [pc, #280]	; (8003220 <ProcessDefaultProfile+0x4b0>)
 8003106:	50d1      	str	r1, [r2, r3]
      DefaultData.AngularOutput.TablePoint[1].Point2 = 180; // 100% Output per J1939
 8003108:	4a42      	ldr	r2, [pc, #264]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 800310a:	23cf      	movs	r3, #207	; 0xcf
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	21b4      	movs	r1, #180	; 0xb4
 8003110:	50d1      	str	r1, [r2, r3]


      DefaultData.CanAddressOut[0] = 0x00260000;
 8003112:	4a40      	ldr	r2, [pc, #256]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003114:	2386      	movs	r3, #134	; 0x86
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	2198      	movs	r1, #152	; 0x98
 800311a:	0389      	lsls	r1, r1, #14
 800311c:	50d1      	str	r1, [r2, r3]
      DefaultData.CanAddressOut[1] = 0x08B4E020;
 800311e:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003120:	4a47      	ldr	r2, [pc, #284]	; (8003240 <ProcessDefaultProfile+0x4d0>)
 8003122:	4948      	ldr	r1, [pc, #288]	; (8003244 <ProcessDefaultProfile+0x4d4>)
 8003124:	5099      	str	r1, [r3, r2]
      DefaultData.CanAddressOut[2] = 0x08b4E200;
 8003126:	4a3b      	ldr	r2, [pc, #236]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003128:	2387      	movs	r3, #135	; 0x87
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4946      	ldr	r1, [pc, #280]	; (8003248 <ProcessDefaultProfile+0x4d8>)
 800312e:	50d1      	str	r1, [r2, r3]
      DefaultData.CanAddressOut[3] = 0;
 8003130:	4b38      	ldr	r3, [pc, #224]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003132:	4a46      	ldr	r2, [pc, #280]	; (800324c <ProcessDefaultProfile+0x4dc>)
 8003134:	2100      	movs	r1, #0
 8003136:	5099      	str	r1, [r3, r2]
      DefaultData.CanAddressOut[4] = 0;
 8003138:	4a36      	ldr	r2, [pc, #216]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 800313a:	2388      	movs	r3, #136	; 0x88
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	2100      	movs	r1, #0
 8003140:	50d1      	str	r1, [r2, r3]
      DefaultData.CanAddressOut[5] = 0;
 8003142:	4b34      	ldr	r3, [pc, #208]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003144:	4a42      	ldr	r2, [pc, #264]	; (8003250 <ProcessDefaultProfile+0x4e0>)
 8003146:	2100      	movs	r1, #0
 8003148:	5099      	str	r1, [r3, r2]

      DefaultData.CanMsgOutTime[0] = 10;
 800314a:	4a32      	ldr	r2, [pc, #200]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 800314c:	2389      	movs	r3, #137	; 0x89
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	210a      	movs	r1, #10
 8003152:	50d1      	str	r1, [r2, r3]
      DefaultData.CanMsgOutTime[1] = 100;
 8003154:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003156:	4a3f      	ldr	r2, [pc, #252]	; (8003254 <ProcessDefaultProfile+0x4e4>)
 8003158:	2164      	movs	r1, #100	; 0x64
 800315a:	5099      	str	r1, [r3, r2]
      DefaultData.CanMsgOutTime[2] = 1000;
 800315c:	4a2d      	ldr	r2, [pc, #180]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 800315e:	238a      	movs	r3, #138	; 0x8a
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	21fa      	movs	r1, #250	; 0xfa
 8003164:	0089      	lsls	r1, r1, #2
 8003166:	50d1      	str	r1, [r2, r3]

      DefaultData.CanAddressIn[0] = 0;
 8003168:	4b2a      	ldr	r3, [pc, #168]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 800316a:	4a3b      	ldr	r2, [pc, #236]	; (8003258 <ProcessDefaultProfile+0x4e8>)
 800316c:	2100      	movs	r1, #0
 800316e:	5099      	str	r1, [r3, r2]
      DefaultData.CanAddressIn[1] = 0;
 8003170:	4a28      	ldr	r2, [pc, #160]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003172:	238b      	movs	r3, #139	; 0x8b
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	2100      	movs	r1, #0
 8003178:	50d1      	str	r1, [r2, r3]

      DefaultData.CanMsgInTime[0] = 0;
 800317a:	4b26      	ldr	r3, [pc, #152]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 800317c:	4a37      	ldr	r2, [pc, #220]	; (800325c <ProcessDefaultProfile+0x4ec>)
 800317e:	2100      	movs	r1, #0
 8003180:	5099      	str	r1, [r3, r2]
      DefaultData.CanMsgInTime[1] = 0;
 8003182:	4a24      	ldr	r2, [pc, #144]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003184:	238c      	movs	r3, #140	; 0x8c
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	2100      	movs	r1, #0
 800318a:	50d1      	str	r1, [r2, r3]

      DefaultData.CanMaskIn[0] = 0;
 800318c:	4b21      	ldr	r3, [pc, #132]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 800318e:	4a34      	ldr	r2, [pc, #208]	; (8003260 <ProcessDefaultProfile+0x4f0>)
 8003190:	2100      	movs	r1, #0
 8003192:	5099      	str	r1, [r3, r2]
      DefaultData.CanMaskIn[1] = 0;
 8003194:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 8003196:	238d      	movs	r3, #141	; 0x8d
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	2100      	movs	r1, #0
 800319c:	50d1      	str	r1, [r2, r3]

      DefaultData.ReverseIndexKma = 0;
 800319e:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80031a0:	4a30      	ldr	r2, [pc, #192]	; (8003264 <ProcessDefaultProfile+0x4f4>)
 80031a2:	5c99      	ldrb	r1, [r3, r2]
 80031a4:	2001      	movs	r0, #1
 80031a6:	4381      	bics	r1, r0
 80031a8:	5499      	strb	r1, [r3, r2]
      DefaultData.RS485MessageMode = 2;
 80031aa:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80031ac:	4a2d      	ldr	r2, [pc, #180]	; (8003264 <ProcessDefaultProfile+0x4f4>)
 80031ae:	5c99      	ldrb	r1, [r3, r2]
 80031b0:	201e      	movs	r0, #30
 80031b2:	4381      	bics	r1, r0
 80031b4:	1c08      	adds	r0, r1, #0
 80031b6:	2104      	movs	r1, #4
 80031b8:	4301      	orrs	r1, r0
 80031ba:	5499      	strb	r1, [r3, r2]
      DefaultData.RS485MessageTime = 10; // Default is send a message every 1 second
 80031bc:	4b15      	ldr	r3, [pc, #84]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80031be:	4a29      	ldr	r2, [pc, #164]	; (8003264 <ProcessDefaultProfile+0x4f4>)
 80031c0:	5a99      	ldrh	r1, [r3, r2]
 80031c2:	201f      	movs	r0, #31
 80031c4:	4001      	ands	r1, r0
 80031c6:	1c08      	adds	r0, r1, #0
 80031c8:	21a0      	movs	r1, #160	; 0xa0
 80031ca:	0049      	lsls	r1, r1, #1
 80031cc:	4301      	orrs	r1, r0
 80031ce:	5299      	strh	r1, [r3, r2]
      DefaultData.AccelerometerScaling = 0;
 80031d0:	4b10      	ldr	r3, [pc, #64]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80031d2:	4a24      	ldr	r2, [pc, #144]	; (8003264 <ProcessDefaultProfile+0x4f4>)
 80031d4:	189b      	adds	r3, r3, r2
 80031d6:	789a      	ldrb	r2, [r3, #2]
 80031d8:	2103      	movs	r1, #3
 80031da:	438a      	bics	r2, r1
 80031dc:	709a      	strb	r2, [r3, #2]

      // ProfileName = Default in ASCII
      DefaultData.ProfileName[0] = 0x44u;
 80031de:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80031e0:	4a21      	ldr	r2, [pc, #132]	; (8003268 <ProcessDefaultProfile+0x4f8>)
 80031e2:	2144      	movs	r1, #68	; 0x44
 80031e4:	5499      	strb	r1, [r3, r2]
      DefaultData.ProfileName[1] = 0x65u;
 80031e6:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80031e8:	238f      	movs	r3, #143	; 0x8f
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	2165      	movs	r1, #101	; 0x65
 80031ee:	54d1      	strb	r1, [r2, r3]
      DefaultData.ProfileName[2] = 0x66u;
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80031f2:	4a1e      	ldr	r2, [pc, #120]	; (800326c <ProcessDefaultProfile+0x4fc>)
 80031f4:	2166      	movs	r1, #102	; 0x66
 80031f6:	5499      	strb	r1, [r3, r2]
      DefaultData.ProfileName[3] = 0x61u;
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <ProcessDefaultProfile+0x4a4>)
 80031fa:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <ProcessDefaultProfile+0x500>)
 80031fc:	2161      	movs	r1, #97	; 0x61
 80031fe:	5499      	strb	r1, [r3, r2]
 8003200:	e038      	b.n	8003274 <ProcessDefaultProfile+0x504>
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	2000010c 	.word	0x2000010c
 8003208:	20000a11 	.word	0x20000a11
 800320c:	00000806 	.word	0x00000806
 8003210:	00000807 	.word	0x00000807
 8003214:	20000c68 	.word	0x20000c68
 8003218:	20000112 	.word	0x20000112
 800321c:	20001584 	.word	0x20001584
 8003220:	00018f9c 	.word	0x00018f9c
 8003224:	00001388 	.word	0x00001388
 8003228:	000f4240 	.word	0x000f4240
 800322c:	fffffc1f 	.word	0xfffffc1f
 8003230:	fff07fff 	.word	0xfff07fff
 8003234:	fffffe0f 	.word	0xfffffe0f
 8003238:	fffc03ff 	.word	0xfffc03ff
 800323c:	ffffe00f 	.word	0xffffe00f
 8003240:	00000434 	.word	0x00000434
 8003244:	08b4e020 	.word	0x08b4e020
 8003248:	08b4e200 	.word	0x08b4e200
 800324c:	0000043c 	.word	0x0000043c
 8003250:	00000444 	.word	0x00000444
 8003254:	0000044c 	.word	0x0000044c
 8003258:	00000454 	.word	0x00000454
 800325c:	0000045c 	.word	0x0000045c
 8003260:	00000464 	.word	0x00000464
 8003264:	00000474 	.word	0x00000474
 8003268:	00000477 	.word	0x00000477
 800326c:	00000479 	.word	0x00000479
 8003270:	0000047a 	.word	0x0000047a
      DefaultData.ProfileName[4] = 0x75u;
 8003274:	4b96      	ldr	r3, [pc, #600]	; (80034d0 <ProcessDefaultProfile+0x760>)
 8003276:	4a97      	ldr	r2, [pc, #604]	; (80034d4 <ProcessDefaultProfile+0x764>)
 8003278:	2175      	movs	r1, #117	; 0x75
 800327a:	5499      	strb	r1, [r3, r2]
      DefaultData.ProfileName[5] = 0x6Cu;
 800327c:	4b94      	ldr	r3, [pc, #592]	; (80034d0 <ProcessDefaultProfile+0x760>)
 800327e:	4a96      	ldr	r2, [pc, #600]	; (80034d8 <ProcessDefaultProfile+0x768>)
 8003280:	216c      	movs	r1, #108	; 0x6c
 8003282:	5499      	strb	r1, [r3, r2]
      DefaultData.ProfileName[6] = 0x74u;
 8003284:	4b92      	ldr	r3, [pc, #584]	; (80034d0 <ProcessDefaultProfile+0x760>)
 8003286:	4a95      	ldr	r2, [pc, #596]	; (80034dc <ProcessDefaultProfile+0x76c>)
 8003288:	2174      	movs	r1, #116	; 0x74
 800328a:	5499      	strb	r1, [r3, r2]

      DefaultData.Version = FLASH_VERSION;
 800328c:	4b90      	ldr	r3, [pc, #576]	; (80034d0 <ProcessDefaultProfile+0x760>)
 800328e:	4a94      	ldr	r2, [pc, #592]	; (80034e0 <ProcessDefaultProfile+0x770>)
 8003290:	4994      	ldr	r1, [pc, #592]	; (80034e4 <ProcessDefaultProfile+0x774>)
 8003292:	5299      	strh	r1, [r3, r2]
      DefaultData.Crc16 = CalcCrc16Array((uint8_t *)&DefaultData, 2046);
 8003294:	4a94      	ldr	r2, [pc, #592]	; (80034e8 <ProcessDefaultProfile+0x778>)
 8003296:	4b8e      	ldr	r3, [pc, #568]	; (80034d0 <ProcessDefaultProfile+0x760>)
 8003298:	0011      	movs	r1, r2
 800329a:	0018      	movs	r0, r3
 800329c:	f7ff fc3e 	bl	8002b1c <CalcCrc16Array>
 80032a0:	0003      	movs	r3, r0
 80032a2:	0019      	movs	r1, r3
 80032a4:	4b8a      	ldr	r3, [pc, #552]	; (80034d0 <ProcessDefaultProfile+0x760>)
 80032a6:	4a8e      	ldr	r2, [pc, #568]	; (80034e0 <ProcessDefaultProfile+0x770>)
 80032a8:	189b      	adds	r3, r3, r2
 80032aa:	1c0a      	adds	r2, r1, #0
 80032ac:	805a      	strh	r2, [r3, #2]

    }


    LogEvent(EVENT_MESSAGE_ID_4, 0, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	2004      	movs	r0, #4
 80032b4:	f004 fcd8 	bl	8007c68 <LogEvent>
    ReflashTuningParameters(62, (uint16_t *)&DefaultData);
 80032b8:	4b85      	ldr	r3, [pc, #532]	; (80034d0 <ProcessDefaultProfile+0x760>)
 80032ba:	0019      	movs	r1, r3
 80032bc:	203e      	movs	r0, #62	; 0x3e
 80032be:	f005 fa41 	bl	8008744 <ReflashTuningParameters>
    CalculatedCrc.FlashConfiguration = CalcCrc16Array((uint8_t *)FlashConfiguration, 2046);
 80032c2:	4b8a      	ldr	r3, [pc, #552]	; (80034ec <ProcessDefaultProfile+0x77c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a88      	ldr	r2, [pc, #544]	; (80034e8 <ProcessDefaultProfile+0x778>)
 80032c8:	0011      	movs	r1, r2
 80032ca:	0018      	movs	r0, r3
 80032cc:	f7ff fc26 	bl	8002b1c <CalcCrc16Array>
 80032d0:	0003      	movs	r3, r0
 80032d2:	001a      	movs	r2, r3
 80032d4:	4b86      	ldr	r3, [pc, #536]	; (80034f0 <ProcessDefaultProfile+0x780>)
 80032d6:	805a      	strh	r2, [r3, #2]
    bFlashConfigurationValid = (FlashConfiguration->Crc16 == CalculatedCrc.FlashConfiguration);
 80032d8:	4b84      	ldr	r3, [pc, #528]	; (80034ec <ProcessDefaultProfile+0x77c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a82      	ldr	r2, [pc, #520]	; (80034e8 <ProcessDefaultProfile+0x778>)
 80032de:	5a9a      	ldrh	r2, [r3, r2]
 80032e0:	4b83      	ldr	r3, [pc, #524]	; (80034f0 <ProcessDefaultProfile+0x780>)
 80032e2:	885b      	ldrh	r3, [r3, #2]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	425a      	negs	r2, r3
 80032e8:	4153      	adcs	r3, r2
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	001a      	movs	r2, r3
 80032ee:	4b81      	ldr	r3, [pc, #516]	; (80034f4 <ProcessDefaultProfile+0x784>)
 80032f0:	701a      	strb	r2, [r3, #0]
    SysVars.SensorLetter = FlashConfiguration->SensorMode;
 80032f2:	4b7e      	ldr	r3, [pc, #504]	; (80034ec <ProcessDefaultProfile+0x77c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a80      	ldr	r2, [pc, #512]	; (80034f8 <ProcessDefaultProfile+0x788>)
 80032f8:	5c9b      	ldrb	r3, [r3, r2]
 80032fa:	07db      	lsls	r3, r3, #31
 80032fc:	0fdb      	lsrs	r3, r3, #31
 80032fe:	b2d9      	uxtb	r1, r3
 8003300:	4b7e      	ldr	r3, [pc, #504]	; (80034fc <ProcessDefaultProfile+0x78c>)
 8003302:	22e4      	movs	r2, #228	; 0xe4
 8003304:	2001      	movs	r0, #1
 8003306:	4001      	ands	r1, r0
 8003308:	000c      	movs	r4, r1
 800330a:	5c99      	ldrb	r1, [r3, r2]
 800330c:	2001      	movs	r0, #1
 800330e:	4381      	bics	r1, r0
 8003310:	1c08      	adds	r0, r1, #0
 8003312:	1c21      	adds	r1, r4, #0
 8003314:	4301      	orrs	r1, r0
 8003316:	5499      	strb	r1, [r3, r2]
    InitializeDigitalIO(DIG_Mode);
 8003318:	4b79      	ldr	r3, [pc, #484]	; (8003500 <ProcessDefaultProfile+0x790>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b25b      	sxtb	r3, r3
 800331e:	0018      	movs	r0, r3
 8003320:	f000 feb4 	bl	800408c <InitializeDigitalIO>
    InitializeAccel();
 8003324:	f7fd fa36 	bl	8000794 <InitializeAccel>
    MX_CAN_Init();
 8003328:	f7ff fb5c 	bl	80029e4 <MX_CAN_Init>
    bUseDefaultFlash = 1;
 800332c:	4b75      	ldr	r3, [pc, #468]	; (8003504 <ProcessDefaultProfile+0x794>)
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
    bDefaultProfileLoaded = 1;
 8003332:	4b75      	ldr	r3, [pc, #468]	; (8003508 <ProcessDefaultProfile+0x798>)
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
    // Give a low quality score given this may trigger a sensor mismatch
    SysVars.Quality1 = 1000;
 8003338:	4b70      	ldr	r3, [pc, #448]	; (80034fc <ProcessDefaultProfile+0x78c>)
 800333a:	21fc      	movs	r1, #252	; 0xfc
 800333c:	22fa      	movs	r2, #250	; 0xfa
 800333e:	0092      	lsls	r2, r2, #2
 8003340:	505a      	str	r2, [r3, r1]

  }

  // Set default values for Factory Configuration
  if (bFactoryConfigurationValid == 0) {
 8003342:	4b72      	ldr	r3, [pc, #456]	; (800350c <ProcessDefaultProfile+0x79c>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d000      	beq.n	800334c <ProcessDefaultProfile+0x5dc>
 800334a:	e0a9      	b.n	80034a0 <ProcessDefaultProfile+0x730>
    bUseDefaultFactory = 1;
 800334c:	4b70      	ldr	r3, [pc, #448]	; (8003510 <ProcessDefaultProfile+0x7a0>)
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
    DefaultFactory.Calibration33 = 3300;                  // x.xxx volts
 8003352:	4b70      	ldr	r3, [pc, #448]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 8003354:	4a70      	ldr	r2, [pc, #448]	; (8003518 <ProcessDefaultProfile+0x7a8>)
 8003356:	601a      	str	r2, [r3, #0]
    DefaultFactory.PowerRail5KFactor = 10000;              // xxxxx
 8003358:	4b6e      	ldr	r3, [pc, #440]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 800335a:	4a70      	ldr	r2, [pc, #448]	; (800351c <ProcessDefaultProfile+0x7ac>)
 800335c:	605a      	str	r2, [r3, #4]
    DefaultFactory.KmaKFactor = 10000;                     // xxxxx
 800335e:	4b6d      	ldr	r3, [pc, #436]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 8003360:	4a6e      	ldr	r2, [pc, #440]	; (800351c <ProcessDefaultProfile+0x7ac>)
 8003362:	609a      	str	r2, [r3, #8]
    DefaultFactory.PowerInputKFactor = 10000;              // xxxxx
 8003364:	4b6b      	ldr	r3, [pc, #428]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 8003366:	4a6d      	ldr	r2, [pc, #436]	; (800351c <ProcessDefaultProfile+0x7ac>)
 8003368:	60da      	str	r2, [r3, #12]
    DefaultFactory.RVOutputVoltageKFactor = 10000;         // xxxxx
 800336a:	4b6a      	ldr	r3, [pc, #424]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 800336c:	4a6b      	ldr	r2, [pc, #428]	; (800351c <ProcessDefaultProfile+0x7ac>)
 800336e:	611a      	str	r2, [r3, #16]
    DefaultFactory.RVOutputCurrentKFactor = 10000;         // xxxxx
 8003370:	4b68      	ldr	r3, [pc, #416]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 8003372:	4a6a      	ldr	r2, [pc, #424]	; (800351c <ProcessDefaultProfile+0x7ac>)
 8003374:	615a      	str	r2, [r3, #20]
    DefaultFactory.PwmOutputKFactor = 10000;               // xxxxx
 8003376:	4b67      	ldr	r3, [pc, #412]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 8003378:	4a68      	ldr	r2, [pc, #416]	; (800351c <ProcessDefaultProfile+0x7ac>)
 800337a:	619a      	str	r2, [r3, #24]
    DefaultFactory.HardwareVersion = 0;
 800337c:	4b65      	ldr	r3, [pc, #404]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 800337e:	7f1a      	ldrb	r2, [r3, #28]
 8003380:	210f      	movs	r1, #15
 8003382:	438a      	bics	r2, r1
 8003384:	771a      	strb	r2, [r3, #28]
    DefaultFactory.AccelPresent = 1;
 8003386:	4b63      	ldr	r3, [pc, #396]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 8003388:	7f1a      	ldrb	r2, [r3, #28]
 800338a:	2110      	movs	r1, #16
 800338c:	430a      	orrs	r2, r1
 800338e:	771a      	strb	r2, [r3, #28]
    DefaultFactory.RVOutputPresent = 1;
 8003390:	4b60      	ldr	r3, [pc, #384]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 8003392:	7f1a      	ldrb	r2, [r3, #28]
 8003394:	2120      	movs	r1, #32
 8003396:	430a      	orrs	r2, r1
 8003398:	771a      	strb	r2, [r3, #28]
    DefaultFactory.RS485DriverPresent = 1;
 800339a:	4b5e      	ldr	r3, [pc, #376]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 800339c:	7f1a      	ldrb	r2, [r3, #28]
 800339e:	2140      	movs	r1, #64	; 0x40
 80033a0:	430a      	orrs	r2, r1
 80033a2:	771a      	strb	r2, [r3, #28]
    DefaultFactory.CanDriverPresent = 1;
 80033a4:	4b5b      	ldr	r3, [pc, #364]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 80033a6:	7f1a      	ldrb	r2, [r3, #28]
 80033a8:	2180      	movs	r1, #128	; 0x80
 80033aa:	4249      	negs	r1, r1
 80033ac:	430a      	orrs	r2, r1
 80033ae:	771a      	strb	r2, [r3, #28]
    DefaultFactory.TempSensorPresent = 1;
 80033b0:	4b58      	ldr	r3, [pc, #352]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 80033b2:	7f5a      	ldrb	r2, [r3, #29]
 80033b4:	2101      	movs	r1, #1
 80033b6:	430a      	orrs	r2, r1
 80033b8:	775a      	strb	r2, [r3, #29]
    DefaultFactory.KmaPresent = 1;
 80033ba:	4b56      	ldr	r3, [pc, #344]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 80033bc:	7f5a      	ldrb	r2, [r3, #29]
 80033be:	2102      	movs	r1, #2
 80033c0:	430a      	orrs	r2, r1
 80033c2:	775a      	strb	r2, [r3, #29]
    DefaultFactory.PowerInputFilteringGain = 200;
 80033c4:	4a53      	ldr	r2, [pc, #332]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 80033c6:	23fe      	movs	r3, #254	; 0xfe
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	21c8      	movs	r1, #200	; 0xc8
 80033cc:	50d1      	str	r1, [r2, r3]
    DefaultFactory.PowerRail5FilteringGain = 200;
 80033ce:	4a51      	ldr	r2, [pc, #324]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	21c8      	movs	r1, #200	; 0xc8
 80033d6:	50d1      	str	r1, [r2, r3]
    DefaultFactory.TemperatureFilteringGain = 200;
 80033d8:	4a4e      	ldr	r2, [pc, #312]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 80033da:	2381      	movs	r3, #129	; 0x81
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	21c8      	movs	r1, #200	; 0xc8
 80033e0:	50d1      	str	r1, [r2, r3]
    DefaultFactory.InternalReferenceFilteringGain = 200;
 80033e2:	4a4c      	ldr	r2, [pc, #304]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 80033e4:	2382      	movs	r3, #130	; 0x82
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	21c8      	movs	r1, #200	; 0xc8
 80033ea:	50d1      	str	r1, [r2, r3]
    DefaultFactory.RVOutputVoltageFilteringGain = 200;
 80033ec:	4a49      	ldr	r2, [pc, #292]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 80033ee:	2383      	movs	r3, #131	; 0x83
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	21c8      	movs	r1, #200	; 0xc8
 80033f4:	50d1      	str	r1, [r2, r3]
    DefaultFactory.RVOutputCurrentFilteringGain = 200;
 80033f6:	4a47      	ldr	r2, [pc, #284]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 80033f8:	2384      	movs	r3, #132	; 0x84
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	21c8      	movs	r1, #200	; 0xc8
 80033fe:	50d1      	str	r1, [r2, r3]
    DefaultFactory.FirmwareVersion = FIRMWARE_VERSION;
 8003400:	4a44      	ldr	r2, [pc, #272]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 8003402:	2385      	movs	r3, #133	; 0x85
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4937      	ldr	r1, [pc, #220]	; (80034e4 <ProcessDefaultProfile+0x774>)
 8003408:	52d1      	strh	r1, [r2, r3]
    FirmwarePointer = (uint32_t *)0x08000000u;
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	051b      	lsls	r3, r3, #20
 800340e:	603b      	str	r3, [r7, #0]
    DefaultFactory.FirmwareCrc16 = CalcCrc16Array((uint8_t *)FirmwarePointer, (60 * 2048));               // CRC of pages 0 through 59
 8003410:	23f0      	movs	r3, #240	; 0xf0
 8003412:	025a      	lsls	r2, r3, #9
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	0011      	movs	r1, r2
 8003418:	0018      	movs	r0, r3
 800341a:	f7ff fb7f 	bl	8002b1c <CalcCrc16Array>
 800341e:	0003      	movs	r3, r0
 8003420:	0019      	movs	r1, r3
 8003422:	4a3c      	ldr	r2, [pc, #240]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 8003424:	2385      	movs	r3, #133	; 0x85
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	18d3      	adds	r3, r2, r3
 800342a:	1c0a      	adds	r2, r1, #0
 800342c:	805a      	strh	r2, [r3, #2]
    DefaultFactory.Version = FACTORY_VERSION;                     // FactoryConfiguration Version
 800342e:	4b39      	ldr	r3, [pc, #228]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 8003430:	4a2b      	ldr	r2, [pc, #172]	; (80034e0 <ProcessDefaultProfile+0x770>)
 8003432:	492c      	ldr	r1, [pc, #176]	; (80034e4 <ProcessDefaultProfile+0x774>)
 8003434:	5299      	strh	r1, [r3, r2]
    DefaultFactory.Crc16 = CalcCrc16Array((uint8_t *)&DefaultFactory, 2046);                       // CRC16 of first 2046 bytes
 8003436:	4a2c      	ldr	r2, [pc, #176]	; (80034e8 <ProcessDefaultProfile+0x778>)
 8003438:	4b36      	ldr	r3, [pc, #216]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 800343a:	0011      	movs	r1, r2
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff fb6d 	bl	8002b1c <CalcCrc16Array>
 8003442:	0003      	movs	r3, r0
 8003444:	0019      	movs	r1, r3
 8003446:	4b33      	ldr	r3, [pc, #204]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 8003448:	4a25      	ldr	r2, [pc, #148]	; (80034e0 <ProcessDefaultProfile+0x770>)
 800344a:	189b      	adds	r3, r3, r2
 800344c:	1c0a      	adds	r2, r1, #0
 800344e:	805a      	strh	r2, [r3, #2]

    LogEvent(EVENT_MESSAGE_ID_5, 0, 0);
 8003450:	2200      	movs	r2, #0
 8003452:	2100      	movs	r1, #0
 8003454:	2005      	movs	r0, #5
 8003456:	f004 fc07 	bl	8007c68 <LogEvent>
    ReflashTuningParameters(63, (uint16_t *)&DefaultFactory);
 800345a:	4b2e      	ldr	r3, [pc, #184]	; (8003514 <ProcessDefaultProfile+0x7a4>)
 800345c:	0019      	movs	r1, r3
 800345e:	203f      	movs	r0, #63	; 0x3f
 8003460:	f005 f970 	bl	8008744 <ReflashTuningParameters>
    CalculatedCrc.FactoryConfiguration = CalcCrc16Array((uint8_t *)FactoryConfiguration, 2046);
 8003464:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <ProcessDefaultProfile+0x7b0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1f      	ldr	r2, [pc, #124]	; (80034e8 <ProcessDefaultProfile+0x778>)
 800346a:	0011      	movs	r1, r2
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff fb55 	bl	8002b1c <CalcCrc16Array>
 8003472:	0003      	movs	r3, r0
 8003474:	001a      	movs	r2, r3
 8003476:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <ProcessDefaultProfile+0x780>)
 8003478:	809a      	strh	r2, [r3, #4]
    bFactoryConfigurationValid = (FactoryConfiguration->Crc16 == CalculatedCrc.FactoryConfiguration);
 800347a:	4b29      	ldr	r3, [pc, #164]	; (8003520 <ProcessDefaultProfile+0x7b0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <ProcessDefaultProfile+0x778>)
 8003480:	5a9a      	ldrh	r2, [r3, r2]
 8003482:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <ProcessDefaultProfile+0x780>)
 8003484:	889b      	ldrh	r3, [r3, #4]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	425a      	negs	r2, r3
 800348a:	4153      	adcs	r3, r2
 800348c:	b2db      	uxtb	r3, r3
 800348e:	001a      	movs	r2, r3
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <ProcessDefaultProfile+0x79c>)
 8003492:	701a      	strb	r2, [r3, #0]
    // Give a low quality score given this may trigger a sensor mismatch
    SysVars.Quality1 = 1000;
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <ProcessDefaultProfile+0x78c>)
 8003496:	21fc      	movs	r1, #252	; 0xfc
 8003498:	22fa      	movs	r2, #250	; 0xfa
 800349a:	0092      	lsls	r2, r2, #2
 800349c:	505a      	str	r2, [r3, r1]
 800349e:	e002      	b.n	80034a6 <ProcessDefaultProfile+0x736>

  }
  else {
    bUseDefaultFactory = 0;
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <ProcessDefaultProfile+0x7a0>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
  }

  // Set default values for Fuzzy Configuration
  if (bFuzzyPageValid == 0) {
 80034a6:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <ProcessDefaultProfile+0x7b4>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d108      	bne.n	80034c0 <ProcessDefaultProfile+0x750>
    bUseDefaultFuzzy = 1;
 80034ae:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <ProcessDefaultProfile+0x7b8>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
    SysVars.Quality1 = 1000;
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <ProcessDefaultProfile+0x78c>)
 80034b6:	21fc      	movs	r1, #252	; 0xfc
 80034b8:	22fa      	movs	r2, #250	; 0xfa
 80034ba:	0092      	lsls	r2, r2, #2
 80034bc:	505a      	str	r2, [r3, r1]
  }
  else {
    bUseDefaultFuzzy = 0;
  }
}
 80034be:	e002      	b.n	80034c6 <ProcessDefaultProfile+0x756>
    bUseDefaultFuzzy = 0;
 80034c0:	4b19      	ldr	r3, [pc, #100]	; (8003528 <ProcessDefaultProfile+0x7b8>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b003      	add	sp, #12
 80034cc:	bd90      	pop	{r4, r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	20000c68 	.word	0x20000c68
 80034d4:	0000047b 	.word	0x0000047b
 80034d8:	0000047c 	.word	0x0000047c
 80034dc:	0000047d 	.word	0x0000047d
 80034e0:	000007fc 	.word	0x000007fc
 80034e4:	00000202 	.word	0x00000202
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	20002f04 	.word	0x20002f04
 80034f0:	20000b18 	.word	0x20000b18
 80034f4:	20002cf6 	.word	0x20002cf6
 80034f8:	00000225 	.word	0x00000225
 80034fc:	200020c0 	.word	0x200020c0
 8003500:	200037e0 	.word	0x200037e0
 8003504:	20002cfa 	.word	0x20002cfa
 8003508:	200020bc 	.word	0x200020bc
 800350c:	20002f9e 	.word	0x20002f9e
 8003510:	20000c25 	.word	0x20000c25
 8003514:	200021fc 	.word	0x200021fc
 8003518:	00000ce4 	.word	0x00000ce4
 800351c:	00002710 	.word	0x00002710
 8003520:	20001eec 	.word	0x20001eec
 8003524:	20002cf5 	.word	0x20002cf5
 8003528:	20000c24 	.word	0x20000c24

0800352c <DIG_Init>:
//  Params:   Ch - Channel Number, 0 to 5, to be initialized
//           DIG_InitStruct - A DIG_InitTypeDef structure containing the initialization information
//
//  returns:  none
//
void DIG_Init(int32_t Ch, DIG_InitTypeDef DIG_InitStruct) {
 800352c:	b5b0      	push	{r4, r5, r7, lr}
 800352e:	b090      	sub	sp, #64	; 0x40
 8003530:	af04      	add	r7, sp, #16
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	0038      	movs	r0, r7
 8003536:	6001      	str	r1, [r0, #0]
 8003538:	6042      	str	r2, [r0, #4]
 800353a:	6083      	str	r3, [r0, #8]
  TIM_OC_InitTypeDef  sConfigOC;
  uint32_t             MinPeriod;
  //
  // Setup DIG_HandleStruct data structure based on selected Ch (0 to 5)
  //
  switch (Ch) {
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b05      	cmp	r3, #5
 8003540:	d900      	bls.n	8003544 <DIG_Init+0x18>
 8003542:	e1ba      	b.n	80038ba <DIG_Init+0x38e>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	009a      	lsls	r2, r3, #2
 8003548:	4bec      	ldr	r3, [pc, #944]	; (80038fc <DIG_Init+0x3d0>)
 800354a:	18d3      	adds	r3, r2, r3
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	469f      	mov	pc, r3
  case 0:
    DIG_HandleStruct[Ch].Handle = &htim15;
 8003550:	49eb      	ldr	r1, [pc, #940]	; (8003900 <DIG_Init+0x3d4>)
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	0013      	movs	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	189b      	adds	r3, r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	18cb      	adds	r3, r1, r3
 800355e:	330c      	adds	r3, #12
 8003560:	4ae8      	ldr	r2, [pc, #928]	; (8003904 <DIG_Init+0x3d8>)
 8003562:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Handle->Instance = TIM15;
 8003564:	49e6      	ldr	r1, [pc, #920]	; (8003900 <DIG_Init+0x3d4>)
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	0013      	movs	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	189b      	adds	r3, r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	18cb      	adds	r3, r1, r3
 8003572:	330c      	adds	r3, #12
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4ae4      	ldr	r2, [pc, #912]	; (8003908 <DIG_Init+0x3dc>)
 8003578:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].TIM_Channel = TIM_CHANNEL_2;
 800357a:	49e1      	ldr	r1, [pc, #900]	; (8003900 <DIG_Init+0x3d4>)
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	2044      	movs	r0, #68	; 0x44
 8003580:	0013      	movs	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	189b      	adds	r3, r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	18cb      	adds	r3, r1, r3
 800358a:	181b      	adds	r3, r3, r0
 800358c:	2204      	movs	r2, #4
 800358e:	801a      	strh	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dir_Port = DIR1_GPIO_Port;
 8003590:	49db      	ldr	r1, [pc, #876]	; (8003900 <DIG_Init+0x3d4>)
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	0013      	movs	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	189b      	adds	r3, r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	18cb      	adds	r3, r1, r3
 800359e:	3310      	adds	r3, #16
 80035a0:	4ada      	ldr	r2, [pc, #872]	; (800390c <DIG_Init+0x3e0>)
 80035a2:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dir_Pin = DIR1_Pin;
 80035a4:	49d6      	ldr	r1, [pc, #856]	; (8003900 <DIG_Init+0x3d4>)
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	2040      	movs	r0, #64	; 0x40
 80035aa:	0013      	movs	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	189b      	adds	r3, r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	18cb      	adds	r3, r1, r3
 80035b4:	181b      	adds	r3, r3, r0
 80035b6:	2204      	movs	r2, #4
 80035b8:	801a      	strh	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dig_IO_Port = DIG_IO1_GPIO_Port;
 80035ba:	49d1      	ldr	r1, [pc, #836]	; (8003900 <DIG_Init+0x3d4>)
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	0013      	movs	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	189b      	adds	r3, r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	18cb      	adds	r3, r1, r3
 80035c8:	3314      	adds	r3, #20
 80035ca:	2290      	movs	r2, #144	; 0x90
 80035cc:	05d2      	lsls	r2, r2, #23
 80035ce:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dig_IO_Pin = DIG_IO1_Pin;
 80035d0:	49cb      	ldr	r1, [pc, #812]	; (8003900 <DIG_Init+0x3d4>)
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	2042      	movs	r0, #66	; 0x42
 80035d6:	0013      	movs	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	189b      	adds	r3, r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	18cb      	adds	r3, r1, r3
 80035e0:	181b      	adds	r3, r3, r0
 80035e2:	2208      	movs	r2, #8
 80035e4:	801a      	strh	r2, [r3, #0]
    break;
 80035e6:	e16d      	b.n	80038c4 <DIG_Init+0x398>
  case 1:
    DIG_HandleStruct[Ch].Handle = &htim16;
 80035e8:	49c5      	ldr	r1, [pc, #788]	; (8003900 <DIG_Init+0x3d4>)
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	0013      	movs	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	189b      	adds	r3, r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	18cb      	adds	r3, r1, r3
 80035f6:	330c      	adds	r3, #12
 80035f8:	4ac5      	ldr	r2, [pc, #788]	; (8003910 <DIG_Init+0x3e4>)
 80035fa:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Handle->Instance = TIM16;
 80035fc:	49c0      	ldr	r1, [pc, #768]	; (8003900 <DIG_Init+0x3d4>)
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	0013      	movs	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	189b      	adds	r3, r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	18cb      	adds	r3, r1, r3
 800360a:	330c      	adds	r3, #12
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4ac1      	ldr	r2, [pc, #772]	; (8003914 <DIG_Init+0x3e8>)
 8003610:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].TIM_Channel = TIM_CHANNEL_1;
 8003612:	49bb      	ldr	r1, [pc, #748]	; (8003900 <DIG_Init+0x3d4>)
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	2044      	movs	r0, #68	; 0x44
 8003618:	0013      	movs	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	189b      	adds	r3, r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	18cb      	adds	r3, r1, r3
 8003622:	181b      	adds	r3, r3, r0
 8003624:	2200      	movs	r2, #0
 8003626:	801a      	strh	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dir_Port = DIR2_GPIO_Port;
 8003628:	49b5      	ldr	r1, [pc, #724]	; (8003900 <DIG_Init+0x3d4>)
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	0013      	movs	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	189b      	adds	r3, r3, r2
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	18cb      	adds	r3, r1, r3
 8003636:	3310      	adds	r3, #16
 8003638:	4ab4      	ldr	r2, [pc, #720]	; (800390c <DIG_Init+0x3e0>)
 800363a:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dir_Pin = DIR2_Pin;
 800363c:	49b0      	ldr	r1, [pc, #704]	; (8003900 <DIG_Init+0x3d4>)
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	2040      	movs	r0, #64	; 0x40
 8003642:	0013      	movs	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	189b      	adds	r3, r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	18cb      	adds	r3, r1, r3
 800364c:	181b      	adds	r3, r3, r0
 800364e:	2202      	movs	r2, #2
 8003650:	801a      	strh	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dig_IO_Port = DIG_IO2_GPIO_Port;
 8003652:	49ab      	ldr	r1, [pc, #684]	; (8003900 <DIG_Init+0x3d4>)
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	0013      	movs	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	189b      	adds	r3, r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	18cb      	adds	r3, r1, r3
 8003660:	3314      	adds	r3, #20
 8003662:	4aaa      	ldr	r2, [pc, #680]	; (800390c <DIG_Init+0x3e0>)
 8003664:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dig_IO_Pin = DIG_IO2_Pin;
 8003666:	49a6      	ldr	r1, [pc, #664]	; (8003900 <DIG_Init+0x3d4>)
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	2042      	movs	r0, #66	; 0x42
 800366c:	0013      	movs	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	189b      	adds	r3, r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	18cb      	adds	r3, r1, r3
 8003676:	181b      	adds	r3, r3, r0
 8003678:	2280      	movs	r2, #128	; 0x80
 800367a:	0052      	lsls	r2, r2, #1
 800367c:	801a      	strh	r2, [r3, #0]
    break;
 800367e:	e121      	b.n	80038c4 <DIG_Init+0x398>
  case 2:
    DIG_HandleStruct[Ch].Handle = &htim17;
 8003680:	499f      	ldr	r1, [pc, #636]	; (8003900 <DIG_Init+0x3d4>)
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	0013      	movs	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	189b      	adds	r3, r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	18cb      	adds	r3, r1, r3
 800368e:	330c      	adds	r3, #12
 8003690:	4aa1      	ldr	r2, [pc, #644]	; (8003918 <DIG_Init+0x3ec>)
 8003692:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Handle->Instance = TIM17;
 8003694:	499a      	ldr	r1, [pc, #616]	; (8003900 <DIG_Init+0x3d4>)
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	0013      	movs	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	189b      	adds	r3, r3, r2
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	18cb      	adds	r3, r1, r3
 80036a2:	330c      	adds	r3, #12
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a9d      	ldr	r2, [pc, #628]	; (800391c <DIG_Init+0x3f0>)
 80036a8:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].TIM_Channel = TIM_CHANNEL_1;
 80036aa:	4995      	ldr	r1, [pc, #596]	; (8003900 <DIG_Init+0x3d4>)
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	2044      	movs	r0, #68	; 0x44
 80036b0:	0013      	movs	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	189b      	adds	r3, r3, r2
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	18cb      	adds	r3, r1, r3
 80036ba:	181b      	adds	r3, r3, r0
 80036bc:	2200      	movs	r2, #0
 80036be:	801a      	strh	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dir_Port = DIR3_GPIO_Port;
 80036c0:	498f      	ldr	r1, [pc, #572]	; (8003900 <DIG_Init+0x3d4>)
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	0013      	movs	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	189b      	adds	r3, r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	18cb      	adds	r3, r1, r3
 80036ce:	3310      	adds	r3, #16
 80036d0:	4a8e      	ldr	r2, [pc, #568]	; (800390c <DIG_Init+0x3e0>)
 80036d2:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dir_Pin = DIR3_Pin;
 80036d4:	498a      	ldr	r1, [pc, #552]	; (8003900 <DIG_Init+0x3d4>)
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	2040      	movs	r0, #64	; 0x40
 80036da:	0013      	movs	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	189b      	adds	r3, r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	18cb      	adds	r3, r1, r3
 80036e4:	181b      	adds	r3, r3, r0
 80036e6:	2201      	movs	r2, #1
 80036e8:	801a      	strh	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dig_IO_Port = DIG_IO3_GPIO_Port;
 80036ea:	4985      	ldr	r1, [pc, #532]	; (8003900 <DIG_Init+0x3d4>)
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	0013      	movs	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	18cb      	adds	r3, r1, r3
 80036f8:	3314      	adds	r3, #20
 80036fa:	4a84      	ldr	r2, [pc, #528]	; (800390c <DIG_Init+0x3e0>)
 80036fc:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dig_IO_Pin = DIG_IO3_Pin;
 80036fe:	4980      	ldr	r1, [pc, #512]	; (8003900 <DIG_Init+0x3d4>)
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	2042      	movs	r0, #66	; 0x42
 8003704:	0013      	movs	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	189b      	adds	r3, r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	18cb      	adds	r3, r1, r3
 800370e:	181b      	adds	r3, r3, r0
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	0092      	lsls	r2, r2, #2
 8003714:	801a      	strh	r2, [r3, #0]
    break;
 8003716:	e0d5      	b.n	80038c4 <DIG_Init+0x398>
  case 3:
    DIG_HandleStruct[Ch].Handle = &htim3;
 8003718:	4979      	ldr	r1, [pc, #484]	; (8003900 <DIG_Init+0x3d4>)
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	0013      	movs	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	189b      	adds	r3, r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	18cb      	adds	r3, r1, r3
 8003726:	330c      	adds	r3, #12
 8003728:	4a7d      	ldr	r2, [pc, #500]	; (8003920 <DIG_Init+0x3f4>)
 800372a:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Handle->Instance = TIM3;
 800372c:	4974      	ldr	r1, [pc, #464]	; (8003900 <DIG_Init+0x3d4>)
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	0013      	movs	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	189b      	adds	r3, r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	18cb      	adds	r3, r1, r3
 800373a:	330c      	adds	r3, #12
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a79      	ldr	r2, [pc, #484]	; (8003924 <DIG_Init+0x3f8>)
 8003740:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].TIM_Channel = TIM_CHANNEL_1;
 8003742:	496f      	ldr	r1, [pc, #444]	; (8003900 <DIG_Init+0x3d4>)
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	2044      	movs	r0, #68	; 0x44
 8003748:	0013      	movs	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	189b      	adds	r3, r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	18cb      	adds	r3, r1, r3
 8003752:	181b      	adds	r3, r3, r0
 8003754:	2200      	movs	r2, #0
 8003756:	801a      	strh	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dir_Port = DIR4_GPIO_Port;
 8003758:	4969      	ldr	r1, [pc, #420]	; (8003900 <DIG_Init+0x3d4>)
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	0013      	movs	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	189b      	adds	r3, r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	18cb      	adds	r3, r1, r3
 8003766:	3310      	adds	r3, #16
 8003768:	4a6f      	ldr	r2, [pc, #444]	; (8003928 <DIG_Init+0x3fc>)
 800376a:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dir_Pin = DIR4_Pin;
 800376c:	4964      	ldr	r1, [pc, #400]	; (8003900 <DIG_Init+0x3d4>)
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	2040      	movs	r0, #64	; 0x40
 8003772:	0013      	movs	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	189b      	adds	r3, r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	18cb      	adds	r3, r1, r3
 800377c:	181b      	adds	r3, r3, r0
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	0192      	lsls	r2, r2, #6
 8003782:	801a      	strh	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dig_IO_Port = DIG_IO4_GPIO_Port;
 8003784:	495e      	ldr	r1, [pc, #376]	; (8003900 <DIG_Init+0x3d4>)
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	0013      	movs	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	189b      	adds	r3, r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	18cb      	adds	r3, r1, r3
 8003792:	3314      	adds	r3, #20
 8003794:	4a5d      	ldr	r2, [pc, #372]	; (800390c <DIG_Init+0x3e0>)
 8003796:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dig_IO_Pin = DIG_IO4_Pin;
 8003798:	4959      	ldr	r1, [pc, #356]	; (8003900 <DIG_Init+0x3d4>)
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	2042      	movs	r0, #66	; 0x42
 800379e:	0013      	movs	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	189b      	adds	r3, r3, r2
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	18cb      	adds	r3, r1, r3
 80037a8:	181b      	adds	r3, r3, r0
 80037aa:	2210      	movs	r2, #16
 80037ac:	801a      	strh	r2, [r3, #0]
    break;
 80037ae:	e089      	b.n	80038c4 <DIG_Init+0x398>
  case 4:
    DIG_HandleStruct[Ch].Handle = NULL;               // Digital I/O #5 has no timer availiable
 80037b0:	4953      	ldr	r1, [pc, #332]	; (8003900 <DIG_Init+0x3d4>)
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	0013      	movs	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	189b      	adds	r3, r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	18cb      	adds	r3, r1, r3
 80037be:	330c      	adds	r3, #12
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dir_Port = DIR5_GPIO_Port;
 80037c4:	494e      	ldr	r1, [pc, #312]	; (8003900 <DIG_Init+0x3d4>)
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	0013      	movs	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	189b      	adds	r3, r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	18cb      	adds	r3, r1, r3
 80037d2:	3310      	adds	r3, #16
 80037d4:	4a4d      	ldr	r2, [pc, #308]	; (800390c <DIG_Init+0x3e0>)
 80037d6:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dir_Pin = DIR5_Pin;
 80037d8:	4949      	ldr	r1, [pc, #292]	; (8003900 <DIG_Init+0x3d4>)
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	2040      	movs	r0, #64	; 0x40
 80037de:	0013      	movs	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	189b      	adds	r3, r3, r2
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	18cb      	adds	r3, r1, r3
 80037e8:	181b      	adds	r3, r3, r0
 80037ea:	2280      	movs	r2, #128	; 0x80
 80037ec:	0192      	lsls	r2, r2, #6
 80037ee:	801a      	strh	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dig_IO_Port = DIG_IO5_GPIO_Port;
 80037f0:	4943      	ldr	r1, [pc, #268]	; (8003900 <DIG_Init+0x3d4>)
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	0013      	movs	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	189b      	adds	r3, r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	18cb      	adds	r3, r1, r3
 80037fe:	3314      	adds	r3, #20
 8003800:	2290      	movs	r2, #144	; 0x90
 8003802:	05d2      	lsls	r2, r2, #23
 8003804:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dig_IO_Pin = DIG_IO5_Pin;
 8003806:	493e      	ldr	r1, [pc, #248]	; (8003900 <DIG_Init+0x3d4>)
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	2042      	movs	r0, #66	; 0x42
 800380c:	0013      	movs	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	189b      	adds	r3, r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	18cb      	adds	r3, r1, r3
 8003816:	181b      	adds	r3, r3, r0
 8003818:	2202      	movs	r2, #2
 800381a:	801a      	strh	r2, [r3, #0]
    break;
 800381c:	e052      	b.n	80038c4 <DIG_Init+0x398>
  case 5:
    DIG_HandleStruct[Ch].Handle = &htim1;
 800381e:	4938      	ldr	r1, [pc, #224]	; (8003900 <DIG_Init+0x3d4>)
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	0013      	movs	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	189b      	adds	r3, r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	18cb      	adds	r3, r1, r3
 800382c:	330c      	adds	r3, #12
 800382e:	4a3f      	ldr	r2, [pc, #252]	; (800392c <DIG_Init+0x400>)
 8003830:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Handle->Instance = TIM1;
 8003832:	4933      	ldr	r1, [pc, #204]	; (8003900 <DIG_Init+0x3d4>)
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	0013      	movs	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	189b      	adds	r3, r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	18cb      	adds	r3, r1, r3
 8003840:	330c      	adds	r3, #12
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a3a      	ldr	r2, [pc, #232]	; (8003930 <DIG_Init+0x404>)
 8003846:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].TIM_Channel = TIM_CHANNEL_1;
 8003848:	492d      	ldr	r1, [pc, #180]	; (8003900 <DIG_Init+0x3d4>)
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	2044      	movs	r0, #68	; 0x44
 800384e:	0013      	movs	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	189b      	adds	r3, r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	18cb      	adds	r3, r1, r3
 8003858:	181b      	adds	r3, r3, r0
 800385a:	2200      	movs	r2, #0
 800385c:	801a      	strh	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dir_Port = DIR6_GPIO_Port;
 800385e:	4928      	ldr	r1, [pc, #160]	; (8003900 <DIG_Init+0x3d4>)
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	0013      	movs	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	189b      	adds	r3, r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	18cb      	adds	r3, r1, r3
 800386c:	3310      	adds	r3, #16
 800386e:	4a27      	ldr	r2, [pc, #156]	; (800390c <DIG_Init+0x3e0>)
 8003870:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dir_Pin = DIR6_Pin;
 8003872:	4923      	ldr	r1, [pc, #140]	; (8003900 <DIG_Init+0x3d4>)
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	2040      	movs	r0, #64	; 0x40
 8003878:	0013      	movs	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	189b      	adds	r3, r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	18cb      	adds	r3, r1, r3
 8003882:	181b      	adds	r3, r3, r0
 8003884:	2280      	movs	r2, #128	; 0x80
 8003886:	0152      	lsls	r2, r2, #5
 8003888:	801a      	strh	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dig_IO_Port = DIG_IO6_GPIO_Port;
 800388a:	491d      	ldr	r1, [pc, #116]	; (8003900 <DIG_Init+0x3d4>)
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	0013      	movs	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	189b      	adds	r3, r3, r2
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	18cb      	adds	r3, r1, r3
 8003898:	3314      	adds	r3, #20
 800389a:	2290      	movs	r2, #144	; 0x90
 800389c:	05d2      	lsls	r2, r2, #23
 800389e:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Dig_IO_Pin = DIG_IO6_Pin;
 80038a0:	4917      	ldr	r1, [pc, #92]	; (8003900 <DIG_Init+0x3d4>)
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	2042      	movs	r0, #66	; 0x42
 80038a6:	0013      	movs	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	189b      	adds	r3, r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	18cb      	adds	r3, r1, r3
 80038b0:	181b      	adds	r3, r3, r0
 80038b2:	2280      	movs	r2, #128	; 0x80
 80038b4:	0052      	lsls	r2, r2, #1
 80038b6:	801a      	strh	r2, [r3, #0]
    break;
 80038b8:	e004      	b.n	80038c4 <DIG_Init+0x398>
  default:
    Error_Handler(FILE_DIG, __LINE__);
 80038ba:	217b      	movs	r1, #123	; 0x7b
 80038bc:	2007      	movs	r0, #7
 80038be:	f000 fd89 	bl	80043d4 <Error_Handler>
    break;
 80038c2:	46c0      	nop			; (mov r8, r8)
  }
  //
  // Save InitStruct
  //
  DIG_HandleStruct[Ch].DIG_InitStruct = DIG_InitStruct;
 80038c4:	490e      	ldr	r1, [pc, #56]	; (8003900 <DIG_Init+0x3d4>)
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	0013      	movs	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	189b      	adds	r3, r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	003a      	movs	r2, r7
 80038d2:	18cb      	adds	r3, r1, r3
 80038d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80038d6:	c313      	stmia	r3!, {r0, r1, r4}
  //
  // Initialize GPIO based on selected Mode
  //
  switch (DIG_HandleStruct[Ch].DIG_InitStruct.Mode) {
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <DIG_Init+0x3d4>)
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	0013      	movs	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	189b      	adds	r3, r3, r2
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	18cb      	adds	r3, r1, r3
 80038e6:	3308      	adds	r3, #8
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d900      	bls.n	80038f0 <DIG_Init+0x3c4>
 80038ee:	e263      	b.n	8003db8 <DIG_Init+0x88c>
 80038f0:	009a      	lsls	r2, r3, #2
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <DIG_Init+0x408>)
 80038f4:	18d3      	adds	r3, r2, r3
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	469f      	mov	pc, r3
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	0800ca88 	.word	0x0800ca88
 8003900:	20002d24 	.word	0x20002d24
 8003904:	20001468 	.word	0x20001468
 8003908:	40014000 	.word	0x40014000
 800390c:	48000400 	.word	0x48000400
 8003910:	200037b8 	.word	0x200037b8
 8003914:	40014400 	.word	0x40014400
 8003918:	2000155c 	.word	0x2000155c
 800391c:	40014800 	.word	0x40014800
 8003920:	20001c68 	.word	0x20001c68
 8003924:	40000400 	.word	0x40000400
 8003928:	48000800 	.word	0x48000800
 800392c:	20002cfc 	.word	0x20002cfc
 8003930:	40012c00 	.word	0x40012c00
 8003934:	0800caa0 	.word	0x0800caa0
  case DIG_IN:
    //
    // Configure GPIO as an input without internal pull-up enabled
    // Configure Buffer Chip as an input also
    //
    STM32_GPIO_Init(DIG_HandleStruct[Ch].Dig_IO_Port, DIG_HandleStruct[Ch].Dig_IO_Pin, GPIO_MODE_INPUT, GPIO_NOPULL, 0, 0, 0);
 8003938:	49ae      	ldr	r1, [pc, #696]	; (8003bf4 <DIG_Init+0x6c8>)
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	0013      	movs	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	189b      	adds	r3, r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	18cb      	adds	r3, r1, r3
 8003946:	3314      	adds	r3, #20
 8003948:	681c      	ldr	r4, [r3, #0]
 800394a:	49aa      	ldr	r1, [pc, #680]	; (8003bf4 <DIG_Init+0x6c8>)
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	2042      	movs	r0, #66	; 0x42
 8003950:	0013      	movs	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	189b      	adds	r3, r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	18cb      	adds	r3, r1, r3
 800395a:	181b      	adds	r3, r3, r0
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	0019      	movs	r1, r3
 8003960:	2300      	movs	r3, #0
 8003962:	9302      	str	r3, [sp, #8]
 8003964:	2300      	movs	r3, #0
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	2300      	movs	r3, #0
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	2300      	movs	r3, #0
 800396e:	2200      	movs	r2, #0
 8003970:	0020      	movs	r0, r4
 8003972:	f002 f811 	bl	8005998 <STM32_GPIO_Init>
    STM32_GPIO_WritePin(DIG_HandleStruct[Ch].Dir_Port, DIG_HandleStruct[Ch].Dir_Pin, GPIO_PIN_RESET);
 8003976:	499f      	ldr	r1, [pc, #636]	; (8003bf4 <DIG_Init+0x6c8>)
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	0013      	movs	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	189b      	adds	r3, r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	18cb      	adds	r3, r1, r3
 8003984:	3310      	adds	r3, #16
 8003986:	681c      	ldr	r4, [r3, #0]
 8003988:	499a      	ldr	r1, [pc, #616]	; (8003bf4 <DIG_Init+0x6c8>)
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	2040      	movs	r0, #64	; 0x40
 800398e:	0013      	movs	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	189b      	adds	r3, r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	18cb      	adds	r3, r1, r3
 8003998:	181b      	adds	r3, r3, r0
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	0019      	movs	r1, r3
 80039a0:	0020      	movs	r0, r4
 80039a2:	f001 ffb3 	bl	800590c <STM32_GPIO_WritePin>
    break;
 80039a6:	e20c      	b.n	8003dc2 <DIG_Init+0x896>
  case DIG_OUT:
    //
    //  Configure Buffer Chip as an output
    //  Configure GPIO as an output
    //
    STM32_GPIO_WritePin(DIG_HandleStruct[Ch].Dir_Port, DIG_HandleStruct[Ch].Dir_Pin, GPIO_PIN_SET);
 80039a8:	4992      	ldr	r1, [pc, #584]	; (8003bf4 <DIG_Init+0x6c8>)
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	0013      	movs	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	189b      	adds	r3, r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	18cb      	adds	r3, r1, r3
 80039b6:	3310      	adds	r3, #16
 80039b8:	681c      	ldr	r4, [r3, #0]
 80039ba:	498e      	ldr	r1, [pc, #568]	; (8003bf4 <DIG_Init+0x6c8>)
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	2040      	movs	r0, #64	; 0x40
 80039c0:	0013      	movs	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	189b      	adds	r3, r3, r2
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	18cb      	adds	r3, r1, r3
 80039ca:	181b      	adds	r3, r3, r0
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	2201      	movs	r2, #1
 80039d0:	0019      	movs	r1, r3
 80039d2:	0020      	movs	r0, r4
 80039d4:	f001 ff9a 	bl	800590c <STM32_GPIO_WritePin>
    STM32_GPIO_Init(DIG_HandleStruct[Ch].Dig_IO_Port, DIG_HandleStruct[Ch].Dig_IO_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, RESET);
 80039d8:	4986      	ldr	r1, [pc, #536]	; (8003bf4 <DIG_Init+0x6c8>)
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	0013      	movs	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	189b      	adds	r3, r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	18cb      	adds	r3, r1, r3
 80039e6:	3314      	adds	r3, #20
 80039e8:	681c      	ldr	r4, [r3, #0]
 80039ea:	4982      	ldr	r1, [pc, #520]	; (8003bf4 <DIG_Init+0x6c8>)
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	2042      	movs	r0, #66	; 0x42
 80039f0:	0013      	movs	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	189b      	adds	r3, r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	18cb      	adds	r3, r1, r3
 80039fa:	181b      	adds	r3, r3, r0
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	0019      	movs	r1, r3
 8003a00:	2300      	movs	r3, #0
 8003a02:	9302      	str	r3, [sp, #8]
 8003a04:	2300      	movs	r3, #0
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2201      	movs	r2, #1
 8003a10:	0020      	movs	r0, r4
 8003a12:	f001 ffc1 	bl	8005998 <STM32_GPIO_Init>
    break;
 8003a16:	e1d4      	b.n	8003dc2 <DIG_Init+0x896>
    //
    //  This Mode is only valid on DIG_IO1
    //  Configure GPIO as a UART2 RX input
    //  Configure Buffer Chip as an input
    //
    MX_USART2_UART_Init();     // RX connected to DIGIO1, TX connected to DIGIO1 and DIGIO2
 8003a18:	f007 ff0e 	bl	800b838 <MX_USART2_UART_Init>
    STM32_GPIO_Init(DIG_HandleStruct[Ch].Dig_IO_Port, DIG_HandleStruct[Ch].Dig_IO_Pin, GPIO_MODE_AF_PP, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_AF1_USART2, 0);
 8003a1c:	4975      	ldr	r1, [pc, #468]	; (8003bf4 <DIG_Init+0x6c8>)
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	0013      	movs	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	189b      	adds	r3, r3, r2
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	18cb      	adds	r3, r1, r3
 8003a2a:	3314      	adds	r3, #20
 8003a2c:	681c      	ldr	r4, [r3, #0]
 8003a2e:	4971      	ldr	r1, [pc, #452]	; (8003bf4 <DIG_Init+0x6c8>)
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	2042      	movs	r0, #66	; 0x42
 8003a34:	0013      	movs	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	189b      	adds	r3, r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	18cb      	adds	r3, r1, r3
 8003a3e:	181b      	adds	r3, r3, r0
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	0019      	movs	r1, r3
 8003a44:	2300      	movs	r3, #0
 8003a46:	9302      	str	r3, [sp, #8]
 8003a48:	2301      	movs	r3, #1
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2301      	movs	r3, #1
 8003a52:	2202      	movs	r2, #2
 8003a54:	0020      	movs	r0, r4
 8003a56:	f001 ff9f 	bl	8005998 <STM32_GPIO_Init>
    STM32_GPIO_WritePin(DIG_HandleStruct[Ch].Dir_Port, DIG_HandleStruct[Ch].Dir_Pin, GPIO_PIN_RESET);
 8003a5a:	4966      	ldr	r1, [pc, #408]	; (8003bf4 <DIG_Init+0x6c8>)
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	0013      	movs	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	189b      	adds	r3, r3, r2
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	18cb      	adds	r3, r1, r3
 8003a68:	3310      	adds	r3, #16
 8003a6a:	681c      	ldr	r4, [r3, #0]
 8003a6c:	4961      	ldr	r1, [pc, #388]	; (8003bf4 <DIG_Init+0x6c8>)
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	2040      	movs	r0, #64	; 0x40
 8003a72:	0013      	movs	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	189b      	adds	r3, r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	18cb      	adds	r3, r1, r3
 8003a7c:	181b      	adds	r3, r3, r0
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	2200      	movs	r2, #0
 8003a82:	0019      	movs	r1, r3
 8003a84:	0020      	movs	r0, r4
 8003a86:	f001 ff41 	bl	800590c <STM32_GPIO_WritePin>
    break;
 8003a8a:	e19a      	b.n	8003dc2 <DIG_Init+0x896>
    // NOTE:  The DIG_IO2 port pin (PB8) must be set as an input.
    //          The Buffer Chip is then set as an output.  The DIG_IO2
    //          signal wire is then driven by the USART2_TX (PA2)
    //          signal through a 4.7K resistor (R6).
    //
    STM32_GPIO_Init(DIG_HandleStruct[Ch].Dig_IO_Port, DIG_HandleStruct[Ch].Dig_IO_Pin, GPIO_MODE_INPUT, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, 0);
 8003a8c:	4959      	ldr	r1, [pc, #356]	; (8003bf4 <DIG_Init+0x6c8>)
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	0013      	movs	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	189b      	adds	r3, r3, r2
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	18cb      	adds	r3, r1, r3
 8003a9a:	3314      	adds	r3, #20
 8003a9c:	681c      	ldr	r4, [r3, #0]
 8003a9e:	4955      	ldr	r1, [pc, #340]	; (8003bf4 <DIG_Init+0x6c8>)
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	2042      	movs	r0, #66	; 0x42
 8003aa4:	0013      	movs	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	189b      	adds	r3, r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	18cb      	adds	r3, r1, r3
 8003aae:	181b      	adds	r3, r3, r0
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	9302      	str	r3, [sp, #8]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	2300      	movs	r3, #0
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	0020      	movs	r0, r4
 8003ac6:	f001 ff67 	bl	8005998 <STM32_GPIO_Init>
    //
    // Finally, configure Buffer (IC14) as an output
    //
    STM32_GPIO_WritePin(DIG_HandleStruct[Ch].Dir_Port, DIG_HandleStruct[Ch].Dir_Pin, GPIO_PIN_SET);        // Set as an output
 8003aca:	494a      	ldr	r1, [pc, #296]	; (8003bf4 <DIG_Init+0x6c8>)
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	0013      	movs	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	189b      	adds	r3, r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	18cb      	adds	r3, r1, r3
 8003ad8:	3310      	adds	r3, #16
 8003ada:	681c      	ldr	r4, [r3, #0]
 8003adc:	4945      	ldr	r1, [pc, #276]	; (8003bf4 <DIG_Init+0x6c8>)
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	2040      	movs	r0, #64	; 0x40
 8003ae2:	0013      	movs	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	189b      	adds	r3, r3, r2
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	18cb      	adds	r3, r1, r3
 8003aec:	181b      	adds	r3, r3, r0
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	2201      	movs	r2, #1
 8003af2:	0019      	movs	r1, r3
 8003af4:	0020      	movs	r0, r4
 8003af6:	f001 ff09 	bl	800590c <STM32_GPIO_WritePin>
    break;
 8003afa:	e162      	b.n	8003dc2 <DIG_Init+0x896>
  case DIG_FREQ_IN:
    //
    //  Configure GPIO as an input in Interrupt mode on Rising Edge
    //  Configure Buffer Chip as an input
    //
    STM32_GPIO_Init(DIG_HandleStruct[Ch].Dig_IO_Port, DIG_HandleStruct[Ch].Dig_IO_Pin, GPIO_MODE_IT_RISING, GPIO_NOPULL, 0, 0, 0);
 8003afc:	493d      	ldr	r1, [pc, #244]	; (8003bf4 <DIG_Init+0x6c8>)
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	0013      	movs	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	189b      	adds	r3, r3, r2
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	18cb      	adds	r3, r1, r3
 8003b0a:	3314      	adds	r3, #20
 8003b0c:	681c      	ldr	r4, [r3, #0]
 8003b0e:	4939      	ldr	r1, [pc, #228]	; (8003bf4 <DIG_Init+0x6c8>)
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	2042      	movs	r0, #66	; 0x42
 8003b14:	0013      	movs	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	189b      	adds	r3, r3, r2
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	18cb      	adds	r3, r1, r3
 8003b1e:	181b      	adds	r3, r3, r0
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	0019      	movs	r1, r3
 8003b24:	4a34      	ldr	r2, [pc, #208]	; (8003bf8 <DIG_Init+0x6cc>)
 8003b26:	2300      	movs	r3, #0
 8003b28:	9302      	str	r3, [sp, #8]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	0020      	movs	r0, r4
 8003b36:	f001 ff2f 	bl	8005998 <STM32_GPIO_Init>
    STM32_GPIO_WritePin(DIG_HandleStruct[Ch].Dir_Port, DIG_HandleStruct[Ch].Dir_Pin, GPIO_PIN_RESET);
 8003b3a:	492e      	ldr	r1, [pc, #184]	; (8003bf4 <DIG_Init+0x6c8>)
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	0013      	movs	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	189b      	adds	r3, r3, r2
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	18cb      	adds	r3, r1, r3
 8003b48:	3310      	adds	r3, #16
 8003b4a:	681c      	ldr	r4, [r3, #0]
 8003b4c:	4929      	ldr	r1, [pc, #164]	; (8003bf4 <DIG_Init+0x6c8>)
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	2040      	movs	r0, #64	; 0x40
 8003b52:	0013      	movs	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	18cb      	adds	r3, r1, r3
 8003b5c:	181b      	adds	r3, r3, r0
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	2200      	movs	r2, #0
 8003b62:	0019      	movs	r1, r3
 8003b64:	0020      	movs	r0, r4
 8003b66:	f001 fed1 	bl	800590c <STM32_GPIO_WritePin>
    //
    // Now, enable the interrupt.  NOTE:  As both Digital I/O #2 and #6 share the same interrupt pin, only one of them can be configured as a Frequency
    // Input at any one time.
    //
    switch (Ch) {
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b05      	cmp	r3, #5
 8003b6e:	d83b      	bhi.n	8003be8 <DIG_Init+0x6bc>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	009a      	lsls	r2, r3, #2
 8003b74:	4b21      	ldr	r3, [pc, #132]	; (8003bfc <DIG_Init+0x6d0>)
 8003b76:	18d3      	adds	r3, r2, r3
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	469f      	mov	pc, r3
    case 0:
      STM32_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);                 // GPIO_PIN_3
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2100      	movs	r1, #0
 8003b80:	2006      	movs	r0, #6
 8003b82:	f002 f919 	bl	8005db8 <STM32_NVIC_SetPriority>
      STM32_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003b86:	2006      	movs	r0, #6
 8003b88:	f002 f978 	bl	8005e7c <STM32_NVIC_EnableIRQ>
      break;
 8003b8c:	e031      	b.n	8003bf2 <DIG_Init+0x6c6>
    case 1:
      STM32_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);               // GPIO_PIN_8
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2100      	movs	r1, #0
 8003b92:	2007      	movs	r0, #7
 8003b94:	f002 f910 	bl	8005db8 <STM32_NVIC_SetPriority>
      STM32_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003b98:	2007      	movs	r0, #7
 8003b9a:	f002 f96f 	bl	8005e7c <STM32_NVIC_EnableIRQ>
      break;
 8003b9e:	e028      	b.n	8003bf2 <DIG_Init+0x6c6>
    case 2:
      STM32_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);               // GPIO_PIN_9
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	2007      	movs	r0, #7
 8003ba6:	f002 f907 	bl	8005db8 <STM32_NVIC_SetPriority>
      STM32_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003baa:	2007      	movs	r0, #7
 8003bac:	f002 f966 	bl	8005e7c <STM32_NVIC_EnableIRQ>
      break;
 8003bb0:	e01f      	b.n	8003bf2 <DIG_Init+0x6c6>
    case 3:
      STM32_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);               // GPIO_PIN_4
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	2007      	movs	r0, #7
 8003bb8:	f002 f8fe 	bl	8005db8 <STM32_NVIC_SetPriority>
      STM32_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003bbc:	2007      	movs	r0, #7
 8003bbe:	f002 f95d 	bl	8005e7c <STM32_NVIC_EnableIRQ>
      break;
 8003bc2:	e016      	b.n	8003bf2 <DIG_Init+0x6c6>
    case 4:
      STM32_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);               // GPIO_PIN_1
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	2005      	movs	r0, #5
 8003bca:	f002 f8f5 	bl	8005db8 <STM32_NVIC_SetPriority>
      STM32_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003bce:	2005      	movs	r0, #5
 8003bd0:	f002 f954 	bl	8005e7c <STM32_NVIC_EnableIRQ>
      break;
 8003bd4:	e00d      	b.n	8003bf2 <DIG_Init+0x6c6>
    case 5:
      STM32_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);               // GPIO_PIN_8
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2100      	movs	r1, #0
 8003bda:	2007      	movs	r0, #7
 8003bdc:	f002 f8ec 	bl	8005db8 <STM32_NVIC_SetPriority>
      STM32_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003be0:	2007      	movs	r0, #7
 8003be2:	f002 f94b 	bl	8005e7c <STM32_NVIC_EnableIRQ>
      break;
 8003be6:	e004      	b.n	8003bf2 <DIG_Init+0x6c6>
    default:
      Error_Handler(FILE_DIG, __LINE__);
 8003be8:	21d9      	movs	r1, #217	; 0xd9
 8003bea:	2007      	movs	r0, #7
 8003bec:	f000 fbf2 	bl	80043d4 <Error_Handler>
      break;
 8003bf0:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8003bf2:	e0e6      	b.n	8003dc2 <DIG_Init+0x896>
 8003bf4:	20002d24 	.word	0x20002d24
 8003bf8:	10110000 	.word	0x10110000
 8003bfc:	0800cac4 	.word	0x0800cac4

  case DIG_FREQ_OUT:
    //
    // Set Buffer Chip direction to Output
    //
    STM32_GPIO_WritePin(DIG_HandleStruct[Ch].Dir_Port, DIG_HandleStruct[Ch].Dir_Pin, GPIO_PIN_SET);
 8003c00:	4972      	ldr	r1, [pc, #456]	; (8003dcc <DIG_Init+0x8a0>)
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	0013      	movs	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	189b      	adds	r3, r3, r2
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	18cb      	adds	r3, r1, r3
 8003c0e:	3310      	adds	r3, #16
 8003c10:	681c      	ldr	r4, [r3, #0]
 8003c12:	496e      	ldr	r1, [pc, #440]	; (8003dcc <DIG_Init+0x8a0>)
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	2040      	movs	r0, #64	; 0x40
 8003c18:	0013      	movs	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	189b      	adds	r3, r3, r2
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	18cb      	adds	r3, r1, r3
 8003c22:	181b      	adds	r3, r3, r0
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	2201      	movs	r2, #1
 8003c28:	0019      	movs	r1, r3
 8003c2a:	0020      	movs	r0, r4
 8003c2c:	f001 fe6e 	bl	800590c <STM32_GPIO_WritePin>
    //
    // Calculate Prescaler and Period.  The Prescaler is set to give the largest possible Period value that is less than 65000.
    //  This will result in the best possible frequency accuracy
    //
    MinPeriod = (uint32_t)(2400000000uLL / DIG_HandleStruct[Ch].DIG_InitStruct.Frequency);         // 24.00 Mhz / xxxxxxx.xx Hz
 8003c30:	4966      	ldr	r1, [pc, #408]	; (8003dcc <DIG_Init+0x8a0>)
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	0013      	movs	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	189b      	adds	r3, r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	585b      	ldr	r3, [r3, r1]
 8003c3e:	0019      	movs	r1, r3
 8003c40:	4863      	ldr	r0, [pc, #396]	; (8003dd0 <DIG_Init+0x8a4>)
 8003c42:	f7fc fac5 	bl	80001d0 <__udivsi3>
 8003c46:	0003      	movs	r3, r0
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    DIG_HandleStruct[Ch].Prescaler = MinPeriod / 65000;
 8003c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4c:	4961      	ldr	r1, [pc, #388]	; (8003dd4 <DIG_Init+0x8a8>)
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f7fc fabe 	bl	80001d0 <__udivsi3>
 8003c54:	0003      	movs	r3, r0
 8003c56:	0018      	movs	r0, r3
 8003c58:	495c      	ldr	r1, [pc, #368]	; (8003dcc <DIG_Init+0x8a0>)
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	0013      	movs	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	18cb      	adds	r3, r1, r3
 8003c66:	3318      	adds	r3, #24
 8003c68:	6018      	str	r0, [r3, #0]
    DIG_HandleStruct[Ch].Period = (uint32_t)((2400000000uLL / (DIG_HandleStruct[Ch].Prescaler + 1)) / DIG_HandleStruct[Ch].DIG_InitStruct.Frequency);
 8003c6a:	4958      	ldr	r1, [pc, #352]	; (8003dcc <DIG_Init+0x8a0>)
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	0013      	movs	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	189b      	adds	r3, r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	18cb      	adds	r3, r1, r3
 8003c78:	3318      	adds	r3, #24
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	0019      	movs	r1, r3
 8003c80:	4853      	ldr	r0, [pc, #332]	; (8003dd0 <DIG_Init+0x8a4>)
 8003c82:	f7fc faa5 	bl	80001d0 <__udivsi3>
 8003c86:	0003      	movs	r3, r0
 8003c88:	0018      	movs	r0, r3
 8003c8a:	4950      	ldr	r1, [pc, #320]	; (8003dcc <DIG_Init+0x8a0>)
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	0013      	movs	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	585b      	ldr	r3, [r3, r1]
 8003c98:	0019      	movs	r1, r3
 8003c9a:	f7fc fa99 	bl	80001d0 <__udivsi3>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	494a      	ldr	r1, [pc, #296]	; (8003dcc <DIG_Init+0x8a0>)
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	0013      	movs	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	189b      	adds	r3, r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	18cb      	adds	r3, r1, r3
 8003cb0:	331c      	adds	r3, #28
 8003cb2:	6018      	str	r0, [r3, #0]
    //
    // Initialize Timer Base
    //
    STM32_TIM_Base_Init(DIG_HandleStruct[Ch].Handle->Instance, DIG_HandleStruct[Ch].Prescaler, DIG_HandleStruct[Ch].Period - 1, TIM_AUTORELOAD_PRELOAD_DISABLE);
 8003cb4:	4945      	ldr	r1, [pc, #276]	; (8003dcc <DIG_Init+0x8a0>)
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	0013      	movs	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	189b      	adds	r3, r3, r2
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	18cb      	adds	r3, r1, r3
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	4940      	ldr	r1, [pc, #256]	; (8003dcc <DIG_Init+0x8a0>)
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	0013      	movs	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	189b      	adds	r3, r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	18cb      	adds	r3, r1, r3
 8003cd6:	3318      	adds	r3, #24
 8003cd8:	681c      	ldr	r4, [r3, #0]
 8003cda:	493c      	ldr	r1, [pc, #240]	; (8003dcc <DIG_Init+0x8a0>)
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	0013      	movs	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	189b      	adds	r3, r3, r2
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	18cb      	adds	r3, r1, r3
 8003ce8:	331c      	adds	r3, #28
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	1e5a      	subs	r2, r3, #1
 8003cee:	2300      	movs	r3, #0
 8003cf0:	0021      	movs	r1, r4
 8003cf2:	f007 f93d 	bl	800af70 <STM32_TIM_Base_Init>
    //
    // Initialize Timer Channel
    //
    sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003cf6:	2510      	movs	r5, #16
 8003cf8:	197b      	adds	r3, r7, r5
 8003cfa:	2230      	movs	r2, #48	; 0x30
 8003cfc:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 0;
 8003cfe:	197b      	adds	r3, r7, r5
 8003d00:	2200      	movs	r2, #0
 8003d02:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d04:	197b      	adds	r3, r7, r5
 8003d06:	2200      	movs	r2, #0
 8003d08:	609a      	str	r2, [r3, #8]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d0a:	197b      	adds	r3, r7, r5
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	60da      	str	r2, [r3, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d10:	197b      	adds	r3, r7, r5
 8003d12:	2200      	movs	r2, #0
 8003d14:	611a      	str	r2, [r3, #16]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d16:	197b      	adds	r3, r7, r5
 8003d18:	2200      	movs	r2, #0
 8003d1a:	615a      	str	r2, [r3, #20]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d1c:	197b      	adds	r3, r7, r5
 8003d1e:	2200      	movs	r2, #0
 8003d20:	619a      	str	r2, [r3, #24]
    STM32_TIM_PWM_ConfigChannel(DIG_HandleStruct[Ch].Handle->Instance, &sConfigOC, DIG_HandleStruct[Ch].TIM_Channel);
 8003d22:	492a      	ldr	r1, [pc, #168]	; (8003dcc <DIG_Init+0x8a0>)
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	0013      	movs	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	189b      	adds	r3, r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	18cb      	adds	r3, r1, r3
 8003d30:	330c      	adds	r3, #12
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681c      	ldr	r4, [r3, #0]
 8003d36:	4925      	ldr	r1, [pc, #148]	; (8003dcc <DIG_Init+0x8a0>)
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	2044      	movs	r0, #68	; 0x44
 8003d3c:	0013      	movs	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	18cb      	adds	r3, r1, r3
 8003d46:	181b      	adds	r3, r3, r0
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	001a      	movs	r2, r3
 8003d4c:	197b      	adds	r3, r7, r5
 8003d4e:	0019      	movs	r1, r3
 8003d50:	0020      	movs	r0, r4
 8003d52:	f007 fa6f 	bl	800b234 <STM32_TIM_PWM_ConfigChannel>
    STM32_TIM_MspPostInit(DIG_HandleStruct[Ch].Handle->Instance);
 8003d56:	491d      	ldr	r1, [pc, #116]	; (8003dcc <DIG_Init+0x8a0>)
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	0013      	movs	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	189b      	adds	r3, r3, r2
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	18cb      	adds	r3, r1, r3
 8003d64:	330c      	adds	r3, #12
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f007 fab0 	bl	800b2d0 <STM32_TIM_MspPostInit>
    STM32_TIM_PWM_Start(DIG_HandleStruct[Ch].Handle->Instance, DIG_HandleStruct[Ch].TIM_Channel);
 8003d70:	4916      	ldr	r1, [pc, #88]	; (8003dcc <DIG_Init+0x8a0>)
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	0013      	movs	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	18cb      	adds	r3, r1, r3
 8003d7e:	330c      	adds	r3, #12
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681c      	ldr	r4, [r3, #0]
 8003d84:	4911      	ldr	r1, [pc, #68]	; (8003dcc <DIG_Init+0x8a0>)
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	2044      	movs	r0, #68	; 0x44
 8003d8a:	0013      	movs	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	18cb      	adds	r3, r1, r3
 8003d94:	181b      	adds	r3, r3, r0
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	0019      	movs	r1, r3
 8003d9a:	0020      	movs	r0, r4
 8003d9c:	f007 fb0a 	bl	800b3b4 <STM32_TIM_PWM_Start>
    DIG_HandleStruct[Ch].bTimerUsed = 1;
 8003da0:	490a      	ldr	r1, [pc, #40]	; (8003dcc <DIG_Init+0x8a0>)
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	2046      	movs	r0, #70	; 0x46
 8003da6:	0013      	movs	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	189b      	adds	r3, r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	18cb      	adds	r3, r1, r3
 8003db0:	181b      	adds	r3, r3, r0
 8003db2:	2201      	movs	r2, #1
 8003db4:	801a      	strh	r2, [r3, #0]
    break;
 8003db6:	e004      	b.n	8003dc2 <DIG_Init+0x896>

  default:
    Error_Handler(FILE_DIG, __LINE__);
 8003db8:	21ff      	movs	r1, #255	; 0xff
 8003dba:	2007      	movs	r0, #7
 8003dbc:	f000 fb0a 	bl	80043d4 <Error_Handler>
    break;
 8003dc0:	46c0      	nop			; (mov r8, r8)
  }
}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b00c      	add	sp, #48	; 0x30
 8003dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	20002d24 	.word	0x20002d24
 8003dd0:	8f0d1800 	.word	0x8f0d1800
 8003dd4:	0000fde8 	.word	0x0000fde8

08003dd8 <DIG_SetFrequency>:
// Params:  Ch - Channel Number, 0 to 5, of the Digital I/O being changed
//          NewFreq - New Output Frequency, xxxxx.xx Hz
//
// Returns:   None
//
void DIG_SetFrequency(int32_t Ch, int32_t NewFreq) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]

    uint32_t MinPeriod;

    DIG_HandleStruct[Ch].DIG_InitStruct.Frequency = (uint32_t)NewFreq;
 8003de2:	6838      	ldr	r0, [r7, #0]
 8003de4:	4945      	ldr	r1, [pc, #276]	; (8003efc <DIG_SetFrequency+0x124>)
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	0013      	movs	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	189b      	adds	r3, r3, r2
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	5058      	str	r0, [r3, r1]
    MinPeriod = (uint32_t)(2400000000uLL / DIG_HandleStruct[Ch].DIG_InitStruct.Frequency);
 8003df2:	4942      	ldr	r1, [pc, #264]	; (8003efc <DIG_SetFrequency+0x124>)
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	0013      	movs	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	189b      	adds	r3, r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	585b      	ldr	r3, [r3, r1]
 8003e00:	0019      	movs	r1, r3
 8003e02:	483f      	ldr	r0, [pc, #252]	; (8003f00 <DIG_SetFrequency+0x128>)
 8003e04:	f7fc f9e4 	bl	80001d0 <__udivsi3>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	60fb      	str	r3, [r7, #12]
    DIG_HandleStruct[Ch].Prescaler = MinPeriod / 65000;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	493d      	ldr	r1, [pc, #244]	; (8003f04 <DIG_SetFrequency+0x12c>)
 8003e10:	0018      	movs	r0, r3
 8003e12:	f7fc f9dd 	bl	80001d0 <__udivsi3>
 8003e16:	0003      	movs	r3, r0
 8003e18:	0018      	movs	r0, r3
 8003e1a:	4938      	ldr	r1, [pc, #224]	; (8003efc <DIG_SetFrequency+0x124>)
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	0013      	movs	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	189b      	adds	r3, r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	18cb      	adds	r3, r1, r3
 8003e28:	3318      	adds	r3, #24
 8003e2a:	6018      	str	r0, [r3, #0]
    DIG_HandleStruct[Ch].Period = (uint32_t)((2400000000uLL / (DIG_HandleStruct[Ch].Prescaler + 1)) / DIG_HandleStruct[Ch].DIG_InitStruct.Frequency);
 8003e2c:	4933      	ldr	r1, [pc, #204]	; (8003efc <DIG_SetFrequency+0x124>)
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	0013      	movs	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	18cb      	adds	r3, r1, r3
 8003e3a:	3318      	adds	r3, #24
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	0019      	movs	r1, r3
 8003e42:	482f      	ldr	r0, [pc, #188]	; (8003f00 <DIG_SetFrequency+0x128>)
 8003e44:	f7fc f9c4 	bl	80001d0 <__udivsi3>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	492b      	ldr	r1, [pc, #172]	; (8003efc <DIG_SetFrequency+0x124>)
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	0013      	movs	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	189b      	adds	r3, r3, r2
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	585b      	ldr	r3, [r3, r1]
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	f7fc f9b8 	bl	80001d0 <__udivsi3>
 8003e60:	0003      	movs	r3, r0
 8003e62:	0018      	movs	r0, r3
 8003e64:	4925      	ldr	r1, [pc, #148]	; (8003efc <DIG_SetFrequency+0x124>)
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	0013      	movs	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	189b      	adds	r3, r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	18cb      	adds	r3, r1, r3
 8003e72:	331c      	adds	r3, #28
 8003e74:	6018      	str	r0, [r3, #0]
    if (DIG_HandleStruct[Ch].Handle->Instance->PSC != DIG_HandleStruct[Ch].Prescaler) {
 8003e76:	4921      	ldr	r1, [pc, #132]	; (8003efc <DIG_SetFrequency+0x124>)
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	0013      	movs	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	18cb      	adds	r3, r1, r3
 8003e84:	330c      	adds	r3, #12
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003e8c:	481b      	ldr	r0, [pc, #108]	; (8003efc <DIG_SetFrequency+0x124>)
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	0013      	movs	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	189b      	adds	r3, r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	18c3      	adds	r3, r0, r3
 8003e9a:	3318      	adds	r3, #24
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4299      	cmp	r1, r3
 8003ea0:	d013      	beq.n	8003eca <DIG_SetFrequency+0xf2>
        DIG_HandleStruct[Ch].Handle->Instance->PSC = DIG_HandleStruct[Ch].Prescaler;
 8003ea2:	4916      	ldr	r1, [pc, #88]	; (8003efc <DIG_SetFrequency+0x124>)
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	0013      	movs	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	189b      	adds	r3, r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	18cb      	adds	r3, r1, r3
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	4811      	ldr	r0, [pc, #68]	; (8003efc <DIG_SetFrequency+0x124>)
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	000b      	movs	r3, r1
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	185b      	adds	r3, r3, r1
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	18c3      	adds	r3, r0, r3
 8003ec4:	3318      	adds	r3, #24
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6293      	str	r3, [r2, #40]	; 0x28
    }
    DIG_HandleStruct[Ch].Handle->Instance->ARR = DIG_HandleStruct[Ch].Period - 1;
 8003eca:	490c      	ldr	r1, [pc, #48]	; (8003efc <DIG_SetFrequency+0x124>)
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	0013      	movs	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	189b      	adds	r3, r3, r2
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	18cb      	adds	r3, r1, r3
 8003ed8:	331c      	adds	r3, #28
 8003eda:	6819      	ldr	r1, [r3, #0]
 8003edc:	4807      	ldr	r0, [pc, #28]	; (8003efc <DIG_SetFrequency+0x124>)
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	0013      	movs	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	189b      	adds	r3, r3, r2
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	18c3      	adds	r3, r0, r3
 8003eea:	330c      	adds	r3, #12
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	1e4a      	subs	r2, r1, #1
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b004      	add	sp, #16
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20002d24 	.word	0x20002d24
 8003f00:	8f0d1800 	.word	0x8f0d1800
 8003f04:	0000fde8 	.word	0x0000fde8

08003f08 <DIG_SetPin>:
//
// Params:  Ch - Channel Number, 0 to 5, of the Digital I/O being set
//
// Returns:   None
//
void DIG_SetPin(int32_t Ch) {
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  STM32_GPIO_WritePin(DIG_HandleStruct[Ch].Dig_IO_Port, DIG_HandleStruct[Ch].Dig_IO_Pin, GPIO_PIN_SET);
 8003f10:	490d      	ldr	r1, [pc, #52]	; (8003f48 <DIG_SetPin+0x40>)
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	0013      	movs	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	189b      	adds	r3, r3, r2
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	18cb      	adds	r3, r1, r3
 8003f1e:	3314      	adds	r3, #20
 8003f20:	681c      	ldr	r4, [r3, #0]
 8003f22:	4909      	ldr	r1, [pc, #36]	; (8003f48 <DIG_SetPin+0x40>)
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	2042      	movs	r0, #66	; 0x42
 8003f28:	0013      	movs	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	189b      	adds	r3, r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	18cb      	adds	r3, r1, r3
 8003f32:	181b      	adds	r3, r3, r0
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	2201      	movs	r2, #1
 8003f38:	0019      	movs	r1, r3
 8003f3a:	0020      	movs	r0, r4
 8003f3c:	f001 fce6 	bl	800590c <STM32_GPIO_WritePin>
}
 8003f40:	46c0      	nop			; (mov r8, r8)
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b003      	add	sp, #12
 8003f46:	bd90      	pop	{r4, r7, pc}
 8003f48:	20002d24 	.word	0x20002d24

08003f4c <DIG_ResetPin>:
//
// Params:  Ch - Channel Number, 0 to 5, of the Digital I/O being reset
//
// Returns:   None
//
void DIG_ResetPin(int32_t Ch) {
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  STM32_GPIO_WritePin(DIG_HandleStruct[Ch].Dig_IO_Port, DIG_HandleStruct[Ch].Dig_IO_Pin, GPIO_PIN_RESET);
 8003f54:	490d      	ldr	r1, [pc, #52]	; (8003f8c <DIG_ResetPin+0x40>)
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	0013      	movs	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	189b      	adds	r3, r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	18cb      	adds	r3, r1, r3
 8003f62:	3314      	adds	r3, #20
 8003f64:	681c      	ldr	r4, [r3, #0]
 8003f66:	4909      	ldr	r1, [pc, #36]	; (8003f8c <DIG_ResetPin+0x40>)
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	2042      	movs	r0, #66	; 0x42
 8003f6c:	0013      	movs	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	189b      	adds	r3, r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	18cb      	adds	r3, r1, r3
 8003f76:	181b      	adds	r3, r3, r0
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	0020      	movs	r0, r4
 8003f80:	f001 fcc4 	bl	800590c <STM32_GPIO_WritePin>
}
 8003f84:	46c0      	nop			; (mov r8, r8)
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b003      	add	sp, #12
 8003f8a:	bd90      	pop	{r4, r7, pc}
 8003f8c:	20002d24 	.word	0x20002d24

08003f90 <DIG_ReadPin>:
//
// Params:  Ch - Channel Number, 0 to 5, of the Digital I/O being read
//
// Returns:   None
//
int32_t DIG_ReadPin(int32_t Ch) {
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  return STM32_GPIO_ReadPin(DIG_HandleStruct[Ch].Dig_IO_Port, DIG_HandleStruct[Ch].Dig_IO_Pin);
 8003f98:	490d      	ldr	r1, [pc, #52]	; (8003fd0 <DIG_ReadPin+0x40>)
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	0013      	movs	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	189b      	adds	r3, r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	18cb      	adds	r3, r1, r3
 8003fa6:	3314      	adds	r3, #20
 8003fa8:	681c      	ldr	r4, [r3, #0]
 8003faa:	4909      	ldr	r1, [pc, #36]	; (8003fd0 <DIG_ReadPin+0x40>)
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	2042      	movs	r0, #66	; 0x42
 8003fb0:	0013      	movs	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	189b      	adds	r3, r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	18cb      	adds	r3, r1, r3
 8003fba:	181b      	adds	r3, r3, r0
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	0019      	movs	r1, r3
 8003fc0:	0020      	movs	r0, r4
 8003fc2:	f001 fcb9 	bl	8005938 <STM32_GPIO_ReadPin>
 8003fc6:	0003      	movs	r3, r0
}
 8003fc8:	0018      	movs	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b003      	add	sp, #12
 8003fce:	bd90      	pop	{r4, r7, pc}
 8003fd0:	20002d24 	.word	0x20002d24

08003fd4 <GetDigIo>:
//
// Params:  Ch - Channel Number, 0 to 5, of the Digital I/O being read
//
// Returns:   None
//
int32_t GetDigIo(int32_t Ch) {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

  int32_t Digio;

  switch (Ch) {
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d83e      	bhi.n	8004060 <GetDigIo+0x8c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	009a      	lsls	r2, r3, #2
 8003fe6:	4b24      	ldr	r3, [pc, #144]	; (8004078 <GetDigIo+0xa4>)
 8003fe8:	18d3      	adds	r3, r2, r3
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	469f      	mov	pc, r3
  case 0:
      Digio = FlashConfiguration->Digio1;
 8003fee:	4b23      	ldr	r3, [pc, #140]	; (800407c <GetDigIo+0xa8>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	2388      	movs	r3, #136	; 0x88
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	5cd3      	ldrb	r3, [r2, r3]
 8003ff8:	06db      	lsls	r3, r3, #27
 8003ffa:	0edb      	lsrs	r3, r3, #27
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	60fb      	str	r3, [r7, #12]
      break;
 8004000:	e035      	b.n	800406e <GetDigIo+0x9a>
  case 1:
      Digio = FlashConfiguration->Digio2;
 8004002:	4b1e      	ldr	r3, [pc, #120]	; (800407c <GetDigIo+0xa8>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	2388      	movs	r3, #136	; 0x88
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	5ad3      	ldrh	r3, [r2, r3]
 800400c:	059b      	lsls	r3, r3, #22
 800400e:	0edb      	lsrs	r3, r3, #27
 8004010:	b2db      	uxtb	r3, r3
 8004012:	60fb      	str	r3, [r7, #12]
      break;
 8004014:	e02b      	b.n	800406e <GetDigIo+0x9a>
  case 2:
      Digio = FlashConfiguration->Digio3;
 8004016:	4b19      	ldr	r3, [pc, #100]	; (800407c <GetDigIo+0xa8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a19      	ldr	r2, [pc, #100]	; (8004080 <GetDigIo+0xac>)
 800401c:	5c9b      	ldrb	r3, [r3, r2]
 800401e:	065b      	lsls	r3, r3, #25
 8004020:	0edb      	lsrs	r3, r3, #27
 8004022:	b2db      	uxtb	r3, r3
 8004024:	60fb      	str	r3, [r7, #12]
      break;
 8004026:	e022      	b.n	800406e <GetDigIo+0x9a>
  case 3:
      Digio = FlashConfiguration->Digio4;
 8004028:	4b14      	ldr	r3, [pc, #80]	; (800407c <GetDigIo+0xa8>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	2388      	movs	r3, #136	; 0x88
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	58d3      	ldr	r3, [r2, r3]
 8004032:	031b      	lsls	r3, r3, #12
 8004034:	0edb      	lsrs	r3, r3, #27
 8004036:	b2db      	uxtb	r3, r3
 8004038:	60fb      	str	r3, [r7, #12]
      break;
 800403a:	e018      	b.n	800406e <GetDigIo+0x9a>
  case 4:
      Digio = FlashConfiguration->Digio5;
 800403c:	4b0f      	ldr	r3, [pc, #60]	; (800407c <GetDigIo+0xa8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a10      	ldr	r2, [pc, #64]	; (8004084 <GetDigIo+0xb0>)
 8004042:	5a9b      	ldrh	r3, [r3, r2]
 8004044:	05db      	lsls	r3, r3, #23
 8004046:	0edb      	lsrs	r3, r3, #27
 8004048:	b2db      	uxtb	r3, r3
 800404a:	60fb      	str	r3, [r7, #12]
      break;
 800404c:	e00f      	b.n	800406e <GetDigIo+0x9a>
  case 5:
      Digio = FlashConfiguration->Digio6;
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <GetDigIo+0xa8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a0d      	ldr	r2, [pc, #52]	; (8004088 <GetDigIo+0xb4>)
 8004054:	5c9b      	ldrb	r3, [r3, r2]
 8004056:	069b      	lsls	r3, r3, #26
 8004058:	0edb      	lsrs	r3, r3, #27
 800405a:	b2db      	uxtb	r3, r3
 800405c:	60fb      	str	r3, [r7, #12]
      break;
 800405e:	e006      	b.n	800406e <GetDigIo+0x9a>
  default:
      Error_Handler(FILE_DIG, __LINE__);
 8004060:	2360      	movs	r3, #96	; 0x60
 8004062:	33ff      	adds	r3, #255	; 0xff
 8004064:	0019      	movs	r1, r3
 8004066:	2007      	movs	r0, #7
 8004068:	f000 f9b4 	bl	80043d4 <Error_Handler>
      break;
 800406c:	46c0      	nop			; (mov r8, r8)
  }
  return Digio;
 800406e:	68fb      	ldr	r3, [r7, #12]
}
 8004070:	0018      	movs	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	b004      	add	sp, #16
 8004076:	bd80      	pop	{r7, pc}
 8004078:	0800cadc 	.word	0x0800cadc
 800407c:	20002f04 	.word	0x20002f04
 8004080:	00000221 	.word	0x00000221
 8004084:	00000222 	.word	0x00000222
 8004088:	00000223 	.word	0x00000223

0800408c <InitializeDigitalIO>:
//
// Params:  Mode - DIG_MODE_POWERUP or DIG_MODE_NORMAL
//
// Returns:   None
//
void InitializeDigitalIO(int8_t Mode) {
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	0002      	movs	r2, r0
 8004094:	1dfb      	adds	r3, r7, #7
 8004096:	701a      	strb	r2, [r3, #0]

  DIG_InitTypeDef   DIG_InitStruct;
  int32_t           i;

  DIG_Mode = Mode;
 8004098:	4b80      	ldr	r3, [pc, #512]	; (800429c <InitializeDigitalIO+0x210>)
 800409a:	1dfa      	adds	r2, r7, #7
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	701a      	strb	r2, [r3, #0]

  if (Mode == DIG_MODE_POWERUP) {
 80040a0:	1dfb      	adds	r3, r7, #7
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	b25b      	sxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d116      	bne.n	80040d8 <InitializeDigitalIO+0x4c>
    for (i = 0; i < 6; i++) {
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	e010      	b.n	80040d2 <InitializeDigitalIO+0x46>
      DIG_InitStruct.Config = CONFIG_DIG_DISABLED;
 80040b0:	2108      	movs	r1, #8
 80040b2:	187b      	adds	r3, r7, r1
 80040b4:	2200      	movs	r2, #0
 80040b6:	725a      	strb	r2, [r3, #9]
      DIG_InitStruct.Mode = DIG_IN;
 80040b8:	187b      	adds	r3, r7, r1
 80040ba:	2201      	movs	r2, #1
 80040bc:	721a      	strb	r2, [r3, #8]
      DIG_Init(i, DIG_InitStruct);
 80040be:	187b      	adds	r3, r7, r1
 80040c0:	6978      	ldr	r0, [r7, #20]
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f7ff fa30 	bl	800352c <DIG_Init>
    for (i = 0; i < 6; i++) {
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	3301      	adds	r3, #1
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b05      	cmp	r3, #5
 80040d6:	ddeb      	ble.n	80040b0 <InitializeDigitalIO+0x24>
    }
  }
  //
  // Disable all Digital I/O Interrupts
  //
  STM32_NVIC_DisableIRQ(TIM1_CC_IRQn);
 80040d8:	200e      	movs	r0, #14
 80040da:	f001 fee5 	bl	8005ea8 <STM32_NVIC_DisableIRQ>
  STM32_NVIC_DisableIRQ(TIM3_IRQn);
 80040de:	2010      	movs	r0, #16
 80040e0:	f001 fee2 	bl	8005ea8 <STM32_NVIC_DisableIRQ>
  STM32_NVIC_DisableIRQ(TIM15_IRQn);
 80040e4:	2014      	movs	r0, #20
 80040e6:	f001 fedf 	bl	8005ea8 <STM32_NVIC_DisableIRQ>
  STM32_NVIC_DisableIRQ(TIM16_IRQn);
 80040ea:	2015      	movs	r0, #21
 80040ec:	f001 fedc 	bl	8005ea8 <STM32_NVIC_DisableIRQ>
  STM32_NVIC_DisableIRQ(TIM17_IRQn);
 80040f0:	2016      	movs	r0, #22
 80040f2:	f001 fed9 	bl	8005ea8 <STM32_NVIC_DisableIRQ>
  STM32_NVIC_DisableIRQ(USART2_IRQn);
 80040f6:	201c      	movs	r0, #28
 80040f8:	f001 fed6 	bl	8005ea8 <STM32_NVIC_DisableIRQ>
  STM32_NVIC_DisableIRQ(USART3_4_IRQn);
 80040fc:	201d      	movs	r0, #29
 80040fe:	f001 fed3 	bl	8005ea8 <STM32_NVIC_DisableIRQ>
  STM32_NVIC_DisableIRQ(EXTI0_1_IRQn);
 8004102:	2005      	movs	r0, #5
 8004104:	f001 fed0 	bl	8005ea8 <STM32_NVIC_DisableIRQ>
  STM32_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8004108:	2006      	movs	r0, #6
 800410a:	f001 fecd 	bl	8005ea8 <STM32_NVIC_DisableIRQ>
  STM32_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800410e:	2007      	movs	r0, #7
 8004110:	f001 feca 	bl	8005ea8 <STM32_NVIC_DisableIRQ>
  //
  // Disable All Digital I/O Timers
  // Disable All Digital I/O Data Port Pins (basically turns all Data Ports into inputs
  // Set all Digital I/O External Bi-Directional Buffers as inputs
  //
  for (i = 0; i < 6; i++) {
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e041      	b.n	800419e <InitializeDigitalIO+0x112>
    if (i != 4) {
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b04      	cmp	r3, #4
 800411e:	d00c      	beq.n	800413a <InitializeDigitalIO+0xae>
      STM32_TIM_Base_DeInit(DIG_HandleStruct[i].Handle->Instance);
 8004120:	495f      	ldr	r1, [pc, #380]	; (80042a0 <InitializeDigitalIO+0x214>)
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	0013      	movs	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	189b      	adds	r3, r3, r2
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	18cb      	adds	r3, r1, r3
 800412e:	330c      	adds	r3, #12
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	0018      	movs	r0, r3
 8004136:	f007 f981 	bl	800b43c <STM32_TIM_Base_DeInit>
    }
    STM32_GPIO_DeInit(DIG_HandleStruct[i].Dig_IO_Port, DIG_HandleStruct[i].Dig_IO_Pin);
 800413a:	4959      	ldr	r1, [pc, #356]	; (80042a0 <InitializeDigitalIO+0x214>)
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	0013      	movs	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	189b      	adds	r3, r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	18cb      	adds	r3, r1, r3
 8004148:	3314      	adds	r3, #20
 800414a:	681c      	ldr	r4, [r3, #0]
 800414c:	4954      	ldr	r1, [pc, #336]	; (80042a0 <InitializeDigitalIO+0x214>)
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	2042      	movs	r0, #66	; 0x42
 8004152:	0013      	movs	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	189b      	adds	r3, r3, r2
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	18cb      	adds	r3, r1, r3
 800415c:	181b      	adds	r3, r3, r0
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	0019      	movs	r1, r3
 8004162:	0020      	movs	r0, r4
 8004164:	f001 fd44 	bl	8005bf0 <STM32_GPIO_DeInit>
    STM32_GPIO_WritePin(DIG_HandleStruct[i].Dir_Port, DIG_HandleStruct[i].Dir_Pin, GPIO_PIN_RESET);
 8004168:	494d      	ldr	r1, [pc, #308]	; (80042a0 <InitializeDigitalIO+0x214>)
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	0013      	movs	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	189b      	adds	r3, r3, r2
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	18cb      	adds	r3, r1, r3
 8004176:	3310      	adds	r3, #16
 8004178:	681c      	ldr	r4, [r3, #0]
 800417a:	4949      	ldr	r1, [pc, #292]	; (80042a0 <InitializeDigitalIO+0x214>)
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	2040      	movs	r0, #64	; 0x40
 8004180:	0013      	movs	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	189b      	adds	r3, r3, r2
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	18cb      	adds	r3, r1, r3
 800418a:	181b      	adds	r3, r3, r0
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	2200      	movs	r2, #0
 8004190:	0019      	movs	r1, r3
 8004192:	0020      	movs	r0, r4
 8004194:	f001 fbba 	bl	800590c <STM32_GPIO_WritePin>
  for (i = 0; i < 6; i++) {
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	3301      	adds	r3, #1
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b05      	cmp	r3, #5
 80041a2:	ddba      	ble.n	800411a <InitializeDigitalIO+0x8e>
  }

  for (i = 0; i < 6; i++) {
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	e071      	b.n	800428e <InitializeDigitalIO+0x202>
    if ((i == 0) && ((Mode == DIG_MODE_POWERUP) || (bFlashConfigurationValid == 0))) {
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10d      	bne.n	80041cc <InitializeDigitalIO+0x140>
 80041b0:	1dfb      	adds	r3, r7, #7
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	b25b      	sxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <InitializeDigitalIO+0x136>
 80041ba:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <InitializeDigitalIO+0x218>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d104      	bne.n	80041cc <InitializeDigitalIO+0x140>
      DIG_InitStruct.Config = CONFIG_DIG_SERIAL_INOUT;
 80041c2:	2308      	movs	r3, #8
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	2207      	movs	r2, #7
 80041c8:	725a      	strb	r2, [r3, #9]
 80041ca:	e010      	b.n	80041ee <InitializeDigitalIO+0x162>
    } else {
      DIG_InitStruct.Config = GetDigIo(i);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7ff ff00 	bl	8003fd4 <GetDigIo>
 80041d4:	0003      	movs	r3, r0
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	2308      	movs	r3, #8
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	725a      	strb	r2, [r3, #9]
      if (bFlashConfigurationValid == 0) {
 80041de:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <InitializeDigitalIO+0x218>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d103      	bne.n	80041ee <InitializeDigitalIO+0x162>
        DIG_InitStruct.Config = CONFIG_DIG_DISABLED;
 80041e6:	2308      	movs	r3, #8
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	2200      	movs	r2, #0
 80041ec:	725a      	strb	r2, [r3, #9]
      }
    }

    switch (DIG_InitStruct.Config) {
 80041ee:	2308      	movs	r3, #8
 80041f0:	18fb      	adds	r3, r7, r3
 80041f2:	7a5b      	ldrb	r3, [r3, #9]
 80041f4:	2b0a      	cmp	r3, #10
 80041f6:	d83d      	bhi.n	8004274 <InitializeDigitalIO+0x1e8>
 80041f8:	009a      	lsls	r2, r3, #2
 80041fa:	4b2b      	ldr	r3, [pc, #172]	; (80042a8 <InitializeDigitalIO+0x21c>)
 80041fc:	18d3      	adds	r3, r2, r3
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	469f      	mov	pc, r3
    case CONFIG_DIG_DISABLED:
    case CONFIG_DIG_TEST_IN:
      DIG_InitStruct.Mode = DIG_IN;
 8004202:	2108      	movs	r1, #8
 8004204:	187b      	adds	r3, r7, r1
 8004206:	2201      	movs	r2, #1
 8004208:	721a      	strb	r2, [r3, #8]
      DIG_Init(i, DIG_InitStruct);
 800420a:	187b      	adds	r3, r7, r1
 800420c:	6978      	ldr	r0, [r7, #20]
 800420e:	6819      	ldr	r1, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f7ff f98a 	bl	800352c <DIG_Init>
      break;
 8004218:	e036      	b.n	8004288 <InitializeDigitalIO+0x1fc>
    case CONFIG_DIG_MASTER_FREQ_OUT:
    case CONFIG_DIG_KMA_FREQ_OUT:
    case CONFIG_DIG_TEMP_FREQ_OUT:
      if (i != 4) {                               // Not Digital I/O #5
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d030      	beq.n	8004282 <InitializeDigitalIO+0x1f6>
        DIG_InitStruct.Mode = DIG_FREQ_OUT;
 8004220:	2108      	movs	r1, #8
 8004222:	187b      	adds	r3, r7, r1
 8004224:	2204      	movs	r2, #4
 8004226:	721a      	strb	r2, [r3, #8]
        DIG_InitStruct.Frequency = 10000;        // xxx.xx Hz  10000 = 100Hz
 8004228:	187b      	adds	r3, r7, r1
 800422a:	4a20      	ldr	r2, [pc, #128]	; (80042ac <InitializeDigitalIO+0x220>)
 800422c:	601a      	str	r2, [r3, #0]
        DIG_Init(i, DIG_InitStruct);
 800422e:	187b      	adds	r3, r7, r1
 8004230:	6978      	ldr	r0, [r7, #20]
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f7ff f978 	bl	800352c <DIG_Init>
      }
      break;
 800423c:	e021      	b.n	8004282 <InitializeDigitalIO+0x1f6>
    case CONFIG_DIG_ERROR_CONDITION:
      DIG_InitStruct.Mode = DIG_OUT;
 800423e:	2108      	movs	r1, #8
 8004240:	187b      	adds	r3, r7, r1
 8004242:	2202      	movs	r2, #2
 8004244:	721a      	strb	r2, [r3, #8]
      DIG_Init(i, DIG_InitStruct);
 8004246:	187b      	adds	r3, r7, r1
 8004248:	6978      	ldr	r0, [r7, #20]
 800424a:	6819      	ldr	r1, [r3, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f7ff f96c 	bl	800352c <DIG_Init>
      break;
 8004254:	e018      	b.n	8004288 <InitializeDigitalIO+0x1fc>
    case CONFIG_DIG_SERIAL_INOUT:
      if (i == 0) {                           // Only Digital I/O #1
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d114      	bne.n	8004286 <InitializeDigitalIO+0x1fa>
        DIG_InitStruct.Mode = DIG_SERIAL_INOUT;
 800425c:	2108      	movs	r1, #8
 800425e:	187b      	adds	r3, r7, r1
 8004260:	2208      	movs	r2, #8
 8004262:	721a      	strb	r2, [r3, #8]
        DIG_Init(i, DIG_InitStruct);
 8004264:	187b      	adds	r3, r7, r1
 8004266:	6978      	ldr	r0, [r7, #20]
 8004268:	6819      	ldr	r1, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f7ff f95d 	bl	800352c <DIG_Init>
        break;
 8004272:	e009      	b.n	8004288 <InitializeDigitalIO+0x1fc>
      }
      break;
    default:
      Error_Handler(FILE_DIG, __LINE__);
 8004274:	23ba      	movs	r3, #186	; 0xba
 8004276:	33ff      	adds	r3, #255	; 0xff
 8004278:	0019      	movs	r1, r3
 800427a:	2007      	movs	r0, #7
 800427c:	f000 f8aa 	bl	80043d4 <Error_Handler>
      break;
 8004280:	e002      	b.n	8004288 <InitializeDigitalIO+0x1fc>
      break;
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	e000      	b.n	8004288 <InitializeDigitalIO+0x1fc>
      break;
 8004286:	46c0      	nop			; (mov r8, r8)
  for (i = 0; i < 6; i++) {
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	3301      	adds	r3, #1
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b05      	cmp	r3, #5
 8004292:	dd8a      	ble.n	80041aa <InitializeDigitalIO+0x11e>
    }
  }
}
 8004294:	46c0      	nop			; (mov r8, r8)
 8004296:	46bd      	mov	sp, r7
 8004298:	b007      	add	sp, #28
 800429a:	bd90      	pop	{r4, r7, pc}
 800429c:	200037e0 	.word	0x200037e0
 80042a0:	20002d24 	.word	0x20002d24
 80042a4:	20002cf6 	.word	0x20002cf6
 80042a8:	0800caf4 	.word	0x0800caf4
 80042ac:	00002710 	.word	0x00002710

080042b0 <STM32_DMA_Init>:
//  Params: hdma - a DMA_HandleTypeDef structure containing the configuration information
//
//
//  returns:  none
//
void STM32_DMA_Init(DMA_HandleTypeDef *hdma) {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

    uint32_t Tmp;

    Tmp = hdma->Instance->CCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]
    Tmp &= ((uint32_t)~(DMA_CCR_PL | DMA_CCR_MSIZE | DMA_CCR_PSIZE | DMA_CCR_MINC | DMA_CCR_PINC | DMA_CCR_CIRC | DMA_CCR_DIR));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4a1a      	ldr	r2, [pc, #104]	; (800432c <STM32_DMA_Init+0x7c>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
    Tmp |= hdma->Init.Direction |
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685a      	ldr	r2, [r3, #4]
        hdma->Init.PeriphInc | hdma->Init.MemInc |
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
    Tmp |= hdma->Init.Direction |
 80042d0:	431a      	orrs	r2, r3
        hdma->Init.PeriphInc | hdma->Init.MemInc |
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	431a      	orrs	r2, r3
        hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
        hdma->Init.PeriphInc | hdma->Init.MemInc |
 80042dc:	431a      	orrs	r2, r3
        hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	431a      	orrs	r2, r3
        hdma->Init.Mode | hdma->Init.Priority;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
        hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e8:	431a      	orrs	r2, r3
        hdma->Init.Mode | hdma->Init.Priority;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	4313      	orrs	r3, r2
    Tmp |= hdma->Init.Direction |
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
    hdma->Instance->CCR = Tmp;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	601a      	str	r2, [r3, #0]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2u;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a0b      	ldr	r2, [pc, #44]	; (8004330 <STM32_DMA_Init+0x80>)
 8004304:	4694      	mov	ip, r2
 8004306:	4463      	add	r3, ip
 8004308:	2114      	movs	r1, #20
 800430a:	0018      	movs	r0, r3
 800430c:	f7fb ff60 	bl	80001d0 <__udivsi3>
 8004310:	0003      	movs	r3, r0
 8004312:	009a      	lsls	r2, r3, #2
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma->DmaBaseAddress = DMA1;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a06      	ldr	r2, [pc, #24]	; (8004334 <STM32_DMA_Init+0x84>)
 800431c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma->XferCpltCallback = NULL;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b004      	add	sp, #16
 800432a:	bd80      	pop	{r7, pc}
 800432c:	ffffc00f 	.word	0xffffc00f
 8004330:	bffdfff8 	.word	0xbffdfff8
 8004334:	40020000 	.word	0x40020000

08004338 <STM32_DMA_IRQHandler>:
//
//  Params: hdma - a DMA_HandleTypeDef structure containing the configuration information
//
//  returns:  none
//
void STM32_DMA_IRQHandler(DMA_HandleTypeDef *hdma) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]

    uint32_t FlagIt = hdma->DmaBaseAddress->ISR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]
    uint32_t SourceIt = hdma->Instance->CCR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60bb      	str	r3, [r7, #8]

    /* Transfer Complete Interrupt management ***********************************/

    if ((RESET != (FlagIt & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (SourceIt & DMA_IT_TC))) {
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	2202      	movs	r2, #2
 8004356:	409a      	lsls	r2, r3
 8004358:	0013      	movs	r3, r2
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4013      	ands	r3, r2
 800435e:	d023      	beq.n	80043a8 <STM32_DMA_IRQHandler+0x70>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2202      	movs	r2, #2
 8004364:	4013      	ands	r3, r2
 8004366:	d01f      	beq.n	80043a8 <STM32_DMA_IRQHandler+0x70>
        if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0u) {
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2220      	movs	r2, #32
 8004370:	4013      	ands	r3, r2
 8004372:	d107      	bne.n	8004384 <STM32_DMA_IRQHandler+0x4c>
            /* Disable the transfer complete  & transfer error interrupts */
            /* if the DMA mode is not CIRCULAR */
            hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	210a      	movs	r1, #10
 8004380:	438a      	bics	r2, r1
 8004382:	601a      	str	r2, [r3, #0]
        }

        /* Clear the transfer complete flag */
        hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	2102      	movs	r1, #2
 800438e:	4091      	lsls	r1, r2
 8004390:	000a      	movs	r2, r1
 8004392:	605a      	str	r2, [r3, #4]

        if (hdma->XferCpltCallback != NULL) {
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	2b00      	cmp	r3, #0
 800439a:	d016      	beq.n	80043ca <STM32_DMA_IRQHandler+0x92>
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	0010      	movs	r0, r2
 80043a4:	4798      	blx	r3
        if (hdma->XferCpltCallback != NULL) {
 80043a6:	e010      	b.n	80043ca <STM32_DMA_IRQHandler+0x92>
        }
        /* Transfer Error Interrupt management ***************************************/
    } else if ((RESET != (FlagIt & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (SourceIt & DMA_IT_TE))) {
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	2208      	movs	r2, #8
 80043ae:	409a      	lsls	r2, r3
 80043b0:	0013      	movs	r3, r2
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4013      	ands	r3, r2
 80043b6:	d008      	beq.n	80043ca <STM32_DMA_IRQHandler+0x92>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2208      	movs	r2, #8
 80043bc:	4013      	ands	r3, r2
 80043be:	d004      	beq.n	80043ca <STM32_DMA_IRQHandler+0x92>
        /* When a DMA transfer error occurs */
        /* reset the processor */
        Error_Handler(FILE_DMA, __LINE__);
 80043c0:	2173      	movs	r1, #115	; 0x73
 80043c2:	2008      	movs	r0, #8
 80043c4:	f000 f806 	bl	80043d4 <Error_Handler>
    } else {
    }
}
 80043c8:	e7ff      	b.n	80043ca <STM32_DMA_IRQHandler+0x92>
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b004      	add	sp, #16
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <Error_Handler>:
// Params:    FileCode - Value associated with each source code file.
//            LineNumber - Line within the source code file that called the function.
//
//  Return:   None
//
void Error_Handler(int32_t FileCode, int32_t LineNumber) {
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]

    static uint8_t      bRunningFlag;


    if (!bRunningFlag) {
 80043de:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <Error_Handler+0x44>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d117      	bne.n	8004416 <Error_Handler+0x42>
        bRunningFlag = 1;
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <Error_Handler+0x44>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]
        LogEvent(EVENT_MESSAGE_ID_102, FileCode, LineNumber);
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0019      	movs	r1, r3
 80043f2:	2066      	movs	r0, #102	; 0x66
 80043f4:	f003 fc38 	bl	8007c68 <LogEvent>
        //
        // Wait for Event to be written to EEPROM
        //
        while (MessageIndexIn != MessageIndexOut) {
 80043f8:	e005      	b.n	8004406 <Error_Handler+0x32>
            ProcessEventMessageQueue();
 80043fa:	f003 fc9f 	bl	8007d3c <ProcessEventMessageQueue>
            ProcessAccelerometer();
 80043fe:	f7fc f9e9 	bl	80007d4 <ProcessAccelerometer>
            ProcessI2C2();
 8004402:	f001 febf 	bl	8006184 <ProcessI2C2>
        while (MessageIndexIn != MessageIndexOut) {
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <Error_Handler+0x48>)
 8004408:	2200      	movs	r2, #0
 800440a:	569a      	ldrsb	r2, [r3, r2]
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <Error_Handler+0x4c>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b25b      	sxtb	r3, r3
 8004412:	429a      	cmp	r2, r3
 8004414:	d1f1      	bne.n	80043fa <Error_Handler+0x26>
        }
    }

    while (1) {
 8004416:	e7fe      	b.n	8004416 <Error_Handler+0x42>
 8004418:	20000a12 	.word	0x20000a12
 800441c:	20000c58 	.word	0x20000c58
 8004420:	200014a0 	.word	0x200014a0

08004424 <ProcessErrorCondition>:
//
// Params:      None
//
// Returns:     None
//
void ProcessErrorCondition(void) {
 8004424:	b590      	push	{r4, r7, lr}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0

  int8_t    ErrorLevel, bError;
  int32_t   i;

  ExecutionStart(EXECUTION_PROCESS_ERROR_CONDITION);
 800442a:	200d      	movs	r0, #13
 800442c:	f000 f8ee 	bl	800460c <ExecutionStart>
  //
  // If bErrorPresent flag is set, then there is currently an error being detected
  //
  bError = (SignalStatus.bErrorPresent[GENERAL_MOSFET_POWER] != 0) ||
 8004430:	4b69      	ldr	r3, [pc, #420]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 8004432:	2270      	movs	r2, #112	; 0x70
 8004434:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_CAN_TRANSMISSION_EEROR] != 0) ||
           (SignalStatus.bErrorPresent[GENERAL_CAN_ECHO_ERROR] != 0) ||
           (SignalStatus.bErrorPresent[GENERAL_CAN_CRC_ERROR] != 0) ||
           (SignalStatus.bErrorPresent[GENERAL_BAD_FIRMWARE_CRC] != 0) ||
           (SignalStatus.bErrorPresent[GENERAL_BAD_CONFIGURATION_CRC] != 0) ||
           (SignalStatus.bErrorPresent[GENERAL_BAD_FACTORY_CRC] != 0) ||
 8004436:	2b00      	cmp	r3, #0
 8004438:	d000      	beq.n	800443c <ProcessErrorCondition+0x18>
 800443a:	e078      	b.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_5VDC_LOW_LIMIT] != 0) ||
 800443c:	4b66      	ldr	r3, [pc, #408]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 800443e:	2272      	movs	r2, #114	; 0x72
 8004440:	5a9b      	ldrh	r3, [r3, r2]
  bError = (SignalStatus.bErrorPresent[GENERAL_MOSFET_POWER] != 0) ||
 8004442:	2b00      	cmp	r3, #0
 8004444:	d000      	beq.n	8004448 <ProcessErrorCondition+0x24>
 8004446:	e072      	b.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_5VDC_HIGH_LIMIT] != 0) ||
 8004448:	4b63      	ldr	r3, [pc, #396]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 800444a:	2274      	movs	r2, #116	; 0x74
 800444c:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_5VDC_LOW_LIMIT] != 0) ||
 800444e:	2b00      	cmp	r3, #0
 8004450:	d000      	beq.n	8004454 <ProcessErrorCondition+0x30>
 8004452:	e06c      	b.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_LOW_INTERNAL_REFERENCE_LIMIT] != 0) ||
 8004454:	4b60      	ldr	r3, [pc, #384]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 8004456:	2276      	movs	r2, #118	; 0x76
 8004458:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_5VDC_HIGH_LIMIT] != 0) ||
 800445a:	2b00      	cmp	r3, #0
 800445c:	d000      	beq.n	8004460 <ProcessErrorCondition+0x3c>
 800445e:	e066      	b.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_HIGH_INTERNAL_REFERENCE_LIMIT] != 0) ||
 8004460:	4b5d      	ldr	r3, [pc, #372]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 8004462:	2278      	movs	r2, #120	; 0x78
 8004464:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_LOW_INTERNAL_REFERENCE_LIMIT] != 0) ||
 8004466:	2b00      	cmp	r3, #0
 8004468:	d000      	beq.n	800446c <ProcessErrorCondition+0x48>
 800446a:	e060      	b.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_POWER_INPUT_LOW_LIMIT] != 0) ||
 800446c:	4b5a      	ldr	r3, [pc, #360]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 800446e:	227a      	movs	r2, #122	; 0x7a
 8004470:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_HIGH_INTERNAL_REFERENCE_LIMIT] != 0) ||
 8004472:	2b00      	cmp	r3, #0
 8004474:	d000      	beq.n	8004478 <ProcessErrorCondition+0x54>
 8004476:	e05a      	b.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_POWER_INPUT_HIGH_LIMIT] != 0) ||
 8004478:	4b57      	ldr	r3, [pc, #348]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 800447a:	227c      	movs	r2, #124	; 0x7c
 800447c:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_POWER_INPUT_LOW_LIMIT] != 0) ||
 800447e:	2b00      	cmp	r3, #0
 8004480:	d000      	beq.n	8004484 <ProcessErrorCondition+0x60>
 8004482:	e054      	b.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_KMA_LOW_LIMIT] != 0) ||
 8004484:	4b54      	ldr	r3, [pc, #336]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 8004486:	227e      	movs	r2, #126	; 0x7e
 8004488:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_POWER_INPUT_HIGH_LIMIT] != 0) ||
 800448a:	2b00      	cmp	r3, #0
 800448c:	d14f      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_KMA_HIGH_LIMIT] != 0) ||
 800448e:	4b52      	ldr	r3, [pc, #328]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 8004490:	2280      	movs	r2, #128	; 0x80
 8004492:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_KMA_LOW_LIMIT] != 0) ||
 8004494:	2b00      	cmp	r3, #0
 8004496:	d14a      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_SP_FB_DIFF] != 0) ||
 8004498:	4b4f      	ldr	r3, [pc, #316]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 800449a:	2286      	movs	r2, #134	; 0x86
 800449c:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_KMA_HIGH_LIMIT] != 0) ||
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d145      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_A_LOW_LIMIT] != 0) ||
 80044a2:	4b4d      	ldr	r3, [pc, #308]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 80044a4:	2288      	movs	r2, #136	; 0x88
 80044a6:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_SP_FB_DIFF] != 0) ||
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d140      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_A_HIGH_LIMIT] != 0) ||
 80044ac:	4b4a      	ldr	r3, [pc, #296]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 80044ae:	228a      	movs	r2, #138	; 0x8a
 80044b0:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_A_LOW_LIMIT] != 0) ||
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d13b      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_B_LOW_LIMIT] != 0) ||
 80044b6:	4b48      	ldr	r3, [pc, #288]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 80044b8:	228c      	movs	r2, #140	; 0x8c
 80044ba:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_A_HIGH_LIMIT] != 0) ||
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d136      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_B_HIGH_LIMIT] != 0) ||
 80044c0:	4b45      	ldr	r3, [pc, #276]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 80044c2:	228e      	movs	r2, #142	; 0x8e
 80044c4:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_B_LOW_LIMIT] != 0) ||
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d131      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_RS485_NOT_UPDATING] != 0) ||
 80044ca:	4b43      	ldr	r3, [pc, #268]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 80044cc:	2290      	movs	r2, #144	; 0x90
 80044ce:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_B_HIGH_LIMIT] != 0) ||
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d12c      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_SENSOR_MISMATCH] != 0) ||
 80044d4:	4b40      	ldr	r3, [pc, #256]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 80044d6:	2292      	movs	r2, #146	; 0x92
 80044d8:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_RS485_NOT_UPDATING] != 0) ||
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d127      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_CAN_RECEPTION_ERROR] != 0) ||
 80044de:	4b3e      	ldr	r3, [pc, #248]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 80044e0:	2294      	movs	r2, #148	; 0x94
 80044e2:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_SENSOR_MISMATCH] != 0) ||
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d122      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_CAN_TRANSMISSION_EEROR] != 0) ||
 80044e8:	4b3b      	ldr	r3, [pc, #236]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 80044ea:	2296      	movs	r2, #150	; 0x96
 80044ec:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_CAN_RECEPTION_ERROR] != 0) ||
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d11d      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_CAN_ECHO_ERROR] != 0) ||
 80044f2:	4b39      	ldr	r3, [pc, #228]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 80044f4:	2298      	movs	r2, #152	; 0x98
 80044f6:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_CAN_TRANSMISSION_EEROR] != 0) ||
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d118      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_CAN_CRC_ERROR] != 0) ||
 80044fc:	4b36      	ldr	r3, [pc, #216]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 80044fe:	229a      	movs	r2, #154	; 0x9a
 8004500:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_CAN_ECHO_ERROR] != 0) ||
 8004502:	2b00      	cmp	r3, #0
 8004504:	d113      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_BAD_FIRMWARE_CRC] != 0) ||
 8004506:	4b34      	ldr	r3, [pc, #208]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 8004508:	229c      	movs	r2, #156	; 0x9c
 800450a:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_CAN_CRC_ERROR] != 0) ||
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10e      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_BAD_CONFIGURATION_CRC] != 0) ||
 8004510:	4b31      	ldr	r3, [pc, #196]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 8004512:	229e      	movs	r2, #158	; 0x9e
 8004514:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_BAD_FIRMWARE_CRC] != 0) ||
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_BAD_FACTORY_CRC] != 0) ||
 800451a:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 800451c:	22a0      	movs	r2, #160	; 0xa0
 800451e:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_BAD_CONFIGURATION_CRC] != 0) ||
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <ProcessErrorCondition+0x10a>
           (SignalStatus.bErrorPresent[GENERAL_BAD_FUZZY_CRC] != 0);
 8004524:	4b2c      	ldr	r3, [pc, #176]	; (80045d8 <ProcessErrorCondition+0x1b4>)
 8004526:	22a2      	movs	r2, #162	; 0xa2
 8004528:	5a9b      	ldrh	r3, [r3, r2]
           (SignalStatus.bErrorPresent[GENERAL_BAD_FACTORY_CRC] != 0) ||
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <ProcessErrorCondition+0x10e>
 800452e:	2201      	movs	r2, #1
 8004530:	e000      	b.n	8004534 <ProcessErrorCondition+0x110>
 8004532:	2200      	movs	r2, #0
  bError = (SignalStatus.bErrorPresent[GENERAL_MOSFET_POWER] != 0) ||
 8004534:	1cfb      	adds	r3, r7, #3
 8004536:	701a      	strb	r2, [r3, #0]

  SysVars.ErrorDetected = bError;
 8004538:	1cfb      	adds	r3, r7, #3
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2201      	movs	r2, #1
 800453e:	4013      	ands	r3, r2
 8004540:	b2d9      	uxtb	r1, r3
 8004542:	4b26      	ldr	r3, [pc, #152]	; (80045dc <ProcessErrorCondition+0x1b8>)
 8004544:	22c4      	movs	r2, #196	; 0xc4
 8004546:	2001      	movs	r0, #1
 8004548:	4001      	ands	r1, r0
 800454a:	000c      	movs	r4, r1
 800454c:	5c99      	ldrb	r1, [r3, r2]
 800454e:	2001      	movs	r0, #1
 8004550:	4381      	bics	r1, r0
 8004552:	1c08      	adds	r0, r1, #0
 8004554:	1c21      	adds	r1, r4, #0
 8004556:	4301      	orrs	r1, r0
 8004558:	5499      	strb	r1, [r3, r2]

  if (bFlashConfigurationValid != 0) {
 800455a:	4b21      	ldr	r3, [pc, #132]	; (80045e0 <ProcessErrorCondition+0x1bc>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d033      	beq.n	80045ca <ProcessErrorCondition+0x1a6>
    ErrorLevel = (FlashConfiguration->ErrorConditionActiveState == bError);
 8004562:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <ProcessErrorCondition+0x1c0>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	2382      	movs	r3, #130	; 0x82
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	5cd3      	ldrb	r3, [r2, r3]
 800456c:	071b      	lsls	r3, r3, #28
 800456e:	0fdb      	lsrs	r3, r3, #31
 8004570:	b2db      	uxtb	r3, r3
 8004572:	001a      	movs	r2, r3
 8004574:	1cfb      	adds	r3, r7, #3
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	b25b      	sxtb	r3, r3
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	425a      	negs	r2, r3
 800457e:	4153      	adcs	r3, r2
 8004580:	b2da      	uxtb	r2, r3
 8004582:	1cbb      	adds	r3, r7, #2
 8004584:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < 6; i++) {
 8004586:	2300      	movs	r3, #0
 8004588:	607b      	str	r3, [r7, #4]
 800458a:	e01b      	b.n	80045c4 <ProcessErrorCondition+0x1a0>
      if (DIG_HandleStruct[i].DIG_InitStruct.Config == CONFIG_DIG_ERROR_CONDITION) {
 800458c:	4916      	ldr	r1, [pc, #88]	; (80045e8 <ProcessErrorCondition+0x1c4>)
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	0013      	movs	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	189b      	adds	r3, r3, r2
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	18cb      	adds	r3, r1, r3
 800459a:	3309      	adds	r3, #9
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d10d      	bne.n	80045be <ProcessErrorCondition+0x19a>
        if (ErrorLevel != 0) {
 80045a2:	1cbb      	adds	r3, r7, #2
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	b25b      	sxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <ProcessErrorCondition+0x192>
          DIG_SetPin(i);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	0018      	movs	r0, r3
 80045b0:	f7ff fcaa 	bl	8003f08 <DIG_SetPin>
 80045b4:	e003      	b.n	80045be <ProcessErrorCondition+0x19a>
        } else {
          DIG_ResetPin(i);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7ff fcc7 	bl	8003f4c <DIG_ResetPin>
    for (i = 0; i < 6; i++) {
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3301      	adds	r3, #1
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b05      	cmp	r3, #5
 80045c8:	dde0      	ble.n	800458c <ProcessErrorCondition+0x168>
        }
      }
    }
  }
    ExecutionEnd(EXECUTION_PROCESS_ERROR_CONDITION);
 80045ca:	200d      	movs	r0, #13
 80045cc:	f000 f838 	bl	8004640 <ExecutionEnd>
}
 80045d0:	46c0      	nop			; (mov r8, r8)
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b003      	add	sp, #12
 80045d6:	bd90      	pop	{r4, r7, pc}
 80045d8:	20002c14 	.word	0x20002c14
 80045dc:	200020c0 	.word	0x200020c0
 80045e0:	20002cf6 	.word	0x20002cf6
 80045e4:	20002f04 	.word	0x20002f04
 80045e8:	20002d24 	.word	0x20002d24

080045ec <InitializeExecutionTimers>:
//
// Params:    None
//
// Return:    None
//
void InitializeExecutionTimers(void) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  //
  // Initialize Execution Timer, TIMER2 - Also used to measure Slave Frequency Inputs
  //
  MX_TIM2_Init();
 80045f0:	f006 ff50 	bl	800b494 <MX_TIM2_Init>
  TIM2->CNT = 0;
 80045f4:	2380      	movs	r3, #128	; 0x80
 80045f6:	05db      	lsls	r3, r3, #23
 80045f8:	2200      	movs	r2, #0
 80045fa:	625a      	str	r2, [r3, #36]	; 0x24
  STM32_TIM_Base_Start(TIM2);
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	05db      	lsls	r3, r3, #23
 8004600:	0018      	movs	r0, r3
 8004602:	f006 ff39 	bl	800b478 <STM32_TIM_Base_Start>
}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <ExecutionStart>:
//
//  Params:   Process - Process ID Number
//
//  Return:   None
//
void ExecutionStart(int16_t Process) {
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	0002      	movs	r2, r0
 8004614:	1dbb      	adds	r3, r7, #6
 8004616:	801a      	strh	r2, [r3, #0]
  ExecutionTimeData[Process].StartTime2 = TIM2->CNT;
 8004618:	2380      	movs	r3, #128	; 0x80
 800461a:	05db      	lsls	r3, r3, #23
 800461c:	1dba      	adds	r2, r7, #6
 800461e:	2100      	movs	r1, #0
 8004620:	5e52      	ldrsh	r2, [r2, r1]
 8004622:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004624:	4805      	ldr	r0, [pc, #20]	; (800463c <ExecutionStart+0x30>)
 8004626:	0013      	movs	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	189b      	adds	r3, r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	18c3      	adds	r3, r0, r3
 8004630:	3310      	adds	r3, #16
 8004632:	6019      	str	r1, [r3, #0]
}
 8004634:	46c0      	nop			; (mov r8, r8)
 8004636:	46bd      	mov	sp, r7
 8004638:	b002      	add	sp, #8
 800463a:	bd80      	pop	{r7, pc}
 800463c:	20001c90 	.word	0x20001c90

08004640 <ExecutionEnd>:
//
//  Params:   Process - Process ID Number
//
//  Return:   None
//
void ExecutionEnd(int16_t Process) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	0002      	movs	r2, r0
 8004648:	1dbb      	adds	r3, r7, #6
 800464a:	801a      	strh	r2, [r3, #0]

  uint32_t NewCounts;

  NewCounts = TIM2->CNT - ExecutionTimeData[Process].StartTime2;
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	05db      	lsls	r3, r3, #23
 8004650:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004652:	1dbb      	adds	r3, r7, #6
 8004654:	2200      	movs	r2, #0
 8004656:	5e9a      	ldrsh	r2, [r3, r2]
 8004658:	4834      	ldr	r0, [pc, #208]	; (800472c <ExecutionEnd+0xec>)
 800465a:	0013      	movs	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	189b      	adds	r3, r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	18c3      	adds	r3, r0, r3
 8004664:	3310      	adds	r3, #16
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	1acb      	subs	r3, r1, r3
 800466a:	60fb      	str	r3, [r7, #12]

  if (NewCounts < ExecutionTimeData[Process].CurrentMinTime) {
 800466c:	1dbb      	adds	r3, r7, #6
 800466e:	2200      	movs	r2, #0
 8004670:	5e9a      	ldrsh	r2, [r3, r2]
 8004672:	492e      	ldr	r1, [pc, #184]	; (800472c <ExecutionEnd+0xec>)
 8004674:	0013      	movs	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	189b      	adds	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	18cb      	adds	r3, r1, r3
 800467e:	3308      	adds	r3, #8
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	429a      	cmp	r2, r3
 8004686:	d20b      	bcs.n	80046a0 <ExecutionEnd+0x60>
    ExecutionTimeData[Process].CurrentMinTime = NewCounts;
 8004688:	1dbb      	adds	r3, r7, #6
 800468a:	2200      	movs	r2, #0
 800468c:	5e9a      	ldrsh	r2, [r3, r2]
 800468e:	4927      	ldr	r1, [pc, #156]	; (800472c <ExecutionEnd+0xec>)
 8004690:	0013      	movs	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	189b      	adds	r3, r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	18cb      	adds	r3, r1, r3
 800469a:	3308      	adds	r3, #8
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	601a      	str	r2, [r3, #0]
  }
  if (NewCounts > ExecutionTimeData[Process].CurrentMaxTime) {
 80046a0:	1dbb      	adds	r3, r7, #6
 80046a2:	2200      	movs	r2, #0
 80046a4:	5e9a      	ldrsh	r2, [r3, r2]
 80046a6:	4921      	ldr	r1, [pc, #132]	; (800472c <ExecutionEnd+0xec>)
 80046a8:	0013      	movs	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	189b      	adds	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	18cb      	adds	r3, r1, r3
 80046b2:	330c      	adds	r3, #12
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d90b      	bls.n	80046d4 <ExecutionEnd+0x94>
    ExecutionTimeData[Process].CurrentMaxTime = NewCounts;
 80046bc:	1dbb      	adds	r3, r7, #6
 80046be:	2200      	movs	r2, #0
 80046c0:	5e9a      	ldrsh	r2, [r3, r2]
 80046c2:	491a      	ldr	r1, [pc, #104]	; (800472c <ExecutionEnd+0xec>)
 80046c4:	0013      	movs	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	189b      	adds	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	18cb      	adds	r3, r1, r3
 80046ce:	330c      	adds	r3, #12
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	601a      	str	r2, [r3, #0]
  }
  ExecutionTimeData[Process].Accum += NewCounts;
 80046d4:	1dbb      	adds	r3, r7, #6
 80046d6:	2200      	movs	r2, #0
 80046d8:	5e9a      	ldrsh	r2, [r3, r2]
 80046da:	4914      	ldr	r1, [pc, #80]	; (800472c <ExecutionEnd+0xec>)
 80046dc:	0013      	movs	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	189b      	adds	r3, r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	5859      	ldr	r1, [r3, r1]
 80046e6:	1dbb      	adds	r3, r7, #6
 80046e8:	2200      	movs	r2, #0
 80046ea:	5e9a      	ldrsh	r2, [r3, r2]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	18c8      	adds	r0, r1, r3
 80046f0:	490e      	ldr	r1, [pc, #56]	; (800472c <ExecutionEnd+0xec>)
 80046f2:	0013      	movs	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	189b      	adds	r3, r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	5058      	str	r0, [r3, r1]
  ExecutionTimeData[Process].AccumCount++;
 80046fc:	1dbb      	adds	r3, r7, #6
 80046fe:	2200      	movs	r2, #0
 8004700:	5e9a      	ldrsh	r2, [r3, r2]
 8004702:	490a      	ldr	r1, [pc, #40]	; (800472c <ExecutionEnd+0xec>)
 8004704:	0013      	movs	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	189b      	adds	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	18cb      	adds	r3, r1, r3
 800470e:	3304      	adds	r3, #4
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	1c59      	adds	r1, r3, #1
 8004714:	4805      	ldr	r0, [pc, #20]	; (800472c <ExecutionEnd+0xec>)
 8004716:	0013      	movs	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	189b      	adds	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	18c3      	adds	r3, r0, r3
 8004720:	3304      	adds	r3, #4
 8004722:	6019      	str	r1, [r3, #0]
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	b004      	add	sp, #16
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20001c90 	.word	0x20001c90

08004730 <ExecutionAverage>:
//
// Params:    None
//
// Return:    None
//
void ExecutionAverage(void) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0

  uint16_t i;

  for (i = 0; i < EXECUTION_PROCESS_COUNT; i++) {
 8004736:	1dbb      	adds	r3, r7, #6
 8004738:	2200      	movs	r2, #0
 800473a:	801a      	strh	r2, [r3, #0]
 800473c:	e099      	b.n	8004872 <ExecutionAverage+0x142>
    ExecutionTimeReport[i].CallsPerSecond = ExecutionTimeData[i].AccumCount;
 800473e:	1dbb      	adds	r3, r7, #6
 8004740:	881a      	ldrh	r2, [r3, #0]
 8004742:	1dbb      	adds	r3, r7, #6
 8004744:	8818      	ldrh	r0, [r3, #0]
 8004746:	494f      	ldr	r1, [pc, #316]	; (8004884 <ExecutionAverage+0x154>)
 8004748:	0013      	movs	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	189b      	adds	r3, r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	18cb      	adds	r3, r1, r3
 8004752:	3304      	adds	r3, #4
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	494c      	ldr	r1, [pc, #304]	; (8004888 <ExecutionAverage+0x158>)
 8004758:	0103      	lsls	r3, r0, #4
 800475a:	18cb      	adds	r3, r1, r3
 800475c:	3304      	adds	r3, #4
 800475e:	601a      	str	r2, [r3, #0]
    ExecutionTimeReport[i].MinTime = (ExecutionTimeData[i].CurrentMinTime * 100) / 16;      // xxx.xx uS
 8004760:	1dbb      	adds	r3, r7, #6
 8004762:	881a      	ldrh	r2, [r3, #0]
 8004764:	4947      	ldr	r1, [pc, #284]	; (8004884 <ExecutionAverage+0x154>)
 8004766:	0013      	movs	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	189b      	adds	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	18cb      	adds	r3, r1, r3
 8004770:	3308      	adds	r3, #8
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2264      	movs	r2, #100	; 0x64
 8004776:	435a      	muls	r2, r3
 8004778:	1dbb      	adds	r3, r7, #6
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	0912      	lsrs	r2, r2, #4
 800477e:	4942      	ldr	r1, [pc, #264]	; (8004888 <ExecutionAverage+0x158>)
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	18cb      	adds	r3, r1, r3
 8004784:	3308      	adds	r3, #8
 8004786:	601a      	str	r2, [r3, #0]
    ExecutionTimeReport[i].MaxTime = (ExecutionTimeData[i].CurrentMaxTime * 100) / 16;      // xxx.xx uS
 8004788:	1dbb      	adds	r3, r7, #6
 800478a:	881a      	ldrh	r2, [r3, #0]
 800478c:	493d      	ldr	r1, [pc, #244]	; (8004884 <ExecutionAverage+0x154>)
 800478e:	0013      	movs	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	189b      	adds	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	18cb      	adds	r3, r1, r3
 8004798:	330c      	adds	r3, #12
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2264      	movs	r2, #100	; 0x64
 800479e:	435a      	muls	r2, r3
 80047a0:	1dbb      	adds	r3, r7, #6
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	0912      	lsrs	r2, r2, #4
 80047a6:	4938      	ldr	r1, [pc, #224]	; (8004888 <ExecutionAverage+0x158>)
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	18cb      	adds	r3, r1, r3
 80047ac:	330c      	adds	r3, #12
 80047ae:	601a      	str	r2, [r3, #0]
    ExecutionTimeReport[i].AverageTime = 0;
 80047b0:	1dbb      	adds	r3, r7, #6
 80047b2:	881a      	ldrh	r2, [r3, #0]
 80047b4:	4b34      	ldr	r3, [pc, #208]	; (8004888 <ExecutionAverage+0x158>)
 80047b6:	0112      	lsls	r2, r2, #4
 80047b8:	2100      	movs	r1, #0
 80047ba:	50d1      	str	r1, [r2, r3]
    if (ExecutionTimeData[i].AccumCount != 0) {
 80047bc:	1dbb      	adds	r3, r7, #6
 80047be:	881a      	ldrh	r2, [r3, #0]
 80047c0:	4930      	ldr	r1, [pc, #192]	; (8004884 <ExecutionAverage+0x154>)
 80047c2:	0013      	movs	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	189b      	adds	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	18cb      	adds	r3, r1, r3
 80047cc:	3304      	adds	r3, #4
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01f      	beq.n	8004814 <ExecutionAverage+0xe4>
      ExecutionTimeReport[i].AverageTime = MultDivideWithRounding64(ExecutionTimeData[i].Accum, 1000, ExecutionTimeData[i].AccumCount * 16, RESULT_32);
 80047d4:	1dbb      	adds	r3, r7, #6
 80047d6:	881a      	ldrh	r2, [r3, #0]
 80047d8:	492a      	ldr	r1, [pc, #168]	; (8004884 <ExecutionAverage+0x154>)
 80047da:	0013      	movs	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	189b      	adds	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	585b      	ldr	r3, [r3, r1]
 80047e4:	0018      	movs	r0, r3
 80047e6:	1dbb      	adds	r3, r7, #6
 80047e8:	881a      	ldrh	r2, [r3, #0]
 80047ea:	4926      	ldr	r1, [pc, #152]	; (8004884 <ExecutionAverage+0x154>)
 80047ec:	0013      	movs	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	189b      	adds	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	18cb      	adds	r3, r1, r3
 80047f6:	3304      	adds	r3, #4
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	001a      	movs	r2, r3
 80047fe:	23fa      	movs	r3, #250	; 0xfa
 8004800:	0099      	lsls	r1, r3, #2
 8004802:	2302      	movs	r3, #2
 8004804:	f003 fbba 	bl	8007f7c <MultDivideWithRounding64>
 8004808:	1dbb      	adds	r3, r7, #6
 800480a:	881a      	ldrh	r2, [r3, #0]
 800480c:	0001      	movs	r1, r0
 800480e:	4b1e      	ldr	r3, [pc, #120]	; (8004888 <ExecutionAverage+0x158>)
 8004810:	0112      	lsls	r2, r2, #4
 8004812:	50d1      	str	r1, [r2, r3]
    }
    ExecutionTimeData[i].CurrentMinTime = 20000000;         // Start with a .125 seconds min value
 8004814:	1dbb      	adds	r3, r7, #6
 8004816:	881a      	ldrh	r2, [r3, #0]
 8004818:	491a      	ldr	r1, [pc, #104]	; (8004884 <ExecutionAverage+0x154>)
 800481a:	0013      	movs	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	189b      	adds	r3, r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	18cb      	adds	r3, r1, r3
 8004824:	3308      	adds	r3, #8
 8004826:	4a19      	ldr	r2, [pc, #100]	; (800488c <ExecutionAverage+0x15c>)
 8004828:	601a      	str	r2, [r3, #0]
    ExecutionTimeData[i].CurrentMaxTime = 0;
 800482a:	1dbb      	adds	r3, r7, #6
 800482c:	881a      	ldrh	r2, [r3, #0]
 800482e:	4915      	ldr	r1, [pc, #84]	; (8004884 <ExecutionAverage+0x154>)
 8004830:	0013      	movs	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	189b      	adds	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	18cb      	adds	r3, r1, r3
 800483a:	330c      	adds	r3, #12
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
    ExecutionTimeData[i].AccumCount = 0;
 8004840:	1dbb      	adds	r3, r7, #6
 8004842:	881a      	ldrh	r2, [r3, #0]
 8004844:	490f      	ldr	r1, [pc, #60]	; (8004884 <ExecutionAverage+0x154>)
 8004846:	0013      	movs	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	189b      	adds	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	18cb      	adds	r3, r1, r3
 8004850:	3304      	adds	r3, #4
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
    ExecutionTimeData[i].Accum = 0;
 8004856:	1dbb      	adds	r3, r7, #6
 8004858:	881a      	ldrh	r2, [r3, #0]
 800485a:	490a      	ldr	r1, [pc, #40]	; (8004884 <ExecutionAverage+0x154>)
 800485c:	0013      	movs	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	189b      	adds	r3, r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	2200      	movs	r2, #0
 8004866:	505a      	str	r2, [r3, r1]
  for (i = 0; i < EXECUTION_PROCESS_COUNT; i++) {
 8004868:	1dbb      	adds	r3, r7, #6
 800486a:	881a      	ldrh	r2, [r3, #0]
 800486c:	1dbb      	adds	r3, r7, #6
 800486e:	3201      	adds	r2, #1
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	1dbb      	adds	r3, r7, #6
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	2b1c      	cmp	r3, #28
 8004878:	d800      	bhi.n	800487c <ExecutionAverage+0x14c>
 800487a:	e760      	b.n	800473e <ExecutionAverage+0xe>
  }
}
 800487c:	46c0      	nop			; (mov r8, r8)
 800487e:	46bd      	mov	sp, r7
 8004880:	b002      	add	sp, #8
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20001c90 	.word	0x20001c90
 8004888:	20002a44 	.word	0x20002a44
 800488c:	01312d00 	.word	0x01312d00

08004890 <HAL_GPIO_EXTI_Callback>:
//
// Params:    GPIO_Pin - Pin Number that created the interrupt.
//
// Return:    None
//
void HAL_GPIO_EXTI_Callback(uint32_t GPIO_Pin) {
 8004890:	b5b0      	push	{r4, r5, r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

  int16_t Ch;
  //
  // Determine Channel.
  //
  if (GPIO_Pin == GPIO_PIN_3) {
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b08      	cmp	r3, #8
 800489c:	d104      	bne.n	80048a8 <HAL_GPIO_EXTI_Callback+0x18>
    Ch = 0;
 800489e:	2316      	movs	r3, #22
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	2200      	movs	r2, #0
 80048a4:	801a      	strh	r2, [r3, #0]
 80048a6:	e031      	b.n	800490c <HAL_GPIO_EXTI_Callback+0x7c>
  } else if (GPIO_Pin == GPIO_PIN_8) {
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d10e      	bne.n	80048d0 <HAL_GPIO_EXTI_Callback+0x40>
    if (DIG_HandleStruct[1].DIG_InitStruct.Mode == DIG_FREQ_IN) {
 80048b2:	4b83      	ldr	r3, [pc, #524]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 80048b4:	2258      	movs	r2, #88	; 0x58
 80048b6:	5c9b      	ldrb	r3, [r3, r2]
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d104      	bne.n	80048c6 <HAL_GPIO_EXTI_Callback+0x36>
      Ch = 1;
 80048bc:	2316      	movs	r3, #22
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	2201      	movs	r2, #1
 80048c2:	801a      	strh	r2, [r3, #0]
 80048c4:	e022      	b.n	800490c <HAL_GPIO_EXTI_Callback+0x7c>
    } else {
      Ch = 5;
 80048c6:	2316      	movs	r3, #22
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	2205      	movs	r2, #5
 80048cc:	801a      	strh	r2, [r3, #0]
 80048ce:	e01d      	b.n	800490c <HAL_GPIO_EXTI_Callback+0x7c>
    }
  } else if (GPIO_Pin == GPIO_PIN_9) {
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	2380      	movs	r3, #128	; 0x80
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d104      	bne.n	80048e4 <HAL_GPIO_EXTI_Callback+0x54>
    Ch = 2;
 80048da:	2316      	movs	r3, #22
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	2202      	movs	r2, #2
 80048e0:	801a      	strh	r2, [r3, #0]
 80048e2:	e013      	b.n	800490c <HAL_GPIO_EXTI_Callback+0x7c>
  } else if (GPIO_Pin == GPIO_PIN_4) {
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d104      	bne.n	80048f4 <HAL_GPIO_EXTI_Callback+0x64>
    Ch = 3;
 80048ea:	2316      	movs	r3, #22
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	2203      	movs	r2, #3
 80048f0:	801a      	strh	r2, [r3, #0]
 80048f2:	e00b      	b.n	800490c <HAL_GPIO_EXTI_Callback+0x7c>
  } else if (GPIO_Pin == GPIO_PIN_1) {
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d104      	bne.n	8004904 <HAL_GPIO_EXTI_Callback+0x74>
    Ch = 4;
 80048fa:	2316      	movs	r3, #22
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	2204      	movs	r2, #4
 8004900:	801a      	strh	r2, [r3, #0]
 8004902:	e003      	b.n	800490c <HAL_GPIO_EXTI_Callback+0x7c>
  } else {
    Error_Handler(FILE_FREQIN, __LINE__);
 8004904:	217c      	movs	r1, #124	; 0x7c
 8004906:	200c      	movs	r0, #12
 8004908:	f7ff fd64 	bl	80043d4 <Error_Handler>
    }
  //
  //  If interrupt was from a real leading edge, then pin should be high.  If pin is low, then interrupt was from a falling edge with glitches.
  //  By the time this logic is executed, any glitches on the input frequency should have passed by this time this code is executed.
  //
  if (STM32_GPIO_ReadPin(DIG_HandleStruct[Ch].Dig_IO_Port, DIG_HandleStruct[Ch].Dig_IO_Pin) != 0) {
 800490c:	2016      	movs	r0, #22
 800490e:	183b      	adds	r3, r7, r0
 8004910:	2200      	movs	r2, #0
 8004912:	5e9a      	ldrsh	r2, [r3, r2]
 8004914:	496a      	ldr	r1, [pc, #424]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 8004916:	0013      	movs	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	189b      	adds	r3, r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	18cb      	adds	r3, r1, r3
 8004920:	3314      	adds	r3, #20
 8004922:	681c      	ldr	r4, [r3, #0]
 8004924:	183b      	adds	r3, r7, r0
 8004926:	2200      	movs	r2, #0
 8004928:	5e9a      	ldrsh	r2, [r3, r2]
 800492a:	4965      	ldr	r1, [pc, #404]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 800492c:	2042      	movs	r0, #66	; 0x42
 800492e:	0013      	movs	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	189b      	adds	r3, r3, r2
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	18cb      	adds	r3, r1, r3
 8004938:	181b      	adds	r3, r3, r0
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	0019      	movs	r1, r3
 800493e:	0020      	movs	r0, r4
 8004940:	f000 fffa 	bl	8005938 <STM32_GPIO_ReadPin>
 8004944:	1e03      	subs	r3, r0, #0
 8004946:	d100      	bne.n	800494a <HAL_GPIO_EXTI_Callback+0xba>
 8004948:	e0b6      	b.n	8004ab8 <HAL_GPIO_EXTI_Callback+0x228>
    uint32_t Timer2Counts = TIM2->CNT;                // running at 16Mhz
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	05db      	lsls	r3, r3, #23
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	613b      	str	r3, [r7, #16]

    uint32_t Diff2 = Timer2Counts - DIG_HandleStruct[Ch].Timer2Counts;
 8004952:	2016      	movs	r0, #22
 8004954:	183b      	adds	r3, r7, r0
 8004956:	2200      	movs	r2, #0
 8004958:	5e9a      	ldrsh	r2, [r3, r2]
 800495a:	4959      	ldr	r1, [pc, #356]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 800495c:	0013      	movs	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	189b      	adds	r3, r3, r2
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	18cb      	adds	r3, r1, r3
 8004966:	333c      	adds	r3, #60	; 0x3c
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	60fb      	str	r3, [r7, #12]
    DIG_HandleStruct[Ch].Timer2Counts = Timer2Counts;
 8004970:	0004      	movs	r4, r0
 8004972:	193b      	adds	r3, r7, r4
 8004974:	2200      	movs	r2, #0
 8004976:	5e9a      	ldrsh	r2, [r3, r2]
 8004978:	4951      	ldr	r1, [pc, #324]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 800497a:	0013      	movs	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	189b      	adds	r3, r3, r2
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	18cb      	adds	r3, r1, r3
 8004984:	333c      	adds	r3, #60	; 0x3c
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	601a      	str	r2, [r3, #0]
    DIG_HandleStruct[Ch].Accum += Diff2;
 800498a:	193b      	adds	r3, r7, r4
 800498c:	2200      	movs	r2, #0
 800498e:	5e9a      	ldrsh	r2, [r3, r2]
 8004990:	494b      	ldr	r1, [pc, #300]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 8004992:	0013      	movs	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	189b      	adds	r3, r3, r2
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	18cb      	adds	r3, r1, r3
 800499c:	3330      	adds	r3, #48	; 0x30
 800499e:	6819      	ldr	r1, [r3, #0]
 80049a0:	193b      	adds	r3, r7, r4
 80049a2:	2200      	movs	r2, #0
 80049a4:	5e9a      	ldrsh	r2, [r3, r2]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	18c9      	adds	r1, r1, r3
 80049aa:	4845      	ldr	r0, [pc, #276]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 80049ac:	0013      	movs	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	189b      	adds	r3, r3, r2
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	18c3      	adds	r3, r0, r3
 80049b6:	3330      	adds	r3, #48	; 0x30
 80049b8:	6019      	str	r1, [r3, #0]
    DIG_HandleStruct[Ch].AccumCounter++;
 80049ba:	193b      	adds	r3, r7, r4
 80049bc:	2200      	movs	r2, #0
 80049be:	5e9a      	ldrsh	r2, [r3, r2]
 80049c0:	493f      	ldr	r1, [pc, #252]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 80049c2:	0013      	movs	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	189b      	adds	r3, r3, r2
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	18cb      	adds	r3, r1, r3
 80049cc:	3334      	adds	r3, #52	; 0x34
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	1c59      	adds	r1, r3, #1
 80049d2:	483b      	ldr	r0, [pc, #236]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 80049d4:	0013      	movs	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	189b      	adds	r3, r3, r2
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	18c3      	adds	r3, r0, r3
 80049de:	3334      	adds	r3, #52	; 0x34
 80049e0:	6019      	str	r1, [r3, #0]
    //  Then, zero Accumulator and Edge Counter to start
    //
    //  Lowest Slave Frequency = 64.06Hz = 15.61mS period = 249,760 counts  (249760 * 17 edges = 4245920 counts)      Resolution: 1 count = 0.0000158Hz
    //  Highest Slave Frequency=  16,384Hz = 61.035uS period = 976.56 counts  (976.56 * 4097 edges = 4000966 counts)   Resolution: 1 count = 0.0041Hz
    //
    if (DIG_HandleStruct[Ch].Accum >= 4000000) {                                              // .25 seconds @ 16Mhz
 80049e2:	193b      	adds	r3, r7, r4
 80049e4:	2200      	movs	r2, #0
 80049e6:	5e9a      	ldrsh	r2, [r3, r2]
 80049e8:	4935      	ldr	r1, [pc, #212]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 80049ea:	0013      	movs	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	189b      	adds	r3, r3, r2
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	18cb      	adds	r3, r1, r3
 80049f4:	3330      	adds	r3, #48	; 0x30
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a32      	ldr	r2, [pc, #200]	; (8004ac4 <HAL_GPIO_EXTI_Callback+0x234>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d95c      	bls.n	8004ab8 <HAL_GPIO_EXTI_Callback+0x228>
      DIG_HandleStruct[Ch].CaptureAccum = DIG_HandleStruct[Ch].Accum;
 80049fe:	2516      	movs	r5, #22
 8004a00:	197b      	adds	r3, r7, r5
 8004a02:	2100      	movs	r1, #0
 8004a04:	5e59      	ldrsh	r1, [r3, r1]
 8004a06:	197b      	adds	r3, r7, r5
 8004a08:	2200      	movs	r2, #0
 8004a0a:	5e9a      	ldrsh	r2, [r3, r2]
 8004a0c:	482c      	ldr	r0, [pc, #176]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 8004a0e:	000b      	movs	r3, r1
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	185b      	adds	r3, r3, r1
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	18c3      	adds	r3, r0, r3
 8004a18:	3330      	adds	r3, #48	; 0x30
 8004a1a:	6819      	ldr	r1, [r3, #0]
 8004a1c:	4828      	ldr	r0, [pc, #160]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 8004a1e:	0013      	movs	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	18c3      	adds	r3, r0, r3
 8004a28:	3328      	adds	r3, #40	; 0x28
 8004a2a:	6019      	str	r1, [r3, #0]
      DIG_HandleStruct[Ch].CaptureAccumCounter = DIG_HandleStruct[Ch].AccumCounter;
 8004a2c:	197b      	adds	r3, r7, r5
 8004a2e:	2100      	movs	r1, #0
 8004a30:	5e59      	ldrsh	r1, [r3, r1]
 8004a32:	197b      	adds	r3, r7, r5
 8004a34:	2200      	movs	r2, #0
 8004a36:	5e9a      	ldrsh	r2, [r3, r2]
 8004a38:	4821      	ldr	r0, [pc, #132]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 8004a3a:	000b      	movs	r3, r1
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	185b      	adds	r3, r3, r1
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	18c3      	adds	r3, r0, r3
 8004a44:	3334      	adds	r3, #52	; 0x34
 8004a46:	6819      	ldr	r1, [r3, #0]
 8004a48:	481d      	ldr	r0, [pc, #116]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 8004a4a:	0013      	movs	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	189b      	adds	r3, r3, r2
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	18c3      	adds	r3, r0, r3
 8004a54:	332c      	adds	r3, #44	; 0x2c
 8004a56:	6019      	str	r1, [r3, #0]
      DIG_HandleStruct[Ch].CapturePeriodCounter++;
 8004a58:	197b      	adds	r3, r7, r5
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	5e9a      	ldrsh	r2, [r3, r2]
 8004a5e:	4918      	ldr	r1, [pc, #96]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 8004a60:	2048      	movs	r0, #72	; 0x48
 8004a62:	0013      	movs	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	189b      	adds	r3, r3, r2
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	18cb      	adds	r3, r1, r3
 8004a6c:	181b      	adds	r3, r3, r0
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	3301      	adds	r3, #1
 8004a72:	b29c      	uxth	r4, r3
 8004a74:	4912      	ldr	r1, [pc, #72]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 8004a76:	2048      	movs	r0, #72	; 0x48
 8004a78:	0013      	movs	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	189b      	adds	r3, r3, r2
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	18cb      	adds	r3, r1, r3
 8004a82:	181b      	adds	r3, r3, r0
 8004a84:	1c22      	adds	r2, r4, #0
 8004a86:	801a      	strh	r2, [r3, #0]
      DIG_HandleStruct[Ch].Accum = 0;
 8004a88:	197b      	adds	r3, r7, r5
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	5e9a      	ldrsh	r2, [r3, r2]
 8004a8e:	490c      	ldr	r1, [pc, #48]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 8004a90:	0013      	movs	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	189b      	adds	r3, r3, r2
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	18cb      	adds	r3, r1, r3
 8004a9a:	3330      	adds	r3, #48	; 0x30
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
      DIG_HandleStruct[Ch].AccumCounter = 0;
 8004aa0:	197b      	adds	r3, r7, r5
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	5e9a      	ldrsh	r2, [r3, r2]
 8004aa6:	4906      	ldr	r1, [pc, #24]	; (8004ac0 <HAL_GPIO_EXTI_Callback+0x230>)
 8004aa8:	0013      	movs	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	189b      	adds	r3, r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	18cb      	adds	r3, r1, r3
 8004ab2:	3334      	adds	r3, #52	; 0x34
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
    }
  }
}
 8004ab8:	46c0      	nop			; (mov r8, r8)
 8004aba:	46bd      	mov	sp, r7
 8004abc:	b006      	add	sp, #24
 8004abe:	bdb0      	pop	{r4, r5, r7, pc}
 8004ac0:	20002d24 	.word	0x20002d24
 8004ac4:	003d08ff 	.word	0x003d08ff

08004ac8 <ProcessFrequencyOutputs>:
//
// Params:    None
//
// Returns:   None
//
void ProcessFrequencyOutputs(void) {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0

  int32_t i;

  ExecutionStart(EXECUTION_PROCESS_FREQUENCY_OUTPUTS);
 8004ace:	2008      	movs	r0, #8
 8004ad0:	f7ff fd9c 	bl	800460c <ExecutionStart>
  //
  // Set Digital I/O for any that are configurated as Temperature Frequency
  //       Outputs
  //
  for (i = 0; i < 6; i++) {
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	e039      	b.n	8004b4e <ProcessFrequencyOutputs+0x86>
    if (DIG_HandleStruct[i].DIG_InitStruct.Config == CONFIG_DIG_TEMP_FREQ_OUT) {
 8004ada:	4922      	ldr	r1, [pc, #136]	; (8004b64 <ProcessFrequencyOutputs+0x9c>)
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	0013      	movs	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	189b      	adds	r3, r3, r2
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	18cb      	adds	r3, r1, r3
 8004ae8:	3309      	adds	r3, #9
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d106      	bne.n	8004afe <ProcessFrequencyOutputs+0x36>
      DIG_SetFrequency(i, SysVars.TemperatureFrequency);
 8004af0:	4b1d      	ldr	r3, [pc, #116]	; (8004b68 <ProcessFrequencyOutputs+0xa0>)
 8004af2:	695a      	ldr	r2, [r3, #20]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	0011      	movs	r1, r2
 8004af8:	0018      	movs	r0, r3
 8004afa:	f7ff f96d 	bl	8003dd8 <DIG_SetFrequency>
    }
    if (DIG_HandleStruct[i].DIG_InitStruct.Config == CONFIG_DIG_KMA_FREQ_OUT) {
 8004afe:	4919      	ldr	r1, [pc, #100]	; (8004b64 <ProcessFrequencyOutputs+0x9c>)
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	0013      	movs	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	189b      	adds	r3, r3, r2
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	18cb      	adds	r3, r1, r3
 8004b0c:	3309      	adds	r3, #9
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b05      	cmp	r3, #5
 8004b12:	d106      	bne.n	8004b22 <ProcessFrequencyOutputs+0x5a>
      DIG_SetFrequency(i, SysVars.KmaFrequency);
 8004b14:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <ProcessFrequencyOutputs+0xa0>)
 8004b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0011      	movs	r1, r2
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f7ff f95b 	bl	8003dd8 <DIG_SetFrequency>
    }
    if (DIG_HandleStruct[i].DIG_InitStruct.Config == CONFIG_DIG_MASTER_FREQ_OUT) {
 8004b22:	4910      	ldr	r1, [pc, #64]	; (8004b64 <ProcessFrequencyOutputs+0x9c>)
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	0013      	movs	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	189b      	adds	r3, r3, r2
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	18cb      	adds	r3, r1, r3
 8004b30:	3309      	adds	r3, #9
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d107      	bne.n	8004b48 <ProcessFrequencyOutputs+0x80>
      DIG_SetFrequency(i, SysVars.MasterFrequency);
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <ProcessFrequencyOutputs+0xa0>)
 8004b3a:	22a0      	movs	r2, #160	; 0xa0
 8004b3c:	589a      	ldr	r2, [r3, r2]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	0011      	movs	r1, r2
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7ff f948 	bl	8003dd8 <DIG_SetFrequency>
  for (i = 0; i < 6; i++) {
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	607b      	str	r3, [r7, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b05      	cmp	r3, #5
 8004b52:	ddc2      	ble.n	8004ada <ProcessFrequencyOutputs+0x12>
    }
  }
  ExecutionEnd(EXECUTION_PROCESS_FREQUENCY_OUTPUTS);
 8004b54:	2008      	movs	r0, #8
 8004b56:	f7ff fd73 	bl	8004640 <ExecutionEnd>
}
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b002      	add	sp, #8
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	20002d24 	.word	0x20002d24
 8004b68:	200020c0 	.word	0x200020c0

08004b6c <ProcessMasterFrequencyOutput>:
//
// Params:    None
//
// Returns:   None
//
void ProcessMasterFrequencyOutput(void) {
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0

  int32_t i, IndexRange, SetpointRange;

  ExecutionStart(EXECUTION_PROCESS_MASTER_FREQUENCY_OUTPUT);
 8004b72:	2009      	movs	r0, #9
 8004b74:	f7ff fd4a 	bl	800460c <ExecutionStart>
  // Calculate Master Frequency.
  //
  // In compatibly mode, Master Frequency = 65536 / Master Index
  // In Frequency Table Mode, Master Frequency is based on table
  //
  if (bFlashConfigurationValid != 0) {
 8004b78:	4b4e      	ldr	r3, [pc, #312]	; (8004cb4 <ProcessMasterFrequencyOutput+0x148>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d100      	bne.n	8004b82 <ProcessMasterFrequencyOutput+0x16>
 8004b80:	e091      	b.n	8004ca6 <ProcessMasterFrequencyOutput+0x13a>
    if (FlashConfiguration->MasterFreqMode != 0) {
 8004b82:	4b4d      	ldr	r3, [pc, #308]	; (8004cb8 <ProcessMasterFrequencyOutput+0x14c>)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	2382      	movs	r3, #130	; 0x82
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	5cd3      	ldrb	r3, [r2, r3]
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	4013      	ands	r3, r2
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01d      	beq.n	8004bd2 <ProcessMasterFrequencyOutput+0x66>
      //
      // SetpointIndex
      //
      if (SysVars.SetpointIndex != 0) {
 8004b96:	4b49      	ldr	r3, [pc, #292]	; (8004cbc <ProcessMasterFrequencyOutput+0x150>)
 8004b98:	22a8      	movs	r2, #168	; 0xa8
 8004b9a:	589b      	ldr	r3, [r3, r2]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d100      	bne.n	8004ba2 <ProcessMasterFrequencyOutput+0x36>
 8004ba0:	e081      	b.n	8004ca6 <ProcessMasterFrequencyOutput+0x13a>
        SysVars.MasterFrequency = MultDivideWithRounding64(655360000 / (SlaveCount + 1), 1, SysVars.SetpointIndex, RESULT_32);
 8004ba2:	4b47      	ldr	r3, [pc, #284]	; (8004cc0 <ProcessMasterFrequencyOutput+0x154>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b25b      	sxtb	r3, r3
 8004ba8:	3301      	adds	r3, #1
 8004baa:	0019      	movs	r1, r3
 8004bac:	4845      	ldr	r0, [pc, #276]	; (8004cc4 <ProcessMasterFrequencyOutput+0x158>)
 8004bae:	f7fb fb99 	bl	80002e4 <__divsi3>
 8004bb2:	0003      	movs	r3, r0
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	4b41      	ldr	r3, [pc, #260]	; (8004cbc <ProcessMasterFrequencyOutput+0x150>)
 8004bb8:	22a8      	movs	r2, #168	; 0xa8
 8004bba:	589a      	ldr	r2, [r3, r2]
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	f003 f9dc 	bl	8007f7c <MultDivideWithRounding64>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	000c      	movs	r4, r1
 8004bc8:	0019      	movs	r1, r3
 8004bca:	4b3c      	ldr	r3, [pc, #240]	; (8004cbc <ProcessMasterFrequencyOutput+0x150>)
 8004bcc:	22a0      	movs	r2, #160	; 0xa0
 8004bce:	5099      	str	r1, [r3, r2]
 8004bd0:	e069      	b.n	8004ca6 <ProcessMasterFrequencyOutput+0x13a>
      }
      } else {
        for (i = 1; i < FlashConfiguration->MasterFreqTable.TableLength; i++) {
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	e05c      	b.n	8004c92 <ProcessMasterFrequencyOutput+0x126>
          if (SysVars.SetpointIndex <= FlashConfiguration->MasterFreqTable.TablePoint[i].Point1) {
 8004bd8:	4b38      	ldr	r3, [pc, #224]	; (8004cbc <ProcessMasterFrequencyOutput+0x150>)
 8004bda:	22a8      	movs	r2, #168	; 0xa8
 8004bdc:	589a      	ldr	r2, [r3, r2]
 8004bde:	4b36      	ldr	r3, [pc, #216]	; (8004cb8 <ProcessMasterFrequencyOutput+0x14c>)
 8004be0:	6819      	ldr	r1, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3320      	adds	r3, #32
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	18cb      	adds	r3, r1, r3
 8004bea:	3308      	adds	r3, #8
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	dc4c      	bgt.n	8004c8c <ProcessMasterFrequencyOutput+0x120>
            IndexRange = FlashConfiguration->MasterFreqTable.TablePoint[i].Point1 - FlashConfiguration->MasterFreqTable.TablePoint[i - 1].Point1;
 8004bf2:	4b31      	ldr	r3, [pc, #196]	; (8004cb8 <ProcessMasterFrequencyOutput+0x14c>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3320      	adds	r3, #32
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	18d3      	adds	r3, r2, r3
 8004bfe:	3308      	adds	r3, #8
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b2d      	ldr	r3, [pc, #180]	; (8004cb8 <ProcessMasterFrequencyOutput+0x14c>)
 8004c04:	6819      	ldr	r1, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	3320      	adds	r3, #32
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	18cb      	adds	r3, r1, r3
 8004c10:	3308      	adds	r3, #8
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	60bb      	str	r3, [r7, #8]
            SetpointRange = FlashConfiguration->MasterFreqTable.TablePoint[i].Point2 - FlashConfiguration->MasterFreqTable.TablePoint[i - 1].Point2;
 8004c18:	4b27      	ldr	r3, [pc, #156]	; (8004cb8 <ProcessMasterFrequencyOutput+0x14c>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3320      	adds	r3, #32
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	18d3      	adds	r3, r2, r3
 8004c24:	330c      	adds	r3, #12
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	4b23      	ldr	r3, [pc, #140]	; (8004cb8 <ProcessMasterFrequencyOutput+0x14c>)
 8004c2a:	6819      	ldr	r1, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	3320      	adds	r3, #32
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	18cb      	adds	r3, r1, r3
 8004c36:	330c      	adds	r3, #12
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	607b      	str	r3, [r7, #4]
            if (IndexRange != 0) {
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d02f      	beq.n	8004ca4 <ProcessMasterFrequencyOutput+0x138>
              SysVars.MasterFrequency = MultDivideWithRounding64(SysVars.SetpointIndex - FlashConfiguration->MasterFreqTable.TablePoint[i - 1].Point1, SetpointRange, IndexRange, RESULT_32) +
 8004c44:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <ProcessMasterFrequencyOutput+0x150>)
 8004c46:	22a8      	movs	r2, #168	; 0xa8
 8004c48:	589a      	ldr	r2, [r3, r2]
 8004c4a:	4b1b      	ldr	r3, [pc, #108]	; (8004cb8 <ProcessMasterFrequencyOutput+0x14c>)
 8004c4c:	6819      	ldr	r1, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	3320      	adds	r3, #32
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	18cb      	adds	r3, r1, r3
 8004c58:	3308      	adds	r3, #8
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	1ad0      	subs	r0, r2, r3
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	2302      	movs	r3, #2
 8004c64:	f003 f98a 	bl	8007f7c <MultDivideWithRounding64>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	000c      	movs	r4, r1
 8004c6c:	0019      	movs	r1, r3
              (FlashConfiguration->MasterFreqTable.TablePoint[i - 1].Point2);
 8004c6e:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <ProcessMasterFrequencyOutput+0x14c>)
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	3320      	adds	r3, #32
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	18d3      	adds	r3, r2, r3
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	681b      	ldr	r3, [r3, #0]
              SysVars.MasterFrequency = MultDivideWithRounding64(SysVars.SetpointIndex - FlashConfiguration->MasterFreqTable.TablePoint[i - 1].Point1, SetpointRange, IndexRange, RESULT_32) +
 8004c80:	18cb      	adds	r3, r1, r3
 8004c82:	0019      	movs	r1, r3
 8004c84:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <ProcessMasterFrequencyOutput+0x150>)
 8004c86:	22a0      	movs	r2, #160	; 0xa0
 8004c88:	5099      	str	r1, [r3, r2]
            }
            break;
 8004c8a:	e00b      	b.n	8004ca4 <ProcessMasterFrequencyOutput+0x138>
        for (i = 1; i < FlashConfiguration->MasterFreqTable.TableLength; i++) {
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <ProcessMasterFrequencyOutput+0x14c>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	2382      	movs	r3, #130	; 0x82
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	58d3      	ldr	r3, [r2, r3]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	db9a      	blt.n	8004bd8 <ProcessMasterFrequencyOutput+0x6c>
 8004ca2:	e000      	b.n	8004ca6 <ProcessMasterFrequencyOutput+0x13a>
            break;
 8004ca4:	46c0      	nop			; (mov r8, r8)
          }
        }
      }
  }
  ExecutionEnd(EXECUTION_PROCESS_MASTER_FREQUENCY_OUTPUT);
 8004ca6:	2009      	movs	r0, #9
 8004ca8:	f7ff fcca 	bl	8004640 <ExecutionEnd>
}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b005      	add	sp, #20
 8004cb2:	bd90      	pop	{r4, r7, pc}
 8004cb4:	20002cf6 	.word	0x20002cf6
 8004cb8:	20002f04 	.word	0x20002f04
 8004cbc:	200020c0 	.word	0x200020c0
 8004cc0:	20001585 	.word	0x20001585
 8004cc4:	27100000 	.word	0x27100000

08004cc8 <Qual_1>:
//
// Returns:   None
//
// Requirement(s):
//
void Qual_1 (void) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0

  fuzzy_outputs[0] = 0;
 8004ccc:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <Qual_1+0x4c>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]

  while (SysVars.Quality1 == 0) {
 8004cd2:	e017      	b.n	8004d04 <Qual_1+0x3c>
    //
    // Input 0: 33Vref
    //
    fuzzy_inputs[0] = SysVars.PowerRail33VDC;
 8004cd4:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <Qual_1+0x50>)
 8004cd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cd8:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <Qual_1+0x54>)
 8004cda:	601a      	str	r2, [r3, #0]
    //
    // Input 1: 5Vref
    //
    fuzzy_inputs[1] = SysVars.PowerRail5VDC;
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <Qual_1+0x50>)
 8004cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce0:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <Qual_1+0x54>)
 8004ce2:	605a      	str	r2, [r3, #4]
    //
    // Input 2: Noise
    //
    fuzzy_inputs[2] = SysVars.Noise;
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <Qual_1+0x50>)
 8004ce6:	22f4      	movs	r2, #244	; 0xf4
 8004ce8:	589a      	ldr	r2, [r3, r2]
 8004cea:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <Qual_1+0x54>)
 8004cec:	609a      	str	r2, [r3, #8]
    //


    // MYABE ADD CODE THAT CONVERTS INPUTS TO MAX AND MIN ALLOWABLE VALUES

    Fuzzy_Evaluate(Fuzzy1Configuration);
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <Qual_1+0x58>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f000 fad0 	bl	8005298 <Fuzzy_Evaluate>
    SysVars.Quality1 = fuzzy_outputs[0] + 1; // + 1 ensures this value is greater than 0
 8004cf8:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <Qual_1+0x4c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <Qual_1+0x50>)
 8004d00:	21fc      	movs	r1, #252	; 0xfc
 8004d02:	505a      	str	r2, [r3, r1]
  while (SysVars.Quality1 == 0) {
 8004d04:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <Qual_1+0x50>)
 8004d06:	22fc      	movs	r2, #252	; 0xfc
 8004d08:	589b      	ldr	r3, [r3, r2]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0e2      	beq.n	8004cd4 <Qual_1+0xc>

  }
}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000a20 	.word	0x20000a20
 8004d18:	200020c0 	.word	0x200020c0
 8004d1c:	20000a14 	.word	0x20000a14
 8004d20:	20000c20 	.word	0x20000c20

08004d24 <Min>:
//
// Returns:   The lesser of a and b
//
// Requirement(s):
//
int32_t Min(int32_t a, int32_t b) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  if (a > b) {
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	dd01      	ble.n	8004d3a <Min+0x16>
    return b;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	e000      	b.n	8004d3c <Min+0x18>
  }
  else {
    return a;
 8004d3a:	687b      	ldr	r3, [r7, #4]
  }
}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b002      	add	sp, #8
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <Max>:
//
// Returns:   The greater of a and b
//
// Requirement(s):
//
int32_t Max(int32_t a, int32_t b) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  if (a > b) {
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	dd01      	ble.n	8004d5a <Max+0x16>
    return a;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	e000      	b.n	8004d5c <Max+0x18>
  }
  else {
    return b;
 8004d5a:	683b      	ldr	r3, [r7, #0]
  }
}
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b002      	add	sp, #8
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <Fuzzy_Trimf>:
// Returns:   Fuzzy logic score from a trapezoid membershift function
//
// Requirement(s):
//
int32_t Fuzzy_Trimf(int32_t x, int32_t *p)
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b089      	sub	sp, #36	; 0x24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  int32_t a = p[0], b = p[1], c = p[2]; // assign points of triangle to a, b and c
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	617b      	str	r3, [r7, #20]
  int32_t t1 = (10000 * (x - a)) / (b - a); //outputs how high on the left-hand side x is
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	4a37      	ldr	r2, [pc, #220]	; (8004e64 <Fuzzy_Trimf+0x100>)
 8004d88:	435a      	muls	r2, r3
 8004d8a:	0010      	movs	r0, r2
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	0019      	movs	r1, r3
 8004d94:	f7fb faa6 	bl	80002e4 <__divsi3>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	613b      	str	r3, [r7, #16]
  int32_t t2 = (10000 * (c - x)) / (c - b); // outputs how high on the right-hand side x is
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	4a30      	ldr	r2, [pc, #192]	; (8004e64 <Fuzzy_Trimf+0x100>)
 8004da4:	435a      	muls	r2, r3
 8004da6:	0010      	movs	r0, r2
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	0019      	movs	r1, r3
 8004db0:	f7fb fa98 	bl	80002e4 <__divsi3>
 8004db4:	0003      	movs	r3, r0
 8004db6:	60fb      	str	r3, [r7, #12]
  if ((a == b) && (b == c)) {
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d10a      	bne.n	8004dd6 <Fuzzy_Trimf+0x72>
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d106      	bne.n	8004dd6 <Fuzzy_Trimf+0x72>
    return (int32_t) (x == a);
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	425a      	negs	r2, r3
 8004dd0:	4153      	adcs	r3, r2
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	e041      	b.n	8004e5a <Fuzzy_Trimf+0xf6>
  }
  if (a == b) {
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d115      	bne.n	8004e0a <Fuzzy_Trimf+0xa6>
    return (int32_t) (t2*(b <= x)*(x <= c));
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	0fd8      	lsrs	r0, r3, #31
 8004de4:	17d1      	asrs	r1, r2, #31
 8004de6:	429a      	cmp	r2, r3
 8004de8:	4148      	adcs	r0, r1
 8004dea:	0003      	movs	r3, r0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	001a      	movs	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4353      	muls	r3, r2
 8004df4:	0019      	movs	r1, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	0fdc      	lsrs	r4, r3, #31
 8004dfc:	17d0      	asrs	r0, r2, #31
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	4144      	adcs	r4, r0
 8004e02:	0023      	movs	r3, r4
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	434b      	muls	r3, r1
 8004e08:	e027      	b.n	8004e5a <Fuzzy_Trimf+0xf6>
  }
  if (b == c) {
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d115      	bne.n	8004e3e <Fuzzy_Trimf+0xda>
    return (int32_t) (t1*(a <= x)*(x <= b));
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	0fd8      	lsrs	r0, r3, #31
 8004e18:	17d1      	asrs	r1, r2, #31
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	4148      	adcs	r0, r1
 8004e1e:	0003      	movs	r3, r0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	001a      	movs	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	4353      	muls	r3, r2
 8004e28:	0019      	movs	r1, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	0fdc      	lsrs	r4, r3, #31
 8004e30:	17d0      	asrs	r0, r2, #31
 8004e32:	429a      	cmp	r2, r3
 8004e34:	4144      	adcs	r4, r0
 8004e36:	0023      	movs	r3, r4
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	434b      	muls	r3, r1
 8004e3c:	e00d      	b.n	8004e5a <Fuzzy_Trimf+0xf6>
  }
  t1 = Min(t1, t2);
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	0011      	movs	r1, r2
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7ff ff6d 	bl	8004d24 <Min>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	613b      	str	r3, [r7, #16]
  return (int32_t) Max(t1, 0);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2100      	movs	r1, #0
 8004e52:	0018      	movs	r0, r3
 8004e54:	f7ff ff76 	bl	8004d44 <Max>
 8004e58:	0003      	movs	r3, r0
}
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b009      	add	sp, #36	; 0x24
 8004e60:	bd90      	pop	{r4, r7, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	00002710 	.word	0x00002710

08004e68 <Fuzzy_Trapmf>:
*/
// Returns:   Fuzzy logic score from a trapezoid membership function
//
// Requirement(s):
//
int32_t Fuzzy_Trapmf(int32_t x, int32_t* p) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  int32_t a = p[0], b = p[1], c = p[2], d = p[3]; // assign points of trapezoi to a, b, c and d
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	61fb      	str	r3, [r7, #28]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	613b      	str	r3, [r7, #16]
  int32_t t1 = ((x <= c) ? 10000 : ((d < x) ? 0 : ((c != d) ? ((10000*(d - x)) / (d - c)) : 0)));
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	dd19      	ble.n	8004ec6 <Fuzzy_Trapmf+0x5e>
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	db13      	blt.n	8004ec2 <Fuzzy_Trapmf+0x5a>
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d00d      	beq.n	8004ebe <Fuzzy_Trapmf+0x56>
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	4a1d      	ldr	r2, [pc, #116]	; (8004f20 <Fuzzy_Trapmf+0xb8>)
 8004eaa:	435a      	muls	r2, r3
 8004eac:	0010      	movs	r0, r2
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	f7fb fa15 	bl	80002e4 <__divsi3>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	e004      	b.n	8004ec8 <Fuzzy_Trapmf+0x60>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e002      	b.n	8004ec8 <Fuzzy_Trapmf+0x60>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e000      	b.n	8004ec8 <Fuzzy_Trapmf+0x60>
 8004ec6:	4b16      	ldr	r3, [pc, #88]	; (8004f20 <Fuzzy_Trapmf+0xb8>)
 8004ec8:	60fb      	str	r3, [r7, #12]
  int32_t t2 = ((b <= x) ? 10000 : ((x < a) ? 0 : ((a != b) ? ((10000*(x - a)) / (b - a)) : 0)));
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	dd19      	ble.n	8004f06 <Fuzzy_Trapmf+0x9e>
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	db13      	blt.n	8004f02 <Fuzzy_Trapmf+0x9a>
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d00d      	beq.n	8004efe <Fuzzy_Trapmf+0x96>
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	4a0d      	ldr	r2, [pc, #52]	; (8004f20 <Fuzzy_Trapmf+0xb8>)
 8004eea:	435a      	muls	r2, r3
 8004eec:	0010      	movs	r0, r2
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	0019      	movs	r1, r3
 8004ef6:	f7fb f9f5 	bl	80002e4 <__divsi3>
 8004efa:	0003      	movs	r3, r0
 8004efc:	e004      	b.n	8004f08 <Fuzzy_Trapmf+0xa0>
 8004efe:	2300      	movs	r3, #0
 8004f00:	e002      	b.n	8004f08 <Fuzzy_Trapmf+0xa0>
 8004f02:	2300      	movs	r3, #0
 8004f04:	e000      	b.n	8004f08 <Fuzzy_Trapmf+0xa0>
 8004f06:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <Fuzzy_Trapmf+0xb8>)
 8004f08:	60bb      	str	r3, [r7, #8]
  return (int32_t) Min(t1, t2);
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	0011      	movs	r1, r2
 8004f10:	0018      	movs	r0, r3
 8004f12:	f7ff ff07 	bl	8004d24 <Min>
 8004f16:	0003      	movs	r3, r0
}
 8004f18:	0018      	movs	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b008      	add	sp, #32
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	00002710 	.word	0x00002710

08004f24 <Fuzzy_Array_Operation>:
// Returns:   The value in the array that meets the criteria of the comparator (i.e.,
//            minimum of array for Min comparator)
//
// Requirement(s):
//
int32_t Fuzzy_Array_Operation(int32_t *array, int8_t size, _FUZZY_ARR_OP pfnOp) {
 8004f24:	b590      	push	{r4, r7, lr}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	200b      	movs	r0, #11
 8004f30:	183b      	adds	r3, r7, r0
 8004f32:	1c0a      	adds	r2, r1, #0
 8004f34:	701a      	strb	r2, [r3, #0]

  int8_t i; // counter in for loop
  int32_t ret = 0; // value returned by function
 8004f36:	2300      	movs	r3, #0
 8004f38:	613b      	str	r3, [r7, #16]

  if (size == 0) {
 8004f3a:	183b      	adds	r3, r7, r0
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	b25b      	sxtb	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <Fuzzy_Array_Operation+0x24>
    return ret;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	e031      	b.n	8004fac <Fuzzy_Array_Operation+0x88>
  }
  if (size == 1) {
 8004f48:	230b      	movs	r3, #11
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d102      	bne.n	8004f5a <Fuzzy_Array_Operation+0x36>
    return array[0];
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	e028      	b.n	8004fac <Fuzzy_Array_Operation+0x88>
  }

  ret = array[0];
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	613b      	str	r3, [r7, #16]
  for (i = 1; i < size; i++) {
 8004f60:	2317      	movs	r3, #23
 8004f62:	18fb      	adds	r3, r7, r3
 8004f64:	2201      	movs	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	e015      	b.n	8004f96 <Fuzzy_Array_Operation+0x72>
    ret = (*pfnOp)(ret, array[i]);
 8004f6a:	2417      	movs	r4, #23
 8004f6c:	193b      	adds	r3, r7, r4
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	b25b      	sxtb	r3, r3
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	18d3      	adds	r3, r2, r3
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	0010      	movs	r0, r2
 8004f80:	4798      	blx	r3
 8004f82:	0003      	movs	r3, r0
 8004f84:	613b      	str	r3, [r7, #16]
  for (i = 1; i < size; i++) {
 8004f86:	193b      	adds	r3, r7, r4
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	b25b      	sxtb	r3, r3
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	193b      	adds	r3, r7, r4
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	2317      	movs	r3, #23
 8004f98:	18fa      	adds	r2, r7, r3
 8004f9a:	230b      	movs	r3, #11
 8004f9c:	18fb      	adds	r3, r7, r3
 8004f9e:	7812      	ldrb	r2, [r2, #0]
 8004fa0:	b252      	sxtb	r2, r2
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	b25b      	sxtb	r3, r3
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	dbdf      	blt.n	8004f6a <Fuzzy_Array_Operation+0x46>
  }
  return ret;
 8004faa:	693b      	ldr	r3, [r7, #16]
}
 8004fac:	0018      	movs	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b007      	add	sp, #28
 8004fb2:	bd90      	pop	{r4, r7, pc}

08004fb4 <Fuzzy_MF_Out>:
//
// Returns:   Fuzzy logic score from a trapezoid membership function
//
// Requirement(s):
//
int32_t Fuzzy_MF_Out(int32_t** fuzzyRuleSet, int32_t x, int8_t o, stFuzzyConfiguration *FuzzyData) {
 8004fb4:	b5b0      	push	{r4, r5, r7, lr}
 8004fb6:	b08e      	sub	sp, #56	; 0x38
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	1dfb      	adds	r3, r7, #7
 8004fc2:	701a      	strb	r2, [r3, #0]
  int32_t TmpArr[4]; // Stores membership function data as a temporary array
  int32_t *mfoutptr[4]; // Pointer to TmpArr
  int8_t index; // holds which mf applies to the rule
  int8_t j;

  for (r = 0; r < FuzzyData->FuzzyRuleInfo.RuleCount; ++r) {
 8004fc4:	2333      	movs	r3, #51	; 0x33
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	2200      	movs	r2, #0
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	e0d4      	b.n	8005178 <Fuzzy_MF_Out+0x1c4>
    index = FuzzyData->FuzzyOutputRules.OutputRule[r]; // gets the mf of the rule to apply
 8004fce:	2333      	movs	r3, #51	; 0x33
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	569a      	ldrsb	r2, [r3, r2]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	326e      	adds	r2, #110	; 0x6e
 8004fda:	0092      	lsls	r2, r2, #2
 8004fdc:	58d2      	ldr	r2, [r2, r3]
 8004fde:	2131      	movs	r1, #49	; 0x31
 8004fe0:	187b      	adds	r3, r7, r1
 8004fe2:	701a      	strb	r2, [r3, #0]
    if (index > 0) {
 8004fe4:	187b      	adds	r3, r7, r1
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	b25b      	sxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	dc00      	bgt.n	8004ff0 <Fuzzy_MF_Out+0x3c>
 8004fee:	e07a      	b.n	80050e6 <Fuzzy_MF_Out+0x132>
      index = index - 1;
 8004ff0:	2431      	movs	r4, #49	; 0x31
 8004ff2:	193b      	adds	r3, r7, r4
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	193b      	adds	r3, r7, r4
 8004ffc:	701a      	strb	r2, [r3, #0]
      TmpArr[0] = FuzzyData->FuzzyOutputMFs.MF[index].Point0;
 8004ffe:	193b      	adds	r3, r7, r4
 8005000:	2200      	movs	r2, #0
 8005002:	569a      	ldrsb	r2, [r3, r2]
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	20cc      	movs	r0, #204	; 0xcc
 8005008:	0013      	movs	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	189b      	adds	r3, r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	18cb      	adds	r3, r1, r3
 8005012:	181b      	adds	r3, r3, r0
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	2520      	movs	r5, #32
 8005018:	197b      	adds	r3, r7, r5
 800501a:	601a      	str	r2, [r3, #0]
      TmpArr[1] = FuzzyData->FuzzyOutputMFs.MF[index].Point1;
 800501c:	193b      	adds	r3, r7, r4
 800501e:	2200      	movs	r2, #0
 8005020:	569a      	ldrsb	r2, [r3, r2]
 8005022:	6839      	ldr	r1, [r7, #0]
 8005024:	20d0      	movs	r0, #208	; 0xd0
 8005026:	0013      	movs	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	189b      	adds	r3, r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	18cb      	adds	r3, r1, r3
 8005030:	181b      	adds	r3, r3, r0
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	197b      	adds	r3, r7, r5
 8005036:	605a      	str	r2, [r3, #4]
      TmpArr[2] = FuzzyData->FuzzyOutputMFs.MF[index].Point2;
 8005038:	193b      	adds	r3, r7, r4
 800503a:	2200      	movs	r2, #0
 800503c:	569a      	ldrsb	r2, [r3, r2]
 800503e:	6839      	ldr	r1, [r7, #0]
 8005040:	20d4      	movs	r0, #212	; 0xd4
 8005042:	0013      	movs	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	189b      	adds	r3, r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	18cb      	adds	r3, r1, r3
 800504c:	181b      	adds	r3, r3, r0
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	197b      	adds	r3, r7, r5
 8005052:	609a      	str	r2, [r3, #8]
      TmpArr[3] = FuzzyData->FuzzyOutputMFs.MF[index].Point3;
 8005054:	193b      	adds	r3, r7, r4
 8005056:	2200      	movs	r2, #0
 8005058:	569a      	ldrsb	r2, [r3, r2]
 800505a:	6839      	ldr	r1, [r7, #0]
 800505c:	20d8      	movs	r0, #216	; 0xd8
 800505e:	0013      	movs	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	189b      	adds	r3, r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	18cb      	adds	r3, r1, r3
 8005068:	181b      	adds	r3, r3, r0
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	197b      	adds	r3, r7, r5
 800506e:	60da      	str	r2, [r3, #12]
      for (j = 0; j < 4; j++) {
 8005070:	2332      	movs	r3, #50	; 0x32
 8005072:	18fb      	adds	r3, r7, r3
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	e016      	b.n	80050a8 <Fuzzy_MF_Out+0xf4>
        mfoutptr[j] = &TmpArr[j];
 800507a:	2032      	movs	r0, #50	; 0x32
 800507c:	183b      	adds	r3, r7, r0
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	b25b      	sxtb	r3, r3
 8005082:	183a      	adds	r2, r7, r0
 8005084:	7812      	ldrb	r2, [r2, #0]
 8005086:	b252      	sxtb	r2, r2
 8005088:	2120      	movs	r1, #32
 800508a:	1879      	adds	r1, r7, r1
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	18c9      	adds	r1, r1, r3
 8005090:	2310      	movs	r3, #16
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	0092      	lsls	r2, r2, #2
 8005096:	50d1      	str	r1, [r2, r3]
      for (j = 0; j < 4; j++) {
 8005098:	183b      	adds	r3, r7, r0
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	b25b      	sxtb	r3, r3
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	3301      	adds	r3, #1
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	183b      	adds	r3, r7, r0
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	2332      	movs	r3, #50	; 0x32
 80050aa:	18fb      	adds	r3, r7, r3
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	b25b      	sxtb	r3, r3
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	dde2      	ble.n	800507a <Fuzzy_MF_Out+0xc6>
      }
      mfOut = (fuzzy1_gMF[FuzzyData->FuzzyOutputMFs.MF[index].Shape])(x, *mfoutptr);
 80050b4:	2331      	movs	r3, #49	; 0x31
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	2200      	movs	r2, #0
 80050ba:	569a      	ldrsb	r2, [r3, r2]
 80050bc:	6839      	ldr	r1, [r7, #0]
 80050be:	20c8      	movs	r0, #200	; 0xc8
 80050c0:	0013      	movs	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	189b      	adds	r3, r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	18cb      	adds	r3, r1, r3
 80050ca:	181b      	adds	r3, r3, r0
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4b38      	ldr	r3, [pc, #224]	; (80051b0 <Fuzzy_MF_Out+0x1fc>)
 80050d0:	0092      	lsls	r2, r2, #2
 80050d2:	58d2      	ldr	r2, [r2, r3]
 80050d4:	2310      	movs	r3, #16
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	6819      	ldr	r1, [r3, #0]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	0018      	movs	r0, r3
 80050de:	4790      	blx	r2
 80050e0:	0003      	movs	r3, r0
 80050e2:	637b      	str	r3, [r7, #52]	; 0x34
 80050e4:	e029      	b.n	800513a <Fuzzy_MF_Out+0x186>
    }
    else if (index < 0) {    // Indicates a NOT
 80050e6:	2331      	movs	r3, #49	; 0x31
 80050e8:	18fb      	adds	r3, r7, r3
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b7f      	cmp	r3, #127	; 0x7f
 80050ee:	d922      	bls.n	8005136 <Fuzzy_MF_Out+0x182>
      index = -index - 1;
 80050f0:	2131      	movs	r1, #49	; 0x31
 80050f2:	187b      	adds	r3, r7, r1
 80050f4:	187a      	adds	r2, r7, r1
 80050f6:	7812      	ldrb	r2, [r2, #0]
 80050f8:	43d2      	mvns	r2, r2
 80050fa:	701a      	strb	r2, [r3, #0]
      mfOut = FuzzyData->FuzzyOutputInfo.Max - (fuzzy1_gMF[FuzzyData->FuzzyOutputMFs.MF[index].Shape])(x, *mfoutptr);
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	23fc      	movs	r3, #252	; 0xfc
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	58d4      	ldr	r4, [r2, r3]
 8005104:	187b      	adds	r3, r7, r1
 8005106:	2200      	movs	r2, #0
 8005108:	569a      	ldrsb	r2, [r3, r2]
 800510a:	6839      	ldr	r1, [r7, #0]
 800510c:	20c8      	movs	r0, #200	; 0xc8
 800510e:	0013      	movs	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	189b      	adds	r3, r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	18cb      	adds	r3, r1, r3
 8005118:	181b      	adds	r3, r3, r0
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <Fuzzy_MF_Out+0x1fc>)
 800511e:	0092      	lsls	r2, r2, #2
 8005120:	58d2      	ldr	r2, [r2, r3]
 8005122:	2310      	movs	r3, #16
 8005124:	18fb      	adds	r3, r7, r3
 8005126:	6819      	ldr	r1, [r3, #0]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	0018      	movs	r0, r3
 800512c:	4790      	blx	r2
 800512e:	0003      	movs	r3, r0
 8005130:	1ae3      	subs	r3, r4, r3
 8005132:	637b      	str	r3, [r7, #52]	; 0x34
 8005134:	e001      	b.n	800513a <Fuzzy_MF_Out+0x186>
    }
    else {
      mfOut = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	637b      	str	r3, [r7, #52]	; 0x34
    }

    fuzzyRuleSet[0][r] = Min(mfOut, fuzzyRuleSet[1][r]);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3304      	adds	r3, #4
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	2033      	movs	r0, #51	; 0x33
 8005142:	183b      	adds	r3, r7, r0
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	b25b      	sxtb	r3, r3
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	18d3      	adds	r3, r2, r3
 800514c:	6819      	ldr	r1, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	0005      	movs	r5, r0
 8005154:	183b      	adds	r3, r7, r0
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	b25b      	sxtb	r3, r3
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	18d4      	adds	r4, r2, r3
 800515e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005160:	0018      	movs	r0, r3
 8005162:	f7ff fddf 	bl	8004d24 <Min>
 8005166:	0003      	movs	r3, r0
 8005168:	6023      	str	r3, [r4, #0]
  for (r = 0; r < FuzzyData->FuzzyRuleInfo.RuleCount; ++r) {
 800516a:	0028      	movs	r0, r5
 800516c:	183b      	adds	r3, r7, r0
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	3301      	adds	r3, #1
 8005172:	b2da      	uxtb	r2, r3
 8005174:	183b      	adds	r3, r7, r0
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	2333      	movs	r3, #51	; 0x33
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	2200      	movs	r2, #0
 800517e:	569a      	ldrsb	r2, [r3, r2]
 8005180:	6839      	ldr	r1, [r7, #0]
 8005182:	239d      	movs	r3, #157	; 0x9d
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	58cb      	ldr	r3, [r1, r3]
 8005188:	429a      	cmp	r2, r3
 800518a:	da00      	bge.n	800518e <Fuzzy_MF_Out+0x1da>
 800518c:	e71f      	b.n	8004fce <Fuzzy_MF_Out+0x1a>
  }

  return Fuzzy_Array_Operation(fuzzyRuleSet[0], FuzzyData->FuzzyRuleInfo.RuleCount, Max);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	239d      	movs	r3, #157	; 0x9d
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	58d3      	ldr	r3, [r2, r3]
 800519a:	b25b      	sxtb	r3, r3
 800519c:	4a05      	ldr	r2, [pc, #20]	; (80051b4 <Fuzzy_MF_Out+0x200>)
 800519e:	0019      	movs	r1, r3
 80051a0:	f7ff fec0 	bl	8004f24 <Fuzzy_Array_Operation>
 80051a4:	0003      	movs	r3, r0
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b00e      	add	sp, #56	; 0x38
 80051ac:	bdb0      	pop	{r4, r5, r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	20000000 	.word	0x20000000
 80051b4:	08004d45 	.word	0x08004d45

080051b8 <Fuzzy_Defuzz_Centroid>:
//
// Returns:   Truth value
//
// Requirement(s):
//
int32_t Fuzzy_Defuzz_Centroid(int32_t** fuzzyRuleSet, int8_t o, stFuzzyConfiguration *FuzzyData) {
 80051b8:	b5b0      	push	{r4, r5, r7, lr}
 80051ba:	b08a      	sub	sp, #40	; 0x28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	230b      	movs	r3, #11
 80051c4:	18fb      	adds	r3, r7, r3
 80051c6:	1c0a      	adds	r2, r1, #0
 80051c8:	701a      	strb	r2, [r3, #0]

    int32_t step = ((FuzzyData->FuzzyOutputInfo.Max - FuzzyData->FuzzyOutputInfo.Min)) / (FUZZY_RESOLUTION - 1); // step size
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	23fc      	movs	r3, #252	; 0xfc
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	58d2      	ldr	r2, [r2, r3]
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	23fa      	movs	r3, #250	; 0xfa
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	58cb      	ldr	r3, [r1, r3]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2164      	movs	r1, #100	; 0x64
 80051de:	0018      	movs	r0, r3
 80051e0:	f7fb f880 	bl	80002e4 <__divsi3>
 80051e4:	0003      	movs	r3, r0
 80051e6:	61bb      	str	r3, [r7, #24]
    int32_t area = 0; // area of membership function shape
 80051e8:	2300      	movs	r3, #0
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t momentum = 0; // weight of the area
 80051ec:	2300      	movs	r3, #0
 80051ee:	623b      	str	r3, [r7, #32]
    int32_t dist, slice; // dist: how far the slice is from origin, slice: small area within membership function
    int8_t i; // counter for loop

    // calculate the area under the curve formed by the MF outputs
    for (i = 0; i < FUZZY_RESOLUTION; ++i) {
 80051f0:	231f      	movs	r3, #31
 80051f2:	18fb      	adds	r3, r7, r3
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	e02e      	b.n	8005258 <Fuzzy_Defuzz_Centroid+0xa0>
        dist = FuzzyData->FuzzyOutputInfo.Min + (step * i);
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	23fa      	movs	r3, #250	; 0xfa
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	58d2      	ldr	r2, [r2, r3]
 8005202:	251f      	movs	r5, #31
 8005204:	197b      	adds	r3, r7, r5
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	b25b      	sxtb	r3, r3
 800520a:	69b9      	ldr	r1, [r7, #24]
 800520c:	434b      	muls	r3, r1
 800520e:	18d3      	adds	r3, r2, r3
 8005210:	617b      	str	r3, [r7, #20]
        slice = (step * Fuzzy_MF_Out(fuzzyRuleSet, dist, o, FuzzyData)) / 100;
 8005212:	687c      	ldr	r4, [r7, #4]
 8005214:	230b      	movs	r3, #11
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	2200      	movs	r2, #0
 800521a:	569a      	ldrsb	r2, [r3, r2]
 800521c:	6979      	ldr	r1, [r7, #20]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	0023      	movs	r3, r4
 8005222:	f7ff fec7 	bl	8004fb4 <Fuzzy_MF_Out>
 8005226:	0002      	movs	r2, r0
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	4353      	muls	r3, r2
 800522c:	2164      	movs	r1, #100	; 0x64
 800522e:	0018      	movs	r0, r3
 8005230:	f7fb f858 	bl	80002e4 <__divsi3>
 8005234:	0003      	movs	r3, r0
 8005236:	613b      	str	r3, [r7, #16]
        area += slice;
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	18d3      	adds	r3, r2, r3
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
        momentum += slice*dist;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4353      	muls	r3, r2
 8005246:	6a3a      	ldr	r2, [r7, #32]
 8005248:	18d3      	adds	r3, r2, r3
 800524a:	623b      	str	r3, [r7, #32]
    for (i = 0; i < FUZZY_RESOLUTION; ++i) {
 800524c:	197b      	adds	r3, r7, r5
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	3301      	adds	r3, #1
 8005252:	b2da      	uxtb	r2, r3
 8005254:	197b      	adds	r3, r7, r5
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	231f      	movs	r3, #31
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	b25b      	sxtb	r3, r3
 8005260:	2b64      	cmp	r3, #100	; 0x64
 8005262:	ddca      	ble.n	80051fa <Fuzzy_Defuzz_Centroid+0x42>
    }

    if (area == 0) {
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10d      	bne.n	8005286 <Fuzzy_Defuzz_Centroid+0xce>
      return (int32_t) ((FuzzyData->FuzzyOutputInfo.Max + FuzzyData->FuzzyOutputInfo.Min) / 2);
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	23fc      	movs	r3, #252	; 0xfc
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	58d2      	ldr	r2, [r2, r3]
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	23fa      	movs	r3, #250	; 0xfa
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	58cb      	ldr	r3, [r1, r3]
 800527a:	18d3      	adds	r3, r2, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	da00      	bge.n	8005282 <Fuzzy_Defuzz_Centroid+0xca>
 8005280:	3301      	adds	r3, #1
 8005282:	105b      	asrs	r3, r3, #1
 8005284:	e004      	b.n	8005290 <Fuzzy_Defuzz_Centroid+0xd8>
    }
    else {
      return (int32_t) ((momentum) / area);
 8005286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005288:	6a38      	ldr	r0, [r7, #32]
 800528a:	f7fb f82b 	bl	80002e4 <__divsi3>
 800528e:	0003      	movs	r3, r0
    }
}
 8005290:	0018      	movs	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	b00a      	add	sp, #40	; 0x28
 8005296:	bdb0      	pop	{r4, r5, r7, pc}

08005298 <Fuzzy_Evaluate>:
//
// Returns:   None
//
// Requirement(s):
//
void Fuzzy_Evaluate(stFuzzyConfiguration *FuzzyData) {
 8005298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800529a:	b0bd      	sub	sp, #244	; 0xf4
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  //
  // input arrays for each input
  //
  int32_t fuzzy1Input0[3] = { 0, 0, 0 };
 80052a0:	21d8      	movs	r1, #216	; 0xd8
 80052a2:	187b      	adds	r3, r7, r1
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	187b      	adds	r3, r7, r1
 80052aa:	2200      	movs	r2, #0
 80052ac:	605a      	str	r2, [r3, #4]
 80052ae:	187b      	adds	r3, r7, r1
 80052b0:	2200      	movs	r2, #0
 80052b2:	609a      	str	r2, [r3, #8]
  int32_t fuzzy1Input1[3] = { 0, 0, 0 };
 80052b4:	20cc      	movs	r0, #204	; 0xcc
 80052b6:	183b      	adds	r3, r7, r0
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	183b      	adds	r3, r7, r0
 80052be:	2200      	movs	r2, #0
 80052c0:	605a      	str	r2, [r3, #4]
 80052c2:	183b      	adds	r3, r7, r0
 80052c4:	2200      	movs	r2, #0
 80052c6:	609a      	str	r2, [r3, #8]
  int32_t fuzzy1Input2[3] = { 0, 0, 0 };
 80052c8:	24c0      	movs	r4, #192	; 0xc0
 80052ca:	193b      	adds	r3, r7, r4
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	193b      	adds	r3, r7, r4
 80052d2:	2200      	movs	r2, #0
 80052d4:	605a      	str	r2, [r3, #4]
 80052d6:	193b      	adds	r3, r7, r4
 80052d8:	2200      	movs	r2, #0
 80052da:	609a      	str	r2, [r3, #8]
  int32_t* fuzzyInput[3] = { fuzzy1Input0, fuzzy1Input1, fuzzy1Input2, };
 80052dc:	25b4      	movs	r5, #180	; 0xb4
 80052de:	197b      	adds	r3, r7, r5
 80052e0:	187a      	adds	r2, r7, r1
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	0029      	movs	r1, r5
 80052e6:	187b      	adds	r3, r7, r1
 80052e8:	183a      	adds	r2, r7, r0
 80052ea:	605a      	str	r2, [r3, #4]
 80052ec:	187b      	adds	r3, r7, r1
 80052ee:	193a      	adds	r2, r7, r4
 80052f0:	609a      	str	r2, [r3, #8]
  int32_t *mfinptr[4];

  //
  // All rules being evaluated and applied
  //
  int32_t fuzzy1Rules[15] = { 0 };
 80052f2:	244c      	movs	r4, #76	; 0x4c
 80052f4:	193b      	adds	r3, r7, r4
 80052f6:	0018      	movs	r0, r3
 80052f8:	233c      	movs	r3, #60	; 0x3c
 80052fa:	001a      	movs	r2, r3
 80052fc:	2100      	movs	r1, #0
 80052fe:	f007 fa19 	bl	800c734 <memset>
  int32_t fuzzy1Fires[15] = { 0 };
 8005302:	2510      	movs	r5, #16
 8005304:	197b      	adds	r3, r7, r5
 8005306:	0018      	movs	r0, r3
 8005308:	233c      	movs	r3, #60	; 0x3c
 800530a:	001a      	movs	r2, r3
 800530c:	2100      	movs	r1, #0
 800530e:	f007 fa11 	bl	800c734 <memset>
  int32_t* fuzzy1RuleSet[2] = { fuzzy1Rules, fuzzy1Fires };
 8005312:	2108      	movs	r1, #8
 8005314:	187b      	adds	r3, r7, r1
 8005316:	193a      	adds	r2, r7, r4
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	187b      	adds	r3, r7, r1
 800531c:	197a      	adds	r2, r7, r5
 800531e:	605a      	str	r2, [r3, #4]
  int32_t sW = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	22ec      	movs	r2, #236	; 0xec
 8005324:	18ba      	adds	r2, r7, r2
 8005326:	6013      	str	r3, [r2, #0]
  int8_t i, j, r, o, n; // counters for loops
  int8_t index = 0; // values from rule being applied
 8005328:	23e6      	movs	r3, #230	; 0xe6
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	2200      	movs	r2, #0
 800532e:	701a      	strb	r2, [r3, #0]
  //
  // Transforming input to fuzzy Input
  //
  for (i = 0; i < FuzzyData->FuzzyMFCounts.NumberOfInputs; ++i) {
 8005330:	23eb      	movs	r3, #235	; 0xeb
 8005332:	18fb      	adds	r3, r7, r3
 8005334:	2200      	movs	r2, #0
 8005336:	701a      	strb	r2, [r3, #0]
 8005338:	e0c7      	b.n	80054ca <Fuzzy_Evaluate+0x232>
    for (j = 0; j < FuzzyData->FuzzyMFCounts.InputCount[i]; ++j) {
 800533a:	23ea      	movs	r3, #234	; 0xea
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	2200      	movs	r2, #0
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	e0ad      	b.n	80054a0 <Fuzzy_Evaluate+0x208>

      TmpArr[0] = FuzzyData->FuzzyInputMFs.MF[i*3+j].Point0;
 8005344:	20eb      	movs	r0, #235	; 0xeb
 8005346:	183b      	adds	r3, r7, r0
 8005348:	2200      	movs	r2, #0
 800534a:	569a      	ldrsb	r2, [r3, r2]
 800534c:	0013      	movs	r3, r2
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	189a      	adds	r2, r3, r2
 8005352:	24ea      	movs	r4, #234	; 0xea
 8005354:	193b      	adds	r3, r7, r4
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	b25b      	sxtb	r3, r3
 800535a:	18d2      	adds	r2, r2, r3
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	0013      	movs	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	189b      	adds	r3, r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	18cb      	adds	r3, r1, r3
 8005368:	3318      	adds	r3, #24
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	2598      	movs	r5, #152	; 0x98
 800536e:	197b      	adds	r3, r7, r5
 8005370:	601a      	str	r2, [r3, #0]
      TmpArr[1] = FuzzyData->FuzzyInputMFs.MF[i*3+j].Point1;
 8005372:	183b      	adds	r3, r7, r0
 8005374:	2200      	movs	r2, #0
 8005376:	569a      	ldrsb	r2, [r3, r2]
 8005378:	0013      	movs	r3, r2
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	189a      	adds	r2, r3, r2
 800537e:	193b      	adds	r3, r7, r4
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	b25b      	sxtb	r3, r3
 8005384:	18d2      	adds	r2, r2, r3
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	0013      	movs	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	189b      	adds	r3, r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	18cb      	adds	r3, r1, r3
 8005392:	331c      	adds	r3, #28
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	197b      	adds	r3, r7, r5
 8005398:	605a      	str	r2, [r3, #4]
      TmpArr[2] = FuzzyData->FuzzyInputMFs.MF[i*3+j].Point2;
 800539a:	183b      	adds	r3, r7, r0
 800539c:	2200      	movs	r2, #0
 800539e:	569a      	ldrsb	r2, [r3, r2]
 80053a0:	0013      	movs	r3, r2
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	189a      	adds	r2, r3, r2
 80053a6:	193b      	adds	r3, r7, r4
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	b25b      	sxtb	r3, r3
 80053ac:	18d2      	adds	r2, r2, r3
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	0013      	movs	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	189b      	adds	r3, r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	18cb      	adds	r3, r1, r3
 80053ba:	3320      	adds	r3, #32
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	197b      	adds	r3, r7, r5
 80053c0:	609a      	str	r2, [r3, #8]
      TmpArr[3] = FuzzyData->FuzzyInputMFs.MF[i*3+j].Point3;
 80053c2:	183b      	adds	r3, r7, r0
 80053c4:	2200      	movs	r2, #0
 80053c6:	569a      	ldrsb	r2, [r3, r2]
 80053c8:	0013      	movs	r3, r2
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	189a      	adds	r2, r3, r2
 80053ce:	193b      	adds	r3, r7, r4
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	b25b      	sxtb	r3, r3
 80053d4:	18d2      	adds	r2, r2, r3
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	0013      	movs	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	189b      	adds	r3, r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	18cb      	adds	r3, r1, r3
 80053e2:	3324      	adds	r3, #36	; 0x24
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	197b      	adds	r3, r7, r5
 80053e8:	60da      	str	r2, [r3, #12]
      for (n = 0; n < 4; n++) {
 80053ea:	23e7      	movs	r3, #231	; 0xe7
 80053ec:	18fb      	adds	r3, r7, r3
 80053ee:	2200      	movs	r2, #0
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	e016      	b.n	8005422 <Fuzzy_Evaluate+0x18a>
        mfinptr[n] = &TmpArr[n];
 80053f4:	20e7      	movs	r0, #231	; 0xe7
 80053f6:	183b      	adds	r3, r7, r0
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	b25b      	sxtb	r3, r3
 80053fc:	183a      	adds	r2, r7, r0
 80053fe:	7812      	ldrb	r2, [r2, #0]
 8005400:	b252      	sxtb	r2, r2
 8005402:	2198      	movs	r1, #152	; 0x98
 8005404:	1879      	adds	r1, r7, r1
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	18c9      	adds	r1, r1, r3
 800540a:	2388      	movs	r3, #136	; 0x88
 800540c:	18fb      	adds	r3, r7, r3
 800540e:	0092      	lsls	r2, r2, #2
 8005410:	50d1      	str	r1, [r2, r3]
      for (n = 0; n < 4; n++) {
 8005412:	183b      	adds	r3, r7, r0
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	b25b      	sxtb	r3, r3
 8005418:	b2db      	uxtb	r3, r3
 800541a:	3301      	adds	r3, #1
 800541c:	b2da      	uxtb	r2, r3
 800541e:	183b      	adds	r3, r7, r0
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	23e7      	movs	r3, #231	; 0xe7
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	b25b      	sxtb	r3, r3
 800542a:	2b03      	cmp	r3, #3
 800542c:	dde2      	ble.n	80053f4 <Fuzzy_Evaluate+0x15c>
      }
      fuzzyInput[i][j] = (fuzzy1_gMF[FuzzyData->FuzzyInputMFs.MF[i*3+j].Shape])(fuzzy_inputs[i], *mfinptr);
 800542e:	20eb      	movs	r0, #235	; 0xeb
 8005430:	183b      	adds	r3, r7, r0
 8005432:	2200      	movs	r2, #0
 8005434:	569a      	ldrsb	r2, [r3, r2]
 8005436:	0013      	movs	r3, r2
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	189a      	adds	r2, r3, r2
 800543c:	24ea      	movs	r4, #234	; 0xea
 800543e:	193b      	adds	r3, r7, r4
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	b25b      	sxtb	r3, r3
 8005444:	18d2      	adds	r2, r2, r3
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	0013      	movs	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	189b      	adds	r3, r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	18cb      	adds	r3, r1, r3
 8005452:	3314      	adds	r3, #20
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4bc4      	ldr	r3, [pc, #784]	; (8005768 <Fuzzy_Evaluate+0x4d0>)
 8005458:	0092      	lsls	r2, r2, #2
 800545a:	58d2      	ldr	r2, [r2, r3]
 800545c:	0006      	movs	r6, r0
 800545e:	183b      	adds	r3, r7, r0
 8005460:	2100      	movs	r1, #0
 8005462:	5659      	ldrsb	r1, [r3, r1]
 8005464:	4bc1      	ldr	r3, [pc, #772]	; (800576c <Fuzzy_Evaluate+0x4d4>)
 8005466:	0089      	lsls	r1, r1, #2
 8005468:	58c8      	ldr	r0, [r1, r3]
 800546a:	2388      	movs	r3, #136	; 0x88
 800546c:	18fb      	adds	r3, r7, r3
 800546e:	681d      	ldr	r5, [r3, #0]
 8005470:	19bb      	adds	r3, r7, r6
 8005472:	2100      	movs	r1, #0
 8005474:	5659      	ldrsb	r1, [r3, r1]
 8005476:	23b4      	movs	r3, #180	; 0xb4
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	0089      	lsls	r1, r1, #2
 800547c:	58c9      	ldr	r1, [r1, r3]
 800547e:	0026      	movs	r6, r4
 8005480:	193b      	adds	r3, r7, r4
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	b25b      	sxtb	r3, r3
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	18cc      	adds	r4, r1, r3
 800548a:	0029      	movs	r1, r5
 800548c:	4790      	blx	r2
 800548e:	0003      	movs	r3, r0
 8005490:	6023      	str	r3, [r4, #0]
    for (j = 0; j < FuzzyData->FuzzyMFCounts.InputCount[i]; ++j) {
 8005492:	0034      	movs	r4, r6
 8005494:	193b      	adds	r3, r7, r4
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	3301      	adds	r3, #1
 800549a:	b2da      	uxtb	r2, r3
 800549c:	193b      	adds	r3, r7, r4
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	23ea      	movs	r3, #234	; 0xea
 80054a2:	18fb      	adds	r3, r7, r3
 80054a4:	2200      	movs	r2, #0
 80054a6:	569a      	ldrsb	r2, [r3, r2]
 80054a8:	23eb      	movs	r3, #235	; 0xeb
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	2100      	movs	r1, #0
 80054ae:	5659      	ldrsb	r1, [r3, r1]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	0089      	lsls	r1, r1, #2
 80054b4:	58cb      	ldr	r3, [r1, r3]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	da00      	bge.n	80054bc <Fuzzy_Evaluate+0x224>
 80054ba:	e743      	b.n	8005344 <Fuzzy_Evaluate+0xac>
  for (i = 0; i < FuzzyData->FuzzyMFCounts.NumberOfInputs; ++i) {
 80054bc:	21eb      	movs	r1, #235	; 0xeb
 80054be:	187b      	adds	r3, r7, r1
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	3301      	adds	r3, #1
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	187b      	adds	r3, r7, r1
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	23eb      	movs	r3, #235	; 0xeb
 80054cc:	18fb      	adds	r3, r7, r3
 80054ce:	2200      	movs	r2, #0
 80054d0:	569a      	ldrsb	r2, [r3, r2]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	da00      	bge.n	80054dc <Fuzzy_Evaluate+0x244>
 80054da:	e72e      	b.n	800533a <Fuzzy_Evaluate+0xa2>
    }
  }

  for (r = 0; r <  FuzzyData->FuzzyRuleInfo.RuleCount; ++r) {
 80054dc:	23e9      	movs	r3, #233	; 0xe9
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
 80054e4:	e19b      	b.n	800581e <Fuzzy_Evaluate+0x586>
    RuleArr[0] = FuzzyData->FuzzyInputRules.InputRules[r].Input0;
 80054e6:	24e9      	movs	r4, #233	; 0xe9
 80054e8:	193b      	adds	r3, r7, r4
 80054ea:	2200      	movs	r2, #0
 80054ec:	569a      	ldrsb	r2, [r3, r2]
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	2382      	movs	r3, #130	; 0x82
 80054f2:	0059      	lsls	r1, r3, #1
 80054f4:	0013      	movs	r3, r2
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	189b      	adds	r3, r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	18c3      	adds	r3, r0, r3
 80054fe:	185b      	adds	r3, r3, r1
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	25a8      	movs	r5, #168	; 0xa8
 8005504:	197b      	adds	r3, r7, r5
 8005506:	601a      	str	r2, [r3, #0]
    RuleArr[1] = FuzzyData->FuzzyInputRules.InputRules[r].Input1;
 8005508:	193b      	adds	r3, r7, r4
 800550a:	2200      	movs	r2, #0
 800550c:	569a      	ldrsb	r2, [r3, r2]
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	2384      	movs	r3, #132	; 0x84
 8005512:	0059      	lsls	r1, r3, #1
 8005514:	0013      	movs	r3, r2
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	189b      	adds	r3, r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	18c3      	adds	r3, r0, r3
 800551e:	185b      	adds	r3, r3, r1
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	197b      	adds	r3, r7, r5
 8005524:	605a      	str	r2, [r3, #4]
    RuleArr[2] = FuzzyData->FuzzyInputRules.InputRules[r].Input2;
 8005526:	193b      	adds	r3, r7, r4
 8005528:	2200      	movs	r2, #0
 800552a:	569a      	ldrsb	r2, [r3, r2]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	2386      	movs	r3, #134	; 0x86
 8005530:	0059      	lsls	r1, r3, #1
 8005532:	0013      	movs	r3, r2
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	189b      	adds	r3, r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	18c3      	adds	r3, r0, r3
 800553c:	185b      	adds	r3, r3, r1
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	197b      	adds	r3, r7, r5
 8005542:	609a      	str	r2, [r3, #8]
    if (FuzzyData->FuzzyRuleInfo.RuleType[r] == 1) {
 8005544:	193b      	adds	r3, r7, r4
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	b25b      	sxtb	r3, r3
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	338c      	adds	r3, #140	; 0x8c
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	18d3      	adds	r3, r2, r3
 8005552:	3308      	adds	r3, #8
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d000      	beq.n	800555c <Fuzzy_Evaluate+0x2c4>
 800555a:	e094      	b.n	8005686 <Fuzzy_Evaluate+0x3ee>
      fuzzy1Fires[r] = 200000000;
 800555c:	23e9      	movs	r3, #233	; 0xe9
 800555e:	18fb      	adds	r3, r7, r3
 8005560:	2200      	movs	r2, #0
 8005562:	569a      	ldrsb	r2, [r3, r2]
 8005564:	2310      	movs	r3, #16
 8005566:	18fb      	adds	r3, r7, r3
 8005568:	0092      	lsls	r2, r2, #2
 800556a:	4981      	ldr	r1, [pc, #516]	; (8005770 <Fuzzy_Evaluate+0x4d8>)
 800556c:	50d1      	str	r1, [r2, r3]
      for (i = 0; i < FuzzyData->FuzzyMFCounts.NumberOfInputs; ++i) {
 800556e:	23eb      	movs	r3, #235	; 0xeb
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	2200      	movs	r2, #0
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	e07c      	b.n	8005672 <Fuzzy_Evaluate+0x3da>
        index = RuleArr[i];
 8005578:	23eb      	movs	r3, #235	; 0xeb
 800557a:	18fb      	adds	r3, r7, r3
 800557c:	2200      	movs	r2, #0
 800557e:	569a      	ldrsb	r2, [r3, r2]
 8005580:	23a8      	movs	r3, #168	; 0xa8
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	0092      	lsls	r2, r2, #2
 8005586:	58d2      	ldr	r2, [r2, r3]
 8005588:	21e6      	movs	r1, #230	; 0xe6
 800558a:	187b      	adds	r3, r7, r1
 800558c:	701a      	strb	r2, [r3, #0]
        if (index > 0) {
 800558e:	187b      	adds	r3, r7, r1
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	b25b      	sxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	dd24      	ble.n	80055e2 <Fuzzy_Evaluate+0x34a>
          fuzzy1Fires[r] = Min(fuzzy1Fires[r], fuzzyInput[i][index - 1]);
 8005598:	21e9      	movs	r1, #233	; 0xe9
 800559a:	187b      	adds	r3, r7, r1
 800559c:	2200      	movs	r2, #0
 800559e:	569a      	ldrsb	r2, [r3, r2]
 80055a0:	2510      	movs	r5, #16
 80055a2:	197b      	adds	r3, r7, r5
 80055a4:	0092      	lsls	r2, r2, #2
 80055a6:	58d0      	ldr	r0, [r2, r3]
 80055a8:	23eb      	movs	r3, #235	; 0xeb
 80055aa:	18fb      	adds	r3, r7, r3
 80055ac:	2200      	movs	r2, #0
 80055ae:	569a      	ldrsb	r2, [r3, r2]
 80055b0:	23b4      	movs	r3, #180	; 0xb4
 80055b2:	18fb      	adds	r3, r7, r3
 80055b4:	0092      	lsls	r2, r2, #2
 80055b6:	58d2      	ldr	r2, [r2, r3]
 80055b8:	23e6      	movs	r3, #230	; 0xe6
 80055ba:	18fb      	adds	r3, r7, r3
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	b25b      	sxtb	r3, r3
 80055c0:	4c6c      	ldr	r4, [pc, #432]	; (8005774 <Fuzzy_Evaluate+0x4dc>)
 80055c2:	46a4      	mov	ip, r4
 80055c4:	4463      	add	r3, ip
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	18d3      	adds	r3, r2, r3
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	187b      	adds	r3, r7, r1
 80055ce:	2400      	movs	r4, #0
 80055d0:	571c      	ldrsb	r4, [r3, r4]
 80055d2:	0011      	movs	r1, r2
 80055d4:	f7ff fba6 	bl	8004d24 <Min>
 80055d8:	0001      	movs	r1, r0
 80055da:	197b      	adds	r3, r7, r5
 80055dc:	00a2      	lsls	r2, r4, #2
 80055de:	50d1      	str	r1, [r2, r3]
 80055e0:	e040      	b.n	8005664 <Fuzzy_Evaluate+0x3cc>
        }
        else if (index < 0) {
 80055e2:	23e6      	movs	r3, #230	; 0xe6
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b7f      	cmp	r3, #127	; 0x7f
 80055ea:	d927      	bls.n	800563c <Fuzzy_Evaluate+0x3a4>
          fuzzy1Fires[r] = Min(fuzzy1Fires[r], 10000 - fuzzyInput[i][-index - 1]);
 80055ec:	24e9      	movs	r4, #233	; 0xe9
 80055ee:	193b      	adds	r3, r7, r4
 80055f0:	2200      	movs	r2, #0
 80055f2:	569a      	ldrsb	r2, [r3, r2]
 80055f4:	2510      	movs	r5, #16
 80055f6:	197b      	adds	r3, r7, r5
 80055f8:	0092      	lsls	r2, r2, #2
 80055fa:	58d0      	ldr	r0, [r2, r3]
 80055fc:	23eb      	movs	r3, #235	; 0xeb
 80055fe:	18fb      	adds	r3, r7, r3
 8005600:	2200      	movs	r2, #0
 8005602:	569a      	ldrsb	r2, [r3, r2]
 8005604:	23b4      	movs	r3, #180	; 0xb4
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	0092      	lsls	r2, r2, #2
 800560a:	58d1      	ldr	r1, [r2, r3]
 800560c:	23e6      	movs	r3, #230	; 0xe6
 800560e:	18fb      	adds	r3, r7, r3
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	b25b      	sxtb	r3, r3
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	0013      	movs	r3, r2
 8005618:	079b      	lsls	r3, r3, #30
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	18cb      	adds	r3, r1, r3
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a55      	ldr	r2, [pc, #340]	; (8005778 <Fuzzy_Evaluate+0x4e0>)
 8005624:	1ad2      	subs	r2, r2, r3
 8005626:	193b      	adds	r3, r7, r4
 8005628:	2400      	movs	r4, #0
 800562a:	571c      	ldrsb	r4, [r3, r4]
 800562c:	0011      	movs	r1, r2
 800562e:	f7ff fb79 	bl	8004d24 <Min>
 8005632:	0001      	movs	r1, r0
 8005634:	197b      	adds	r3, r7, r5
 8005636:	00a2      	lsls	r2, r4, #2
 8005638:	50d1      	str	r1, [r2, r3]
 800563a:	e013      	b.n	8005664 <Fuzzy_Evaluate+0x3cc>
        }
        else {
          fuzzy1Fires[r] = Min(fuzzy1Fires[r], 10000);
 800563c:	21e9      	movs	r1, #233	; 0xe9
 800563e:	187b      	adds	r3, r7, r1
 8005640:	2200      	movs	r2, #0
 8005642:	569a      	ldrsb	r2, [r3, r2]
 8005644:	2510      	movs	r5, #16
 8005646:	197b      	adds	r3, r7, r5
 8005648:	0092      	lsls	r2, r2, #2
 800564a:	58d2      	ldr	r2, [r2, r3]
 800564c:	187b      	adds	r3, r7, r1
 800564e:	2400      	movs	r4, #0
 8005650:	571c      	ldrsb	r4, [r3, r4]
 8005652:	4b49      	ldr	r3, [pc, #292]	; (8005778 <Fuzzy_Evaluate+0x4e0>)
 8005654:	0019      	movs	r1, r3
 8005656:	0010      	movs	r0, r2
 8005658:	f7ff fb64 	bl	8004d24 <Min>
 800565c:	0001      	movs	r1, r0
 800565e:	197b      	adds	r3, r7, r5
 8005660:	00a2      	lsls	r2, r4, #2
 8005662:	50d1      	str	r1, [r2, r3]
      for (i = 0; i < FuzzyData->FuzzyMFCounts.NumberOfInputs; ++i) {
 8005664:	21eb      	movs	r1, #235	; 0xeb
 8005666:	187b      	adds	r3, r7, r1
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	3301      	adds	r3, #1
 800566c:	b2da      	uxtb	r2, r3
 800566e:	187b      	adds	r3, r7, r1
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	23eb      	movs	r3, #235	; 0xeb
 8005674:	18fb      	adds	r3, r7, r3
 8005676:	2200      	movs	r2, #0
 8005678:	569a      	ldrsb	r2, [r3, r2]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	429a      	cmp	r2, r3
 8005680:	da00      	bge.n	8005684 <Fuzzy_Evaluate+0x3ec>
 8005682:	e779      	b.n	8005578 <Fuzzy_Evaluate+0x2e0>
 8005684:	e09f      	b.n	80057c6 <Fuzzy_Evaluate+0x52e>
        }
      }
    }
    else {
      fuzzy1Fires[r] = -200000000;
 8005686:	23e9      	movs	r3, #233	; 0xe9
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	2200      	movs	r2, #0
 800568c:	569a      	ldrsb	r2, [r3, r2]
 800568e:	2310      	movs	r3, #16
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	0092      	lsls	r2, r2, #2
 8005694:	4939      	ldr	r1, [pc, #228]	; (800577c <Fuzzy_Evaluate+0x4e4>)
 8005696:	50d1      	str	r1, [r2, r3]
      for (i = 0; i < FuzzyData->FuzzyMFCounts.NumberOfInputs; ++i) {
 8005698:	23eb      	movs	r3, #235	; 0xeb
 800569a:	18fb      	adds	r3, r7, r3
 800569c:	2200      	movs	r2, #0
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e088      	b.n	80057b4 <Fuzzy_Evaluate+0x51c>
        index = RuleArr[i];
 80056a2:	23eb      	movs	r3, #235	; 0xeb
 80056a4:	18fb      	adds	r3, r7, r3
 80056a6:	2200      	movs	r2, #0
 80056a8:	569a      	ldrsb	r2, [r3, r2]
 80056aa:	23a8      	movs	r3, #168	; 0xa8
 80056ac:	18fb      	adds	r3, r7, r3
 80056ae:	0092      	lsls	r2, r2, #2
 80056b0:	58d2      	ldr	r2, [r2, r3]
 80056b2:	21e6      	movs	r1, #230	; 0xe6
 80056b4:	187b      	adds	r3, r7, r1
 80056b6:	701a      	strb	r2, [r3, #0]
        if (index > 0) {
 80056b8:	187b      	adds	r3, r7, r1
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	b25b      	sxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	dd24      	ble.n	800570c <Fuzzy_Evaluate+0x474>
          fuzzy1Fires[r] = Max(fuzzy1Fires[r], fuzzyInput[i][index - 1]);
 80056c2:	21e9      	movs	r1, #233	; 0xe9
 80056c4:	187b      	adds	r3, r7, r1
 80056c6:	2200      	movs	r2, #0
 80056c8:	569a      	ldrsb	r2, [r3, r2]
 80056ca:	2510      	movs	r5, #16
 80056cc:	197b      	adds	r3, r7, r5
 80056ce:	0092      	lsls	r2, r2, #2
 80056d0:	58d0      	ldr	r0, [r2, r3]
 80056d2:	23eb      	movs	r3, #235	; 0xeb
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	2200      	movs	r2, #0
 80056d8:	569a      	ldrsb	r2, [r3, r2]
 80056da:	23b4      	movs	r3, #180	; 0xb4
 80056dc:	18fb      	adds	r3, r7, r3
 80056de:	0092      	lsls	r2, r2, #2
 80056e0:	58d2      	ldr	r2, [r2, r3]
 80056e2:	23e6      	movs	r3, #230	; 0xe6
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	b25b      	sxtb	r3, r3
 80056ea:	4c22      	ldr	r4, [pc, #136]	; (8005774 <Fuzzy_Evaluate+0x4dc>)
 80056ec:	46a4      	mov	ip, r4
 80056ee:	4463      	add	r3, ip
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	18d3      	adds	r3, r2, r3
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	187b      	adds	r3, r7, r1
 80056f8:	2400      	movs	r4, #0
 80056fa:	571c      	ldrsb	r4, [r3, r4]
 80056fc:	0011      	movs	r1, r2
 80056fe:	f7ff fb21 	bl	8004d44 <Max>
 8005702:	0001      	movs	r1, r0
 8005704:	197b      	adds	r3, r7, r5
 8005706:	00a2      	lsls	r2, r4, #2
 8005708:	50d1      	str	r1, [r2, r3]
 800570a:	e04c      	b.n	80057a6 <Fuzzy_Evaluate+0x50e>
        }
        else if (index < 0) {
 800570c:	23e6      	movs	r3, #230	; 0xe6
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b7f      	cmp	r3, #127	; 0x7f
 8005714:	d934      	bls.n	8005780 <Fuzzy_Evaluate+0x4e8>
          fuzzy1Fires[r] = Max(fuzzy1Fires[r], 10000 - fuzzyInput[i][-index - 1]);
 8005716:	24e9      	movs	r4, #233	; 0xe9
 8005718:	193b      	adds	r3, r7, r4
 800571a:	2200      	movs	r2, #0
 800571c:	569a      	ldrsb	r2, [r3, r2]
 800571e:	2510      	movs	r5, #16
 8005720:	197b      	adds	r3, r7, r5
 8005722:	0092      	lsls	r2, r2, #2
 8005724:	58d0      	ldr	r0, [r2, r3]
 8005726:	23eb      	movs	r3, #235	; 0xeb
 8005728:	18fb      	adds	r3, r7, r3
 800572a:	2200      	movs	r2, #0
 800572c:	569a      	ldrsb	r2, [r3, r2]
 800572e:	23b4      	movs	r3, #180	; 0xb4
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	0092      	lsls	r2, r2, #2
 8005734:	58d1      	ldr	r1, [r2, r3]
 8005736:	23e6      	movs	r3, #230	; 0xe6
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	b25b      	sxtb	r3, r3
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	0013      	movs	r3, r2
 8005742:	079b      	lsls	r3, r3, #30
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	18cb      	adds	r3, r1, r3
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <Fuzzy_Evaluate+0x4e0>)
 800574e:	1ad2      	subs	r2, r2, r3
 8005750:	193b      	adds	r3, r7, r4
 8005752:	2400      	movs	r4, #0
 8005754:	571c      	ldrsb	r4, [r3, r4]
 8005756:	0011      	movs	r1, r2
 8005758:	f7ff faf4 	bl	8004d44 <Max>
 800575c:	0001      	movs	r1, r0
 800575e:	197b      	adds	r3, r7, r5
 8005760:	00a2      	lsls	r2, r4, #2
 8005762:	50d1      	str	r1, [r2, r3]
 8005764:	e01f      	b.n	80057a6 <Fuzzy_Evaluate+0x50e>
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	20000000 	.word	0x20000000
 800576c:	20000a14 	.word	0x20000a14
 8005770:	0bebc200 	.word	0x0bebc200
 8005774:	3fffffff 	.word	0x3fffffff
 8005778:	00002710 	.word	0x00002710
 800577c:	f4143e00 	.word	0xf4143e00
        }
        else {
          fuzzy1Fires[r] = Max(fuzzy1Fires[r], 0);
 8005780:	21e9      	movs	r1, #233	; 0xe9
 8005782:	187b      	adds	r3, r7, r1
 8005784:	2200      	movs	r2, #0
 8005786:	569a      	ldrsb	r2, [r3, r2]
 8005788:	2510      	movs	r5, #16
 800578a:	197b      	adds	r3, r7, r5
 800578c:	0092      	lsls	r2, r2, #2
 800578e:	58d2      	ldr	r2, [r2, r3]
 8005790:	187b      	adds	r3, r7, r1
 8005792:	2400      	movs	r4, #0
 8005794:	571c      	ldrsb	r4, [r3, r4]
 8005796:	2100      	movs	r1, #0
 8005798:	0010      	movs	r0, r2
 800579a:	f7ff fad3 	bl	8004d44 <Max>
 800579e:	0001      	movs	r1, r0
 80057a0:	197b      	adds	r3, r7, r5
 80057a2:	00a2      	lsls	r2, r4, #2
 80057a4:	50d1      	str	r1, [r2, r3]
      for (i = 0; i < FuzzyData->FuzzyMFCounts.NumberOfInputs; ++i) {
 80057a6:	21eb      	movs	r1, #235	; 0xeb
 80057a8:	187b      	adds	r3, r7, r1
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	3301      	adds	r3, #1
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	187b      	adds	r3, r7, r1
 80057b2:	701a      	strb	r2, [r3, #0]
 80057b4:	23eb      	movs	r3, #235	; 0xeb
 80057b6:	18fb      	adds	r3, r7, r3
 80057b8:	2200      	movs	r2, #0
 80057ba:	569a      	ldrsb	r2, [r3, r2]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	da00      	bge.n	80057c6 <Fuzzy_Evaluate+0x52e>
 80057c4:	e76d      	b.n	80056a2 <Fuzzy_Evaluate+0x40a>
        }
      }
    }

    fuzzy1Fires[r] = FuzzyData->FuzzyRuleInfo.RuleWeight[r] * fuzzy1Fires[r];
 80057c6:	21e9      	movs	r1, #233	; 0xe9
 80057c8:	187b      	adds	r3, r7, r1
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	b25b      	sxtb	r3, r3
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	337e      	adds	r3, #126	; 0x7e
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	18d3      	adds	r3, r2, r3
 80057d6:	3304      	adds	r3, #4
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	0008      	movs	r0, r1
 80057dc:	187a      	adds	r2, r7, r1
 80057de:	2100      	movs	r1, #0
 80057e0:	5651      	ldrsb	r1, [r2, r1]
 80057e2:	2410      	movs	r4, #16
 80057e4:	193a      	adds	r2, r7, r4
 80057e6:	0089      	lsls	r1, r1, #2
 80057e8:	5889      	ldr	r1, [r1, r2]
 80057ea:	183a      	adds	r2, r7, r0
 80057ec:	7812      	ldrb	r2, [r2, #0]
 80057ee:	b252      	sxtb	r2, r2
 80057f0:	4359      	muls	r1, r3
 80057f2:	193b      	adds	r3, r7, r4
 80057f4:	0092      	lsls	r2, r2, #2
 80057f6:	50d1      	str	r1, [r2, r3]
    sW += fuzzy1Fires[r];
 80057f8:	0001      	movs	r1, r0
 80057fa:	187b      	adds	r3, r7, r1
 80057fc:	2200      	movs	r2, #0
 80057fe:	569a      	ldrsb	r2, [r3, r2]
 8005800:	193b      	adds	r3, r7, r4
 8005802:	0092      	lsls	r2, r2, #2
 8005804:	58d3      	ldr	r3, [r2, r3]
 8005806:	20ec      	movs	r0, #236	; 0xec
 8005808:	183a      	adds	r2, r7, r0
 800580a:	6812      	ldr	r2, [r2, #0]
 800580c:	18d3      	adds	r3, r2, r3
 800580e:	183a      	adds	r2, r7, r0
 8005810:	6013      	str	r3, [r2, #0]
  for (r = 0; r <  FuzzyData->FuzzyRuleInfo.RuleCount; ++r) {
 8005812:	187b      	adds	r3, r7, r1
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	3301      	adds	r3, #1
 8005818:	b2da      	uxtb	r2, r3
 800581a:	187b      	adds	r3, r7, r1
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	23e9      	movs	r3, #233	; 0xe9
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	2200      	movs	r2, #0
 8005824:	569a      	ldrsb	r2, [r3, r2]
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	239d      	movs	r3, #157	; 0x9d
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	58cb      	ldr	r3, [r1, r3]
 800582e:	429a      	cmp	r2, r3
 8005830:	da00      	bge.n	8005834 <Fuzzy_Evaluate+0x59c>
 8005832:	e658      	b.n	80054e6 <Fuzzy_Evaluate+0x24e>
  }

  if (sW == 0) {
 8005834:	23ec      	movs	r3, #236	; 0xec
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d127      	bne.n	800588e <Fuzzy_Evaluate+0x5f6>
    for (o = 0; o < MAX_OUTPUTS; ++o) {
 800583e:	23e8      	movs	r3, #232	; 0xe8
 8005840:	18fb      	adds	r3, r7, r3
 8005842:	2200      	movs	r2, #0
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	e01b      	b.n	8005880 <Fuzzy_Evaluate+0x5e8>
      fuzzy_outputs[o] = ((FuzzyData->FuzzyOutputInfo.Max + FuzzyData->FuzzyOutputInfo.Min) / 2);
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	23fc      	movs	r3, #252	; 0xfc
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	58d2      	ldr	r2, [r2, r3]
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	23fa      	movs	r3, #250	; 0xfa
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	58cb      	ldr	r3, [r1, r3]
 8005858:	18d1      	adds	r1, r2, r3
 800585a:	23e8      	movs	r3, #232	; 0xe8
 800585c:	18fb      	adds	r3, r7, r3
 800585e:	2200      	movs	r2, #0
 8005860:	569a      	ldrsb	r2, [r3, r2]
 8005862:	1e0b      	subs	r3, r1, #0
 8005864:	da00      	bge.n	8005868 <Fuzzy_Evaluate+0x5d0>
 8005866:	3301      	adds	r3, #1
 8005868:	105b      	asrs	r3, r3, #1
 800586a:	0019      	movs	r1, r3
 800586c:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <Fuzzy_Evaluate+0x644>)
 800586e:	0092      	lsls	r2, r2, #2
 8005870:	50d1      	str	r1, [r2, r3]
    for (o = 0; o < MAX_OUTPUTS; ++o) {
 8005872:	21e8      	movs	r1, #232	; 0xe8
 8005874:	187b      	adds	r3, r7, r1
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	3301      	adds	r3, #1
 800587a:	b2da      	uxtb	r2, r3
 800587c:	187b      	adds	r3, r7, r1
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	23e8      	movs	r3, #232	; 0xe8
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	b25b      	sxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	dddd      	ble.n	8005848 <Fuzzy_Evaluate+0x5b0>
  else {
    for (o = 0; o < MAX_OUTPUTS; ++o) {
      fuzzy_outputs[o] = Fuzzy_Defuzz_Centroid(fuzzy1RuleSet, o, FuzzyData);
    }
  }
}
 800588c:	e021      	b.n	80058d2 <Fuzzy_Evaluate+0x63a>
    for (o = 0; o < MAX_OUTPUTS; ++o) {
 800588e:	23e8      	movs	r3, #232	; 0xe8
 8005890:	18fb      	adds	r3, r7, r3
 8005892:	2200      	movs	r2, #0
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	e016      	b.n	80058c6 <Fuzzy_Evaluate+0x62e>
      fuzzy_outputs[o] = Fuzzy_Defuzz_Centroid(fuzzy1RuleSet, o, FuzzyData);
 8005898:	25e8      	movs	r5, #232	; 0xe8
 800589a:	197b      	adds	r3, r7, r5
 800589c:	2400      	movs	r4, #0
 800589e:	571c      	ldrsb	r4, [r3, r4]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	197b      	adds	r3, r7, r5
 80058a4:	2100      	movs	r1, #0
 80058a6:	5659      	ldrsb	r1, [r3, r1]
 80058a8:	2308      	movs	r3, #8
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7ff fc83 	bl	80051b8 <Fuzzy_Defuzz_Centroid>
 80058b2:	0001      	movs	r1, r0
 80058b4:	4b09      	ldr	r3, [pc, #36]	; (80058dc <Fuzzy_Evaluate+0x644>)
 80058b6:	00a2      	lsls	r2, r4, #2
 80058b8:	50d1      	str	r1, [r2, r3]
    for (o = 0; o < MAX_OUTPUTS; ++o) {
 80058ba:	197b      	adds	r3, r7, r5
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	3301      	adds	r3, #1
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	197b      	adds	r3, r7, r5
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	23e8      	movs	r3, #232	; 0xe8
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	b25b      	sxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	dde2      	ble.n	8005898 <Fuzzy_Evaluate+0x600>
}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b03d      	add	sp, #244	; 0xf4
 80058d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	20000a20 	.word	0x20000a20

080058e0 <STM32_GPIO_EXTI_IRQHandler>:
//
//  Params:   GPIO_Pin - The GPIO pin number that will generate an interrupt when toggling
//
//  returns:  none
//
void STM32_GPIO_EXTI_IRQHandler(uint32_t GPIO_Pin) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]

    if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) {
 80058e8:	4b07      	ldr	r3, [pc, #28]	; (8005908 <STM32_GPIO_EXTI_IRQHandler+0x28>)
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	4013      	ands	r3, r2
 80058f0:	d006      	beq.n	8005900 <STM32_GPIO_EXTI_IRQHandler+0x20>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <STM32_GPIO_EXTI_IRQHandler+0x28>)
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	615a      	str	r2, [r3, #20]
        HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	0018      	movs	r0, r3
 80058fc:	f7fe ffc8 	bl	8004890 <HAL_GPIO_EXTI_Callback>
    }
}
 8005900:	46c0      	nop			; (mov r8, r8)
 8005902:	46bd      	mov	sp, r7
 8005904:	b002      	add	sp, #8
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40010400 	.word	0x40010400

0800590c <STM32_GPIO_WritePin>:
//            GPIO_Pin - The GPIO pin number that will generate an interrupt when toggling
//            PinState - enumerator GPIO_PinState Specifies the value to be written to the pin (high or low)
//
//  returns:  none
//
void STM32_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin, enumGPIO_PinState PinState) {
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	1dfb      	adds	r3, r7, #7
 8005918:	701a      	strb	r2, [r3, #0]

    if (PinState != GPIO_PIN_RESET) {
 800591a:	1dfb      	adds	r3, r7, #7
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <STM32_GPIO_WritePin+0x1e>
        GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BRR = (uint32_t)GPIO_Pin;
    }
}
 8005928:	e002      	b.n	8005930 <STM32_GPIO_WritePin+0x24>
        GPIOx->BRR = (uint32_t)GPIO_Pin;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005930:	46c0      	nop			; (mov r8, r8)
 8005932:	46bd      	mov	sp, r7
 8005934:	b004      	add	sp, #16
 8005936:	bd80      	pop	{r7, pc}

08005938 <STM32_GPIO_ReadPin>:
//  Params:   GPIOx - Selects the GPIO peripheral where the GPIO pin is located on the MCU
//            GPIO_Pin - The GPIO pin number that will generate an interrupt when toggling
//
//  returns:  uint32_t value set high (1) or low (0) depending on the GPIO pin state
//
uint32_t STM32_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]

    return (GPIOx->IDR & GPIO_Pin) != 0;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	4013      	ands	r3, r2
 800594a:	1e5a      	subs	r2, r3, #1
 800594c:	4193      	sbcs	r3, r2
 800594e:	b2db      	uxtb	r3, r3
}
 8005950:	0018      	movs	r0, r3
 8005952:	46bd      	mov	sp, r7
 8005954:	b002      	add	sp, #8
 8005956:	bd80      	pop	{r7, pc}

08005958 <CalcBitPosition>:
//
//  Params:   BitMask - The mask to find which one bit is set high (masking)
//
//  returns:  The position within a binary value set high or 0xFF if multiple binary values are set high
//
static uint32_t  CalcBitPosition(uint32_t BitMask) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]

    for (uint32_t i = 0; i < 32; i++) {
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	e00b      	b.n	800597e <CalcBitPosition+0x26>
        if ((BitMask & 1) != 0) {
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	4013      	ands	r3, r2
 800596c:	d001      	beq.n	8005972 <CalcBitPosition+0x1a>
            return i;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	e00d      	b.n	800598e <CalcBitPosition+0x36>
        }
        BitMask >>= 1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	607b      	str	r3, [r7, #4]
    for (uint32_t i = 0; i < 32; i++) {
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3301      	adds	r3, #1
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b1f      	cmp	r3, #31
 8005982:	d9f0      	bls.n	8005966 <CalcBitPosition+0xe>
    }
    Error_Handler(FILE_GPIO, __LINE__);
 8005984:	2176      	movs	r1, #118	; 0x76
 8005986:	200f      	movs	r0, #15
 8005988:	f7fe fd24 	bl	80043d4 <Error_Handler>
    return 0;
 800598c:	2300      	movs	r3, #0
}
 800598e:	0018      	movs	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	b004      	add	sp, #16
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <STM32_GPIO_Init>:
//            Alternate - Set pin to alternate mode or not
//            OutputState - Set output pins as high or low
//
//  returns:  None
//
void STM32_GPIO_Init(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode, uint32_t Pull, uint32_t Speed, uint32_t Alternate, uint32_t OutputState) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]

    uint32_t      Tmp;
    uint32_t      Index;

    uint32_t BitPosition = CalcBitPosition(Pin);     // 0 to 15(error)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	0018      	movs	r0, r3
 80059aa:	f7ff ffd5 	bl	8005958 <CalcBitPosition>
 80059ae:	0003      	movs	r3, r0
 80059b0:	617b      	str	r3, [r7, #20]

    if ((Mode == GPIO_MODE_OUTPUT_PP) || (Mode == GPIO_MODE_AF_PP) || (Mode == GPIO_MODE_OUTPUT_OD) || (Mode == GPIO_MODE_AF_OD)) {
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d008      	beq.n	80059ca <STM32_GPIO_Init+0x32>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d005      	beq.n	80059ca <STM32_GPIO_Init+0x32>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b11      	cmp	r3, #17
 80059c2:	d002      	beq.n	80059ca <STM32_GPIO_Init+0x32>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b12      	cmp	r3, #18
 80059c8:	d135      	bne.n	8005a36 <STM32_GPIO_Init+0x9e>
        Tmp = GPIOx->OSPEEDR;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	61fb      	str	r3, [r7, #28]
        Tmp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (BitPosition * 2));     // Clear old bits
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	2203      	movs	r2, #3
 80059d6:	409a      	lsls	r2, r3
 80059d8:	0013      	movs	r3, r2
 80059da:	43da      	mvns	r2, r3
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4013      	ands	r3, r2
 80059e0:	61fb      	str	r3, [r7, #28]
        Tmp |= (Speed << (BitPosition * 2));            // Set new bits
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e8:	409a      	lsls	r2, r3
 80059ea:	0013      	movs	r3, r2
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	61fb      	str	r3, [r7, #28]
        GPIOx->OSPEEDR = Tmp;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	609a      	str	r2, [r3, #8]

        Tmp = GPIOx->OTYPER;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	61fb      	str	r3, [r7, #28]
        Tmp &= ~(GPIO_OTYPER_OT_0 << BitPosition);
 80059fe:	2201      	movs	r2, #1
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	409a      	lsls	r2, r3
 8005a04:	0013      	movs	r3, r2
 8005a06:	43da      	mvns	r2, r3
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	61fb      	str	r3, [r7, #28]
        Tmp |= (((Mode & GPIO_OUTPUT_TYPE) >> 4) << BitPosition);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	2201      	movs	r2, #1
 8005a14:	401a      	ands	r2, r3
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	409a      	lsls	r2, r3
 8005a1a:	0013      	movs	r3, r2
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	61fb      	str	r3, [r7, #28]
        GPIOx->OTYPER = Tmp;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	605a      	str	r2, [r3, #4]

        STM32_GPIO_WritePin(GPIOx, Pin, OutputState);
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	0018      	movs	r0, r3
 8005a32:	f7ff ff6b 	bl	800590c <STM32_GPIO_WritePin>
    }

    /* Activate the Pull-up or Pull down resistor for the current IO */
    Tmp = GPIOx->PUPDR;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	61fb      	str	r3, [r7, #28]
    Tmp &= ~(GPIO_PUPDR_PUPDR0 << (BitPosition * 2u));
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	2203      	movs	r2, #3
 8005a42:	409a      	lsls	r2, r3
 8005a44:	0013      	movs	r3, r2
 8005a46:	43da      	mvns	r2, r3
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	61fb      	str	r3, [r7, #28]
    Tmp |= ((Pull) << (BitPosition * 2u));
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	409a      	lsls	r2, r3
 8005a56:	0013      	movs	r3, r2
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	61fb      	str	r3, [r7, #28]
    GPIOx->PUPDR = Tmp;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	60da      	str	r2, [r3, #12]

    if ((Mode == GPIO_MODE_AF_PP) || (Mode == GPIO_MODE_AF_OD)) {
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d002      	beq.n	8005a70 <STM32_GPIO_Init+0xd8>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b12      	cmp	r3, #18
 8005a6e:	d122      	bne.n	8005ab6 <STM32_GPIO_Init+0x11e>
        Tmp = GPIOx->AFR[BitPosition >> 3u];
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	08da      	lsrs	r2, r3, #3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3208      	adds	r2, #8
 8005a78:	0092      	lsls	r2, r2, #2
 8005a7a:	58d3      	ldr	r3, [r2, r3]
 8005a7c:	61fb      	str	r3, [r7, #28]
        Tmp &= ~(0xFu << ((BitPosition & 0x07u) * 4u));
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2207      	movs	r2, #7
 8005a82:	4013      	ands	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	220f      	movs	r2, #15
 8005a88:	409a      	lsls	r2, r3
 8005a8a:	0013      	movs	r3, r2
 8005a8c:	43da      	mvns	r2, r3
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4013      	ands	r3, r2
 8005a92:	61fb      	str	r3, [r7, #28]
        Tmp |= Alternate << ((BitPosition & 0x07u) * 4u);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2207      	movs	r2, #7
 8005a98:	4013      	ands	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a9e:	409a      	lsls	r2, r3
 8005aa0:	0013      	movs	r3, r2
 8005aa2:	69fa      	ldr	r2, [r7, #28]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[BitPosition >> 3u] = Tmp;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	08da      	lsrs	r2, r3, #3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3208      	adds	r2, #8
 8005ab0:	0092      	lsls	r2, r2, #2
 8005ab2:	69f9      	ldr	r1, [r7, #28]
 8005ab4:	50d1      	str	r1, [r2, r3]
    }

    /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
    Tmp = GPIOx->MODER;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	61fb      	str	r3, [r7, #28]
    Tmp &= ~(GPIO_MODER_MODER0 << (BitPosition * 2u));
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	409a      	lsls	r2, r3
 8005ac4:	0013      	movs	r3, r2
 8005ac6:	43da      	mvns	r2, r3
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61fb      	str	r3, [r7, #28]
    Tmp |= ((Mode & GPIO_MODE) << (BitPosition * 2u));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2203      	movs	r2, #3
 8005ad2:	401a      	ands	r2, r3
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	409a      	lsls	r2, r3
 8005ada:	0013      	movs	r3, r2
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	61fb      	str	r3, [r7, #28]
    GPIOx->MODER = Tmp;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	601a      	str	r2, [r3, #0]

    if ((Mode & EXTI_MODE) == EXTI_MODE) {
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	2380      	movs	r3, #128	; 0x80
 8005aec:	055b      	lsls	r3, r3, #21
 8005aee:	4013      	ands	r3, r2
 8005af0:	d073      	beq.n	8005bda <STM32_GPIO_Init+0x242>
        Tmp = SYSCFG->EXTICR[BitPosition >> 2u];
 8005af2:	4a3c      	ldr	r2, [pc, #240]	; (8005be4 <STM32_GPIO_Init+0x24c>)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	089b      	lsrs	r3, r3, #2
 8005af8:	3302      	adds	r3, #2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	589b      	ldr	r3, [r3, r2]
 8005afe:	61fb      	str	r3, [r7, #28]
        Tmp &= ~(0x0FuL << (4u * (BitPosition & 0x03u)));
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2203      	movs	r2, #3
 8005b04:	4013      	ands	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	220f      	movs	r2, #15
 8005b0a:	409a      	lsls	r2, r3
 8005b0c:	0013      	movs	r3, r2
 8005b0e:	43da      	mvns	r2, r3
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	4013      	ands	r3, r2
 8005b14:	61fb      	str	r3, [r7, #28]
        if (GPIOx == GPIOA) {
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	2390      	movs	r3, #144	; 0x90
 8005b1a:	05db      	lsls	r3, r3, #23
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d102      	bne.n	8005b26 <STM32_GPIO_Init+0x18e>
            Index = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61bb      	str	r3, [r7, #24]
 8005b24:	e00a      	b.n	8005b3c <STM32_GPIO_Init+0x1a4>
        } else if (GPIOx == GPIOB) {
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4a2f      	ldr	r2, [pc, #188]	; (8005be8 <STM32_GPIO_Init+0x250>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d102      	bne.n	8005b34 <STM32_GPIO_Init+0x19c>
            Index = 1;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	e003      	b.n	8005b3c <STM32_GPIO_Init+0x1a4>
        } else {
            Error_Handler(FILE_GPIO, __LINE__);
 8005b34:	21b8      	movs	r1, #184	; 0xb8
 8005b36:	200f      	movs	r0, #15
 8005b38:	f7fe fc4c 	bl	80043d4 <Error_Handler>
        }
        Tmp |= (Index << (4u * (BitPosition & 0x03u)));
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2203      	movs	r2, #3
 8005b40:	4013      	ands	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	409a      	lsls	r2, r3
 8005b48:	0013      	movs	r3, r2
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	61fb      	str	r3, [r7, #28]
        SYSCFG->EXTICR[BitPosition >> 2u] = Tmp;
 8005b50:	4924      	ldr	r1, [pc, #144]	; (8005be4 <STM32_GPIO_Init+0x24c>)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	089b      	lsrs	r3, r3, #2
 8005b56:	3302      	adds	r3, #2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        Tmp = EXTI->IMR;
 8005b5e:	4b23      	ldr	r3, [pc, #140]	; (8005bec <STM32_GPIO_Init+0x254>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	61fb      	str	r3, [r7, #28]
        Tmp &= ~(Pin);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	43da      	mvns	r2, r3
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	61fb      	str	r3, [r7, #28]
        if ((Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	025b      	lsls	r3, r3, #9
 8005b74:	4013      	ands	r3, r2
 8005b76:	d003      	beq.n	8005b80 <STM32_GPIO_Init+0x1e8>
            Tmp |= Pin;
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR = Tmp;
 8005b80:	4b1a      	ldr	r3, [pc, #104]	; (8005bec <STM32_GPIO_Init+0x254>)
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	601a      	str	r2, [r3, #0]

        Tmp = EXTI->EMR;
 8005b86:	4b19      	ldr	r3, [pc, #100]	; (8005bec <STM32_GPIO_Init+0x254>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	61fb      	str	r3, [r7, #28]
        Tmp &= ~(Pin);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	43da      	mvns	r2, r3
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4013      	ands	r3, r2
 8005b94:	61fb      	str	r3, [r7, #28]
        EXTI->EMR = Tmp;
 8005b96:	4b15      	ldr	r3, [pc, #84]	; (8005bec <STM32_GPIO_Init+0x254>)
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        Tmp = EXTI->RTSR;
 8005b9c:	4b13      	ldr	r3, [pc, #76]	; (8005bec <STM32_GPIO_Init+0x254>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	61fb      	str	r3, [r7, #28]
        Tmp &= ~(Pin);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	43da      	mvns	r2, r3
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	61fb      	str	r3, [r7, #28]
        if ((Mode & RISING_EDGE) == RISING_EDGE) {
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	2380      	movs	r3, #128	; 0x80
 8005bb0:	035b      	lsls	r3, r3, #13
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <STM32_GPIO_Init+0x226>
            Tmp |= Pin;
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR = Tmp;
 8005bbe:	4b0b      	ldr	r3, [pc, #44]	; (8005bec <STM32_GPIO_Init+0x254>)
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	609a      	str	r2, [r3, #8]

        Tmp = EXTI->FTSR;
 8005bc4:	4b09      	ldr	r3, [pc, #36]	; (8005bec <STM32_GPIO_Init+0x254>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	61fb      	str	r3, [r7, #28]
        Tmp &= ~(Pin);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	43da      	mvns	r2, r3
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	61fb      	str	r3, [r7, #28]
        EXTI->FTSR = Tmp;
 8005bd4:	4b05      	ldr	r3, [pc, #20]	; (8005bec <STM32_GPIO_Init+0x254>)
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	60da      	str	r2, [r3, #12]
    }
}
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	b008      	add	sp, #32
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	40010000 	.word	0x40010000
 8005be8:	48000400 	.word	0x48000400
 8005bec:	40010400 	.word	0x40010400

08005bf0 <STM32_GPIO_DeInit>:
//  Params:   GPIOx - Selects the GPIO peripheral where the GPIO pin is located on the MCU
//            GPIO_Pin - The GPIO pin number that be cleared
//
//  returns:  None
//
void STM32_GPIO_DeInit(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]

    uint32_t Index, BitPosition, Tmp;

    BitPosition = CalcBitPosition(GPIO_Pin);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f7ff feab 	bl	8005958 <CalcBitPosition>
 8005c02:	0003      	movs	r3, r0
 8005c04:	613b      	str	r3, [r7, #16]
    Tmp = SYSCFG->EXTICR[BitPosition >> 2u];
 8005c06:	4a52      	ldr	r2, [pc, #328]	; (8005d50 <STM32_GPIO_DeInit+0x160>)
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	089b      	lsrs	r3, r3, #2
 8005c0c:	3302      	adds	r3, #2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	589b      	ldr	r3, [r3, r2]
 8005c12:	60fb      	str	r3, [r7, #12]
    Tmp &= (0x0FuL << (4u * (BitPosition & 0x03u)));
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2203      	movs	r2, #3
 8005c18:	4013      	ands	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	220f      	movs	r2, #15
 8005c1e:	409a      	lsls	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4013      	ands	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
    if (GPIOx == GPIOA) {
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	2390      	movs	r3, #144	; 0x90
 8005c2a:	05db      	lsls	r3, r3, #23
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d102      	bne.n	8005c36 <STM32_GPIO_DeInit+0x46>
        Index = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	e00a      	b.n	8005c4c <STM32_GPIO_DeInit+0x5c>
    } else if (GPIOx == GPIOB) {
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a46      	ldr	r2, [pc, #280]	; (8005d54 <STM32_GPIO_DeInit+0x164>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d102      	bne.n	8005c44 <STM32_GPIO_DeInit+0x54>
        Index = 1;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	e003      	b.n	8005c4c <STM32_GPIO_DeInit+0x5c>
    } else {
        Error_Handler(FILE_GPIO, __LINE__);
 8005c44:	21ec      	movs	r1, #236	; 0xec
 8005c46:	200f      	movs	r0, #15
 8005c48:	f7fe fbc4 	bl	80043d4 <Error_Handler>
    }
    if (Tmp == (Index << (4u * (BitPosition & 0x03u)))) {
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2203      	movs	r2, #3
 8005c50:	4013      	ands	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	409a      	lsls	r2, r3
 8005c58:	0013      	movs	r3, r2
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d132      	bne.n	8005cc6 <STM32_GPIO_DeInit+0xd6>
        EXTI->IMR &= ~GPIO_Pin;           /* Clear EXTI line configuration */
 8005c60:	4b3d      	ldr	r3, [pc, #244]	; (8005d58 <STM32_GPIO_DeInit+0x168>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	43d9      	mvns	r1, r3
 8005c68:	4b3b      	ldr	r3, [pc, #236]	; (8005d58 <STM32_GPIO_DeInit+0x168>)
 8005c6a:	400a      	ands	r2, r1
 8005c6c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~GPIO_Pin;
 8005c6e:	4b3a      	ldr	r3, [pc, #232]	; (8005d58 <STM32_GPIO_DeInit+0x168>)
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	43d9      	mvns	r1, r3
 8005c76:	4b38      	ldr	r3, [pc, #224]	; (8005d58 <STM32_GPIO_DeInit+0x168>)
 8005c78:	400a      	ands	r2, r1
 8005c7a:	605a      	str	r2, [r3, #4]
        EXTI->RTSR &= ~GPIO_Pin;            /* Clear Rising Falling edge configuration */
 8005c7c:	4b36      	ldr	r3, [pc, #216]	; (8005d58 <STM32_GPIO_DeInit+0x168>)
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	43d9      	mvns	r1, r3
 8005c84:	4b34      	ldr	r3, [pc, #208]	; (8005d58 <STM32_GPIO_DeInit+0x168>)
 8005c86:	400a      	ands	r2, r1
 8005c88:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~GPIO_Pin;
 8005c8a:	4b33      	ldr	r3, [pc, #204]	; (8005d58 <STM32_GPIO_DeInit+0x168>)
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	43d9      	mvns	r1, r3
 8005c92:	4b31      	ldr	r3, [pc, #196]	; (8005d58 <STM32_GPIO_DeInit+0x168>)
 8005c94:	400a      	ands	r2, r1
 8005c96:	60da      	str	r2, [r3, #12]
        Tmp = 0x0FuL << (4u * (BitPosition & 0x03u));       /* Configure the External Interrupt or event for the current IO */
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2203      	movs	r2, #3
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	220f      	movs	r2, #15
 8005ca2:	409a      	lsls	r2, r3
 8005ca4:	0013      	movs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[BitPosition >> 2u] &= ~Tmp;
 8005ca8:	4a29      	ldr	r2, [pc, #164]	; (8005d50 <STM32_GPIO_DeInit+0x160>)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	089b      	lsrs	r3, r3, #2
 8005cae:	3302      	adds	r3, #2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	589a      	ldr	r2, [r3, r2]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	43d9      	mvns	r1, r3
 8005cb8:	4825      	ldr	r0, [pc, #148]	; (8005d50 <STM32_GPIO_DeInit+0x160>)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	089b      	lsrs	r3, r3, #2
 8005cbe:	400a      	ands	r2, r1
 8005cc0:	3302      	adds	r3, #2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	501a      	str	r2, [r3, r0]
    }

    /* Configure IO Direction in Input Floating Mode */
    GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (BitPosition * 2u));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	0052      	lsls	r2, r2, #1
 8005cce:	2103      	movs	r1, #3
 8005cd0:	4091      	lsls	r1, r2
 8005cd2:	000a      	movs	r2, r1
 8005cd4:	43d2      	mvns	r2, r2
 8005cd6:	401a      	ands	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	601a      	str	r2, [r3, #0]

    /* Configure the default Alternate Function in current IO */
    GPIOx->AFR[BitPosition >> 3u] &= ~(0xFu << ((uint32_t)(BitPosition & 0x07u) * 4u));
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	08da      	lsrs	r2, r3, #3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3208      	adds	r2, #8
 8005ce4:	0092      	lsls	r2, r2, #2
 8005ce6:	58d3      	ldr	r3, [r2, r3]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	2107      	movs	r1, #7
 8005cec:	400a      	ands	r2, r1
 8005cee:	0092      	lsls	r2, r2, #2
 8005cf0:	210f      	movs	r1, #15
 8005cf2:	4091      	lsls	r1, r2
 8005cf4:	000a      	movs	r2, r1
 8005cf6:	43d1      	mvns	r1, r2
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	08d2      	lsrs	r2, r2, #3
 8005cfc:	4019      	ands	r1, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3208      	adds	r2, #8
 8005d02:	0092      	lsls	r2, r2, #2
 8005d04:	50d1      	str	r1, [r2, r3]

    /* Deactivate the Pull-up and Pull-down resistor for the current IO */
    GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (BitPosition * 2u));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	0052      	lsls	r2, r2, #1
 8005d0e:	2103      	movs	r1, #3
 8005d10:	4091      	lsls	r1, r2
 8005d12:	000a      	movs	r2, r1
 8005d14:	43d2      	mvns	r2, r2
 8005d16:	401a      	ands	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	60da      	str	r2, [r3, #12]

    /* Configure the default value IO Output Type */
    GPIOx->OTYPER &= ~(GPIO_OTYPER_OT_0 << BitPosition);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	2101      	movs	r1, #1
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4091      	lsls	r1, r2
 8005d26:	000a      	movs	r2, r1
 8005d28:	43d2      	mvns	r2, r2
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	605a      	str	r2, [r3, #4]

    /* Configure the default value for IO Speed */
    GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEEDR0 << (BitPosition * 2u));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	0052      	lsls	r2, r2, #1
 8005d38:	2103      	movs	r1, #3
 8005d3a:	4091      	lsls	r1, r2
 8005d3c:	000a      	movs	r2, r1
 8005d3e:	43d2      	mvns	r2, r2
 8005d40:	401a      	ands	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	609a      	str	r2, [r3, #8]
}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b006      	add	sp, #24
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	40010000 	.word	0x40010000
 8005d54:	48000400 	.word	0x48000400
 8005d58:	40010400 	.word	0x40010400

08005d5c <EnableInterrupts>:
//
//  Params:   None
//
//  returns:  None
//
__attribute__((always_inline)) __INLINE void EnableInterrupts(void) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
    __ASM volatile ("cpsie i" : : : "memory");
 8005d60:	b662      	cpsie	i
}
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <DisableInterrupts>:
//
//  Params:   None
//
//  returns:  None
//
__attribute__((always_inline)) __INLINE void DisableInterrupts(void) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
    __ASM volatile ("cpsid i" : : : "memory");
 8005d6c:	b672      	cpsid	i
}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <STM32_GetTick>:
//
//  Params:   None
//
//  returns:  Returns the current SysTick counter value
//
uint32_t STM32_GetTick(void) {
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
    return uTicks;
 8005d78:	4b02      	ldr	r3, [pc, #8]	; (8005d84 <STM32_GetTick+0x10>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
}
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	20000c60 	.word	0x20000c60

08005d88 <STM32_Delay>:
//
//  Params:   Delay - The amount of time (in milliseconds) to delay
//
//  returns:  None
//
void STM32_Delay(volatile uint32_t Delay) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]

    uint32_t tickstart, wait;

    tickstart = uTicks;
 8005d90:	4b08      	ldr	r3, [pc, #32]	; (8005db4 <STM32_Delay+0x2c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]
    wait = Delay + 1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	60bb      	str	r3, [r7, #8]
    do {
    } while ((STM32_GetTick() - tickstart) < wait);
 8005d9c:	f7ff ffea 	bl	8005d74 <STM32_GetTick>
 8005da0:	0002      	movs	r2, r0
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d8f7      	bhi.n	8005d9c <STM32_Delay+0x14>
}
 8005dac:	46c0      	nop			; (mov r8, r8)
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b004      	add	sp, #16
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	20000c60 	.word	0x20000c60

08005db8 <STM32_NVIC_SetPriority>:
//            PreemptPriority - Value between 0-15 to set the interrupt preemption priority (A lower value is a higher priority)
//            SubPriority - Value between 0-15 to set the interrupt subpriority level
//
//  returns:  None
//
void STM32_NVIC_SetPriority(enumIRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
 8005dc2:	210f      	movs	r1, #15
 8005dc4:	187b      	adds	r3, r7, r1
 8005dc6:	1c02      	adds	r2, r0, #0
 8005dc8:	701a      	strb	r2, [r3, #0]

    uint32_t  Bit_Shift, Shp_Index, Ip_Index;

    Bit_Shift = (IRQn & 3) * 8;
 8005dca:	187b      	adds	r3, r7, r1
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	001a      	movs	r2, r3
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	61fb      	str	r3, [r7, #28]
    if ((int32_t)(IRQn) < 0) {
 8005dd8:	187b      	adds	r3, r7, r1
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8005dde:	d925      	bls.n	8005e2c <STM32_NVIC_SetPriority+0x74>
        Shp_Index = ((IRQn & 0xFu) - 8u) >> 2u;
 8005de0:	230f      	movs	r3, #15
 8005de2:	18fb      	adds	r3, r7, r3
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	001a      	movs	r2, r3
 8005de8:	230f      	movs	r3, #15
 8005dea:	4013      	ands	r3, r2
 8005dec:	3b08      	subs	r3, #8
 8005dee:	089b      	lsrs	r3, r3, #2
 8005df0:	617b      	str	r3, [r7, #20]
        SCB->SHP[Shp_Index] = ((uint32_t)(SCB->SHP[Shp_Index] & ~(0xFFUL << Bit_Shift)) |
 8005df2:	4a20      	ldr	r2, [pc, #128]	; (8005e74 <STM32_NVIC_SetPriority+0xbc>)
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	3306      	adds	r3, #6
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	18d3      	adds	r3, r2, r3
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	21ff      	movs	r1, #255	; 0xff
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	4091      	lsls	r1, r2
 8005e06:	000a      	movs	r2, r1
 8005e08:	43d2      	mvns	r2, r2
 8005e0a:	401a      	ands	r2, r3
                               (((PreemptPriority << (8 - 2)) & 0xFFU) << Bit_Shift));
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	019b      	lsls	r3, r3, #6
 8005e10:	21ff      	movs	r1, #255	; 0xff
 8005e12:	4019      	ands	r1, r3
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4099      	lsls	r1, r3
 8005e18:	000b      	movs	r3, r1
        SCB->SHP[Shp_Index] = ((uint32_t)(SCB->SHP[Shp_Index] & ~(0xFFUL << Bit_Shift)) |
 8005e1a:	4916      	ldr	r1, [pc, #88]	; (8005e74 <STM32_NVIC_SetPriority+0xbc>)
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	3306      	adds	r3, #6
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	18cb      	adds	r3, r1, r3
 8005e26:	3304      	adds	r3, #4
 8005e28:	601a      	str	r2, [r3, #0]
    } else {
        Ip_Index = IRQn >> 2u;
        NVIC->IP[Ip_Index] = ((uint32_t)(NVIC->IP[Ip_Index] & ~(0xFFUL << Bit_Shift)) |
                              (((PreemptPriority << (8 - 2)) & 0xFFU) << Bit_Shift));
    }
}
 8005e2a:	e01e      	b.n	8005e6a <STM32_NVIC_SetPriority+0xb2>
        Ip_Index = IRQn >> 2u;
 8005e2c:	230f      	movs	r3, #15
 8005e2e:	18fb      	adds	r3, r7, r3
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	b25b      	sxtb	r3, r3
 8005e34:	109b      	asrs	r3, r3, #2
 8005e36:	b25b      	sxtb	r3, r3
 8005e38:	61bb      	str	r3, [r7, #24]
        NVIC->IP[Ip_Index] = ((uint32_t)(NVIC->IP[Ip_Index] & ~(0xFFUL << Bit_Shift)) |
 8005e3a:	4a0f      	ldr	r2, [pc, #60]	; (8005e78 <STM32_NVIC_SetPriority+0xc0>)
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	33c0      	adds	r3, #192	; 0xc0
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	589b      	ldr	r3, [r3, r2]
 8005e44:	21ff      	movs	r1, #255	; 0xff
 8005e46:	69fa      	ldr	r2, [r7, #28]
 8005e48:	4091      	lsls	r1, r2
 8005e4a:	000a      	movs	r2, r1
 8005e4c:	43d2      	mvns	r2, r2
 8005e4e:	401a      	ands	r2, r3
                              (((PreemptPriority << (8 - 2)) & 0xFFU) << Bit_Shift));
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	019b      	lsls	r3, r3, #6
 8005e54:	21ff      	movs	r1, #255	; 0xff
 8005e56:	4019      	ands	r1, r3
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4099      	lsls	r1, r3
 8005e5c:	000b      	movs	r3, r1
        NVIC->IP[Ip_Index] = ((uint32_t)(NVIC->IP[Ip_Index] & ~(0xFFUL << Bit_Shift)) |
 8005e5e:	4906      	ldr	r1, [pc, #24]	; (8005e78 <STM32_NVIC_SetPriority+0xc0>)
 8005e60:	431a      	orrs	r2, r3
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	33c0      	adds	r3, #192	; 0xc0
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	505a      	str	r2, [r3, r1]
}
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	b008      	add	sp, #32
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	e000ed00 	.word	0xe000ed00
 8005e78:	e000e100 	.word	0xe000e100

08005e7c <STM32_NVIC_EnableIRQ>:
//
//  Params:   IRQn - Enumerator of the IRQn_Type which corresponds to the external interrupt number
//
//  returns:  None
//
void STM32_NVIC_EnableIRQ(enumIRQn_Type IRQn) {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	0002      	movs	r2, r0
 8005e84:	1dfb      	adds	r3, r7, #7
 8005e86:	701a      	strb	r2, [r3, #0]

    NVIC->ISER[0u] = (uint32_t)(1uL << (((uint32_t)(int32_t)IRQn) & 0x1FuL));
 8005e88:	1dfb      	adds	r3, r7, #7
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	001a      	movs	r2, r3
 8005e8e:	231f      	movs	r3, #31
 8005e90:	401a      	ands	r2, r3
 8005e92:	4b04      	ldr	r3, [pc, #16]	; (8005ea4 <STM32_NVIC_EnableIRQ+0x28>)
 8005e94:	2101      	movs	r1, #1
 8005e96:	4091      	lsls	r1, r2
 8005e98:	000a      	movs	r2, r1
 8005e9a:	601a      	str	r2, [r3, #0]
}
 8005e9c:	46c0      	nop			; (mov r8, r8)
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	b002      	add	sp, #8
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	e000e100 	.word	0xe000e100

08005ea8 <STM32_NVIC_DisableIRQ>:
//
//  Params:   IRQn - Enumerator of the IRQn_Type which corresponds to the external interrupt number
//
//  returns:  None
//
void STM32_NVIC_DisableIRQ(enumIRQn_Type IRQn) {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	0002      	movs	r2, r0
 8005eb0:	1dfb      	adds	r3, r7, #7
 8005eb2:	701a      	strb	r2, [r3, #0]

    NVIC->ICER[0u] = (uint32_t)(1uL << (((uint32_t)(int32_t)IRQn) & 0x1FuL));
 8005eb4:	1dfb      	adds	r3, r7, #7
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	001a      	movs	r2, r3
 8005eba:	231f      	movs	r3, #31
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	4905      	ldr	r1, [pc, #20]	; (8005ed4 <STM32_NVIC_DisableIRQ+0x2c>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	409a      	lsls	r2, r3
 8005ec4:	0013      	movs	r3, r2
 8005ec6:	2280      	movs	r2, #128	; 0x80
 8005ec8:	508b      	str	r3, [r1, r2]
}
 8005eca:	46c0      	nop			; (mov r8, r8)
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b002      	add	sp, #8
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	e000e100 	.word	0xe000e100

08005ed8 <ProcessI2C1>:
//
// Returns:   None
//
// Requirement(s):
//
void ProcessI2C1(void) {
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af04      	add	r7, sp, #16

    ExecutionStart(EXECUTION_PROCESS_I2C1);
 8005ede:	200f      	movs	r0, #15
 8005ee0:	f7fe fb94 	bl	800460c <ExecutionStart>

    switch (I2C1Control.State) {
 8005ee4:	4ba0      	ldr	r3, [pc, #640]	; (8006168 <ProcessI2C1+0x290>)
 8005ee6:	7a1b      	ldrb	r3, [r3, #8]
 8005ee8:	2b16      	cmp	r3, #22
 8005eea:	d900      	bls.n	8005eee <ProcessI2C1+0x16>
 8005eec:	e122      	b.n	8006134 <ProcessI2C1+0x25c>
 8005eee:	009a      	lsls	r2, r3, #2
 8005ef0:	4b9e      	ldr	r3, [pc, #632]	; (800616c <ProcessI2C1+0x294>)
 8005ef2:	18d3      	adds	r3, r2, r3
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	469f      	mov	pc, r3
    case 0:
        I2C1->CR1 &= ~1;                    // Turn off I2C Interface
 8005ef8:	4b9d      	ldr	r3, [pc, #628]	; (8006170 <ProcessI2C1+0x298>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b9c      	ldr	r3, [pc, #624]	; (8006170 <ProcessI2C1+0x298>)
 8005efe:	2101      	movs	r1, #1
 8005f00:	438a      	bics	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]
        //
        // Configure I2C1_SCL as an output - HIGH.  and I2C_SDA as GPIO Input
        //
        STM32_GPIO_Init(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, 0, SET);
 8005f04:	489b      	ldr	r0, [pc, #620]	; (8006174 <ProcessI2C1+0x29c>)
 8005f06:	2301      	movs	r3, #1
 8005f08:	9302      	str	r3, [sp, #8]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	2303      	movs	r3, #3
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	2300      	movs	r3, #0
 8005f14:	2201      	movs	r2, #1
 8005f16:	2140      	movs	r1, #64	; 0x40
 8005f18:	f7ff fd3e 	bl	8005998 <STM32_GPIO_Init>
        STM32_GPIO_Init(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_MODE_INPUT, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, 0, RESET);
 8005f1c:	4895      	ldr	r0, [pc, #596]	; (8006174 <ProcessI2C1+0x29c>)
 8005f1e:	2300      	movs	r3, #0
 8005f20:	9302      	str	r3, [sp, #8]
 8005f22:	2300      	movs	r3, #0
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	2303      	movs	r3, #3
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2180      	movs	r1, #128	; 0x80
 8005f30:	f7ff fd32 	bl	8005998 <STM32_GPIO_Init>
        do {
            //
            // Toggle Clock, then check if SDA - Loop if SDA low
            //
            STM32_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET);
 8005f34:	4b8f      	ldr	r3, [pc, #572]	; (8006174 <ProcessI2C1+0x29c>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	2140      	movs	r1, #64	; 0x40
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f7ff fce6 	bl	800590c <STM32_GPIO_WritePin>
            MicroDelay(100);
 8005f40:	2064      	movs	r0, #100	; 0x64
 8005f42:	f002 ff21 	bl	8008d88 <MicroDelay>
            STM32_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 8005f46:	4b8b      	ldr	r3, [pc, #556]	; (8006174 <ProcessI2C1+0x29c>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	2140      	movs	r1, #64	; 0x40
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f7ff fcdd 	bl	800590c <STM32_GPIO_WritePin>
            MicroDelay(100);
 8005f52:	2064      	movs	r0, #100	; 0x64
 8005f54:	f002 ff18 	bl	8008d88 <MicroDelay>
        } while (STM32_GPIO_ReadPin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin) == 0);
 8005f58:	4b86      	ldr	r3, [pc, #536]	; (8006174 <ProcessI2C1+0x29c>)
 8005f5a:	2180      	movs	r1, #128	; 0x80
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f7ff fceb 	bl	8005938 <STM32_GPIO_ReadPin>
 8005f62:	1e03      	subs	r3, r0, #0
 8005f64:	d0e6      	beq.n	8005f34 <ProcessI2C1+0x5c>
        //
        // Switch GPIO back to I2C control
        //
        STM32_GPIO_Init(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_MODE_AF_OD, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_AF1_I2C1, 0);
 8005f66:	4883      	ldr	r0, [pc, #524]	; (8006174 <ProcessI2C1+0x29c>)
 8005f68:	2300      	movs	r3, #0
 8005f6a:	9302      	str	r3, [sp, #8]
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	2303      	movs	r3, #3
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2301      	movs	r3, #1
 8005f76:	2212      	movs	r2, #18
 8005f78:	2140      	movs	r1, #64	; 0x40
 8005f7a:	f7ff fd0d 	bl	8005998 <STM32_GPIO_Init>
        STM32_GPIO_Init(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_MODE_AF_OD, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_AF1_I2C1, 0);
 8005f7e:	487d      	ldr	r0, [pc, #500]	; (8006174 <ProcessI2C1+0x29c>)
 8005f80:	2300      	movs	r3, #0
 8005f82:	9302      	str	r3, [sp, #8]
 8005f84:	2301      	movs	r3, #1
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	2303      	movs	r3, #3
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	2212      	movs	r2, #18
 8005f90:	2180      	movs	r1, #128	; 0x80
 8005f92:	f7ff fd01 	bl	8005998 <STM32_GPIO_Init>
        I2C1->CR1 |= 1;                       // Turn on I2C Interface
 8005f96:	4b76      	ldr	r3, [pc, #472]	; (8006170 <ProcessI2C1+0x298>)
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4b75      	ldr	r3, [pc, #468]	; (8006170 <ProcessI2C1+0x298>)
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	601a      	str	r2, [r3, #0]
        I2C1Control.State++;
 8005fa2:	4b71      	ldr	r3, [pc, #452]	; (8006168 <ProcessI2C1+0x290>)
 8005fa4:	7a1b      	ldrb	r3, [r3, #8]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	4b6f      	ldr	r3, [pc, #444]	; (8006168 <ProcessI2C1+0x290>)
 8005fac:	721a      	strb	r2, [r3, #8]
        break;
 8005fae:	e0d3      	b.n	8006158 <ProcessI2C1+0x280>

    case 1:
        if (I2C1Control.Mode == I2C_MODE_READ_MCP3421) {
 8005fb0:	4b6d      	ldr	r3, [pc, #436]	; (8006168 <ProcessI2C1+0x290>)
 8005fb2:	7a5b      	ldrb	r3, [r3, #9]
 8005fb4:	2b06      	cmp	r3, #6
 8005fb6:	d106      	bne.n	8005fc6 <ProcessI2C1+0xee>
            I2C1Control.MemDevAddr = 0xD0u;
 8005fb8:	4b6b      	ldr	r3, [pc, #428]	; (8006168 <ProcessI2C1+0x290>)
 8005fba:	22d0      	movs	r2, #208	; 0xd0
 8005fbc:	819a      	strh	r2, [r3, #12]
            I2C1Control.State = 10;
 8005fbe:	4b6a      	ldr	r3, [pc, #424]	; (8006168 <ProcessI2C1+0x290>)
 8005fc0:	220a      	movs	r2, #10
 8005fc2:	721a      	strb	r2, [r3, #8]
        } else if (I2C1Control.Mode == I2C_MODE_WRITE_MCP3421) {
            I2C1Control.MemDevAddr = 0xD0u;
            I2C1Control.State = 20;
        } else {
        }
        break;
 8005fc4:	e0bb      	b.n	800613e <ProcessI2C1+0x266>
        } else if (I2C1Control.Mode == I2C_MODE_WRITE_MCP3421) {
 8005fc6:	4b68      	ldr	r3, [pc, #416]	; (8006168 <ProcessI2C1+0x290>)
 8005fc8:	7a5b      	ldrb	r3, [r3, #9]
 8005fca:	2b05      	cmp	r3, #5
 8005fcc:	d000      	beq.n	8005fd0 <ProcessI2C1+0xf8>
 8005fce:	e0b6      	b.n	800613e <ProcessI2C1+0x266>
            I2C1Control.MemDevAddr = 0xD0u;
 8005fd0:	4b65      	ldr	r3, [pc, #404]	; (8006168 <ProcessI2C1+0x290>)
 8005fd2:	22d0      	movs	r2, #208	; 0xd0
 8005fd4:	819a      	strh	r2, [r3, #12]
            I2C1Control.State = 20;
 8005fd6:	4b64      	ldr	r3, [pc, #400]	; (8006168 <ProcessI2C1+0x290>)
 8005fd8:	2214      	movs	r2, #20
 8005fda:	721a      	strb	r2, [r3, #8]
        break;
 8005fdc:	e0af      	b.n	800613e <ProcessI2C1+0x266>
        //
        //------------------------------------------------------------------------------------------------------------
        //  Read
        //
    case 10:
        if ((I2C1->ISR & I2C_ISR_BUSY) == 0) {          // Wait for Busy Bit to be reset
 8005fde:	4b64      	ldr	r3, [pc, #400]	; (8006170 <ProcessI2C1+0x298>)
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	2380      	movs	r3, #128	; 0x80
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	d000      	beq.n	8005fec <ProcessI2C1+0x114>
 8005fea:	e0aa      	b.n	8006142 <ProcessI2C1+0x26a>
            //
            // Send Start Condition, Set NBytes to 2, Device Address in Write Mode
            //
            I2C1->CR2 = I2C1Control.MemDevAddr | I2C1Control.Length << 16 | I2C_AUTOEND_MODE | I2C_GENERATE_START_READ;
 8005fec:	4b5e      	ldr	r3, [pc, #376]	; (8006168 <ProcessI2C1+0x290>)
 8005fee:	899b      	ldrh	r3, [r3, #12]
 8005ff0:	001a      	movs	r2, r3
 8005ff2:	4b5d      	ldr	r3, [pc, #372]	; (8006168 <ProcessI2C1+0x290>)
 8005ff4:	88db      	ldrh	r3, [r3, #6]
 8005ff6:	041b      	lsls	r3, r3, #16
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	0019      	movs	r1, r3
 8005ffc:	4b5c      	ldr	r3, [pc, #368]	; (8006170 <ProcessI2C1+0x298>)
 8005ffe:	4a5e      	ldr	r2, [pc, #376]	; (8006178 <ProcessI2C1+0x2a0>)
 8006000:	430a      	orrs	r2, r1
 8006002:	605a      	str	r2, [r3, #4]
            I2C1Control.Offset = 0;
 8006004:	4b58      	ldr	r3, [pc, #352]	; (8006168 <ProcessI2C1+0x290>)
 8006006:	2200      	movs	r2, #0
 8006008:	729a      	strb	r2, [r3, #10]
            I2C1Control.State++;
 800600a:	4b57      	ldr	r3, [pc, #348]	; (8006168 <ProcessI2C1+0x290>)
 800600c:	7a1b      	ldrb	r3, [r3, #8]
 800600e:	3301      	adds	r3, #1
 8006010:	b2da      	uxtb	r2, r3
 8006012:	4b55      	ldr	r3, [pc, #340]	; (8006168 <ProcessI2C1+0x290>)
 8006014:	721a      	strb	r2, [r3, #8]
        }
        break;
 8006016:	e094      	b.n	8006142 <ProcessI2C1+0x26a>
    case 11:
        if ((I2C1->ISR & I2C_FLAG_RXNE) != 0) {             // Wait for Receive Data
 8006018:	4b55      	ldr	r3, [pc, #340]	; (8006170 <ProcessI2C1+0x298>)
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	2204      	movs	r2, #4
 800601e:	4013      	ands	r3, r2
 8006020:	d100      	bne.n	8006024 <ProcessI2C1+0x14c>
 8006022:	e090      	b.n	8006146 <ProcessI2C1+0x26e>
            I2C1Control.Buffer[I2C1Control.Offset++] = (uint8_t)I2C1->RXDR;  // Save Data
 8006024:	4b52      	ldr	r3, [pc, #328]	; (8006170 <ProcessI2C1+0x298>)
 8006026:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006028:	4b4f      	ldr	r3, [pc, #316]	; (8006168 <ProcessI2C1+0x290>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	4b4e      	ldr	r3, [pc, #312]	; (8006168 <ProcessI2C1+0x290>)
 800602e:	7a9b      	ldrb	r3, [r3, #10]
 8006030:	1c59      	adds	r1, r3, #1
 8006032:	b2cc      	uxtb	r4, r1
 8006034:	494c      	ldr	r1, [pc, #304]	; (8006168 <ProcessI2C1+0x290>)
 8006036:	728c      	strb	r4, [r1, #10]
 8006038:	18d3      	adds	r3, r2, r3
 800603a:	b2c2      	uxtb	r2, r0
 800603c:	701a      	strb	r2, [r3, #0]
            if (--I2C1Control.Length == 0) {                // Proceed to next Case once data has been saved
 800603e:	4b4a      	ldr	r3, [pc, #296]	; (8006168 <ProcessI2C1+0x290>)
 8006040:	88db      	ldrh	r3, [r3, #6]
 8006042:	3b01      	subs	r3, #1
 8006044:	b29a      	uxth	r2, r3
 8006046:	4b48      	ldr	r3, [pc, #288]	; (8006168 <ProcessI2C1+0x290>)
 8006048:	80da      	strh	r2, [r3, #6]
 800604a:	4b47      	ldr	r3, [pc, #284]	; (8006168 <ProcessI2C1+0x290>)
 800604c:	88db      	ldrh	r3, [r3, #6]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d000      	beq.n	8006054 <ProcessI2C1+0x17c>
 8006052:	e078      	b.n	8006146 <ProcessI2C1+0x26e>
                I2C1Control.State++;
 8006054:	4b44      	ldr	r3, [pc, #272]	; (8006168 <ProcessI2C1+0x290>)
 8006056:	7a1b      	ldrb	r3, [r3, #8]
 8006058:	3301      	adds	r3, #1
 800605a:	b2da      	uxtb	r2, r3
 800605c:	4b42      	ldr	r3, [pc, #264]	; (8006168 <ProcessI2C1+0x290>)
 800605e:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8006060:	e071      	b.n	8006146 <ProcessI2C1+0x26e>
    case 12:
        if ((I2C1->ISR & I2C_FLAG_STOPF) != 0) {            // Wait for STOPF to be set
 8006062:	4b43      	ldr	r3, [pc, #268]	; (8006170 <ProcessI2C1+0x298>)
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2220      	movs	r2, #32
 8006068:	4013      	ands	r3, r2
 800606a:	d100      	bne.n	800606e <ProcessI2C1+0x196>
 800606c:	e06d      	b.n	800614a <ProcessI2C1+0x272>
            I2C1->ICR = I2C_FLAG_STOPF;                     /* Clear STOP Flag */
 800606e:	4b40      	ldr	r3, [pc, #256]	; (8006170 <ProcessI2C1+0x298>)
 8006070:	2220      	movs	r2, #32
 8006072:	61da      	str	r2, [r3, #28]
            I2C1->CR2 &= ~(I2C_CR2_SADD | I2C_CR2_HEAD10R | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_RD_WRN);                  /* Clear Configuration Register 2 */
 8006074:	4b3e      	ldr	r3, [pc, #248]	; (8006170 <ProcessI2C1+0x298>)
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	4b3d      	ldr	r3, [pc, #244]	; (8006170 <ProcessI2C1+0x298>)
 800607a:	4940      	ldr	r1, [pc, #256]	; (800617c <ProcessI2C1+0x2a4>)
 800607c:	400a      	ands	r2, r1
 800607e:	605a      	str	r2, [r3, #4]
            I2C1Control.Mode = I2C_MODE_DONE;
 8006080:	4b39      	ldr	r3, [pc, #228]	; (8006168 <ProcessI2C1+0x290>)
 8006082:	2207      	movs	r2, #7
 8006084:	725a      	strb	r2, [r3, #9]
            I2C1Control.State = 1;
 8006086:	4b38      	ldr	r3, [pc, #224]	; (8006168 <ProcessI2C1+0x290>)
 8006088:	2201      	movs	r2, #1
 800608a:	721a      	strb	r2, [r3, #8]
        }
        break;
 800608c:	e05d      	b.n	800614a <ProcessI2C1+0x272>
        //
        //------------------------------------------------------------------------------------------------------------
        //  Write
        //
    case 20:
        if ((I2C1->ISR & I2C_ISR_BUSY) == 0) {          // Wait for Busy Bit to be reset
 800608e:	4b38      	ldr	r3, [pc, #224]	; (8006170 <ProcessI2C1+0x298>)
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	2380      	movs	r3, #128	; 0x80
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	4013      	ands	r3, r2
 8006098:	d159      	bne.n	800614e <ProcessI2C1+0x276>
            //
            // Send Start Condition, Set NBytes to 2, Device Address in Write Mode
            //
            I2C1->CR2 = I2C1Control.MemDevAddr | I2C1Control.Length << 16 | I2C_AUTOEND_MODE | I2C_GENERATE_START_WRITE;
 800609a:	4b33      	ldr	r3, [pc, #204]	; (8006168 <ProcessI2C1+0x290>)
 800609c:	899b      	ldrh	r3, [r3, #12]
 800609e:	001a      	movs	r2, r3
 80060a0:	4b31      	ldr	r3, [pc, #196]	; (8006168 <ProcessI2C1+0x290>)
 80060a2:	88db      	ldrh	r3, [r3, #6]
 80060a4:	041b      	lsls	r3, r3, #16
 80060a6:	4313      	orrs	r3, r2
 80060a8:	0019      	movs	r1, r3
 80060aa:	4b31      	ldr	r3, [pc, #196]	; (8006170 <ProcessI2C1+0x298>)
 80060ac:	4a34      	ldr	r2, [pc, #208]	; (8006180 <ProcessI2C1+0x2a8>)
 80060ae:	430a      	orrs	r2, r1
 80060b0:	605a      	str	r2, [r3, #4]
            I2C1Control.Offset = 0;
 80060b2:	4b2d      	ldr	r3, [pc, #180]	; (8006168 <ProcessI2C1+0x290>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	729a      	strb	r2, [r3, #10]
            I2C1Control.State++;
 80060b8:	4b2b      	ldr	r3, [pc, #172]	; (8006168 <ProcessI2C1+0x290>)
 80060ba:	7a1b      	ldrb	r3, [r3, #8]
 80060bc:	3301      	adds	r3, #1
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	4b29      	ldr	r3, [pc, #164]	; (8006168 <ProcessI2C1+0x290>)
 80060c2:	721a      	strb	r2, [r3, #8]
        }
        break;
 80060c4:	e043      	b.n	800614e <ProcessI2C1+0x276>
    case 21:
        if ((I2C1->ISR & I2C_FLAG_TXIS) != 0) {                       // Wait for Transmit Data
 80060c6:	4b2a      	ldr	r3, [pc, #168]	; (8006170 <ProcessI2C1+0x298>)
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	2202      	movs	r2, #2
 80060cc:	4013      	ands	r3, r2
 80060ce:	d040      	beq.n	8006152 <ProcessI2C1+0x27a>
            I2C1->TXDR = I2C1Control.Buffer[I2C1Control.Offset++];    // Send Data
 80060d0:	4b25      	ldr	r3, [pc, #148]	; (8006168 <ProcessI2C1+0x290>)
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	4b24      	ldr	r3, [pc, #144]	; (8006168 <ProcessI2C1+0x290>)
 80060d6:	7a9b      	ldrb	r3, [r3, #10]
 80060d8:	1c59      	adds	r1, r3, #1
 80060da:	b2c8      	uxtb	r0, r1
 80060dc:	4922      	ldr	r1, [pc, #136]	; (8006168 <ProcessI2C1+0x290>)
 80060de:	7288      	strb	r0, [r1, #10]
 80060e0:	18d3      	adds	r3, r2, r3
 80060e2:	781a      	ldrb	r2, [r3, #0]
 80060e4:	4b22      	ldr	r3, [pc, #136]	; (8006170 <ProcessI2C1+0x298>)
 80060e6:	629a      	str	r2, [r3, #40]	; 0x28
            if (--I2C1Control.Length == 0) {                // Proceed to next Case once data has been sent
 80060e8:	4b1f      	ldr	r3, [pc, #124]	; (8006168 <ProcessI2C1+0x290>)
 80060ea:	88db      	ldrh	r3, [r3, #6]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	4b1d      	ldr	r3, [pc, #116]	; (8006168 <ProcessI2C1+0x290>)
 80060f2:	80da      	strh	r2, [r3, #6]
 80060f4:	4b1c      	ldr	r3, [pc, #112]	; (8006168 <ProcessI2C1+0x290>)
 80060f6:	88db      	ldrh	r3, [r3, #6]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d12a      	bne.n	8006152 <ProcessI2C1+0x27a>
                I2C1Control.State++;
 80060fc:	4b1a      	ldr	r3, [pc, #104]	; (8006168 <ProcessI2C1+0x290>)
 80060fe:	7a1b      	ldrb	r3, [r3, #8]
 8006100:	3301      	adds	r3, #1
 8006102:	b2da      	uxtb	r2, r3
 8006104:	4b18      	ldr	r3, [pc, #96]	; (8006168 <ProcessI2C1+0x290>)
 8006106:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8006108:	e023      	b.n	8006152 <ProcessI2C1+0x27a>
    case 22:
        if ((I2C1->ISR & I2C_FLAG_STOPF) != 0) {            // Wait for STOPF to be set
 800610a:	4b19      	ldr	r3, [pc, #100]	; (8006170 <ProcessI2C1+0x298>)
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	2220      	movs	r2, #32
 8006110:	4013      	ands	r3, r2
 8006112:	d020      	beq.n	8006156 <ProcessI2C1+0x27e>
            I2C1->ICR = I2C_FLAG_STOPF;                     /* Clear STOP Flag */
 8006114:	4b16      	ldr	r3, [pc, #88]	; (8006170 <ProcessI2C1+0x298>)
 8006116:	2220      	movs	r2, #32
 8006118:	61da      	str	r2, [r3, #28]
            I2C1->CR2 &= ~(I2C_CR2_SADD | I2C_CR2_HEAD10R | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_RD_WRN);                  /* Clear Configuration Register 2 */
 800611a:	4b15      	ldr	r3, [pc, #84]	; (8006170 <ProcessI2C1+0x298>)
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	4b14      	ldr	r3, [pc, #80]	; (8006170 <ProcessI2C1+0x298>)
 8006120:	4916      	ldr	r1, [pc, #88]	; (800617c <ProcessI2C1+0x2a4>)
 8006122:	400a      	ands	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
            I2C1Control.Mode = I2C_MODE_DONE;
 8006126:	4b10      	ldr	r3, [pc, #64]	; (8006168 <ProcessI2C1+0x290>)
 8006128:	2207      	movs	r2, #7
 800612a:	725a      	strb	r2, [r3, #9]
            I2C1Control.State = 1;
 800612c:	4b0e      	ldr	r3, [pc, #56]	; (8006168 <ProcessI2C1+0x290>)
 800612e:	2201      	movs	r2, #1
 8006130:	721a      	strb	r2, [r3, #8]
        }
        break;
 8006132:	e010      	b.n	8006156 <ProcessI2C1+0x27e>
    default:
        Error_Handler(FILE_I2C, __LINE__);
 8006134:	21b2      	movs	r1, #178	; 0xb2
 8006136:	2011      	movs	r0, #17
 8006138:	f7fe f94c 	bl	80043d4 <Error_Handler>
        break;
 800613c:	e00c      	b.n	8006158 <ProcessI2C1+0x280>
        break;
 800613e:	46c0      	nop			; (mov r8, r8)
 8006140:	e00a      	b.n	8006158 <ProcessI2C1+0x280>
        break;
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	e008      	b.n	8006158 <ProcessI2C1+0x280>
        break;
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	e006      	b.n	8006158 <ProcessI2C1+0x280>
        break;
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	e004      	b.n	8006158 <ProcessI2C1+0x280>
        break;
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	e002      	b.n	8006158 <ProcessI2C1+0x280>
        break;
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	e000      	b.n	8006158 <ProcessI2C1+0x280>
        break;
 8006156:	46c0      	nop			; (mov r8, r8)
    }
    ExecutionEnd(EXECUTION_PROCESS_I2C1);
 8006158:	200f      	movs	r0, #15
 800615a:	f7fe fa71 	bl	8004640 <ExecutionEnd>
}
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	46bd      	mov	sp, r7
 8006162:	b001      	add	sp, #4
 8006164:	bd90      	pop	{r4, r7, pc}
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	20001c58 	.word	0x20001c58
 800616c:	0800cb20 	.word	0x0800cb20
 8006170:	40005400 	.word	0x40005400
 8006174:	48000400 	.word	0x48000400
 8006178:	02002400 	.word	0x02002400
 800617c:	fe00e800 	.word	0xfe00e800
 8006180:	02002000 	.word	0x02002000

08006184 <ProcessI2C2>:
//
// Returns:   None
//
// Requirement(s):
//
void ProcessI2C2(void) {
 8006184:	b590      	push	{r4, r7, lr}
 8006186:	b085      	sub	sp, #20
 8006188:	af04      	add	r7, sp, #16

    static uint32_t LastWrite, Timeout;

    ExecutionStart(EXECUTION_PROCESS_I2C2);
 800618a:	2010      	movs	r0, #16
 800618c:	f7fe fa3e 	bl	800460c <ExecutionStart>

    if ((I2C2Control.State > 1) && (STM32_GetTick() > Timeout)) {
 8006190:	4bd5      	ldr	r3, [pc, #852]	; (80064e8 <ProcessI2C2+0x364>)
 8006192:	7a1b      	ldrb	r3, [r3, #8]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d909      	bls.n	80061ac <ProcessI2C2+0x28>
 8006198:	f7ff fdec 	bl	8005d74 <STM32_GetTick>
 800619c:	0002      	movs	r2, r0
 800619e:	4bd3      	ldr	r3, [pc, #844]	; (80064ec <ProcessI2C2+0x368>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d902      	bls.n	80061ac <ProcessI2C2+0x28>
        I2C2Control.State = 0;
 80061a6:	4bd0      	ldr	r3, [pc, #832]	; (80064e8 <ProcessI2C2+0x364>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	721a      	strb	r2, [r3, #8]
    }

    switch (I2C2Control.State) {
 80061ac:	4bce      	ldr	r3, [pc, #824]	; (80064e8 <ProcessI2C2+0x364>)
 80061ae:	7a1b      	ldrb	r3, [r3, #8]
 80061b0:	2b19      	cmp	r3, #25
 80061b2:	d900      	bls.n	80061b6 <ProcessI2C2+0x32>
 80061b4:	e224      	b.n	8006600 <ProcessI2C2+0x47c>
 80061b6:	009a      	lsls	r2, r3, #2
 80061b8:	4bcd      	ldr	r3, [pc, #820]	; (80064f0 <ProcessI2C2+0x36c>)
 80061ba:	18d3      	adds	r3, r2, r3
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	469f      	mov	pc, r3
    case 0:
        I2C2->CR1 &= ~1;                    // Turn off I2C Interface
 80061c0:	4bcc      	ldr	r3, [pc, #816]	; (80064f4 <ProcessI2C2+0x370>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4bcb      	ldr	r3, [pc, #812]	; (80064f4 <ProcessI2C2+0x370>)
 80061c6:	2101      	movs	r1, #1
 80061c8:	438a      	bics	r2, r1
 80061ca:	601a      	str	r2, [r3, #0]
        //
        // Configure I2C2_SCL as an output - HIGH.  and I2C_SDA as GPIO Input
        //
        STM32_GPIO_Init(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, 0, SET);
 80061cc:	2380      	movs	r3, #128	; 0x80
 80061ce:	00d9      	lsls	r1, r3, #3
 80061d0:	48c9      	ldr	r0, [pc, #804]	; (80064f8 <ProcessI2C2+0x374>)
 80061d2:	2301      	movs	r3, #1
 80061d4:	9302      	str	r3, [sp, #8]
 80061d6:	2300      	movs	r3, #0
 80061d8:	9301      	str	r3, [sp, #4]
 80061da:	2303      	movs	r3, #3
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	2300      	movs	r3, #0
 80061e0:	2201      	movs	r2, #1
 80061e2:	f7ff fbd9 	bl	8005998 <STM32_GPIO_Init>
        STM32_GPIO_Init(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin, GPIO_MODE_INPUT, GPIO_NOPULL, GPIO_SPEED_FREQ_HIGH, 0, RESET);
 80061e6:	2380      	movs	r3, #128	; 0x80
 80061e8:	0119      	lsls	r1, r3, #4
 80061ea:	48c3      	ldr	r0, [pc, #780]	; (80064f8 <ProcessI2C2+0x374>)
 80061ec:	2300      	movs	r3, #0
 80061ee:	9302      	str	r3, [sp, #8]
 80061f0:	2300      	movs	r3, #0
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	2303      	movs	r3, #3
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	2300      	movs	r3, #0
 80061fa:	2200      	movs	r2, #0
 80061fc:	f7ff fbcc 	bl	8005998 <STM32_GPIO_Init>
        do {
            //
            // Toggle Clock, then check SDA - Loop if SDA low
            //
            STM32_GPIO_WritePin(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin, GPIO_PIN_RESET);
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	48bc      	ldr	r0, [pc, #752]	; (80064f8 <ProcessI2C2+0x374>)
 8006206:	2200      	movs	r2, #0
 8006208:	0019      	movs	r1, r3
 800620a:	f7ff fb7f 	bl	800590c <STM32_GPIO_WritePin>
            MicroDelay(100);
 800620e:	2064      	movs	r0, #100	; 0x64
 8006210:	f002 fdba 	bl	8008d88 <MicroDelay>
            STM32_GPIO_WritePin(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin, GPIO_PIN_SET);
 8006214:	2380      	movs	r3, #128	; 0x80
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	48b7      	ldr	r0, [pc, #732]	; (80064f8 <ProcessI2C2+0x374>)
 800621a:	2201      	movs	r2, #1
 800621c:	0019      	movs	r1, r3
 800621e:	f7ff fb75 	bl	800590c <STM32_GPIO_WritePin>
            MicroDelay(100);
 8006222:	2064      	movs	r0, #100	; 0x64
 8006224:	f002 fdb0 	bl	8008d88 <MicroDelay>
        } while (STM32_GPIO_ReadPin(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin) == 0);
 8006228:	2380      	movs	r3, #128	; 0x80
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	4ab2      	ldr	r2, [pc, #712]	; (80064f8 <ProcessI2C2+0x374>)
 800622e:	0019      	movs	r1, r3
 8006230:	0010      	movs	r0, r2
 8006232:	f7ff fb81 	bl	8005938 <STM32_GPIO_ReadPin>
 8006236:	1e03      	subs	r3, r0, #0
 8006238:	d0e2      	beq.n	8006200 <ProcessI2C2+0x7c>
        //
        // Switch GPIO back to I2C control
        //
        STM32_GPIO_Init(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin, GPIO_MODE_AF_OD, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_AF1_I2C2, 0);
 800623a:	2380      	movs	r3, #128	; 0x80
 800623c:	00d9      	lsls	r1, r3, #3
 800623e:	48ae      	ldr	r0, [pc, #696]	; (80064f8 <ProcessI2C2+0x374>)
 8006240:	2300      	movs	r3, #0
 8006242:	9302      	str	r3, [sp, #8]
 8006244:	2301      	movs	r3, #1
 8006246:	9301      	str	r3, [sp, #4]
 8006248:	2303      	movs	r3, #3
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	2301      	movs	r3, #1
 800624e:	2212      	movs	r2, #18
 8006250:	f7ff fba2 	bl	8005998 <STM32_GPIO_Init>
        STM32_GPIO_Init(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin, GPIO_MODE_AF_OD, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_AF1_I2C2, 0);
 8006254:	2380      	movs	r3, #128	; 0x80
 8006256:	0119      	lsls	r1, r3, #4
 8006258:	48a7      	ldr	r0, [pc, #668]	; (80064f8 <ProcessI2C2+0x374>)
 800625a:	2300      	movs	r3, #0
 800625c:	9302      	str	r3, [sp, #8]
 800625e:	2301      	movs	r3, #1
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	2303      	movs	r3, #3
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	2301      	movs	r3, #1
 8006268:	2212      	movs	r2, #18
 800626a:	f7ff fb95 	bl	8005998 <STM32_GPIO_Init>
        I2C2->CR1 |= 1;                       // Turn on I2C Interface
 800626e:	4ba1      	ldr	r3, [pc, #644]	; (80064f4 <ProcessI2C2+0x370>)
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4ba0      	ldr	r3, [pc, #640]	; (80064f4 <ProcessI2C2+0x370>)
 8006274:	2101      	movs	r1, #1
 8006276:	430a      	orrs	r2, r1
 8006278:	601a      	str	r2, [r3, #0]
        I2C2Control.State++;
 800627a:	4b9b      	ldr	r3, [pc, #620]	; (80064e8 <ProcessI2C2+0x364>)
 800627c:	7a1b      	ldrb	r3, [r3, #8]
 800627e:	3301      	adds	r3, #1
 8006280:	b2da      	uxtb	r2, r3
 8006282:	4b99      	ldr	r3, [pc, #612]	; (80064e8 <ProcessI2C2+0x364>)
 8006284:	721a      	strb	r2, [r3, #8]
        break;
 8006286:	e1d9      	b.n	800663c <ProcessI2C2+0x4b8>

    case 1:
        if (I2C2Control.Mode == I2C_MODE_READ_ACCEL) {
 8006288:	4b97      	ldr	r3, [pc, #604]	; (80064e8 <ProcessI2C2+0x364>)
 800628a:	7a5b      	ldrb	r3, [r3, #9]
 800628c:	2b03      	cmp	r3, #3
 800628e:	d109      	bne.n	80062a4 <ProcessI2C2+0x120>
            I2C2Control.MemAddSize = 1;
 8006290:	4b95      	ldr	r3, [pc, #596]	; (80064e8 <ProcessI2C2+0x364>)
 8006292:	2201      	movs	r2, #1
 8006294:	72da      	strb	r2, [r3, #11]
            I2C2Control.MemDevAddr = 0x3Au;
 8006296:	4b94      	ldr	r3, [pc, #592]	; (80064e8 <ProcessI2C2+0x364>)
 8006298:	223a      	movs	r2, #58	; 0x3a
 800629a:	819a      	strh	r2, [r3, #12]
            I2C2Control.State = 10;
 800629c:	4b92      	ldr	r3, [pc, #584]	; (80064e8 <ProcessI2C2+0x364>)
 800629e:	220a      	movs	r2, #10
 80062a0:	721a      	strb	r2, [r3, #8]
 80062a2:	e028      	b.n	80062f6 <ProcessI2C2+0x172>
        } else if (I2C2Control.Mode == I2C_MODE_WRITE_EEPROM) {
 80062a4:	4b90      	ldr	r3, [pc, #576]	; (80064e8 <ProcessI2C2+0x364>)
 80062a6:	7a5b      	ldrb	r3, [r3, #9]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d109      	bne.n	80062c0 <ProcessI2C2+0x13c>
            I2C2Control.MemAddSize = 2;
 80062ac:	4b8e      	ldr	r3, [pc, #568]	; (80064e8 <ProcessI2C2+0x364>)
 80062ae:	2202      	movs	r2, #2
 80062b0:	72da      	strb	r2, [r3, #11]
            I2C2Control.MemDevAddr = 0xA0u;
 80062b2:	4b8d      	ldr	r3, [pc, #564]	; (80064e8 <ProcessI2C2+0x364>)
 80062b4:	22a0      	movs	r2, #160	; 0xa0
 80062b6:	819a      	strh	r2, [r3, #12]
            I2C2Control.State = 20;
 80062b8:	4b8b      	ldr	r3, [pc, #556]	; (80064e8 <ProcessI2C2+0x364>)
 80062ba:	2214      	movs	r2, #20
 80062bc:	721a      	strb	r2, [r3, #8]
 80062be:	e01a      	b.n	80062f6 <ProcessI2C2+0x172>
        } else if (I2C2Control.Mode == I2C_MODE_READ_EEPROM) {
 80062c0:	4b89      	ldr	r3, [pc, #548]	; (80064e8 <ProcessI2C2+0x364>)
 80062c2:	7a5b      	ldrb	r3, [r3, #9]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d109      	bne.n	80062dc <ProcessI2C2+0x158>
            I2C2Control.MemAddSize = 2;
 80062c8:	4b87      	ldr	r3, [pc, #540]	; (80064e8 <ProcessI2C2+0x364>)
 80062ca:	2202      	movs	r2, #2
 80062cc:	72da      	strb	r2, [r3, #11]
            I2C2Control.MemDevAddr = 0xA0u;
 80062ce:	4b86      	ldr	r3, [pc, #536]	; (80064e8 <ProcessI2C2+0x364>)
 80062d0:	22a0      	movs	r2, #160	; 0xa0
 80062d2:	819a      	strh	r2, [r3, #12]
            I2C2Control.State = 10;
 80062d4:	4b84      	ldr	r3, [pc, #528]	; (80064e8 <ProcessI2C2+0x364>)
 80062d6:	220a      	movs	r2, #10
 80062d8:	721a      	strb	r2, [r3, #8]
 80062da:	e00c      	b.n	80062f6 <ProcessI2C2+0x172>
        } else if (I2C2Control.Mode == I2C_MODE_WRITE_ACCEL) {
 80062dc:	4b82      	ldr	r3, [pc, #520]	; (80064e8 <ProcessI2C2+0x364>)
 80062de:	7a5b      	ldrb	r3, [r3, #9]
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d108      	bne.n	80062f6 <ProcessI2C2+0x172>
            I2C2Control.MemAddSize = 1;
 80062e4:	4b80      	ldr	r3, [pc, #512]	; (80064e8 <ProcessI2C2+0x364>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	72da      	strb	r2, [r3, #11]
            I2C2Control.MemDevAddr = 0x3Au;
 80062ea:	4b7f      	ldr	r3, [pc, #508]	; (80064e8 <ProcessI2C2+0x364>)
 80062ec:	223a      	movs	r2, #58	; 0x3a
 80062ee:	819a      	strh	r2, [r3, #12]
            I2C2Control.State = 20;
 80062f0:	4b7d      	ldr	r3, [pc, #500]	; (80064e8 <ProcessI2C2+0x364>)
 80062f2:	2214      	movs	r2, #20
 80062f4:	721a      	strb	r2, [r3, #8]
        } else {
        }
        Timeout = STM32_GetTick() + 50;
 80062f6:	f7ff fd3d 	bl	8005d74 <STM32_GetTick>
 80062fa:	0003      	movs	r3, r0
 80062fc:	3332      	adds	r3, #50	; 0x32
 80062fe:	001a      	movs	r2, r3
 8006300:	4b7a      	ldr	r3, [pc, #488]	; (80064ec <ProcessI2C2+0x368>)
 8006302:	601a      	str	r2, [r3, #0]
        break;
 8006304:	e19a      	b.n	800663c <ProcessI2C2+0x4b8>
        //
        //------------------------------------------------------------------------------------------------------------
        //  Read
        //
    case 10:
        if ((I2C2->ISR & I2C_ISR_BUSY) == 0) {          // Wait for Busy Bit to be reset
 8006306:	4b7b      	ldr	r3, [pc, #492]	; (80064f4 <ProcessI2C2+0x370>)
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	2380      	movs	r3, #128	; 0x80
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	4013      	ands	r3, r2
 8006310:	d000      	beq.n	8006314 <ProcessI2C2+0x190>
 8006312:	e17c      	b.n	800660e <ProcessI2C2+0x48a>
            //
            // Send Start Condition, Set NBytes to 2, Device Address in Write Mode
            //
            I2C2->CR2 = I2C2Control.MemDevAddr | I2C2Control.MemAddSize << 16 | I2C_SOFTEND_MODE | I2C_GENERATE_START_WRITE;
 8006314:	4b74      	ldr	r3, [pc, #464]	; (80064e8 <ProcessI2C2+0x364>)
 8006316:	899b      	ldrh	r3, [r3, #12]
 8006318:	001a      	movs	r2, r3
 800631a:	4b73      	ldr	r3, [pc, #460]	; (80064e8 <ProcessI2C2+0x364>)
 800631c:	7adb      	ldrb	r3, [r3, #11]
 800631e:	041b      	lsls	r3, r3, #16
 8006320:	4313      	orrs	r3, r2
 8006322:	0019      	movs	r1, r3
 8006324:	4b73      	ldr	r3, [pc, #460]	; (80064f4 <ProcessI2C2+0x370>)
 8006326:	2280      	movs	r2, #128	; 0x80
 8006328:	0192      	lsls	r2, r2, #6
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
            I2C2Control.State++;
 800632e:	4b6e      	ldr	r3, [pc, #440]	; (80064e8 <ProcessI2C2+0x364>)
 8006330:	7a1b      	ldrb	r3, [r3, #8]
 8006332:	3301      	adds	r3, #1
 8006334:	b2da      	uxtb	r2, r3
 8006336:	4b6c      	ldr	r3, [pc, #432]	; (80064e8 <ProcessI2C2+0x364>)
 8006338:	721a      	strb	r2, [r3, #8]
            if (I2C2Control.MemAddSize == 1) {
 800633a:	4b6b      	ldr	r3, [pc, #428]	; (80064e8 <ProcessI2C2+0x364>)
 800633c:	7adb      	ldrb	r3, [r3, #11]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d000      	beq.n	8006344 <ProcessI2C2+0x1c0>
 8006342:	e164      	b.n	800660e <ProcessI2C2+0x48a>
                I2C2Control.State++;
 8006344:	4b68      	ldr	r3, [pc, #416]	; (80064e8 <ProcessI2C2+0x364>)
 8006346:	7a1b      	ldrb	r3, [r3, #8]
 8006348:	3301      	adds	r3, #1
 800634a:	b2da      	uxtb	r2, r3
 800634c:	4b66      	ldr	r3, [pc, #408]	; (80064e8 <ProcessI2C2+0x364>)
 800634e:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8006350:	e15d      	b.n	800660e <ProcessI2C2+0x48a>
    case 11:
        if ((I2C2->ISR & I2C_FLAG_TXIS) != 0) {               // Wait for TXIS bit to be set
 8006352:	4b68      	ldr	r3, [pc, #416]	; (80064f4 <ProcessI2C2+0x370>)
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	2202      	movs	r2, #2
 8006358:	4013      	ands	r3, r2
 800635a:	d100      	bne.n	800635e <ProcessI2C2+0x1da>
 800635c:	e159      	b.n	8006612 <ProcessI2C2+0x48e>
            I2C2->TXDR = ((uint32_t)(I2C2Control.Address >> 8));            // Send MSB of Address
 800635e:	4b62      	ldr	r3, [pc, #392]	; (80064e8 <ProcessI2C2+0x364>)
 8006360:	889b      	ldrh	r3, [r3, #4]
 8006362:	0a1b      	lsrs	r3, r3, #8
 8006364:	b29a      	uxth	r2, r3
 8006366:	4b63      	ldr	r3, [pc, #396]	; (80064f4 <ProcessI2C2+0x370>)
 8006368:	629a      	str	r2, [r3, #40]	; 0x28
            I2C2Control.State++;
 800636a:	4b5f      	ldr	r3, [pc, #380]	; (80064e8 <ProcessI2C2+0x364>)
 800636c:	7a1b      	ldrb	r3, [r3, #8]
 800636e:	3301      	adds	r3, #1
 8006370:	b2da      	uxtb	r2, r3
 8006372:	4b5d      	ldr	r3, [pc, #372]	; (80064e8 <ProcessI2C2+0x364>)
 8006374:	721a      	strb	r2, [r3, #8]
        }
        break;
 8006376:	e14c      	b.n	8006612 <ProcessI2C2+0x48e>
    case 12:
        if ((I2C2->ISR & I2C_FLAG_TXIS) != 0) {               // Wait for TXIS bit to be set
 8006378:	4b5e      	ldr	r3, [pc, #376]	; (80064f4 <ProcessI2C2+0x370>)
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	2202      	movs	r2, #2
 800637e:	4013      	ands	r3, r2
 8006380:	d100      	bne.n	8006384 <ProcessI2C2+0x200>
 8006382:	e148      	b.n	8006616 <ProcessI2C2+0x492>
            I2C2->TXDR = ((uint32_t)(I2C2Control.Address & 0xFFu));          // Send LSB of Address
 8006384:	4b58      	ldr	r3, [pc, #352]	; (80064e8 <ProcessI2C2+0x364>)
 8006386:	889b      	ldrh	r3, [r3, #4]
 8006388:	0019      	movs	r1, r3
 800638a:	4b5a      	ldr	r3, [pc, #360]	; (80064f4 <ProcessI2C2+0x370>)
 800638c:	22ff      	movs	r2, #255	; 0xff
 800638e:	400a      	ands	r2, r1
 8006390:	629a      	str	r2, [r3, #40]	; 0x28
            I2C2Control.State++;
 8006392:	4b55      	ldr	r3, [pc, #340]	; (80064e8 <ProcessI2C2+0x364>)
 8006394:	7a1b      	ldrb	r3, [r3, #8]
 8006396:	3301      	adds	r3, #1
 8006398:	b2da      	uxtb	r2, r3
 800639a:	4b53      	ldr	r3, [pc, #332]	; (80064e8 <ProcessI2C2+0x364>)
 800639c:	721a      	strb	r2, [r3, #8]
        }
        break;
 800639e:	e13a      	b.n	8006616 <ProcessI2C2+0x492>
    case 13:
        if ((I2C2->ISR & I2C_FLAG_TC) != 0) {               // Wait for TC bit to be set
 80063a0:	4b54      	ldr	r3, [pc, #336]	; (80064f4 <ProcessI2C2+0x370>)
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	2240      	movs	r2, #64	; 0x40
 80063a6:	4013      	ands	r3, r2
 80063a8:	d100      	bne.n	80063ac <ProcessI2C2+0x228>
 80063aa:	e136      	b.n	800661a <ProcessI2C2+0x496>
            //
            // Send Start Condition, Set NBytes to Size, Device Address in Read Mode
            //
            I2C2->CR2 = I2C2Control.MemDevAddr | I2C2Control.Length << 16 | I2C_AUTOEND_MODE | I2C_GENERATE_START_READ;
 80063ac:	4b4e      	ldr	r3, [pc, #312]	; (80064e8 <ProcessI2C2+0x364>)
 80063ae:	899b      	ldrh	r3, [r3, #12]
 80063b0:	001a      	movs	r2, r3
 80063b2:	4b4d      	ldr	r3, [pc, #308]	; (80064e8 <ProcessI2C2+0x364>)
 80063b4:	88db      	ldrh	r3, [r3, #6]
 80063b6:	041b      	lsls	r3, r3, #16
 80063b8:	4313      	orrs	r3, r2
 80063ba:	0019      	movs	r1, r3
 80063bc:	4b4d      	ldr	r3, [pc, #308]	; (80064f4 <ProcessI2C2+0x370>)
 80063be:	4a4f      	ldr	r2, [pc, #316]	; (80064fc <ProcessI2C2+0x378>)
 80063c0:	430a      	orrs	r2, r1
 80063c2:	605a      	str	r2, [r3, #4]
            I2C2Control.State++;
 80063c4:	4b48      	ldr	r3, [pc, #288]	; (80064e8 <ProcessI2C2+0x364>)
 80063c6:	7a1b      	ldrb	r3, [r3, #8]
 80063c8:	3301      	adds	r3, #1
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	4b46      	ldr	r3, [pc, #280]	; (80064e8 <ProcessI2C2+0x364>)
 80063ce:	721a      	strb	r2, [r3, #8]
            I2C2Control.Offset = 0;
 80063d0:	4b45      	ldr	r3, [pc, #276]	; (80064e8 <ProcessI2C2+0x364>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	729a      	strb	r2, [r3, #10]
        }
        break;
 80063d6:	e120      	b.n	800661a <ProcessI2C2+0x496>
    case 14:
        if ((I2C2->ISR & I2C_FLAG_RXNE) != 0) {             // Wait for Receive Data
 80063d8:	4b46      	ldr	r3, [pc, #280]	; (80064f4 <ProcessI2C2+0x370>)
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	2204      	movs	r2, #4
 80063de:	4013      	ands	r3, r2
 80063e0:	d100      	bne.n	80063e4 <ProcessI2C2+0x260>
 80063e2:	e11c      	b.n	800661e <ProcessI2C2+0x49a>
            I2C2Control.Buffer[I2C2Control.Offset++] = (uint8_t)I2C2->RXDR;  // Save Data
 80063e4:	4b43      	ldr	r3, [pc, #268]	; (80064f4 <ProcessI2C2+0x370>)
 80063e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80063e8:	4b3f      	ldr	r3, [pc, #252]	; (80064e8 <ProcessI2C2+0x364>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	4b3e      	ldr	r3, [pc, #248]	; (80064e8 <ProcessI2C2+0x364>)
 80063ee:	7a9b      	ldrb	r3, [r3, #10]
 80063f0:	1c59      	adds	r1, r3, #1
 80063f2:	b2cc      	uxtb	r4, r1
 80063f4:	493c      	ldr	r1, [pc, #240]	; (80064e8 <ProcessI2C2+0x364>)
 80063f6:	728c      	strb	r4, [r1, #10]
 80063f8:	18d3      	adds	r3, r2, r3
 80063fa:	b2c2      	uxtb	r2, r0
 80063fc:	701a      	strb	r2, [r3, #0]
            if (--I2C2Control.Length == 0) {                // Proceed to next Case once data has been saved
 80063fe:	4b3a      	ldr	r3, [pc, #232]	; (80064e8 <ProcessI2C2+0x364>)
 8006400:	88db      	ldrh	r3, [r3, #6]
 8006402:	3b01      	subs	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	4b38      	ldr	r3, [pc, #224]	; (80064e8 <ProcessI2C2+0x364>)
 8006408:	80da      	strh	r2, [r3, #6]
 800640a:	4b37      	ldr	r3, [pc, #220]	; (80064e8 <ProcessI2C2+0x364>)
 800640c:	88db      	ldrh	r3, [r3, #6]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d000      	beq.n	8006414 <ProcessI2C2+0x290>
 8006412:	e104      	b.n	800661e <ProcessI2C2+0x49a>
                I2C2Control.State++;
 8006414:	4b34      	ldr	r3, [pc, #208]	; (80064e8 <ProcessI2C2+0x364>)
 8006416:	7a1b      	ldrb	r3, [r3, #8]
 8006418:	3301      	adds	r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	4b32      	ldr	r3, [pc, #200]	; (80064e8 <ProcessI2C2+0x364>)
 800641e:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8006420:	e0fd      	b.n	800661e <ProcessI2C2+0x49a>
    case 15:
        if ((I2C2->ISR & I2C_FLAG_STOPF) != 0) {            // Wait for STOPF to be set
 8006422:	4b34      	ldr	r3, [pc, #208]	; (80064f4 <ProcessI2C2+0x370>)
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2220      	movs	r2, #32
 8006428:	4013      	ands	r3, r2
 800642a:	d100      	bne.n	800642e <ProcessI2C2+0x2aa>
 800642c:	e0f9      	b.n	8006622 <ProcessI2C2+0x49e>
            I2C2->ICR = I2C_FLAG_STOPF;                     /* Clear STOP Flag */
 800642e:	4b31      	ldr	r3, [pc, #196]	; (80064f4 <ProcessI2C2+0x370>)
 8006430:	2220      	movs	r2, #32
 8006432:	61da      	str	r2, [r3, #28]
            I2C2->CR2 &= ~(I2C_CR2_SADD | I2C_CR2_HEAD10R | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_RD_WRN);                  /* Clear Configuration Register 2 */
 8006434:	4b2f      	ldr	r3, [pc, #188]	; (80064f4 <ProcessI2C2+0x370>)
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	4b2e      	ldr	r3, [pc, #184]	; (80064f4 <ProcessI2C2+0x370>)
 800643a:	4931      	ldr	r1, [pc, #196]	; (8006500 <ProcessI2C2+0x37c>)
 800643c:	400a      	ands	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
            I2C2Control.Mode = I2C_MODE_DONE;
 8006440:	4b29      	ldr	r3, [pc, #164]	; (80064e8 <ProcessI2C2+0x364>)
 8006442:	2207      	movs	r2, #7
 8006444:	725a      	strb	r2, [r3, #9]
            I2C2Control.State = 1;
 8006446:	4b28      	ldr	r3, [pc, #160]	; (80064e8 <ProcessI2C2+0x364>)
 8006448:	2201      	movs	r2, #1
 800644a:	721a      	strb	r2, [r3, #8]
        }
        break;
 800644c:	e0e9      	b.n	8006622 <ProcessI2C2+0x49e>
        //
case 20:
    //
    // Wait at least 10mS from last write before starting a new write to EEPROM
    //
    if (STM32_GetTick() > (LastWrite + 10)) {
 800644e:	f7ff fc91 	bl	8005d74 <STM32_GetTick>
 8006452:	0002      	movs	r2, r0
 8006454:	4b2b      	ldr	r3, [pc, #172]	; (8006504 <ProcessI2C2+0x380>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	330a      	adds	r3, #10
 800645a:	429a      	cmp	r2, r3
 800645c:	d800      	bhi.n	8006460 <ProcessI2C2+0x2dc>
 800645e:	e0e2      	b.n	8006626 <ProcessI2C2+0x4a2>
        if ((I2C2->ISR & I2C_ISR_BUSY) == 0) {          // Wait for Busy Bit to be reset
 8006460:	4b24      	ldr	r3, [pc, #144]	; (80064f4 <ProcessI2C2+0x370>)
 8006462:	699a      	ldr	r2, [r3, #24]
 8006464:	2380      	movs	r3, #128	; 0x80
 8006466:	021b      	lsls	r3, r3, #8
 8006468:	4013      	ands	r3, r2
 800646a:	d000      	beq.n	800646e <ProcessI2C2+0x2ea>
 800646c:	e0db      	b.n	8006626 <ProcessI2C2+0x4a2>
            //
            // Send Start Condition, Set NBytes to 2, Device Address in Write Mode
            //
            if (I2C2Control.MemDevAddr == 0x00A0u) {           // Check if writing to EEPROM
 800646e:	4b1e      	ldr	r3, [pc, #120]	; (80064e8 <ProcessI2C2+0x364>)
 8006470:	899b      	ldrh	r3, [r3, #12]
 8006472:	2ba0      	cmp	r3, #160	; 0xa0
 8006474:	d106      	bne.n	8006484 <ProcessI2C2+0x300>
                STM32_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_RESET);    // Disable Write Protection
 8006476:	2380      	movs	r3, #128	; 0x80
 8006478:	021b      	lsls	r3, r3, #8
 800647a:	4823      	ldr	r0, [pc, #140]	; (8006508 <ProcessI2C2+0x384>)
 800647c:	2200      	movs	r2, #0
 800647e:	0019      	movs	r1, r3
 8006480:	f7ff fa44 	bl	800590c <STM32_GPIO_WritePin>
            }
            I2C2->CR2 = I2C2Control.MemDevAddr | I2C2Control.MemAddSize << 16 | I2C_RELOAD_MODE | I2C_GENERATE_START_WRITE;
 8006484:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <ProcessI2C2+0x364>)
 8006486:	899b      	ldrh	r3, [r3, #12]
 8006488:	001a      	movs	r2, r3
 800648a:	4b17      	ldr	r3, [pc, #92]	; (80064e8 <ProcessI2C2+0x364>)
 800648c:	7adb      	ldrb	r3, [r3, #11]
 800648e:	041b      	lsls	r3, r3, #16
 8006490:	4313      	orrs	r3, r2
 8006492:	0019      	movs	r1, r3
 8006494:	4b17      	ldr	r3, [pc, #92]	; (80064f4 <ProcessI2C2+0x370>)
 8006496:	4a1d      	ldr	r2, [pc, #116]	; (800650c <ProcessI2C2+0x388>)
 8006498:	430a      	orrs	r2, r1
 800649a:	605a      	str	r2, [r3, #4]
            I2C2Control.State++;
 800649c:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <ProcessI2C2+0x364>)
 800649e:	7a1b      	ldrb	r3, [r3, #8]
 80064a0:	3301      	adds	r3, #1
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	4b10      	ldr	r3, [pc, #64]	; (80064e8 <ProcessI2C2+0x364>)
 80064a6:	721a      	strb	r2, [r3, #8]
            if (I2C2Control.MemAddSize == 1) {
 80064a8:	4b0f      	ldr	r3, [pc, #60]	; (80064e8 <ProcessI2C2+0x364>)
 80064aa:	7adb      	ldrb	r3, [r3, #11]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d000      	beq.n	80064b2 <ProcessI2C2+0x32e>
 80064b0:	e0b9      	b.n	8006626 <ProcessI2C2+0x4a2>
                I2C2Control.State++;
 80064b2:	4b0d      	ldr	r3, [pc, #52]	; (80064e8 <ProcessI2C2+0x364>)
 80064b4:	7a1b      	ldrb	r3, [r3, #8]
 80064b6:	3301      	adds	r3, #1
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <ProcessI2C2+0x364>)
 80064bc:	721a      	strb	r2, [r3, #8]
            }
        }
    }
    break;
 80064be:	e0b2      	b.n	8006626 <ProcessI2C2+0x4a2>
  case 21:
    if ((I2C2->ISR & I2C_FLAG_TXIS) != 0) {               // Wait for TXIS bit to be set
 80064c0:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <ProcessI2C2+0x370>)
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	2202      	movs	r2, #2
 80064c6:	4013      	ands	r3, r2
 80064c8:	d100      	bne.n	80064cc <ProcessI2C2+0x348>
 80064ca:	e0ae      	b.n	800662a <ProcessI2C2+0x4a6>
      I2C2->TXDR = (uint32_t)I2C2Control.Address >> 8;            // Send MSB of Address
 80064cc:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <ProcessI2C2+0x364>)
 80064ce:	889b      	ldrh	r3, [r3, #4]
 80064d0:	0a1b      	lsrs	r3, r3, #8
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <ProcessI2C2+0x370>)
 80064d6:	629a      	str	r2, [r3, #40]	; 0x28
      I2C2Control.State++;
 80064d8:	4b03      	ldr	r3, [pc, #12]	; (80064e8 <ProcessI2C2+0x364>)
 80064da:	7a1b      	ldrb	r3, [r3, #8]
 80064dc:	3301      	adds	r3, #1
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	4b01      	ldr	r3, [pc, #4]	; (80064e8 <ProcessI2C2+0x364>)
 80064e2:	721a      	strb	r2, [r3, #8]
    }
    break;
 80064e4:	e0a1      	b.n	800662a <ProcessI2C2+0x4a6>
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	20001c24 	.word	0x20001c24
 80064ec:	20000a24 	.word	0x20000a24
 80064f0:	0800cb7c 	.word	0x0800cb7c
 80064f4:	40005800 	.word	0x40005800
 80064f8:	48000400 	.word	0x48000400
 80064fc:	02002400 	.word	0x02002400
 8006500:	fe00e800 	.word	0xfe00e800
 8006504:	20000a28 	.word	0x20000a28
 8006508:	48000800 	.word	0x48000800
 800650c:	01002000 	.word	0x01002000
  case 22:
    if ((I2C2->ISR & I2C_FLAG_TXIS) != 0) {               // Wait for TXIS bit to be set
 8006510:	4b4e      	ldr	r3, [pc, #312]	; (800664c <ProcessI2C2+0x4c8>)
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	2202      	movs	r2, #2
 8006516:	4013      	ands	r3, r2
 8006518:	d100      	bne.n	800651c <ProcessI2C2+0x398>
 800651a:	e088      	b.n	800662e <ProcessI2C2+0x4aa>
      I2C2->TXDR = (uint32_t)I2C2Control.Address & 0xFF;          // Send LSB of Address
 800651c:	4b4c      	ldr	r3, [pc, #304]	; (8006650 <ProcessI2C2+0x4cc>)
 800651e:	889b      	ldrh	r3, [r3, #4]
 8006520:	0019      	movs	r1, r3
 8006522:	4b4a      	ldr	r3, [pc, #296]	; (800664c <ProcessI2C2+0x4c8>)
 8006524:	22ff      	movs	r2, #255	; 0xff
 8006526:	400a      	ands	r2, r1
 8006528:	629a      	str	r2, [r3, #40]	; 0x28
      I2C2Control.State++;
 800652a:	4b49      	ldr	r3, [pc, #292]	; (8006650 <ProcessI2C2+0x4cc>)
 800652c:	7a1b      	ldrb	r3, [r3, #8]
 800652e:	3301      	adds	r3, #1
 8006530:	b2da      	uxtb	r2, r3
 8006532:	4b47      	ldr	r3, [pc, #284]	; (8006650 <ProcessI2C2+0x4cc>)
 8006534:	721a      	strb	r2, [r3, #8]
    }
    break;
 8006536:	e07a      	b.n	800662e <ProcessI2C2+0x4aa>
  case 23:
    if ((I2C2->ISR & I2C_FLAG_TCR) != 0) {               // Wait for TC bit to be set
 8006538:	4b44      	ldr	r3, [pc, #272]	; (800664c <ProcessI2C2+0x4c8>)
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	2280      	movs	r2, #128	; 0x80
 800653e:	4013      	ands	r3, r2
 8006540:	d100      	bne.n	8006544 <ProcessI2C2+0x3c0>
 8006542:	e076      	b.n	8006632 <ProcessI2C2+0x4ae>
        I2C2->CR2 = I2C2Control.MemDevAddr | I2C2Control.Length << 16 | I2C_AUTOEND_MODE | I2C_NO_STARTSTOP;
 8006544:	4b42      	ldr	r3, [pc, #264]	; (8006650 <ProcessI2C2+0x4cc>)
 8006546:	899b      	ldrh	r3, [r3, #12]
 8006548:	001a      	movs	r2, r3
 800654a:	4b41      	ldr	r3, [pc, #260]	; (8006650 <ProcessI2C2+0x4cc>)
 800654c:	88db      	ldrh	r3, [r3, #6]
 800654e:	041b      	lsls	r3, r3, #16
 8006550:	4313      	orrs	r3, r2
 8006552:	0019      	movs	r1, r3
 8006554:	4b3d      	ldr	r3, [pc, #244]	; (800664c <ProcessI2C2+0x4c8>)
 8006556:	2280      	movs	r2, #128	; 0x80
 8006558:	0492      	lsls	r2, r2, #18
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
        I2C2Control.State++;
 800655e:	4b3c      	ldr	r3, [pc, #240]	; (8006650 <ProcessI2C2+0x4cc>)
 8006560:	7a1b      	ldrb	r3, [r3, #8]
 8006562:	3301      	adds	r3, #1
 8006564:	b2da      	uxtb	r2, r3
 8006566:	4b3a      	ldr	r3, [pc, #232]	; (8006650 <ProcessI2C2+0x4cc>)
 8006568:	721a      	strb	r2, [r3, #8]
        I2C2Control.Offset = 0;
 800656a:	4b39      	ldr	r3, [pc, #228]	; (8006650 <ProcessI2C2+0x4cc>)
 800656c:	2200      	movs	r2, #0
 800656e:	729a      	strb	r2, [r3, #10]
    }
    break;
 8006570:	e05f      	b.n	8006632 <ProcessI2C2+0x4ae>
  case 24:
    if ((I2C2->ISR & I2C_FLAG_TXIS) != 0) {                       // Wait for Transmit Data
 8006572:	4b36      	ldr	r3, [pc, #216]	; (800664c <ProcessI2C2+0x4c8>)
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	2202      	movs	r2, #2
 8006578:	4013      	ands	r3, r2
 800657a:	d05c      	beq.n	8006636 <ProcessI2C2+0x4b2>
        I2C2->TXDR = (uint32_t)I2C2Control.Buffer[I2C2Control.Offset++];    // Send Data
 800657c:	4b34      	ldr	r3, [pc, #208]	; (8006650 <ProcessI2C2+0x4cc>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	4b33      	ldr	r3, [pc, #204]	; (8006650 <ProcessI2C2+0x4cc>)
 8006582:	7a9b      	ldrb	r3, [r3, #10]
 8006584:	1c59      	adds	r1, r3, #1
 8006586:	b2c8      	uxtb	r0, r1
 8006588:	4931      	ldr	r1, [pc, #196]	; (8006650 <ProcessI2C2+0x4cc>)
 800658a:	7288      	strb	r0, [r1, #10]
 800658c:	18d3      	adds	r3, r2, r3
 800658e:	781a      	ldrb	r2, [r3, #0]
 8006590:	4b2e      	ldr	r3, [pc, #184]	; (800664c <ProcessI2C2+0x4c8>)
 8006592:	629a      	str	r2, [r3, #40]	; 0x28
        if (--I2C2Control.Length == 0) {                // Proceed to next Case once data has been sent
 8006594:	4b2e      	ldr	r3, [pc, #184]	; (8006650 <ProcessI2C2+0x4cc>)
 8006596:	88db      	ldrh	r3, [r3, #6]
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	4b2c      	ldr	r3, [pc, #176]	; (8006650 <ProcessI2C2+0x4cc>)
 800659e:	80da      	strh	r2, [r3, #6]
 80065a0:	4b2b      	ldr	r3, [pc, #172]	; (8006650 <ProcessI2C2+0x4cc>)
 80065a2:	88db      	ldrh	r3, [r3, #6]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d146      	bne.n	8006636 <ProcessI2C2+0x4b2>
            I2C2Control.State++;
 80065a8:	4b29      	ldr	r3, [pc, #164]	; (8006650 <ProcessI2C2+0x4cc>)
 80065aa:	7a1b      	ldrb	r3, [r3, #8]
 80065ac:	3301      	adds	r3, #1
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	4b27      	ldr	r3, [pc, #156]	; (8006650 <ProcessI2C2+0x4cc>)
 80065b2:	721a      	strb	r2, [r3, #8]
        }
    }
    break;
 80065b4:	e03f      	b.n	8006636 <ProcessI2C2+0x4b2>
  case 25:
    if ((I2C2->ISR & I2C_FLAG_STOPF) != 0) {            // Wait for STOPF to be set
 80065b6:	4b25      	ldr	r3, [pc, #148]	; (800664c <ProcessI2C2+0x4c8>)
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	2220      	movs	r2, #32
 80065bc:	4013      	ands	r3, r2
 80065be:	d03c      	beq.n	800663a <ProcessI2C2+0x4b6>
        I2C2->ICR = I2C_FLAG_STOPF;                     /* Clear STOP Flag */
 80065c0:	4b22      	ldr	r3, [pc, #136]	; (800664c <ProcessI2C2+0x4c8>)
 80065c2:	2220      	movs	r2, #32
 80065c4:	61da      	str	r2, [r3, #28]
        I2C2->CR2 &= ~(I2C_CR2_SADD | I2C_CR2_HEAD10R | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_RD_WRN);                  /* Clear Configuration Register 2 */
 80065c6:	4b21      	ldr	r3, [pc, #132]	; (800664c <ProcessI2C2+0x4c8>)
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	4b20      	ldr	r3, [pc, #128]	; (800664c <ProcessI2C2+0x4c8>)
 80065cc:	4921      	ldr	r1, [pc, #132]	; (8006654 <ProcessI2C2+0x4d0>)
 80065ce:	400a      	ands	r2, r1
 80065d0:	605a      	str	r2, [r3, #4]
        if (I2C2Control.MemDevAddr == 0xA0u) {
 80065d2:	4b1f      	ldr	r3, [pc, #124]	; (8006650 <ProcessI2C2+0x4cc>)
 80065d4:	899b      	ldrh	r3, [r3, #12]
 80065d6:	2ba0      	cmp	r3, #160	; 0xa0
 80065d8:	d106      	bne.n	80065e8 <ProcessI2C2+0x464>
            STM32_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_SET);                       // Enable Write Protection
 80065da:	2380      	movs	r3, #128	; 0x80
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	481e      	ldr	r0, [pc, #120]	; (8006658 <ProcessI2C2+0x4d4>)
 80065e0:	2201      	movs	r2, #1
 80065e2:	0019      	movs	r1, r3
 80065e4:	f7ff f992 	bl	800590c <STM32_GPIO_WritePin>
        }
        I2C2Control.Mode = I2C_MODE_DONE;
 80065e8:	4b19      	ldr	r3, [pc, #100]	; (8006650 <ProcessI2C2+0x4cc>)
 80065ea:	2207      	movs	r2, #7
 80065ec:	725a      	strb	r2, [r3, #9]
        I2C2Control.State = 1;
 80065ee:	4b18      	ldr	r3, [pc, #96]	; (8006650 <ProcessI2C2+0x4cc>)
 80065f0:	2201      	movs	r2, #1
 80065f2:	721a      	strb	r2, [r3, #8]
        LastWrite = STM32_GetTick();
 80065f4:	f7ff fbbe 	bl	8005d74 <STM32_GetTick>
 80065f8:	0002      	movs	r2, r0
 80065fa:	4b18      	ldr	r3, [pc, #96]	; (800665c <ProcessI2C2+0x4d8>)
 80065fc:	601a      	str	r2, [r3, #0]
    }
    break;
 80065fe:	e01c      	b.n	800663a <ProcessI2C2+0x4b6>
  default:
    Error_Handler(FILE_I2C, __LINE__);
 8006600:	23b8      	movs	r3, #184	; 0xb8
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	0019      	movs	r1, r3
 8006606:	2011      	movs	r0, #17
 8006608:	f7fd fee4 	bl	80043d4 <Error_Handler>
    break;
 800660c:	e016      	b.n	800663c <ProcessI2C2+0x4b8>
        break;
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	e014      	b.n	800663c <ProcessI2C2+0x4b8>
        break;
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	e012      	b.n	800663c <ProcessI2C2+0x4b8>
        break;
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	e010      	b.n	800663c <ProcessI2C2+0x4b8>
        break;
 800661a:	46c0      	nop			; (mov r8, r8)
 800661c:	e00e      	b.n	800663c <ProcessI2C2+0x4b8>
        break;
 800661e:	46c0      	nop			; (mov r8, r8)
 8006620:	e00c      	b.n	800663c <ProcessI2C2+0x4b8>
        break;
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	e00a      	b.n	800663c <ProcessI2C2+0x4b8>
    break;
 8006626:	46c0      	nop			; (mov r8, r8)
 8006628:	e008      	b.n	800663c <ProcessI2C2+0x4b8>
    break;
 800662a:	46c0      	nop			; (mov r8, r8)
 800662c:	e006      	b.n	800663c <ProcessI2C2+0x4b8>
    break;
 800662e:	46c0      	nop			; (mov r8, r8)
 8006630:	e004      	b.n	800663c <ProcessI2C2+0x4b8>
    break;
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	e002      	b.n	800663c <ProcessI2C2+0x4b8>
    break;
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	e000      	b.n	800663c <ProcessI2C2+0x4b8>
    break;
 800663a:	46c0      	nop			; (mov r8, r8)
  }

  ExecutionEnd(EXECUTION_PROCESS_I2C2);
 800663c:	2010      	movs	r0, #16
 800663e:	f7fd ffff 	bl	8004640 <ExecutionEnd>
}
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	46bd      	mov	sp, r7
 8006646:	b001      	add	sp, #4
 8006648:	bd90      	pop	{r4, r7, pc}
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	40005800 	.word	0x40005800
 8006650:	20001c24 	.word	0x20001c24
 8006654:	fe00e800 	.word	0xfe00e800
 8006658:	48000800 	.word	0x48000800
 800665c:	20000a28 	.word	0x20000a28

08006660 <ProcessResistanceOutputControl>:
//
// Params:    None
//
// Returns:   None
//
static void ProcessResistanceOutputControl(void) {
 8006660:	b590      	push	{r4, r7, lr}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0

    int32_t           Error, PwmPerOhm;
    static int32_t    UpdateDelayTimer, OldFeedback, P, D, DelayTimer;
    static int64_t    I;

    if (bRVUpdate != 0) {
 8006666:	4b5f      	ldr	r3, [pc, #380]	; (80067e4 <ProcessResistanceOutputControl+0x184>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d100      	bne.n	8006670 <ProcessResistanceOutputControl+0x10>
 800666e:	e0b6      	b.n	80067de <ProcessResistanceOutputControl+0x17e>
        bRVUpdate = FALSE;
 8006670:	4b5c      	ldr	r3, [pc, #368]	; (80067e4 <ProcessResistanceOutputControl+0x184>)
 8006672:	2200      	movs	r2, #0
 8006674:	701a      	strb	r2, [r3, #0]

        DelayTimer++;
 8006676:	4b5c      	ldr	r3, [pc, #368]	; (80067e8 <ProcessResistanceOutputControl+0x188>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	4b5a      	ldr	r3, [pc, #360]	; (80067e8 <ProcessResistanceOutputControl+0x188>)
 800667e:	601a      	str	r2, [r3, #0]
        if (DelayTimer < 5) {
 8006680:	4b59      	ldr	r3, [pc, #356]	; (80067e8 <ProcessResistanceOutputControl+0x188>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b04      	cmp	r3, #4
 8006686:	dc00      	bgt.n	800668a <ProcessResistanceOutputControl+0x2a>
 8006688:	e0a8      	b.n	80067dc <ProcessResistanceOutputControl+0x17c>
            return;
        }
        DelayTimer = 0;
 800668a:	4b57      	ldr	r3, [pc, #348]	; (80067e8 <ProcessResistanceOutputControl+0x188>)
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]

        SysVars.PwmDutyCycleFineTune = 0;
 8006690:	4b56      	ldr	r3, [pc, #344]	; (80067ec <ProcessResistanceOutputControl+0x18c>)
 8006692:	22bc      	movs	r2, #188	; 0xbc
 8006694:	2100      	movs	r1, #0
 8006696:	5099      	str	r1, [r3, r2]
        PwmPerOhm = 100;
 8006698:	2364      	movs	r3, #100	; 0x64
 800669a:	607b      	str	r3, [r7, #4]
        if ((SysVars.RVFeedback != 0) && (SysVars.PwmDutyCycle != 0)) {
 800669c:	4b53      	ldr	r3, [pc, #332]	; (80067ec <ProcessResistanceOutputControl+0x18c>)
 800669e:	22b4      	movs	r2, #180	; 0xb4
 80066a0:	589b      	ldr	r3, [r3, r2]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d011      	beq.n	80066ca <ProcessResistanceOutputControl+0x6a>
 80066a6:	4b51      	ldr	r3, [pc, #324]	; (80067ec <ProcessResistanceOutputControl+0x18c>)
 80066a8:	22b8      	movs	r2, #184	; 0xb8
 80066aa:	589b      	ldr	r3, [r3, r2]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00c      	beq.n	80066ca <ProcessResistanceOutputControl+0x6a>
            PwmPerOhm = MultDivideWithRounding64(SysVars.PwmDutyCycle, 10000, SysVars.RVFeedback, RESULT_32);
 80066b0:	4b4e      	ldr	r3, [pc, #312]	; (80067ec <ProcessResistanceOutputControl+0x18c>)
 80066b2:	22b8      	movs	r2, #184	; 0xb8
 80066b4:	5898      	ldr	r0, [r3, r2]
 80066b6:	4b4d      	ldr	r3, [pc, #308]	; (80067ec <ProcessResistanceOutputControl+0x18c>)
 80066b8:	22b4      	movs	r2, #180	; 0xb4
 80066ba:	589a      	ldr	r2, [r3, r2]
 80066bc:	494c      	ldr	r1, [pc, #304]	; (80067f0 <ProcessResistanceOutputControl+0x190>)
 80066be:	2302      	movs	r3, #2
 80066c0:	f001 fc5c 	bl	8007f7c <MultDivideWithRounding64>
 80066c4:	0003      	movs	r3, r0
 80066c6:	000c      	movs	r4, r1
 80066c8:	607b      	str	r3, [r7, #4]
        }
        Error = SysVars.RVSetpoint - SysVars.RVFeedback;
 80066ca:	4b48      	ldr	r3, [pc, #288]	; (80067ec <ProcessResistanceOutputControl+0x18c>)
 80066cc:	22b0      	movs	r2, #176	; 0xb0
 80066ce:	589a      	ldr	r2, [r3, r2]
 80066d0:	4b46      	ldr	r3, [pc, #280]	; (80067ec <ProcessResistanceOutputControl+0x18c>)
 80066d2:	21b4      	movs	r1, #180	; 0xb4
 80066d4:	585b      	ldr	r3, [r3, r1]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	603b      	str	r3, [r7, #0]
        P = MultDivideWithRounding64(Error, PwmPerOhm, 40000, RESULT_32);
 80066da:	4a46      	ldr	r2, [pc, #280]	; (80067f4 <ProcessResistanceOutputControl+0x194>)
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	6838      	ldr	r0, [r7, #0]
 80066e0:	2302      	movs	r3, #2
 80066e2:	f001 fc4b 	bl	8007f7c <MultDivideWithRounding64>
 80066e6:	0003      	movs	r3, r0
 80066e8:	000c      	movs	r4, r1
 80066ea:	001a      	movs	r2, r3
 80066ec:	4b42      	ldr	r3, [pc, #264]	; (80067f8 <ProcessResistanceOutputControl+0x198>)
 80066ee:	601a      	str	r2, [r3, #0]
        I += MultDivideWithRounding64(Error, PwmPerOhm, 100, RESULT_64);     //  xxx.xxxxxx
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	6838      	ldr	r0, [r7, #0]
 80066f4:	2303      	movs	r3, #3
 80066f6:	2264      	movs	r2, #100	; 0x64
 80066f8:	f001 fc40 	bl	8007f7c <MultDivideWithRounding64>
 80066fc:	000a      	movs	r2, r1
 80066fe:	0001      	movs	r1, r0
 8006700:	4b3e      	ldr	r3, [pc, #248]	; (80067fc <ProcessResistanceOutputControl+0x19c>)
 8006702:	685c      	ldr	r4, [r3, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	185b      	adds	r3, r3, r1
 8006708:	4154      	adcs	r4, r2
 800670a:	4a3c      	ldr	r2, [pc, #240]	; (80067fc <ProcessResistanceOutputControl+0x19c>)
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	6054      	str	r4, [r2, #4]

        if (I < 0) {
 8006710:	4b3a      	ldr	r3, [pc, #232]	; (80067fc <ProcessResistanceOutputControl+0x19c>)
 8006712:	685c      	ldr	r4, [r3, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2c00      	cmp	r4, #0
 8006718:	da04      	bge.n	8006724 <ProcessResistanceOutputControl+0xc4>
            I = 0;
 800671a:	4a38      	ldr	r2, [pc, #224]	; (80067fc <ProcessResistanceOutputControl+0x19c>)
 800671c:	2300      	movs	r3, #0
 800671e:	2400      	movs	r4, #0
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	6054      	str	r4, [r2, #4]
        }
        if (I > (PWM_MAX_DUTY_CYCLE * 1000)) {
 8006724:	4b35      	ldr	r3, [pc, #212]	; (80067fc <ProcessResistanceOutputControl+0x19c>)
 8006726:	685c      	ldr	r4, [r3, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2c00      	cmp	r4, #0
 800672c:	dc03      	bgt.n	8006736 <ProcessResistanceOutputControl+0xd6>
 800672e:	d107      	bne.n	8006740 <ProcessResistanceOutputControl+0xe0>
 8006730:	4a33      	ldr	r2, [pc, #204]	; (8006800 <ProcessResistanceOutputControl+0x1a0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d904      	bls.n	8006740 <ProcessResistanceOutputControl+0xe0>
            I = PWM_MAX_DUTY_CYCLE * 1000;
 8006736:	4a31      	ldr	r2, [pc, #196]	; (80067fc <ProcessResistanceOutputControl+0x19c>)
 8006738:	4b31      	ldr	r3, [pc, #196]	; (8006800 <ProcessResistanceOutputControl+0x1a0>)
 800673a:	2400      	movs	r4, #0
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	6054      	str	r4, [r2, #4]
        }

        UpdateDelayTimer++;
 8006740:	4b30      	ldr	r3, [pc, #192]	; (8006804 <ProcessResistanceOutputControl+0x1a4>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	4b2f      	ldr	r3, [pc, #188]	; (8006804 <ProcessResistanceOutputControl+0x1a4>)
 8006748:	601a      	str	r2, [r3, #0]
        if (UpdateDelayTimer >= 2) {
 800674a:	4b2e      	ldr	r3, [pc, #184]	; (8006804 <ProcessResistanceOutputControl+0x1a4>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b01      	cmp	r3, #1
 8006750:	dd1b      	ble.n	800678a <ProcessResistanceOutputControl+0x12a>
            UpdateDelayTimer = 0;
 8006752:	4b2c      	ldr	r3, [pc, #176]	; (8006804 <ProcessResistanceOutputControl+0x1a4>)
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]
            D = ((SysVars.RVFeedback - OldFeedback) * 10) / 1000;
 8006758:	4b24      	ldr	r3, [pc, #144]	; (80067ec <ProcessResistanceOutputControl+0x18c>)
 800675a:	22b4      	movs	r2, #180	; 0xb4
 800675c:	589a      	ldr	r2, [r3, r2]
 800675e:	4b2a      	ldr	r3, [pc, #168]	; (8006808 <ProcessResistanceOutputControl+0x1a8>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	1ad2      	subs	r2, r2, r3
 8006764:	0013      	movs	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	189b      	adds	r3, r3, r2
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	001a      	movs	r2, r3
 800676e:	23fa      	movs	r3, #250	; 0xfa
 8006770:	0099      	lsls	r1, r3, #2
 8006772:	0010      	movs	r0, r2
 8006774:	f7f9 fdb6 	bl	80002e4 <__divsi3>
 8006778:	0003      	movs	r3, r0
 800677a:	001a      	movs	r2, r3
 800677c:	4b23      	ldr	r3, [pc, #140]	; (800680c <ProcessResistanceOutputControl+0x1ac>)
 800677e:	601a      	str	r2, [r3, #0]
            OldFeedback = SysVars.RVFeedback;
 8006780:	4b1a      	ldr	r3, [pc, #104]	; (80067ec <ProcessResistanceOutputControl+0x18c>)
 8006782:	22b4      	movs	r2, #180	; 0xb4
 8006784:	589a      	ldr	r2, [r3, r2]
 8006786:	4b20      	ldr	r3, [pc, #128]	; (8006808 <ProcessResistanceOutputControl+0x1a8>)
 8006788:	601a      	str	r2, [r3, #0]
        }

        SysVars.PwmDutyCycle = P + (uint32_t)(I / 1000) + D;
 800678a:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <ProcessResistanceOutputControl+0x19c>)
 800678c:	6818      	ldr	r0, [r3, #0]
 800678e:	6859      	ldr	r1, [r3, #4]
 8006790:	22fa      	movs	r2, #250	; 0xfa
 8006792:	0092      	lsls	r2, r2, #2
 8006794:	2300      	movs	r3, #0
 8006796:	f7f9 fe91 	bl	80004bc <__aeabi_ldivmod>
 800679a:	0003      	movs	r3, r0
 800679c:	000c      	movs	r4, r1
 800679e:	001a      	movs	r2, r3
 80067a0:	4b15      	ldr	r3, [pc, #84]	; (80067f8 <ProcessResistanceOutputControl+0x198>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	18d2      	adds	r2, r2, r3
 80067a6:	4b19      	ldr	r3, [pc, #100]	; (800680c <ProcessResistanceOutputControl+0x1ac>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	18d3      	adds	r3, r2, r3
 80067ac:	0019      	movs	r1, r3
 80067ae:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <ProcessResistanceOutputControl+0x18c>)
 80067b0:	22b8      	movs	r2, #184	; 0xb8
 80067b2:	5099      	str	r1, [r3, r2]
        if (SysVars.PwmDutyCycle > PWM_MAX_DUTY_CYCLE) {
 80067b4:	4b0d      	ldr	r3, [pc, #52]	; (80067ec <ProcessResistanceOutputControl+0x18c>)
 80067b6:	22b8      	movs	r2, #184	; 0xb8
 80067b8:	589b      	ldr	r3, [r3, r2]
 80067ba:	4a15      	ldr	r2, [pc, #84]	; (8006810 <ProcessResistanceOutputControl+0x1b0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	dd03      	ble.n	80067c8 <ProcessResistanceOutputControl+0x168>
            SysVars.PwmDutyCycle = PWM_MAX_DUTY_CYCLE;
 80067c0:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <ProcessResistanceOutputControl+0x18c>)
 80067c2:	22b8      	movs	r2, #184	; 0xb8
 80067c4:	4912      	ldr	r1, [pc, #72]	; (8006810 <ProcessResistanceOutputControl+0x1b0>)
 80067c6:	5099      	str	r1, [r3, r2]
        }
        if (SysVars.PwmDutyCycle < 0) {
 80067c8:	4b08      	ldr	r3, [pc, #32]	; (80067ec <ProcessResistanceOutputControl+0x18c>)
 80067ca:	22b8      	movs	r2, #184	; 0xb8
 80067cc:	589b      	ldr	r3, [r3, r2]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	da05      	bge.n	80067de <ProcessResistanceOutputControl+0x17e>
            SysVars.PwmDutyCycle = 0;
 80067d2:	4b06      	ldr	r3, [pc, #24]	; (80067ec <ProcessResistanceOutputControl+0x18c>)
 80067d4:	22b8      	movs	r2, #184	; 0xb8
 80067d6:	2100      	movs	r1, #0
 80067d8:	5099      	str	r1, [r3, r2]
 80067da:	e000      	b.n	80067de <ProcessResistanceOutputControl+0x17e>
            return;
 80067dc:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80067de:	46bd      	mov	sp, r7
 80067e0:	b003      	add	sp, #12
 80067e2:	bd90      	pop	{r4, r7, pc}
 80067e4:	20001c54 	.word	0x20001c54
 80067e8:	20000a2c 	.word	0x20000a2c
 80067ec:	200020c0 	.word	0x200020c0
 80067f0:	00002710 	.word	0x00002710
 80067f4:	00009c40 	.word	0x00009c40
 80067f8:	20000a30 	.word	0x20000a30
 80067fc:	20000a38 	.word	0x20000a38
 8006800:	05f5e100 	.word	0x05f5e100
 8006804:	20000a40 	.word	0x20000a40
 8006808:	20000a44 	.word	0x20000a44
 800680c:	20000a48 	.word	0x20000a48
 8006810:	000186a0 	.word	0x000186a0

08006814 <ProcessVoltageOutputControl>:
//
// Params:    None
//
// Returns:   None
//
static void ProcessVoltageOutputControl(void) {
 8006814:	b590      	push	{r4, r7, lr}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
  int32_t NewDutyCycle;
  static uint8_t FineTuneDelay;
  //
  // 100000 = 100.000 %
  //
  NewDutyCycle = MultDivideWithRounding64(SysVars.RVSetpoint, FactoryConfiguration->Calibration33 * 3011, FactoryConfiguration->PwmOutputKFactor * 100, RESULT_32);
 800681a:	4b49      	ldr	r3, [pc, #292]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 800681c:	22b0      	movs	r2, #176	; 0xb0
 800681e:	5898      	ldr	r0, [r3, r2]
 8006820:	4b48      	ldr	r3, [pc, #288]	; (8006944 <ProcessVoltageOutputControl+0x130>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a48      	ldr	r2, [pc, #288]	; (8006948 <ProcessVoltageOutputControl+0x134>)
 8006828:	435a      	muls	r2, r3
 800682a:	0011      	movs	r1, r2
 800682c:	4b45      	ldr	r3, [pc, #276]	; (8006944 <ProcessVoltageOutputControl+0x130>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	2264      	movs	r2, #100	; 0x64
 8006834:	435a      	muls	r2, r3
 8006836:	2302      	movs	r3, #2
 8006838:	f001 fba0 	bl	8007f7c <MultDivideWithRounding64>
 800683c:	0003      	movs	r3, r0
 800683e:	000c      	movs	r4, r1
 8006840:	607b      	str	r3, [r7, #4]
  //
  // In case of calibration error, fine tune PWM Duty Cycle
  //
  FineTuneDelay++;
 8006842:	4b42      	ldr	r3, [pc, #264]	; (800694c <ProcessVoltageOutputControl+0x138>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	3301      	adds	r3, #1
 8006848:	b2da      	uxtb	r2, r3
 800684a:	4b40      	ldr	r3, [pc, #256]	; (800694c <ProcessVoltageOutputControl+0x138>)
 800684c:	701a      	strb	r2, [r3, #0]
  if (FineTuneDelay > 5) {             // 50mS
 800684e:	4b3f      	ldr	r3, [pc, #252]	; (800694c <ProcessVoltageOutputControl+0x138>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b05      	cmp	r3, #5
 8006854:	d954      	bls.n	8006900 <ProcessVoltageOutputControl+0xec>
    FineTuneDelay = 0;
 8006856:	4b3d      	ldr	r3, [pc, #244]	; (800694c <ProcessVoltageOutputControl+0x138>)
 8006858:	2200      	movs	r2, #0
 800685a:	701a      	strb	r2, [r3, #0]

    if (((SysVars.RVSetpoint > SysVars.RVFeedback) && (SysVars.PwmDutyCycle < PWM_MAX_DUTY_CYCLE)) || ((SysVars.PwmDutyCycle + SysVars.PwmDutyCycleFineTune) < 0)) {
 800685c:	4b38      	ldr	r3, [pc, #224]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 800685e:	22b0      	movs	r2, #176	; 0xb0
 8006860:	589a      	ldr	r2, [r3, r2]
 8006862:	4b37      	ldr	r3, [pc, #220]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 8006864:	21b4      	movs	r1, #180	; 0xb4
 8006866:	585b      	ldr	r3, [r3, r1]
 8006868:	429a      	cmp	r2, r3
 800686a:	dd05      	ble.n	8006878 <ProcessVoltageOutputControl+0x64>
 800686c:	4b34      	ldr	r3, [pc, #208]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 800686e:	22b8      	movs	r2, #184	; 0xb8
 8006870:	589b      	ldr	r3, [r3, r2]
 8006872:	4a37      	ldr	r2, [pc, #220]	; (8006950 <ProcessVoltageOutputControl+0x13c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	dd08      	ble.n	800688a <ProcessVoltageOutputControl+0x76>
 8006878:	4b31      	ldr	r3, [pc, #196]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 800687a:	22b8      	movs	r2, #184	; 0xb8
 800687c:	589a      	ldr	r2, [r3, r2]
 800687e:	4b30      	ldr	r3, [pc, #192]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 8006880:	21bc      	movs	r1, #188	; 0xbc
 8006882:	585b      	ldr	r3, [r3, r1]
 8006884:	18d3      	adds	r3, r2, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	da06      	bge.n	8006898 <ProcessVoltageOutputControl+0x84>
      SysVars.PwmDutyCycleFineTune++;
 800688a:	4b2d      	ldr	r3, [pc, #180]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 800688c:	22bc      	movs	r2, #188	; 0xbc
 800688e:	589b      	ldr	r3, [r3, r2]
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	4b2b      	ldr	r3, [pc, #172]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 8006894:	21bc      	movs	r1, #188	; 0xbc
 8006896:	505a      	str	r2, [r3, r1]
    }
    if (((SysVars.RVSetpoint < SysVars.RVFeedback) && (SysVars.PwmDutyCycle > 0)) || ((SysVars.PwmDutyCycle + SysVars.PwmDutyCycleFineTune) > PWM_MAX_DUTY_CYCLE)) {
 8006898:	4b29      	ldr	r3, [pc, #164]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 800689a:	22b0      	movs	r2, #176	; 0xb0
 800689c:	589a      	ldr	r2, [r3, r2]
 800689e:	4b28      	ldr	r3, [pc, #160]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 80068a0:	21b4      	movs	r1, #180	; 0xb4
 80068a2:	585b      	ldr	r3, [r3, r1]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	da04      	bge.n	80068b2 <ProcessVoltageOutputControl+0x9e>
 80068a8:	4b25      	ldr	r3, [pc, #148]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 80068aa:	22b8      	movs	r2, #184	; 0xb8
 80068ac:	589b      	ldr	r3, [r3, r2]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	dc09      	bgt.n	80068c6 <ProcessVoltageOutputControl+0xb2>
 80068b2:	4b23      	ldr	r3, [pc, #140]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 80068b4:	22b8      	movs	r2, #184	; 0xb8
 80068b6:	589a      	ldr	r2, [r3, r2]
 80068b8:	4b21      	ldr	r3, [pc, #132]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 80068ba:	21bc      	movs	r1, #188	; 0xbc
 80068bc:	585b      	ldr	r3, [r3, r1]
 80068be:	18d3      	adds	r3, r2, r3
 80068c0:	4a24      	ldr	r2, [pc, #144]	; (8006954 <ProcessVoltageOutputControl+0x140>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	dd06      	ble.n	80068d4 <ProcessVoltageOutputControl+0xc0>
      SysVars.PwmDutyCycleFineTune--;
 80068c6:	4b1e      	ldr	r3, [pc, #120]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 80068c8:	22bc      	movs	r2, #188	; 0xbc
 80068ca:	589b      	ldr	r3, [r3, r2]
 80068cc:	1e5a      	subs	r2, r3, #1
 80068ce:	4b1c      	ldr	r3, [pc, #112]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 80068d0:	21bc      	movs	r1, #188	; 0xbc
 80068d2:	505a      	str	r2, [r3, r1]
    }
    //
    // Limit range of Fine Tuning
    //
    if (SysVars.PwmDutyCycleFineTune > 500) {
 80068d4:	4b1a      	ldr	r3, [pc, #104]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 80068d6:	22bc      	movs	r2, #188	; 0xbc
 80068d8:	589a      	ldr	r2, [r3, r2]
 80068da:	23fa      	movs	r3, #250	; 0xfa
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	429a      	cmp	r2, r3
 80068e0:	dd04      	ble.n	80068ec <ProcessVoltageOutputControl+0xd8>
      SysVars.PwmDutyCycleFineTune = 500;
 80068e2:	4b17      	ldr	r3, [pc, #92]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 80068e4:	21bc      	movs	r1, #188	; 0xbc
 80068e6:	22fa      	movs	r2, #250	; 0xfa
 80068e8:	0052      	lsls	r2, r2, #1
 80068ea:	505a      	str	r2, [r3, r1]
    }
    if (SysVars.PwmDutyCycleFineTune < -500) {
 80068ec:	4b14      	ldr	r3, [pc, #80]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 80068ee:	22bc      	movs	r2, #188	; 0xbc
 80068f0:	589b      	ldr	r3, [r3, r2]
 80068f2:	4a19      	ldr	r2, [pc, #100]	; (8006958 <ProcessVoltageOutputControl+0x144>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	da03      	bge.n	8006900 <ProcessVoltageOutputControl+0xec>
      SysVars.PwmDutyCycleFineTune = -500;
 80068f8:	4b11      	ldr	r3, [pc, #68]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 80068fa:	22bc      	movs	r2, #188	; 0xbc
 80068fc:	4916      	ldr	r1, [pc, #88]	; (8006958 <ProcessVoltageOutputControl+0x144>)
 80068fe:	5099      	str	r1, [r3, r2]
    }

  }

  SysVars.PwmDutyCycle = NewDutyCycle + SysVars.PwmDutyCycleFineTune;
 8006900:	4b0f      	ldr	r3, [pc, #60]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 8006902:	22bc      	movs	r2, #188	; 0xbc
 8006904:	589a      	ldr	r2, [r3, r2]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	18d2      	adds	r2, r2, r3
 800690a:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 800690c:	21b8      	movs	r1, #184	; 0xb8
 800690e:	505a      	str	r2, [r3, r1]
  if (SysVars.PwmDutyCycle > PWM_MAX_DUTY_CYCLE) {
 8006910:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 8006912:	22b8      	movs	r2, #184	; 0xb8
 8006914:	589b      	ldr	r3, [r3, r2]
 8006916:	4a0f      	ldr	r2, [pc, #60]	; (8006954 <ProcessVoltageOutputControl+0x140>)
 8006918:	4293      	cmp	r3, r2
 800691a:	dd03      	ble.n	8006924 <ProcessVoltageOutputControl+0x110>
    SysVars.PwmDutyCycle = PWM_MAX_DUTY_CYCLE;
 800691c:	4b08      	ldr	r3, [pc, #32]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 800691e:	22b8      	movs	r2, #184	; 0xb8
 8006920:	490c      	ldr	r1, [pc, #48]	; (8006954 <ProcessVoltageOutputControl+0x140>)
 8006922:	5099      	str	r1, [r3, r2]
  }
  if (SysVars.PwmDutyCycle < 0) {
 8006924:	4b06      	ldr	r3, [pc, #24]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 8006926:	22b8      	movs	r2, #184	; 0xb8
 8006928:	589b      	ldr	r3, [r3, r2]
 800692a:	2b00      	cmp	r3, #0
 800692c:	da03      	bge.n	8006936 <ProcessVoltageOutputControl+0x122>
    SysVars.PwmDutyCycle = 0;
 800692e:	4b04      	ldr	r3, [pc, #16]	; (8006940 <ProcessVoltageOutputControl+0x12c>)
 8006930:	22b8      	movs	r2, #184	; 0xb8
 8006932:	2100      	movs	r1, #0
 8006934:	5099      	str	r1, [r3, r2]
  }
}
 8006936:	46c0      	nop			; (mov r8, r8)
 8006938:	46bd      	mov	sp, r7
 800693a:	b003      	add	sp, #12
 800693c:	bd90      	pop	{r4, r7, pc}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	200020c0 	.word	0x200020c0
 8006944:	20001eec 	.word	0x20001eec
 8006948:	00000bc3 	.word	0x00000bc3
 800694c:	20000a4c 	.word	0x20000a4c
 8006950:	0001869f 	.word	0x0001869f
 8006954:	000186a0 	.word	0x000186a0
 8006958:	fffffe0c 	.word	0xfffffe0c

0800695c <ProcessMasterIndex>:
//
// Params:    None
//
// Returns:   None
//
void ProcessMasterIndex(void) {
 800695c:	b5b0      	push	{r4, r5, r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0

  int16_t i;
  int32_t SetpointRange, IndexRange;

  ExecutionStart(EXECUTION_PROCESS_MASTER_INDEX);
 8006962:	2005      	movs	r0, #5
 8006964:	f7fd fe52 	bl	800460c <ExecutionStart>

  //
  // Calculate Master Index value.
  //  Master Index = KMAIndex + all the Slave Indexes
  //
  SysVars.MasterIndex = SysVars.KmaIndex;
 8006968:	4be2      	ldr	r3, [pc, #904]	; (8006cf4 <ProcessMasterIndex+0x398>)
 800696a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696c:	4be1      	ldr	r3, [pc, #900]	; (8006cf4 <ProcessMasterIndex+0x398>)
 800696e:	2198      	movs	r1, #152	; 0x98
 8006970:	505a      	str	r2, [r3, r1]

  //
  //  KMA Index:  4.00 to 1023.00
  //
  SysVars.SetpointIndex = SysVars.MasterIndex;
 8006972:	4be0      	ldr	r3, [pc, #896]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006974:	2298      	movs	r2, #152	; 0x98
 8006976:	589a      	ldr	r2, [r3, r2]
 8006978:	4bde      	ldr	r3, [pc, #888]	; (8006cf4 <ProcessMasterIndex+0x398>)
 800697a:	21a8      	movs	r1, #168	; 0xa8
 800697c:	505a      	str	r2, [r3, r1]
  //
  // NOTE:  bManualSetpointEnable is set in serial.c
  //
  if (HostData.bManualSetpointEnable != 0) {
 800697e:	4bde      	ldr	r3, [pc, #888]	; (8006cf8 <ProcessMasterIndex+0x39c>)
 8006980:	785b      	ldrb	r3, [r3, #1]
 8006982:	2204      	movs	r2, #4
 8006984:	4013      	ands	r3, r2
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <ProcessMasterIndex+0x3a>
    SysVars.SetpointIndex = HostData.ManualSetpoint;
 800698c:	4bda      	ldr	r3, [pc, #872]	; (8006cf8 <ProcessMasterIndex+0x39c>)
 800698e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006990:	4bd8      	ldr	r3, [pc, #864]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006992:	21a8      	movs	r1, #168	; 0xa8
 8006994:	505a      	str	r2, [r3, r1]
  }

  if (SysVars.SetpointIndex < MIN_INDEX) {
 8006996:	4bd7      	ldr	r3, [pc, #860]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006998:	22a8      	movs	r2, #168	; 0xa8
 800699a:	589a      	ldr	r2, [r3, r2]
 800699c:	2390      	movs	r3, #144	; 0x90
 800699e:	33ff      	adds	r3, #255	; 0xff
 80069a0:	429a      	cmp	r2, r3
 80069a2:	dc04      	bgt.n	80069ae <ProcessMasterIndex+0x52>
    SysVars.SetpointIndex = MIN_INDEX;
 80069a4:	4bd3      	ldr	r3, [pc, #844]	; (8006cf4 <ProcessMasterIndex+0x398>)
 80069a6:	21a8      	movs	r1, #168	; 0xa8
 80069a8:	22c8      	movs	r2, #200	; 0xc8
 80069aa:	0052      	lsls	r2, r2, #1
 80069ac:	505a      	str	r2, [r3, r1]
  }
  if (SysVars.SetpointIndex > MAX_INDEX) {
 80069ae:	4bd1      	ldr	r3, [pc, #836]	; (8006cf4 <ProcessMasterIndex+0x398>)
 80069b0:	22a8      	movs	r2, #168	; 0xa8
 80069b2:	589b      	ldr	r3, [r3, r2]
 80069b4:	4ad1      	ldr	r2, [pc, #836]	; (8006cfc <ProcessMasterIndex+0x3a0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	dd03      	ble.n	80069c2 <ProcessMasterIndex+0x66>
    SysVars.SetpointIndex = MAX_INDEX;
 80069ba:	4bce      	ldr	r3, [pc, #824]	; (8006cf4 <ProcessMasterIndex+0x398>)
 80069bc:	22a8      	movs	r2, #168	; 0xa8
 80069be:	49cf      	ldr	r1, [pc, #828]	; (8006cfc <ProcessMasterIndex+0x3a0>)
 80069c0:	5099      	str	r1, [r3, r2]
  //
  // If the DIG_IO assigned as a Test Input is active (high), then set SetpointIndex to full scale (Index = 400 x.xx)
  //
  // NOTE:  TestInput is calculated in testinput.c
  //
  if (SysVars.TestInput != 0) {
 80069c2:	4bcc      	ldr	r3, [pc, #816]	; (8006cf4 <ProcessMasterIndex+0x398>)
 80069c4:	22d0      	movs	r2, #208	; 0xd0
 80069c6:	589b      	ldr	r3, [r3, r2]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <ProcessMasterIndex+0x7a>
    SysVars.SetpointIndex = MIN_INDEX;
 80069cc:	4bc9      	ldr	r3, [pc, #804]	; (8006cf4 <ProcessMasterIndex+0x398>)
 80069ce:	21a8      	movs	r1, #168	; 0xa8
 80069d0:	22c8      	movs	r2, #200	; 0xc8
 80069d2:	0052      	lsls	r2, r2, #1
 80069d4:	505a      	str	r2, [r3, r1]
  }
  //
  // If the Startup routine is not finished, all outputs go to their minimums
  //
  if (SysVars.bStartupComplete == 0) {
 80069d6:	4bc7      	ldr	r3, [pc, #796]	; (8006cf4 <ProcessMasterIndex+0x398>)
 80069d8:	22fa      	movs	r2, #250	; 0xfa
 80069da:	5c9b      	ldrb	r3, [r3, r2]
 80069dc:	2201      	movs	r2, #1
 80069de:	4013      	ands	r3, r2
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d104      	bne.n	80069f0 <ProcessMasterIndex+0x94>
    SysVars.SetpointIndex = MIN_INDEX;
 80069e6:	4bc3      	ldr	r3, [pc, #780]	; (8006cf4 <ProcessMasterIndex+0x398>)
 80069e8:	21a8      	movs	r1, #168	; 0xa8
 80069ea:	22c8      	movs	r2, #200	; 0xc8
 80069ec:	0052      	lsls	r2, r2, #1
 80069ee:	505a      	str	r2, [r3, r1]
  }

  if (bFlashConfigurationValid != 0) {
 80069f0:	4bc3      	ldr	r3, [pc, #780]	; (8006d00 <ProcessMasterIndex+0x3a4>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d100      	bne.n	80069fa <ProcessMasterIndex+0x9e>
 80069f8:	e0fc      	b.n	8006bf4 <ProcessMasterIndex+0x298>
    //    Index   Setpoint    // Number of entries is 2 to 32
    //      4       xxx
    //      ...     ...
    //      1023    xxx
    //
    for (i = 1; i < FlashConfiguration->SetpointTable.TableLength; i++) {
 80069fa:	230e      	movs	r3, #14
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	2201      	movs	r2, #1
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	e06c      	b.n	8006ade <ProcessMasterIndex+0x182>
      if (SysVars.SetpointIndex <= FlashConfiguration->SetpointTable.TablePoint[i].Point1) {
 8006a04:	4bbb      	ldr	r3, [pc, #748]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006a06:	22a8      	movs	r2, #168	; 0xa8
 8006a08:	589a      	ldr	r2, [r3, r2]
 8006a0a:	4bbe      	ldr	r3, [pc, #760]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006a0c:	6819      	ldr	r1, [r3, #0]
 8006a0e:	230e      	movs	r3, #14
 8006a10:	18fb      	adds	r3, r7, r3
 8006a12:	2000      	movs	r0, #0
 8006a14:	5e1b      	ldrsh	r3, [r3, r0]
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	18cb      	adds	r3, r1, r3
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	dc54      	bgt.n	8006acc <ProcessMasterIndex+0x170>
        IndexRange = FlashConfiguration->SetpointTable.TablePoint[i].Point1 - FlashConfiguration->SetpointTable.TablePoint[i - 1].Point1;
 8006a22:	4bb8      	ldr	r3, [pc, #736]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	200e      	movs	r0, #14
 8006a28:	183b      	adds	r3, r7, r0
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	5e5b      	ldrsh	r3, [r3, r1]
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	18d3      	adds	r3, r2, r3
 8006a32:	3304      	adds	r3, #4
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	4bb3      	ldr	r3, [pc, #716]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006a38:	6819      	ldr	r1, [r3, #0]
 8006a3a:	183b      	adds	r3, r7, r0
 8006a3c:	2400      	movs	r4, #0
 8006a3e:	5f1b      	ldrsh	r3, [r3, r4]
 8006a40:	3b01      	subs	r3, #1
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	18cb      	adds	r3, r1, r3
 8006a46:	3304      	adds	r3, #4
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	60bb      	str	r3, [r7, #8]
        SetpointRange = FlashConfiguration->SetpointTable.TablePoint[i].Point2 - FlashConfiguration->SetpointTable.TablePoint[i - 1].Point2;
 8006a4e:	4bad      	ldr	r3, [pc, #692]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	183b      	adds	r3, r7, r0
 8006a54:	2100      	movs	r1, #0
 8006a56:	5e5b      	ldrsh	r3, [r3, r1]
 8006a58:	00db      	lsls	r3, r3, #3
 8006a5a:	18d3      	adds	r3, r2, r3
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	4ba8      	ldr	r3, [pc, #672]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006a62:	6819      	ldr	r1, [r3, #0]
 8006a64:	183b      	adds	r3, r7, r0
 8006a66:	2000      	movs	r0, #0
 8006a68:	5e1b      	ldrsh	r3, [r3, r0]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	00db      	lsls	r3, r3, #3
 8006a6e:	18cb      	adds	r3, r1, r3
 8006a70:	3308      	adds	r3, #8
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	607b      	str	r3, [r7, #4]
        if (IndexRange != 0) {
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d039      	beq.n	8006af2 <ProcessMasterIndex+0x196>
          SysVars.RVSetpoint = MultDivideWithRounding64(SysVars.SetpointIndex - FlashConfiguration->SetpointTable.TablePoint[i - 1].Point1,
 8006a7e:	4b9d      	ldr	r3, [pc, #628]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006a80:	22a8      	movs	r2, #168	; 0xa8
 8006a82:	589a      	ldr	r2, [r3, r2]
 8006a84:	4b9f      	ldr	r3, [pc, #636]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006a86:	6819      	ldr	r1, [r3, #0]
 8006a88:	250e      	movs	r5, #14
 8006a8a:	197b      	adds	r3, r7, r5
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	5e1b      	ldrsh	r3, [r3, r0]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	18cb      	adds	r3, r1, r3
 8006a96:	3304      	adds	r3, #4
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	1ad0      	subs	r0, r2, r3
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	f001 fa6b 	bl	8007f7c <MultDivideWithRounding64>
 8006aa6:	0003      	movs	r3, r0
 8006aa8:	000c      	movs	r4, r1
                             SetpointRange, IndexRange, RESULT_32) + (FlashConfiguration->SetpointTable.TablePoint[i - 1].Point2);
 8006aaa:	0019      	movs	r1, r3
 8006aac:	4b95      	ldr	r3, [pc, #596]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	197b      	adds	r3, r7, r5
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	5e1b      	ldrsh	r3, [r3, r0]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	18d3      	adds	r3, r2, r3
 8006abc:	3308      	adds	r3, #8
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	18cb      	adds	r3, r1, r3
 8006ac2:	0019      	movs	r1, r3
          SysVars.RVSetpoint = MultDivideWithRounding64(SysVars.SetpointIndex - FlashConfiguration->SetpointTable.TablePoint[i - 1].Point1,
 8006ac4:	4b8b      	ldr	r3, [pc, #556]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006ac6:	22b0      	movs	r2, #176	; 0xb0
 8006ac8:	5099      	str	r1, [r3, r2]
        }
        break;
 8006aca:	e012      	b.n	8006af2 <ProcessMasterIndex+0x196>
    for (i = 1; i < FlashConfiguration->SetpointTable.TableLength; i++) {
 8006acc:	210e      	movs	r1, #14
 8006ace:	187b      	adds	r3, r7, r1
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	5e9b      	ldrsh	r3, [r3, r2]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	187b      	adds	r3, r7, r1
 8006adc:	801a      	strh	r2, [r3, #0]
 8006ade:	230e      	movs	r3, #14
 8006ae0:	18fb      	adds	r3, r7, r3
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	5e9a      	ldrsh	r2, [r3, r2]
 8006ae6:	4b87      	ldr	r3, [pc, #540]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	db89      	blt.n	8006a04 <ProcessMasterIndex+0xa8>
 8006af0:	e000      	b.n	8006af4 <ProcessMasterIndex+0x198>
        break;
 8006af2:	46c0      	nop			; (mov r8, r8)
      }
    }
    //
    // Lookup setpoint for Throttle
    //
    for (i = 1; i < FlashConfiguration->CanTable.TableLength; i++) {
 8006af4:	230e      	movs	r3, #14
 8006af6:	18fb      	adds	r3, r7, r3
 8006af8:	2201      	movs	r2, #1
 8006afa:	801a      	strh	r2, [r3, #0]
 8006afc:	e06f      	b.n	8006bde <ProcessMasterIndex+0x282>
      if (SysVars.SetpointIndex <= FlashConfiguration->CanTable.TablePoint[i].Point1) {
 8006afe:	4b7d      	ldr	r3, [pc, #500]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006b00:	22a8      	movs	r2, #168	; 0xa8
 8006b02:	589a      	ldr	r2, [r3, r2]
 8006b04:	4b7f      	ldr	r3, [pc, #508]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006b06:	6819      	ldr	r1, [r3, #0]
 8006b08:	230e      	movs	r3, #14
 8006b0a:	18fb      	adds	r3, r7, r3
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	5e1b      	ldrsh	r3, [r3, r0]
 8006b10:	3345      	adds	r3, #69	; 0x45
 8006b12:	00db      	lsls	r3, r3, #3
 8006b14:	18cb      	adds	r3, r1, r3
 8006b16:	3304      	adds	r3, #4
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	dc56      	bgt.n	8006bcc <ProcessMasterIndex+0x270>
        IndexRange = FlashConfiguration->CanTable.TablePoint[i].Point1 - FlashConfiguration->CanTable.TablePoint[i - 1].Point1;
 8006b1e:	4b79      	ldr	r3, [pc, #484]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	250e      	movs	r5, #14
 8006b24:	197b      	adds	r3, r7, r5
 8006b26:	2100      	movs	r1, #0
 8006b28:	5e5b      	ldrsh	r3, [r3, r1]
 8006b2a:	3345      	adds	r3, #69	; 0x45
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	18d3      	adds	r3, r2, r3
 8006b30:	3304      	adds	r3, #4
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	4b73      	ldr	r3, [pc, #460]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006b36:	6819      	ldr	r1, [r3, #0]
 8006b38:	197b      	adds	r3, r7, r5
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	5e1b      	ldrsh	r3, [r3, r0]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	3345      	adds	r3, #69	; 0x45
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	18cb      	adds	r3, r1, r3
 8006b46:	3304      	adds	r3, #4
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	60bb      	str	r3, [r7, #8]
        SetpointRange = FlashConfiguration->CanTable.TablePoint[i].Point2 - FlashConfiguration->CanTable.TablePoint[i - 1].Point2;
 8006b4e:	4b6d      	ldr	r3, [pc, #436]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	197b      	adds	r3, r7, r5
 8006b54:	2100      	movs	r1, #0
 8006b56:	5e5b      	ldrsh	r3, [r3, r1]
 8006b58:	3345      	adds	r3, #69	; 0x45
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	18d3      	adds	r3, r2, r3
 8006b5e:	3308      	adds	r3, #8
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	4b68      	ldr	r3, [pc, #416]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006b64:	6819      	ldr	r1, [r3, #0]
 8006b66:	197b      	adds	r3, r7, r5
 8006b68:	2000      	movs	r0, #0
 8006b6a:	5e1b      	ldrsh	r3, [r3, r0]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	3345      	adds	r3, #69	; 0x45
 8006b70:	00db      	lsls	r3, r3, #3
 8006b72:	18cb      	adds	r3, r1, r3
 8006b74:	3308      	adds	r3, #8
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	607b      	str	r3, [r7, #4]
        SysVars.CanSetpoint = MultDivideWithRounding64(SysVars.SetpointIndex - FlashConfiguration->CanTable.TablePoint[i - 1].Point1,
 8006b7c:	4b5d      	ldr	r3, [pc, #372]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006b7e:	22a8      	movs	r2, #168	; 0xa8
 8006b80:	589a      	ldr	r2, [r3, r2]
 8006b82:	4b60      	ldr	r3, [pc, #384]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006b84:	6819      	ldr	r1, [r3, #0]
 8006b86:	197b      	adds	r3, r7, r5
 8006b88:	2000      	movs	r0, #0
 8006b8a:	5e1b      	ldrsh	r3, [r3, r0]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	3345      	adds	r3, #69	; 0x45
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	18cb      	adds	r3, r1, r3
 8006b94:	3304      	adds	r3, #4
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	1ad0      	subs	r0, r2, r3
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	f001 f9ec 	bl	8007f7c <MultDivideWithRounding64>
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	000c      	movs	r4, r1
          SetpointRange, IndexRange, RESULT_32) + (FlashConfiguration->CanTable.TablePoint[i - 1].Point2);
 8006ba8:	0019      	movs	r1, r3
 8006baa:	4b56      	ldr	r3, [pc, #344]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	197b      	adds	r3, r7, r5
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	5e1b      	ldrsh	r3, [r3, r0]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	3345      	adds	r3, #69	; 0x45
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	18d3      	adds	r3, r2, r3
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	18cb      	adds	r3, r1, r3
 8006bc2:	0019      	movs	r1, r3
        SysVars.CanSetpoint = MultDivideWithRounding64(SysVars.SetpointIndex - FlashConfiguration->CanTable.TablePoint[i - 1].Point1,
 8006bc4:	4b4b      	ldr	r3, [pc, #300]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006bc6:	22d8      	movs	r2, #216	; 0xd8
 8006bc8:	5099      	str	r1, [r3, r2]
        break;
 8006bca:	e013      	b.n	8006bf4 <ProcessMasterIndex+0x298>
    for (i = 1; i < FlashConfiguration->CanTable.TableLength; i++) {
 8006bcc:	210e      	movs	r1, #14
 8006bce:	187b      	adds	r3, r7, r1
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	5e9b      	ldrsh	r3, [r3, r2]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	187b      	adds	r3, r7, r1
 8006bdc:	801a      	strh	r2, [r3, #0]
 8006bde:	230e      	movs	r3, #14
 8006be0:	18fb      	adds	r3, r7, r3
 8006be2:	2200      	movs	r2, #0
 8006be4:	5e9a      	ldrsh	r2, [r3, r2]
 8006be6:	4b47      	ldr	r3, [pc, #284]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006be8:	6819      	ldr	r1, [r3, #0]
 8006bea:	238a      	movs	r3, #138	; 0x8a
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	58cb      	ldr	r3, [r1, r3]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	db84      	blt.n	8006afe <ProcessMasterIndex+0x1a2>
      }
    }
  }

  if ((bFactoryConfigurationValid != 0) && (bFlashConfigurationValid != 0) && (((FlashConfiguration->RVOutputMode == CONFIG_RV_OUTPUT_MODE_DISABLED) || (FactoryConfiguration->RVOutputPresent == 0)))) {
 8006bf4:	4b44      	ldr	r3, [pc, #272]	; (8006d08 <ProcessMasterIndex+0x3ac>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d026      	beq.n	8006c4a <ProcessMasterIndex+0x2ee>
 8006bfc:	4b40      	ldr	r3, [pc, #256]	; (8006d00 <ProcessMasterIndex+0x3a4>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d022      	beq.n	8006c4a <ProcessMasterIndex+0x2ee>
 8006c04:	4b3f      	ldr	r3, [pc, #252]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	2382      	movs	r3, #130	; 0x82
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	5cd3      	ldrb	r3, [r2, r3]
 8006c0e:	2203      	movs	r2, #3
 8006c10:	4013      	ands	r3, r2
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d007      	beq.n	8006c28 <ProcessMasterIndex+0x2cc>
 8006c18:	4b3c      	ldr	r3, [pc, #240]	; (8006d0c <ProcessMasterIndex+0x3b0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	7f1b      	ldrb	r3, [r3, #28]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	4013      	ands	r3, r2
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d110      	bne.n	8006c4a <ProcessMasterIndex+0x2ee>
    SysVars.RVSetpoint = 0;
 8006c28:	4b32      	ldr	r3, [pc, #200]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006c2a:	22b0      	movs	r2, #176	; 0xb0
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	5099      	str	r1, [r3, r2]
    SysVars.RVFeedback = 0;
 8006c30:	4b30      	ldr	r3, [pc, #192]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006c32:	22b4      	movs	r2, #180	; 0xb4
 8006c34:	2100      	movs	r1, #0
 8006c36:	5099      	str	r1, [r3, r2]
    SysVars.PwmDutyCycle = 0;
 8006c38:	4b2e      	ldr	r3, [pc, #184]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006c3a:	22b8      	movs	r2, #184	; 0xb8
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	5099      	str	r1, [r3, r2]
    SysVars.PwmDutyCycleFineTune = 0;
 8006c40:	4b2c      	ldr	r3, [pc, #176]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006c42:	22bc      	movs	r2, #188	; 0xbc
 8006c44:	2100      	movs	r1, #0
 8006c46:	5099      	str	r1, [r3, r2]
 8006c48:	e03e      	b.n	8006cc8 <ProcessMasterIndex+0x36c>
  }
  else if ((bFlashConfigurationValid != 0) && (FlashConfiguration->RVOutputMode == CONFIG_RV_OUTPUT_MODE_OHMS)) {
 8006c4a:	4b2d      	ldr	r3, [pc, #180]	; (8006d00 <ProcessMasterIndex+0x3a4>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d022      	beq.n	8006c98 <ProcessMasterIndex+0x33c>
 8006c52:	4b2c      	ldr	r3, [pc, #176]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	2382      	movs	r3, #130	; 0x82
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	5cd3      	ldrb	r3, [r2, r3]
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	4013      	ands	r3, r2
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d118      	bne.n	8006c98 <ProcessMasterIndex+0x33c>
    if (SysVars.RVOutputOhms < 1000000) {
 8006c66:	4b23      	ldr	r3, [pc, #140]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006c68:	22a4      	movs	r2, #164	; 0xa4
 8006c6a:	589b      	ldr	r3, [r3, r2]
 8006c6c:	4a28      	ldr	r2, [pc, #160]	; (8006d10 <ProcessMasterIndex+0x3b4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	dc0b      	bgt.n	8006c8a <ProcessMasterIndex+0x32e>
      SysVars.RVFeedback = SysVars.RVOutputOhms * 10;
 8006c72:	4b20      	ldr	r3, [pc, #128]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006c74:	22a4      	movs	r2, #164	; 0xa4
 8006c76:	589a      	ldr	r2, [r3, r2]
 8006c78:	0013      	movs	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	189b      	adds	r3, r3, r2
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	0019      	movs	r1, r3
 8006c82:	4b1c      	ldr	r3, [pc, #112]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006c84:	22b4      	movs	r2, #180	; 0xb4
 8006c86:	5099      	str	r1, [r3, r2]
 8006c88:	e003      	b.n	8006c92 <ProcessMasterIndex+0x336>
    }
    else {
      SysVars.RVFeedback = 10000000;     // Limit to 10000.000 ohms
 8006c8a:	4b1a      	ldr	r3, [pc, #104]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006c8c:	22b4      	movs	r2, #180	; 0xb4
 8006c8e:	4921      	ldr	r1, [pc, #132]	; (8006d14 <ProcessMasterIndex+0x3b8>)
 8006c90:	5099      	str	r1, [r3, r2]
    }
    ProcessResistanceOutputControl();
 8006c92:	f7ff fce5 	bl	8006660 <ProcessResistanceOutputControl>
 8006c96:	e017      	b.n	8006cc8 <ProcessMasterIndex+0x36c>
  }
  else if (FlashConfiguration->RVOutputMode == CONFIG_RV_OUTPUT_MODE_VOLTAGE) {
 8006c98:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	2382      	movs	r3, #130	; 0x82
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	5cd3      	ldrb	r3, [r2, r3]
 8006ca2:	2203      	movs	r2, #3
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d10d      	bne.n	8006cc8 <ProcessMasterIndex+0x36c>
    SysVars.RVFeedback = SysVars.RVOutputVoltage / 10;
 8006cac:	4b11      	ldr	r3, [pc, #68]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006cae:	2288      	movs	r2, #136	; 0x88
 8006cb0:	589b      	ldr	r3, [r3, r2]
 8006cb2:	210a      	movs	r1, #10
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	f7f9 fb15 	bl	80002e4 <__divsi3>
 8006cba:	0003      	movs	r3, r0
 8006cbc:	0019      	movs	r1, r3
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006cc0:	22b4      	movs	r2, #180	; 0xb4
 8006cc2:	5099      	str	r1, [r3, r2]
    ProcessVoltageOutputControl();
 8006cc4:	f7ff fda6 	bl	8006814 <ProcessVoltageOutputControl>
  }
  // Both Throttles need a common setpoint, therefore, set the Local sensor setpoint value
  //
  // Master Frequency output
  //
  if (FlashConfiguration->DefaultOutput == 0 || FlashConfiguration->DefaultOutput == 1) {
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	2389      	movs	r3, #137	; 0x89
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	5cd3      	ldrb	r3, [r2, r3]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d006      	beq.n	8006ce4 <ProcessMasterIndex+0x388>
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <ProcessMasterIndex+0x3a8>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	2389      	movs	r3, #137	; 0x89
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	5cd3      	ldrb	r3, [r2, r3]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d119      	bne.n	8006d18 <ProcessMasterIndex+0x3bc>
    SysVars.ThrottleSetpoint = SysVars.MasterFrequency;
 8006ce4:	4b03      	ldr	r3, [pc, #12]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006ce6:	22a0      	movs	r2, #160	; 0xa0
 8006ce8:	589a      	ldr	r2, [r3, r2]
 8006cea:	4b02      	ldr	r3, [pc, #8]	; (8006cf4 <ProcessMasterIndex+0x398>)
 8006cec:	21e8      	movs	r1, #232	; 0xe8
 8006cee:	505a      	str	r2, [r3, r1]
 8006cf0:	e02d      	b.n	8006d4e <ProcessMasterIndex+0x3f2>
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	200020c0 	.word	0x200020c0
 8006cf8:	20002a14 	.word	0x20002a14
 8006cfc:	00018f9c 	.word	0x00018f9c
 8006d00:	20002cf6 	.word	0x20002cf6
 8006d04:	20002f04 	.word	0x20002f04
 8006d08:	20002f9e 	.word	0x20002f9e
 8006d0c:	20001eec 	.word	0x20001eec
 8006d10:	000f423f 	.word	0x000f423f
 8006d14:	00989680 	.word	0x00989680
  }
  else if (FlashConfiguration->DefaultOutput == 2 || FlashConfiguration->DefaultOutput == 3) {
 8006d18:	4b10      	ldr	r3, [pc, #64]	; (8006d5c <ProcessMasterIndex+0x400>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	2389      	movs	r3, #137	; 0x89
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	5cd3      	ldrb	r3, [r2, r3]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d006      	beq.n	8006d34 <ProcessMasterIndex+0x3d8>
 8006d26:	4b0d      	ldr	r3, [pc, #52]	; (8006d5c <ProcessMasterIndex+0x400>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	2389      	movs	r3, #137	; 0x89
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	5cd3      	ldrb	r3, [r2, r3]
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d106      	bne.n	8006d42 <ProcessMasterIndex+0x3e6>
    SysVars.ThrottleSetpoint = SysVars.RVSetpoint;
 8006d34:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <ProcessMasterIndex+0x404>)
 8006d36:	22b0      	movs	r2, #176	; 0xb0
 8006d38:	589a      	ldr	r2, [r3, r2]
 8006d3a:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <ProcessMasterIndex+0x404>)
 8006d3c:	21e8      	movs	r1, #232	; 0xe8
 8006d3e:	505a      	str	r2, [r3, r1]
 8006d40:	e005      	b.n	8006d4e <ProcessMasterIndex+0x3f2>
  }
  else {
    SysVars.ThrottleSetpoint = SysVars.CanSetpoint;
 8006d42:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <ProcessMasterIndex+0x404>)
 8006d44:	22d8      	movs	r2, #216	; 0xd8
 8006d46:	589a      	ldr	r2, [r3, r2]
 8006d48:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <ProcessMasterIndex+0x404>)
 8006d4a:	21e8      	movs	r1, #232	; 0xe8
 8006d4c:	505a      	str	r2, [r3, r1]
  }


  ExecutionEnd(EXECUTION_PROCESS_MASTER_INDEX);
 8006d4e:	2005      	movs	r0, #5
 8006d50:	f7fd fc76 	bl	8004640 <ExecutionEnd>
}
 8006d54:	46c0      	nop			; (mov r8, r8)
 8006d56:	46bd      	mov	sp, r7
 8006d58:	b004      	add	sp, #16
 8006d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d5c:	20002f04 	.word	0x20002f04
 8006d60:	200020c0 	.word	0x200020c0

08006d64 <STM32_ADC_ConfigChannel>:
// Params:    hadc - ADC specific data structure containing the configuration information for the specified ADC
//            sConfig - ADC configuration structure
//
// Returns:   None
//
static void STM32_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig) {
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]

    hadc->Instance->CHSELR |= 1u << sConfig->Channel;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	629a      	str	r2, [r3, #40]	; 0x28
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695a      	ldr	r2, [r3, #20]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2107      	movs	r1, #7
 8006d90:	438a      	bics	r2, r1
 8006d92:	615a      	str	r2, [r3, #20]
    hadc->Instance->SMPR |= sConfig->SamplingTime & ADC_SMPR_SMP;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6959      	ldr	r1, [r3, #20]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	2207      	movs	r2, #7
 8006da0:	401a      	ands	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	615a      	str	r2, [r3, #20]
    if (sConfig->Channel == ADC_CHANNEL_VREFINT) {
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b11      	cmp	r3, #17
 8006db0:	d106      	bne.n	8006dc0 <STM32_ADC_ConfigChannel+0x5c>
        ADC->CCR |= (1u << 22);
 8006db2:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <STM32_ADC_ConfigChannel+0x64>)
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	4b04      	ldr	r3, [pc, #16]	; (8006dc8 <STM32_ADC_ConfigChannel+0x64>)
 8006db8:	2180      	movs	r1, #128	; 0x80
 8006dba:	03c9      	lsls	r1, r1, #15
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	601a      	str	r2, [r3, #0]
    }
}
 8006dc0:	46c0      	nop			; (mov r8, r8)
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	b002      	add	sp, #8
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	40012708 	.word	0x40012708

08006dcc <InitializeSystem>:
//
// Params:    None
//
// Returns:   None
//
void InitializeSystem(void) {
 8006dcc:	b590      	push	{r4, r7, lr}
 8006dce:	b08d      	sub	sp, #52	; 0x34
 8006dd0:	af04      	add	r7, sp, #16

  ADC_ChannelConfTypeDef    sConfig;
  uint32_t *FirmwarePointer;

    RCC->CR |= 0x00000001u;        // HSI Clock Enable
 8006dd2:	4bf7      	ldr	r3, [pc, #988]	; (80071b0 <InitializeSystem+0x3e4>)
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	4bf6      	ldr	r3, [pc, #984]	; (80071b0 <InitializeSystem+0x3e4>)
 8006dd8:	2101      	movs	r1, #1
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	601a      	str	r2, [r3, #0]
    RCC->CFGR &= 0x08FFB80Cu;        //
 8006dde:	4bf4      	ldr	r3, [pc, #976]	; (80071b0 <InitializeSystem+0x3e4>)
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	4bf3      	ldr	r3, [pc, #972]	; (80071b0 <InitializeSystem+0x3e4>)
 8006de4:	49f3      	ldr	r1, [pc, #972]	; (80071b4 <InitializeSystem+0x3e8>)
 8006de6:	400a      	ands	r2, r1
 8006de8:	605a      	str	r2, [r3, #4]
    RCC->CR &= 0xFEF6FFFFu;        // HSE Clock Disable, Clock Security System Disable, PLL Disable
 8006dea:	4bf1      	ldr	r3, [pc, #964]	; (80071b0 <InitializeSystem+0x3e4>)
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	4bf0      	ldr	r3, [pc, #960]	; (80071b0 <InitializeSystem+0x3e4>)
 8006df0:	49f1      	ldr	r1, [pc, #964]	; (80071b8 <InitializeSystem+0x3ec>)
 8006df2:	400a      	ands	r2, r1
 8006df4:	601a      	str	r2, [r3, #0]
    RCC->CR &= 0xFFFBFFFFu;        // HSE Crystal Osc not bypassed
 8006df6:	4bee      	ldr	r3, [pc, #952]	; (80071b0 <InitializeSystem+0x3e4>)
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	4bed      	ldr	r3, [pc, #948]	; (80071b0 <InitializeSystem+0x3e4>)
 8006dfc:	49ef      	ldr	r1, [pc, #956]	; (80071bc <InitializeSystem+0x3f0>)
 8006dfe:	400a      	ands	r2, r1
 8006e00:	601a      	str	r2, [r3, #0]
    RCC->CFGR &= 0xFFC0FFFFu;        //
 8006e02:	4beb      	ldr	r3, [pc, #940]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	4bea      	ldr	r3, [pc, #936]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e08:	49ed      	ldr	r1, [pc, #948]	; (80071c0 <InitializeSystem+0x3f4>)
 8006e0a:	400a      	ands	r2, r1
 8006e0c:	605a      	str	r2, [r3, #4]
    RCC->CFGR2 &= 0xFFFFFFF0u;        //
 8006e0e:	4be8      	ldr	r3, [pc, #928]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e12:	4be7      	ldr	r3, [pc, #924]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e14:	210f      	movs	r1, #15
 8006e16:	438a      	bics	r2, r1
 8006e18:	62da      	str	r2, [r3, #44]	; 0x2c
    RCC->CFGR3 &= 0xFFFCFE2Cu;        //
 8006e1a:	4be5      	ldr	r3, [pc, #916]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e1e:	4be4      	ldr	r3, [pc, #912]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e20:	49e8      	ldr	r1, [pc, #928]	; (80071c4 <InitializeSystem+0x3f8>)
 8006e22:	400a      	ands	r2, r1
 8006e24:	631a      	str	r2, [r3, #48]	; 0x30
    RCC->CR2 &= 0xFFFFFFFEu;        //
 8006e26:	4be2      	ldr	r3, [pc, #904]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e2a:	4be1      	ldr	r3, [pc, #900]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	438a      	bics	r2, r1
 8006e30:	635a      	str	r2, [r3, #52]	; 0x34
    RCC->CIR = 0x00000000u;        //
 8006e32:	4bdf      	ldr	r3, [pc, #892]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	609a      	str	r2, [r3, #8]
  //
  // FLASH Pre-fetch
  //
  FLASH->ACR |= FLASH_ACR_PRFTBE;
 8006e38:	4be3      	ldr	r3, [pc, #908]	; (80071c8 <InitializeSystem+0x3fc>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	4be2      	ldr	r3, [pc, #904]	; (80071c8 <InitializeSystem+0x3fc>)
 8006e3e:	2110      	movs	r1, #16
 8006e40:	430a      	orrs	r2, r1
 8006e42:	601a      	str	r2, [r3, #0]
  //
  // Enable Clocks
  //
  RCC->AHBENR |= (RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOFEN | RCC_AHBENR_CRCEN | RCC_AHBENR_DMA1EN);
 8006e44:	4bda      	ldr	r3, [pc, #872]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e46:	695a      	ldr	r2, [r3, #20]
 8006e48:	4bd9      	ldr	r3, [pc, #868]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e4a:	49e0      	ldr	r1, [pc, #896]	; (80071cc <InitializeSystem+0x400>)
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	615a      	str	r2, [r3, #20]
  RCC->APB1ENR |= (RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM3EN | RCC_APB1ENR_TIM14EN | RCC_APB1ENR_I2C1EN | RCC_APB1ENR_I2C2EN | RCC_APB1ENR_USART2EN |
 8006e50:	4bd7      	ldr	r3, [pc, #860]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e52:	69da      	ldr	r2, [r3, #28]
 8006e54:	4bd6      	ldr	r3, [pc, #856]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e56:	49de      	ldr	r1, [pc, #888]	; (80071d0 <InitializeSystem+0x404>)
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	61da      	str	r2, [r3, #28]
                   RCC_APB1ENR_TIM6EN | RCC_APB1ENR_TIM7EN | RCC_APB1ENR_CANEN) | RCC_APB1ENR_USART4EN;
  RCC->APB2ENR |= (RCC_APB2ENR_TIM1EN | RCC_APB2ENR_TIM15EN | RCC_APB2ENR_TIM16EN | RCC_APB2ENR_TIM17EN | RCC_APB2ENR_USART1EN | RCC_APB2ENR_ADC1EN |
 8006e5c:	4bd4      	ldr	r3, [pc, #848]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e5e:	699a      	ldr	r2, [r3, #24]
 8006e60:	4bd3      	ldr	r3, [pc, #844]	; (80071b0 <InitializeSystem+0x3e4>)
 8006e62:	49dc      	ldr	r1, [pc, #880]	; (80071d4 <InitializeSystem+0x408>)
 8006e64:	430a      	orrs	r2, r1
 8006e66:	619a      	str	r2, [r3, #24]
                   RCC_APB2ENR_SYSCFGEN);
  //
  // Configure SysTick Module for 1ms interryupt rate
  //
  SysTick->LOAD = (48000000 / 1000) - 1uL;                         /* set reload register */
 8006e68:	4bdb      	ldr	r3, [pc, #876]	; (80071d8 <InitializeSystem+0x40c>)
 8006e6a:	4adc      	ldr	r2, [pc, #880]	; (80071dc <InitializeSystem+0x410>)
 8006e6c:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0uL;
 8006e6e:	4bda      	ldr	r3, [pc, #872]	; (80071d8 <InitializeSystem+0x40c>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 8006e74:	4bd8      	ldr	r3, [pc, #864]	; (80071d8 <InitializeSystem+0x40c>)
 8006e76:	2207      	movs	r2, #7
 8006e78:	601a      	str	r2, [r3, #0]
  SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8006e7a:	4bd7      	ldr	r3, [pc, #860]	; (80071d8 <InitializeSystem+0x40c>)
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	4bd6      	ldr	r3, [pc, #856]	; (80071d8 <InitializeSystem+0x40c>)
 8006e80:	2104      	movs	r1, #4
 8006e82:	430a      	orrs	r2, r1
 8006e84:	601a      	str	r2, [r3, #0]
  STM32_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006e86:	2301      	movs	r3, #1
 8006e88:	425b      	negs	r3, r3
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	0018      	movs	r0, r3
 8006e90:	f7fe ff92 	bl	8005db8 <STM32_NVIC_SetPriority>
  //
  // Enable System Interrupts
  //
  STM32_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8006e94:	2305      	movs	r3, #5
 8006e96:	425b      	negs	r3, r3
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f7fe ff8b 	bl	8005db8 <STM32_NVIC_SetPriority>
  STM32_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	425b      	negs	r3, r3
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f7fe ff84 	bl	8005db8 <STM32_NVIC_SetPriority>
  //
  // Configure HSE
  //
  RCC->CR |= RCC_CR_HSEBYP;     // HSE in Bypass and On
 8006eb0:	4bbf      	ldr	r3, [pc, #764]	; (80071b0 <InitializeSystem+0x3e4>)
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	4bbe      	ldr	r3, [pc, #760]	; (80071b0 <InitializeSystem+0x3e4>)
 8006eb6:	2180      	movs	r1, #128	; 0x80
 8006eb8:	02c9      	lsls	r1, r1, #11
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	601a      	str	r2, [r3, #0]
  RCC->CR |= RCC_CR_HSEON;
 8006ebe:	4bbc      	ldr	r3, [pc, #752]	; (80071b0 <InitializeSystem+0x3e4>)
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	4bbb      	ldr	r3, [pc, #748]	; (80071b0 <InitializeSystem+0x3e4>)
 8006ec4:	2180      	movs	r1, #128	; 0x80
 8006ec6:	0249      	lsls	r1, r1, #9
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	601a      	str	r2, [r3, #0]
  do {
  } while ((RCC->CR & (1u << 17)) == RESET);
 8006ecc:	4bb8      	ldr	r3, [pc, #736]	; (80071b0 <InitializeSystem+0x3e4>)
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	2380      	movs	r3, #128	; 0x80
 8006ed2:	029b      	lsls	r3, r3, #10
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	d0f9      	beq.n	8006ecc <InitializeSystem+0x100>
  //
  // Configure HSI14
  //
  RCC->CR2 |= RCC_CR2_HSI14DIS;
 8006ed8:	4bb5      	ldr	r3, [pc, #724]	; (80071b0 <InitializeSystem+0x3e4>)
 8006eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006edc:	4bb4      	ldr	r3, [pc, #720]	; (80071b0 <InitializeSystem+0x3e4>)
 8006ede:	2104      	movs	r1, #4
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->CR2 |= RCC_CR2_HSI14ON;
 8006ee4:	4bb2      	ldr	r3, [pc, #712]	; (80071b0 <InitializeSystem+0x3e4>)
 8006ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee8:	4bb1      	ldr	r3, [pc, #708]	; (80071b0 <InitializeSystem+0x3e4>)
 8006eea:	2101      	movs	r1, #1
 8006eec:	430a      	orrs	r2, r1
 8006eee:	635a      	str	r2, [r3, #52]	; 0x34
  do {
  } while ((RCC->CR2 & (1u << 1)) == RESET);
 8006ef0:	4baf      	ldr	r3, [pc, #700]	; (80071b0 <InitializeSystem+0x3e4>)
 8006ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	d0fa      	beq.n	8006ef0 <InitializeSystem+0x124>
  RCC->CR2 = (RCC->CR2 & RCC_CR2_HSI14TRIM) | (16u << 3u);
 8006efa:	4bad      	ldr	r3, [pc, #692]	; (80071b0 <InitializeSystem+0x3e4>)
 8006efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efe:	2278      	movs	r2, #120	; 0x78
 8006f00:	401a      	ands	r2, r3
 8006f02:	4bab      	ldr	r3, [pc, #684]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f04:	2180      	movs	r1, #128	; 0x80
 8006f06:	430a      	orrs	r2, r1
 8006f08:	635a      	str	r2, [r3, #52]	; 0x34
  //
  // Configures PLL
  //
  RCC->CR &= ~RCC_CR_PLLON;   // Disable PLL
 8006f0a:	4ba9      	ldr	r3, [pc, #676]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4ba8      	ldr	r3, [pc, #672]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f10:	49b3      	ldr	r1, [pc, #716]	; (80071e0 <InitializeSystem+0x414>)
 8006f12:	400a      	ands	r2, r1
 8006f14:	601a      	str	r2, [r3, #0]
  do {
  } while ((RCC->CR & (1u << 25u)) != RESET);
 8006f16:	4ba6      	ldr	r3, [pc, #664]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	2380      	movs	r3, #128	; 0x80
 8006f1c:	049b      	lsls	r3, r3, #18
 8006f1e:	4013      	ands	r3, r2
 8006f20:	d1f9      	bne.n	8006f16 <InitializeSystem+0x14a>
  RCC->CFGR2 = (RCC->CFGR2 & ~RCC_CFGR2_PREDIV) | RCC_PREDIV_DIV1;
 8006f22:	4ba3      	ldr	r3, [pc, #652]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f26:	4ba2      	ldr	r3, [pc, #648]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f28:	210f      	movs	r1, #15
 8006f2a:	438a      	bics	r2, r1
 8006f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_PLLMUL | RCC_CFGR_PLLSRC)) | (RCC_PLL_MUL6 | RCC_PLLSOURCE_HSE);
 8006f2e:	4ba0      	ldr	r3, [pc, #640]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	4aac      	ldr	r2, [pc, #688]	; (80071e4 <InitializeSystem+0x418>)
 8006f34:	401a      	ands	r2, r3
 8006f36:	4b9e      	ldr	r3, [pc, #632]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f38:	2188      	movs	r1, #136	; 0x88
 8006f3a:	0349      	lsls	r1, r1, #13
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]

  RCC->CR |= RCC_CR_PLLON;
 8006f40:	4b9b      	ldr	r3, [pc, #620]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	4b9a      	ldr	r3, [pc, #616]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f46:	2180      	movs	r1, #128	; 0x80
 8006f48:	0449      	lsls	r1, r1, #17
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	601a      	str	r2, [r3, #0]
  do {
  } while ((RCC->CR & (1u << 25u)) == RESET);
 8006f4e:	4b98      	ldr	r3, [pc, #608]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	2380      	movs	r3, #128	; 0x80
 8006f54:	049b      	lsls	r3, r3, #18
 8006f56:	4013      	ands	r3, r2
 8006f58:	d0f9      	beq.n	8006f4e <InitializeSystem+0x182>
  //
  // Configure Flash Latency
  //
  FLASH->ACR = (FLASH->ACR & (~FLASH_ACR_LATENCY)) | 1;
 8006f5a:	4b9b      	ldr	r3, [pc, #620]	; (80071c8 <InitializeSystem+0x3fc>)
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	4b9a      	ldr	r3, [pc, #616]	; (80071c8 <InitializeSystem+0x3fc>)
 8006f60:	2101      	movs	r1, #1
 8006f62:	430a      	orrs	r2, r1
 8006f64:	601a      	str	r2, [r3, #0]
  //
  //
  //
  RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_HPRE) | RCC_SYSCLK_DIV1;
 8006f66:	4b92      	ldr	r3, [pc, #584]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	4b91      	ldr	r3, [pc, #580]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f6c:	21f0      	movs	r1, #240	; 0xf0
 8006f6e:	438a      	bics	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]
  RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_SW) | RCC_SYSCLKSOURCE_PLLCLK;
 8006f72:	4b8f      	ldr	r3, [pc, #572]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2203      	movs	r2, #3
 8006f78:	4393      	bics	r3, r2
 8006f7a:	001a      	movs	r2, r3
 8006f7c:	4b8c      	ldr	r3, [pc, #560]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f7e:	2102      	movs	r1, #2
 8006f80:	430a      	orrs	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]
  do {
  } while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_SYSCLKSOURCE_STATUS_PLLCLK);
 8006f84:	4b8a      	ldr	r3, [pc, #552]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	220c      	movs	r2, #12
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d1f9      	bne.n	8006f84 <InitializeSystem+0x1b8>
  //
  //
  //
  RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE) | RCC_HCLK_DIV1;
 8006f90:	4b87      	ldr	r3, [pc, #540]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	4b86      	ldr	r3, [pc, #536]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f96:	4994      	ldr	r1, [pc, #592]	; (80071e8 <InitializeSystem+0x41c>)
 8006f98:	400a      	ands	r2, r1
 8006f9a:	605a      	str	r2, [r3, #4]
  RCC->CFGR3 = (RCC->CFGR3 & ~RCC_CFGR3_USART1SW) | RCC_USART1CLKSOURCE_SYSCLK;
 8006f9c:	4b84      	ldr	r3, [pc, #528]	; (80071b0 <InitializeSystem+0x3e4>)
 8006f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	4393      	bics	r3, r2
 8006fa4:	001a      	movs	r2, r3
 8006fa6:	4b82      	ldr	r3, [pc, #520]	; (80071b0 <InitializeSystem+0x3e4>)
 8006fa8:	2101      	movs	r1, #1
 8006faa:	430a      	orrs	r2, r1
 8006fac:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->CFGR3 = (RCC->CFGR3 & ~RCC_CFGR3_USART2SW) | RCC_USART2CLKSOURCE_SYSCLK;
 8006fae:	4b80      	ldr	r3, [pc, #512]	; (80071b0 <InitializeSystem+0x3e4>)
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb2:	4a8e      	ldr	r2, [pc, #568]	; (80071ec <InitializeSystem+0x420>)
 8006fb4:	401a      	ands	r2, r3
 8006fb6:	4b7e      	ldr	r3, [pc, #504]	; (80071b0 <InitializeSystem+0x3e4>)
 8006fb8:	2180      	movs	r1, #128	; 0x80
 8006fba:	0249      	lsls	r1, r1, #9
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->CFGR3 = (RCC->CFGR3 & ~RCC_CFGR3_I2C1SW) | RCC_I2C1CLKSOURCE_SYSCLK;
 8006fc0:	4b7b      	ldr	r3, [pc, #492]	; (80071b0 <InitializeSystem+0x3e4>)
 8006fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fc4:	4b7a      	ldr	r3, [pc, #488]	; (80071b0 <InitializeSystem+0x3e4>)
 8006fc6:	2110      	movs	r1, #16
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	631a      	str	r2, [r3, #48]	; 0x30

  InitializeWatchDog();
 8006fcc:	f005 f9e0 	bl	800c390 <InitializeWatchDog>
  //
  // Setup pointers to Configuration structures stored at end of FLASH.  The flash within the STM32
  // consists of 64 sectors, with each sector being 2048 bytes (64 * 2K = 128KB).
  //
  Fuzzy1Configuration = (stFuzzyConfiguration *)(0x08000000 + (2048 * 61)); // Contains fuzzy logic data for quality check #1
 8006fd0:	4b87      	ldr	r3, [pc, #540]	; (80071f0 <InitializeSystem+0x424>)
 8006fd2:	4a88      	ldr	r2, [pc, #544]	; (80071f4 <InitializeSystem+0x428>)
 8006fd4:	601a      	str	r2, [r3, #0]
  Fuzzy2Configuration = (stFuzzyConfiguration *)(0x08000000 + (2048 * 61) + 1024); // Contains fuzzy logic data for quality check #2
 8006fd6:	4b88      	ldr	r3, [pc, #544]	; (80071f8 <InitializeSystem+0x42c>)
 8006fd8:	4a88      	ldr	r2, [pc, #544]	; (80071fc <InitializeSystem+0x430>)
 8006fda:	601a      	str	r2, [r3, #0]
  FuzzyPage = (stFuzzyPage *)(0x08000000 + (2048 * 61));
 8006fdc:	4b88      	ldr	r3, [pc, #544]	; (8007200 <InitializeSystem+0x434>)
 8006fde:	4a85      	ldr	r2, [pc, #532]	; (80071f4 <InitializeSystem+0x428>)
 8006fe0:	601a      	str	r2, [r3, #0]
  FlashConfiguration = (stFlashConfiguration *)(0x08000000 + (2048 * 62));
 8006fe2:	4b88      	ldr	r3, [pc, #544]	; (8007204 <InitializeSystem+0x438>)
 8006fe4:	4a88      	ldr	r2, [pc, #544]	; (8007208 <InitializeSystem+0x43c>)
 8006fe6:	601a      	str	r2, [r3, #0]
  FactoryConfiguration = (stFactoryConfiguration *)(0x08000000 + (2048 * 63));
 8006fe8:	4b88      	ldr	r3, [pc, #544]	; (800720c <InitializeSystem+0x440>)
 8006fea:	4a89      	ldr	r2, [pc, #548]	; (8007210 <InitializeSystem+0x444>)
 8006fec:	601a      	str	r2, [r3, #0]
  FirmwarePointer = (uint32_t *)0x08000000u;
 8006fee:	2380      	movs	r3, #128	; 0x80
 8006ff0:	051b      	lsls	r3, r3, #20
 8006ff2:	617b      	str	r3, [r7, #20]
  //
  // Enable TSEN, VBATEN, and VREFEN
  //
  ADC1_COMMON->CCR |= ADC_CCR_TSEN | ADC_CCR_VBATEN | ADC_CCR_VREFEN;
 8006ff4:	4b87      	ldr	r3, [pc, #540]	; (8007214 <InitializeSystem+0x448>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	4b86      	ldr	r3, [pc, #536]	; (8007214 <InitializeSystem+0x448>)
 8006ffa:	21e0      	movs	r1, #224	; 0xe0
 8006ffc:	0449      	lsls	r1, r1, #17
 8006ffe:	430a      	orrs	r2, r1
 8007000:	601a      	str	r2, [r3, #0]
  //
  // Initialize STM32 GPIO
  //
  STM32_GPIO_Init(DIR1_GPIO_Port, DIR1_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, RESET);        // GPIO DIR1
 8007002:	4885      	ldr	r0, [pc, #532]	; (8007218 <InitializeSystem+0x44c>)
 8007004:	2300      	movs	r3, #0
 8007006:	9302      	str	r3, [sp, #8]
 8007008:	2300      	movs	r3, #0
 800700a:	9301      	str	r3, [sp, #4]
 800700c:	2300      	movs	r3, #0
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	2300      	movs	r3, #0
 8007012:	2201      	movs	r2, #1
 8007014:	2104      	movs	r1, #4
 8007016:	f7fe fcbf 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(DIR2_GPIO_Port, DIR2_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, RESET);        // GPIO DIR2
 800701a:	487f      	ldr	r0, [pc, #508]	; (8007218 <InitializeSystem+0x44c>)
 800701c:	2300      	movs	r3, #0
 800701e:	9302      	str	r3, [sp, #8]
 8007020:	2300      	movs	r3, #0
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	2300      	movs	r3, #0
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	2300      	movs	r3, #0
 800702a:	2201      	movs	r2, #1
 800702c:	2102      	movs	r1, #2
 800702e:	f7fe fcb3 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(DIR3_GPIO_Port, DIR3_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, RESET);        // GPIO DIR3
 8007032:	4879      	ldr	r0, [pc, #484]	; (8007218 <InitializeSystem+0x44c>)
 8007034:	2300      	movs	r3, #0
 8007036:	9302      	str	r3, [sp, #8]
 8007038:	2300      	movs	r3, #0
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	2300      	movs	r3, #0
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	2300      	movs	r3, #0
 8007042:	2201      	movs	r2, #1
 8007044:	2101      	movs	r1, #1
 8007046:	f7fe fca7 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(DIR4_GPIO_Port, DIR4_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, RESET);        // GPIO DIR4
 800704a:	2380      	movs	r3, #128	; 0x80
 800704c:	0199      	lsls	r1, r3, #6
 800704e:	4873      	ldr	r0, [pc, #460]	; (800721c <InitializeSystem+0x450>)
 8007050:	2300      	movs	r3, #0
 8007052:	9302      	str	r3, [sp, #8]
 8007054:	2300      	movs	r3, #0
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	2300      	movs	r3, #0
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	2300      	movs	r3, #0
 800705e:	2201      	movs	r2, #1
 8007060:	f7fe fc9a 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(DIR5_GPIO_Port, DIR5_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, RESET);        // GPIO DIR5
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	0199      	lsls	r1, r3, #6
 8007068:	486b      	ldr	r0, [pc, #428]	; (8007218 <InitializeSystem+0x44c>)
 800706a:	2300      	movs	r3, #0
 800706c:	9302      	str	r3, [sp, #8]
 800706e:	2300      	movs	r3, #0
 8007070:	9301      	str	r3, [sp, #4]
 8007072:	2300      	movs	r3, #0
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	2300      	movs	r3, #0
 8007078:	2201      	movs	r2, #1
 800707a:	f7fe fc8d 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(DIR6_GPIO_Port, DIR6_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, RESET);        // GPIO DIR6
 800707e:	2380      	movs	r3, #128	; 0x80
 8007080:	0159      	lsls	r1, r3, #5
 8007082:	4865      	ldr	r0, [pc, #404]	; (8007218 <InitializeSystem+0x44c>)
 8007084:	2300      	movs	r3, #0
 8007086:	9302      	str	r3, [sp, #8]
 8007088:	2300      	movs	r3, #0
 800708a:	9301      	str	r3, [sp, #4]
 800708c:	2300      	movs	r3, #0
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	2300      	movs	r3, #0
 8007092:	2201      	movs	r2, #1
 8007094:	f7fe fc80 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(MUX_SEL_GPIO_Port, MUX_SEL_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, RESET);         // GPIO MUX_SEL
 8007098:	2380      	movs	r3, #128	; 0x80
 800709a:	0219      	lsls	r1, r3, #8
 800709c:	2390      	movs	r3, #144	; 0x90
 800709e:	05d8      	lsls	r0, r3, #23
 80070a0:	2300      	movs	r3, #0
 80070a2:	9302      	str	r3, [sp, #8]
 80070a4:	2300      	movs	r3, #0
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	2300      	movs	r3, #0
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	2300      	movs	r3, #0
 80070ae:	2201      	movs	r2, #1
 80070b0:	f7fe fc72 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(EXT_PULLUP_GPIO_Port, EXT_PULLUP_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, RESET);   // GPIO PULLUP
 80070b4:	4858      	ldr	r0, [pc, #352]	; (8007218 <InitializeSystem+0x44c>)
 80070b6:	2300      	movs	r3, #0
 80070b8:	9302      	str	r3, [sp, #8]
 80070ba:	2300      	movs	r3, #0
 80070bc:	9301      	str	r3, [sp, #4]
 80070be:	2300      	movs	r3, #0
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	2300      	movs	r3, #0
 80070c4:	2201      	movs	r2, #1
 80070c6:	2120      	movs	r1, #32
 80070c8:	f7fe fc66 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, RESET);     // GPIO EEPROM WP
 80070cc:	2380      	movs	r3, #128	; 0x80
 80070ce:	0219      	lsls	r1, r3, #8
 80070d0:	4852      	ldr	r0, [pc, #328]	; (800721c <InitializeSystem+0x450>)
 80070d2:	2300      	movs	r3, #0
 80070d4:	9302      	str	r3, [sp, #8]
 80070d6:	2300      	movs	r3, #0
 80070d8:	9301      	str	r3, [sp, #4]
 80070da:	2300      	movs	r3, #0
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	2300      	movs	r3, #0
 80070e0:	2201      	movs	r2, #1
 80070e2:	f7fe fc59 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, RESET);       // GPIO RS485 Enable
 80070e6:	2380      	movs	r3, #128	; 0x80
 80070e8:	01d9      	lsls	r1, r3, #7
 80070ea:	484b      	ldr	r0, [pc, #300]	; (8007218 <InitializeSystem+0x44c>)
 80070ec:	2300      	movs	r3, #0
 80070ee:	9302      	str	r3, [sp, #8]
 80070f0:	2300      	movs	r3, #0
 80070f2:	9301      	str	r3, [sp, #4]
 80070f4:	2300      	movs	r3, #0
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	2300      	movs	r3, #0
 80070fa:	2201      	movs	r2, #1
 80070fc:	f7fe fc4c 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(CAN_EN_GPIO_Port, CAN_EN_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, RESET);           // GPIO CAN Enable
 8007100:	2380      	movs	r3, #128	; 0x80
 8007102:	0219      	lsls	r1, r3, #8
 8007104:	4844      	ldr	r0, [pc, #272]	; (8007218 <InitializeSystem+0x44c>)
 8007106:	2300      	movs	r3, #0
 8007108:	9302      	str	r3, [sp, #8]
 800710a:	2300      	movs	r3, #0
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	2300      	movs	r3, #0
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	2300      	movs	r3, #0
 8007114:	2201      	movs	r2, #1
 8007116:	f7fe fc3f 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(CAN_EN_GPIO_Port, CAN_EN_Pin, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, RESET);           // GPIO CAN Enable
 800711a:	2380      	movs	r3, #128	; 0x80
 800711c:	0219      	lsls	r1, r3, #8
 800711e:	483e      	ldr	r0, [pc, #248]	; (8007218 <InitializeSystem+0x44c>)
 8007120:	2300      	movs	r3, #0
 8007122:	9302      	str	r3, [sp, #8]
 8007124:	2300      	movs	r3, #0
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	2300      	movs	r3, #0
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	2300      	movs	r3, #0
 800712e:	2201      	movs	r2, #1
 8007130:	f7fe fc32 	bl	8005998 <STM32_GPIO_Init>
  //
  //Initialize STEM32 I2C1
  //
  STM32_GPIO_Init(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_MODE_AF_OD, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_AF1_I2C1, 0);
 8007134:	4838      	ldr	r0, [pc, #224]	; (8007218 <InitializeSystem+0x44c>)
 8007136:	2300      	movs	r3, #0
 8007138:	9302      	str	r3, [sp, #8]
 800713a:	2301      	movs	r3, #1
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	2303      	movs	r3, #3
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	2301      	movs	r3, #1
 8007144:	2212      	movs	r2, #18
 8007146:	2140      	movs	r1, #64	; 0x40
 8007148:	f7fe fc26 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_MODE_AF_OD, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_AF1_I2C1, 0);
 800714c:	4832      	ldr	r0, [pc, #200]	; (8007218 <InitializeSystem+0x44c>)
 800714e:	2300      	movs	r3, #0
 8007150:	9302      	str	r3, [sp, #8]
 8007152:	2301      	movs	r3, #1
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	2303      	movs	r3, #3
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	2301      	movs	r3, #1
 800715c:	2212      	movs	r2, #18
 800715e:	2180      	movs	r1, #128	; 0x80
 8007160:	f7fe fc1a 	bl	8005998 <STM32_GPIO_Init>

  I2C1->CR1 &= ~I2C_CR1_PE;
 8007164:	4b2e      	ldr	r3, [pc, #184]	; (8007220 <InitializeSystem+0x454>)
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	4b2d      	ldr	r3, [pc, #180]	; (8007220 <InitializeSystem+0x454>)
 800716a:	2101      	movs	r1, #1
 800716c:	438a      	bics	r2, r1
 800716e:	601a      	str	r2, [r3, #0]
  I2C1->TIMINGR = 0x00E01A4Cu & TIMING_CLEAR_MASK;
 8007170:	4b2b      	ldr	r3, [pc, #172]	; (8007220 <InitializeSystem+0x454>)
 8007172:	4a2c      	ldr	r2, [pc, #176]	; (8007224 <InitializeSystem+0x458>)
 8007174:	611a      	str	r2, [r3, #16]
  I2C1->OAR1 &= ~I2C_OAR1_OA1EN;
 8007176:	4b2a      	ldr	r3, [pc, #168]	; (8007220 <InitializeSystem+0x454>)
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	4b29      	ldr	r3, [pc, #164]	; (8007220 <InitializeSystem+0x454>)
 800717c:	492a      	ldr	r1, [pc, #168]	; (8007228 <InitializeSystem+0x45c>)
 800717e:	400a      	ands	r2, r1
 8007180:	609a      	str	r2, [r3, #8]
  I2C1->OAR1 = I2C_OAR1_OA1EN;
 8007182:	4b27      	ldr	r3, [pc, #156]	; (8007220 <InitializeSystem+0x454>)
 8007184:	2280      	movs	r2, #128	; 0x80
 8007186:	0212      	lsls	r2, r2, #8
 8007188:	609a      	str	r2, [r3, #8]
  I2C1->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800718a:	4b25      	ldr	r3, [pc, #148]	; (8007220 <InitializeSystem+0x454>)
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	4b24      	ldr	r3, [pc, #144]	; (8007220 <InitializeSystem+0x454>)
 8007190:	4926      	ldr	r1, [pc, #152]	; (800722c <InitializeSystem+0x460>)
 8007192:	430a      	orrs	r2, r1
 8007194:	605a      	str	r2, [r3, #4]
  I2C1->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007196:	4b22      	ldr	r3, [pc, #136]	; (8007220 <InitializeSystem+0x454>)
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	4b21      	ldr	r3, [pc, #132]	; (8007220 <InitializeSystem+0x454>)
 800719c:	4922      	ldr	r1, [pc, #136]	; (8007228 <InitializeSystem+0x45c>)
 800719e:	400a      	ands	r2, r1
 80071a0:	60da      	str	r2, [r3, #12]
  I2C1->OAR2 = (I2C_DUALADDRESS_DISABLE | (I2C_OA2_NOMASK << 8));
 80071a2:	4b1f      	ldr	r3, [pc, #124]	; (8007220 <InitializeSystem+0x454>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	60da      	str	r2, [r3, #12]
  I2C1->CR1 = (I2C_GENERALCALL_DISABLE | I2C_NOSTRETCH_DISABLE);
 80071a8:	4b1d      	ldr	r3, [pc, #116]	; (8007220 <InitializeSystem+0x454>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	e03f      	b.n	8007230 <InitializeSystem+0x464>
 80071b0:	40021000 	.word	0x40021000
 80071b4:	08ffb80c 	.word	0x08ffb80c
 80071b8:	fef6ffff 	.word	0xfef6ffff
 80071bc:	fffbffff 	.word	0xfffbffff
 80071c0:	ffc0ffff 	.word	0xffc0ffff
 80071c4:	fffcfe2c 	.word	0xfffcfe2c
 80071c8:	40022000 	.word	0x40022000
 80071cc:	004e0041 	.word	0x004e0041
 80071d0:	026a0133 	.word	0x026a0133
 80071d4:	00074a01 	.word	0x00074a01
 80071d8:	e000e010 	.word	0xe000e010
 80071dc:	0000bb7f 	.word	0x0000bb7f
 80071e0:	feffffff 	.word	0xfeffffff
 80071e4:	ffc27fff 	.word	0xffc27fff
 80071e8:	fffff8ff 	.word	0xfffff8ff
 80071ec:	fffcffff 	.word	0xfffcffff
 80071f0:	20000c20 	.word	0x20000c20
 80071f4:	0801e800 	.word	0x0801e800
 80071f8:	20000c64 	.word	0x20000c64
 80071fc:	0801ec00 	.word	0x0801ec00
 8007200:	20002f2c 	.word	0x20002f2c
 8007204:	20002f04 	.word	0x20002f04
 8007208:	0801f000 	.word	0x0801f000
 800720c:	20001eec 	.word	0x20001eec
 8007210:	0801f800 	.word	0x0801f800
 8007214:	40012708 	.word	0x40012708
 8007218:	48000400 	.word	0x48000400
 800721c:	48000800 	.word	0x48000800
 8007220:	40005400 	.word	0x40005400
 8007224:	00e01a4c 	.word	0x00e01a4c
 8007228:	ffff7fff 	.word	0xffff7fff
 800722c:	02008000 	.word	0x02008000
  I2C1->CR1 &= ~I2C_CR1_ANFOFF;
 8007230:	4bfb      	ldr	r3, [pc, #1004]	; (8007620 <InitializeSystem+0x854>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	4bfa      	ldr	r3, [pc, #1000]	; (8007620 <InitializeSystem+0x854>)
 8007236:	49fb      	ldr	r1, [pc, #1004]	; (8007624 <InitializeSystem+0x858>)
 8007238:	400a      	ands	r2, r1
 800723a:	601a      	str	r2, [r3, #0]
  I2C1->CR1 &= ~I2C_CR1_DNF;          // Digital Filter
 800723c:	4bf8      	ldr	r3, [pc, #992]	; (8007620 <InitializeSystem+0x854>)
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	4bf7      	ldr	r3, [pc, #988]	; (8007620 <InitializeSystem+0x854>)
 8007242:	49f9      	ldr	r1, [pc, #996]	; (8007628 <InitializeSystem+0x85c>)
 8007244:	400a      	ands	r2, r1
 8007246:	601a      	str	r2, [r3, #0]
  I2C1->CR1 |= I2C_CR1_PE;
 8007248:	4bf5      	ldr	r3, [pc, #980]	; (8007620 <InitializeSystem+0x854>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	4bf4      	ldr	r3, [pc, #976]	; (8007620 <InitializeSystem+0x854>)
 800724e:	2101      	movs	r1, #1
 8007250:	430a      	orrs	r2, r1
 8007252:	601a      	str	r2, [r3, #0]
  //
  //Initialize STM32 I2C2
  //
  STM32_GPIO_Init(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin, GPIO_MODE_AF_OD, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_AF1_I2C2, 0);
 8007254:	2380      	movs	r3, #128	; 0x80
 8007256:	00d9      	lsls	r1, r3, #3
 8007258:	48f4      	ldr	r0, [pc, #976]	; (800762c <InitializeSystem+0x860>)
 800725a:	2300      	movs	r3, #0
 800725c:	9302      	str	r3, [sp, #8]
 800725e:	2301      	movs	r3, #1
 8007260:	9301      	str	r3, [sp, #4]
 8007262:	2303      	movs	r3, #3
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	2301      	movs	r3, #1
 8007268:	2212      	movs	r2, #18
 800726a:	f7fe fb95 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin, GPIO_MODE_AF_OD, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_AF1_I2C2, 0);
 800726e:	2380      	movs	r3, #128	; 0x80
 8007270:	0119      	lsls	r1, r3, #4
 8007272:	48ee      	ldr	r0, [pc, #952]	; (800762c <InitializeSystem+0x860>)
 8007274:	2300      	movs	r3, #0
 8007276:	9302      	str	r3, [sp, #8]
 8007278:	2301      	movs	r3, #1
 800727a:	9301      	str	r3, [sp, #4]
 800727c:	2303      	movs	r3, #3
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	2301      	movs	r3, #1
 8007282:	2212      	movs	r2, #18
 8007284:	f7fe fb88 	bl	8005998 <STM32_GPIO_Init>

  I2C2->CR1 &= ~I2C_CR1_PE;
 8007288:	4be9      	ldr	r3, [pc, #932]	; (8007630 <InitializeSystem+0x864>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	4be8      	ldr	r3, [pc, #928]	; (8007630 <InitializeSystem+0x864>)
 800728e:	2101      	movs	r1, #1
 8007290:	438a      	bics	r2, r1
 8007292:	601a      	str	r2, [r3, #0]
  I2C2->TIMINGR = 0x00E01A4Cu & TIMING_CLEAR_MASK;
 8007294:	4be6      	ldr	r3, [pc, #920]	; (8007630 <InitializeSystem+0x864>)
 8007296:	4ae7      	ldr	r2, [pc, #924]	; (8007634 <InitializeSystem+0x868>)
 8007298:	611a      	str	r2, [r3, #16]
  I2C2->OAR1 &= ~I2C_OAR1_OA1EN;
 800729a:	4be5      	ldr	r3, [pc, #916]	; (8007630 <InitializeSystem+0x864>)
 800729c:	689a      	ldr	r2, [r3, #8]
 800729e:	4be4      	ldr	r3, [pc, #912]	; (8007630 <InitializeSystem+0x864>)
 80072a0:	49e5      	ldr	r1, [pc, #916]	; (8007638 <InitializeSystem+0x86c>)
 80072a2:	400a      	ands	r2, r1
 80072a4:	609a      	str	r2, [r3, #8]
  I2C2->OAR1 = I2C_OAR1_OA1EN;
 80072a6:	4be2      	ldr	r3, [pc, #904]	; (8007630 <InitializeSystem+0x864>)
 80072a8:	2280      	movs	r2, #128	; 0x80
 80072aa:	0212      	lsls	r2, r2, #8
 80072ac:	609a      	str	r2, [r3, #8]
  I2C2->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80072ae:	4be0      	ldr	r3, [pc, #896]	; (8007630 <InitializeSystem+0x864>)
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	4bdf      	ldr	r3, [pc, #892]	; (8007630 <InitializeSystem+0x864>)
 80072b4:	49e1      	ldr	r1, [pc, #900]	; (800763c <InitializeSystem+0x870>)
 80072b6:	430a      	orrs	r2, r1
 80072b8:	605a      	str	r2, [r3, #4]
  I2C2->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80072ba:	4bdd      	ldr	r3, [pc, #884]	; (8007630 <InitializeSystem+0x864>)
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	4bdc      	ldr	r3, [pc, #880]	; (8007630 <InitializeSystem+0x864>)
 80072c0:	49dd      	ldr	r1, [pc, #884]	; (8007638 <InitializeSystem+0x86c>)
 80072c2:	400a      	ands	r2, r1
 80072c4:	60da      	str	r2, [r3, #12]
  I2C2->OAR2 = (I2C_DUALADDRESS_DISABLE | (I2C_OA2_NOMASK << 8));
 80072c6:	4bda      	ldr	r3, [pc, #872]	; (8007630 <InitializeSystem+0x864>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	60da      	str	r2, [r3, #12]
  I2C2->CR1 = (I2C_GENERALCALL_DISABLE | I2C_NOSTRETCH_DISABLE);
 80072cc:	4bd8      	ldr	r3, [pc, #864]	; (8007630 <InitializeSystem+0x864>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]
  I2C2->CR1 &= ~I2C_CR1_ANFOFF;
 80072d2:	4bd7      	ldr	r3, [pc, #860]	; (8007630 <InitializeSystem+0x864>)
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4bd6      	ldr	r3, [pc, #856]	; (8007630 <InitializeSystem+0x864>)
 80072d8:	49d2      	ldr	r1, [pc, #840]	; (8007624 <InitializeSystem+0x858>)
 80072da:	400a      	ands	r2, r1
 80072dc:	601a      	str	r2, [r3, #0]
  I2C2->CR1 &= ~I2C_CR1_DNF;          // Digital Filter
 80072de:	4bd4      	ldr	r3, [pc, #848]	; (8007630 <InitializeSystem+0x864>)
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	4bd3      	ldr	r3, [pc, #844]	; (8007630 <InitializeSystem+0x864>)
 80072e4:	49d0      	ldr	r1, [pc, #832]	; (8007628 <InitializeSystem+0x85c>)
 80072e6:	400a      	ands	r2, r1
 80072e8:	601a      	str	r2, [r3, #0]
  I2C2->CR1 |= I2C_CR1_PE;
 80072ea:	4bd1      	ldr	r3, [pc, #836]	; (8007630 <InitializeSystem+0x864>)
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	4bd0      	ldr	r3, [pc, #832]	; (8007630 <InitializeSystem+0x864>)
 80072f0:	2101      	movs	r1, #1
 80072f2:	430a      	orrs	r2, r1
 80072f4:	601a      	str	r2, [r3, #0]
  //
  // Initialize DMA
  //
  STM32_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);       // Used by UART1
 80072f6:	2200      	movs	r2, #0
 80072f8:	2100      	movs	r1, #0
 80072fa:	200a      	movs	r0, #10
 80072fc:	f7fe fd5c 	bl	8005db8 <STM32_NVIC_SetPriority>
  STM32_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007300:	200a      	movs	r0, #10
 8007302:	f7fe fdbb 	bl	8005e7c <STM32_NVIC_EnableIRQ>

  STM32_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);   // Used by UART2
 8007306:	2200      	movs	r2, #0
 8007308:	2100      	movs	r1, #0
 800730a:	200b      	movs	r0, #11
 800730c:	f7fe fd54 	bl	8005db8 <STM32_NVIC_SetPriority>
  STM32_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8007310:	200b      	movs	r0, #11
 8007312:	f7fe fdb3 	bl	8005e7c <STM32_NVIC_EnableIRQ>

  hadc.Instance = ADC1;
 8007316:	4bca      	ldr	r3, [pc, #808]	; (8007640 <InitializeSystem+0x874>)
 8007318:	4aca      	ldr	r2, [pc, #808]	; (8007644 <InitializeSystem+0x878>)
 800731a:	601a      	str	r2, [r3, #0]
  //    PA1     ------> ADC_IN0
  //    PA5     ------> ADC_IN5
  //    PA6     ------> ADC_IN6
  //    PA7     ------> ADC_IN7
  //
  STM32_GPIO_Init(AD_TEMP_GPIO_Port, AD_TEMP_Pin, GPIO_MODE_ANALOG, GPIO_NOPULL, 0, 0, 0);
 800731c:	2390      	movs	r3, #144	; 0x90
 800731e:	05d8      	lsls	r0, r3, #23
 8007320:	2300      	movs	r3, #0
 8007322:	9302      	str	r3, [sp, #8]
 8007324:	2300      	movs	r3, #0
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	2300      	movs	r3, #0
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	2300      	movs	r3, #0
 800732e:	2203      	movs	r2, #3
 8007330:	2101      	movs	r1, #1
 8007332:	f7fe fb31 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(AD_VIN_GPIO_Port, AD_VIN_Pin, GPIO_MODE_ANALOG, GPIO_NOPULL, 0, 0, 0);
 8007336:	2390      	movs	r3, #144	; 0x90
 8007338:	05d8      	lsls	r0, r3, #23
 800733a:	2300      	movs	r3, #0
 800733c:	9302      	str	r3, [sp, #8]
 800733e:	2300      	movs	r3, #0
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	2300      	movs	r3, #0
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	2300      	movs	r3, #0
 8007348:	2203      	movs	r2, #3
 800734a:	2120      	movs	r1, #32
 800734c:	f7fe fb24 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(AD_KMA_GPIO_Port, AD_KMA_Pin, GPIO_MODE_ANALOG, GPIO_NOPULL, 0, 0, 0);
 8007350:	2390      	movs	r3, #144	; 0x90
 8007352:	05d8      	lsls	r0, r3, #23
 8007354:	2300      	movs	r3, #0
 8007356:	9302      	str	r3, [sp, #8]
 8007358:	2300      	movs	r3, #0
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	2300      	movs	r3, #0
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	2300      	movs	r3, #0
 8007362:	2203      	movs	r2, #3
 8007364:	2140      	movs	r1, #64	; 0x40
 8007366:	f7fe fb17 	bl	8005998 <STM32_GPIO_Init>
  STM32_GPIO_Init(AD_5VDC_GPIO_Port, AD_5VDC_Pin, GPIO_MODE_ANALOG, GPIO_NOPULL, 0, 0, 0);
 800736a:	2390      	movs	r3, #144	; 0x90
 800736c:	05d8      	lsls	r0, r3, #23
 800736e:	2300      	movs	r3, #0
 8007370:	9302      	str	r3, [sp, #8]
 8007372:	2300      	movs	r3, #0
 8007374:	9301      	str	r3, [sp, #4]
 8007376:	2300      	movs	r3, #0
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	2300      	movs	r3, #0
 800737c:	2203      	movs	r2, #3
 800737e:	2180      	movs	r1, #128	; 0x80
 8007380:	f7fe fb0a 	bl	8005998 <STM32_GPIO_Init>

  hdma_adc.Instance = DMA1_Channel1;
 8007384:	4bb0      	ldr	r3, [pc, #704]	; (8007648 <InitializeSystem+0x87c>)
 8007386:	4ab1      	ldr	r2, [pc, #708]	; (800764c <InitializeSystem+0x880>)
 8007388:	601a      	str	r2, [r3, #0]
  hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800738a:	4baf      	ldr	r3, [pc, #700]	; (8007648 <InitializeSystem+0x87c>)
 800738c:	2200      	movs	r2, #0
 800738e:	605a      	str	r2, [r3, #4]
  hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8007390:	4bad      	ldr	r3, [pc, #692]	; (8007648 <InitializeSystem+0x87c>)
 8007392:	2200      	movs	r2, #0
 8007394:	609a      	str	r2, [r3, #8]
  hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8007396:	4bac      	ldr	r3, [pc, #688]	; (8007648 <InitializeSystem+0x87c>)
 8007398:	2280      	movs	r2, #128	; 0x80
 800739a:	60da      	str	r2, [r3, #12]
  hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800739c:	4baa      	ldr	r3, [pc, #680]	; (8007648 <InitializeSystem+0x87c>)
 800739e:	2280      	movs	r2, #128	; 0x80
 80073a0:	0052      	lsls	r2, r2, #1
 80073a2:	611a      	str	r2, [r3, #16]
  hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80073a4:	4ba8      	ldr	r3, [pc, #672]	; (8007648 <InitializeSystem+0x87c>)
 80073a6:	2280      	movs	r2, #128	; 0x80
 80073a8:	00d2      	lsls	r2, r2, #3
 80073aa:	615a      	str	r2, [r3, #20]
  hdma_adc.Init.Mode = DMA_CIRCULAR;
 80073ac:	4ba6      	ldr	r3, [pc, #664]	; (8007648 <InitializeSystem+0x87c>)
 80073ae:	2220      	movs	r2, #32
 80073b0:	619a      	str	r2, [r3, #24]
  hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80073b2:	4ba5      	ldr	r3, [pc, #660]	; (8007648 <InitializeSystem+0x87c>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	61da      	str	r2, [r3, #28]
  STM32_DMA_Init(&hdma_adc);
 80073b8:	4ba3      	ldr	r3, [pc, #652]	; (8007648 <InitializeSystem+0x87c>)
 80073ba:	0018      	movs	r0, r3
 80073bc:	f7fc ff78 	bl	80042b0 <STM32_DMA_Init>
  hadc.DMA_Handle = &hdma_adc;
 80073c0:	4b9f      	ldr	r3, [pc, #636]	; (8007640 <InitializeSystem+0x874>)
 80073c2:	4aa1      	ldr	r2, [pc, #644]	; (8007648 <InitializeSystem+0x87c>)
 80073c4:	605a      	str	r2, [r3, #4]
  hdma_adc.Parent = &hadc;
 80073c6:	4ba0      	ldr	r3, [pc, #640]	; (8007648 <InitializeSystem+0x87c>)
 80073c8:	4a9d      	ldr	r2, [pc, #628]	; (8007640 <InitializeSystem+0x874>)
 80073ca:	621a      	str	r2, [r3, #32]

  hadc.Instance->CFGR1 = (hadc.Instance->CFGR1 & ~ADC_CFGR1_RES) | ADC_RESOLUTION_12B;
 80073cc:	4b9c      	ldr	r3, [pc, #624]	; (8007640 <InitializeSystem+0x874>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	4b9b      	ldr	r3, [pc, #620]	; (8007640 <InitializeSystem+0x874>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2118      	movs	r1, #24
 80073d8:	438a      	bics	r2, r1
 80073da:	60da      	str	r2, [r3, #12]
  hadc.Instance->CFGR2 = (hadc.Instance->CFGR2 & ~ADC_CFGR2_CKMODE) | ADC_CLOCK_ASYNC_DIV1;
 80073dc:	4b98      	ldr	r3, [pc, #608]	; (8007640 <InitializeSystem+0x874>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691a      	ldr	r2, [r3, #16]
 80073e2:	4b97      	ldr	r3, [pc, #604]	; (8007640 <InitializeSystem+0x874>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	0092      	lsls	r2, r2, #2
 80073e8:	0892      	lsrs	r2, r2, #2
 80073ea:	611a      	str	r2, [r3, #16]
  hadc.Instance->CFGR1 &= ~(ADC_CFGR1_DISCEN | ADC_CFGR1_AUTOFF | ADC_CFGR1_AUTDLY |
 80073ec:	4b94      	ldr	r3, [pc, #592]	; (8007640 <InitializeSystem+0x874>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	4b93      	ldr	r3, [pc, #588]	; (8007640 <InitializeSystem+0x874>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4996      	ldr	r1, [pc, #600]	; (8007650 <InitializeSystem+0x884>)
 80073f8:	400a      	ands	r2, r1
 80073fa:	60da      	str	r2, [r3, #12]
                            ADC_CFGR1_CONT | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTSEL |
                            ADC_CFGR1_EXTEN | ADC_CFGR1_ALIGN |
                            ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG);
  hadc.Instance->CFGR1 |= ((1u << 13u) | (1u << 12u) |
 80073fc:	4b90      	ldr	r3, [pc, #576]	; (8007640 <InitializeSystem+0x874>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	4b8f      	ldr	r3, [pc, #572]	; (8007640 <InitializeSystem+0x874>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4993      	ldr	r1, [pc, #588]	; (8007654 <InitializeSystem+0x888>)
 8007408:	430a      	orrs	r2, r1
 800740a:	60da      	str	r2, [r3, #12]
                            ADC_DATAALIGN_RIGHT | (1u << 1u));


  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800740c:	003b      	movs	r3, r7
 800740e:	2280      	movs	r2, #128	; 0x80
 8007410:	0152      	lsls	r2, r2, #5
 8007412:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8007414:	003b      	movs	r3, r7
 8007416:	2206      	movs	r2, #6
 8007418:	609a      	str	r2, [r3, #8]

  sConfig.Channel = ADC_CHANNEL_0;                                                        // Temperature Sensor
 800741a:	003b      	movs	r3, r7
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]
  STM32_ADC_ConfigChannel(&hadc, &sConfig);
 8007420:	003a      	movs	r2, r7
 8007422:	4b87      	ldr	r3, [pc, #540]	; (8007640 <InitializeSystem+0x874>)
 8007424:	0011      	movs	r1, r2
 8007426:	0018      	movs	r0, r3
 8007428:	f7ff fc9c 	bl	8006d64 <STM32_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_5;                                                        // Power Input
 800742c:	003b      	movs	r3, r7
 800742e:	2205      	movs	r2, #5
 8007430:	601a      	str	r2, [r3, #0]
  STM32_ADC_ConfigChannel(&hadc, &sConfig);
 8007432:	003a      	movs	r2, r7
 8007434:	4b82      	ldr	r3, [pc, #520]	; (8007640 <InitializeSystem+0x874>)
 8007436:	0011      	movs	r1, r2
 8007438:	0018      	movs	r0, r3
 800743a:	f7ff fc93 	bl	8006d64 <STM32_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_6;                                                        // KMA
 800743e:	003b      	movs	r3, r7
 8007440:	2206      	movs	r2, #6
 8007442:	601a      	str	r2, [r3, #0]
  STM32_ADC_ConfigChannel(&hadc, &sConfig);
 8007444:	003a      	movs	r2, r7
 8007446:	4b7e      	ldr	r3, [pc, #504]	; (8007640 <InitializeSystem+0x874>)
 8007448:	0011      	movs	r1, r2
 800744a:	0018      	movs	r0, r3
 800744c:	f7ff fc8a 	bl	8006d64 <STM32_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_7;                                                        // +5VDC
 8007450:	003b      	movs	r3, r7
 8007452:	2207      	movs	r2, #7
 8007454:	601a      	str	r2, [r3, #0]
  STM32_ADC_ConfigChannel(&hadc, &sConfig);
 8007456:	003a      	movs	r2, r7
 8007458:	4b79      	ldr	r3, [pc, #484]	; (8007640 <InitializeSystem+0x874>)
 800745a:	0011      	movs	r1, r2
 800745c:	0018      	movs	r0, r3
 800745e:	f7ff fc81 	bl	8006d64 <STM32_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_VREFINT;                                                  // Internal Reference
 8007462:	003b      	movs	r3, r7
 8007464:	2211      	movs	r2, #17
 8007466:	601a      	str	r2, [r3, #0]
  STM32_ADC_ConfigChannel(&hadc, &sConfig);
 8007468:	003a      	movs	r2, r7
 800746a:	4b75      	ldr	r3, [pc, #468]	; (8007640 <InitializeSystem+0x874>)
 800746c:	0011      	movs	r1, r2
 800746e:	0018      	movs	r0, r3
 8007470:	f7ff fc78 	bl	8006d64 <STM32_ADC_ConfigChannel>

  //
  // Initialize CanBus Parameters
  //
  // Setup pointers for ECU information CAN Bus messages
  CanBus.ECUinfo[0] = FactoryConfiguration->ModelNumber;
 8007474:	4b78      	ldr	r3, [pc, #480]	; (8007658 <InitializeSystem+0x88c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3362      	adds	r3, #98	; 0x62
 800747a:	001a      	movs	r2, r3
 800747c:	4b77      	ldr	r3, [pc, #476]	; (800765c <InitializeSystem+0x890>)
 800747e:	65da      	str	r2, [r3, #92]	; 0x5c
  CanBus.ECUinfo[1] = FactoryConfiguration->SerialNumber;
 8007480:	4b75      	ldr	r3, [pc, #468]	; (8007658 <InitializeSystem+0x88c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	338a      	adds	r3, #138	; 0x8a
 8007486:	001a      	movs	r2, r3
 8007488:	4b74      	ldr	r3, [pc, #464]	; (800765c <InitializeSystem+0x890>)
 800748a:	661a      	str	r2, [r3, #96]	; 0x60
  CanBus.ECUinfo[2] = FactoryConfiguration->LocationString;
 800748c:	4b72      	ldr	r3, [pc, #456]	; (8007658 <InitializeSystem+0x88c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	33b2      	adds	r3, #178	; 0xb2
 8007492:	001a      	movs	r2, r3
 8007494:	4b71      	ldr	r3, [pc, #452]	; (800765c <InitializeSystem+0x890>)
 8007496:	665a      	str	r2, [r3, #100]	; 0x64
  CanBus.ECUinfo[3] = FactoryConfiguration->TypeString;
 8007498:	4b6f      	ldr	r3, [pc, #444]	; (8007658 <InitializeSystem+0x88c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	33da      	adds	r3, #218	; 0xda
 800749e:	001a      	movs	r2, r3
 80074a0:	4b6e      	ldr	r3, [pc, #440]	; (800765c <InitializeSystem+0x890>)
 80074a2:	669a      	str	r2, [r3, #104]	; 0x68
  CanBus.ECUinfo[4] = FactoryConfiguration->ManufacturerString;
 80074a4:	4b6c      	ldr	r3, [pc, #432]	; (8007658 <InitializeSystem+0x88c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	1cda      	adds	r2, r3, #3
 80074aa:	32ff      	adds	r2, #255	; 0xff
 80074ac:	4b6b      	ldr	r3, [pc, #428]	; (800765c <InitializeSystem+0x890>)
 80074ae:	66da      	str	r2, [r3, #108]	; 0x6c
  CanBus.ECUinfo[5] = FactoryConfiguration->HardwareIdString;
 80074b0:	4b69      	ldr	r3, [pc, #420]	; (8007658 <InitializeSystem+0x88c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	332b      	adds	r3, #43	; 0x2b
 80074b6:	33ff      	adds	r3, #255	; 0xff
 80074b8:	001a      	movs	r2, r3
 80074ba:	4b68      	ldr	r3, [pc, #416]	; (800765c <InitializeSystem+0x890>)
 80074bc:	671a      	str	r2, [r3, #112]	; 0x70
  CanBus.ECUinfo[6] = FactoryConfiguration->DateString;
 80074be:	4b66      	ldr	r3, [pc, #408]	; (8007658 <InitializeSystem+0x88c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	331e      	adds	r3, #30
 80074c4:	001a      	movs	r2, r3
 80074c6:	4b65      	ldr	r3, [pc, #404]	; (800765c <InitializeSystem+0x890>)
 80074c8:	675a      	str	r2, [r3, #116]	; 0x74
  SWinfobuff[0] = sizeof(FactoryConfiguration->SoftwareIdString);
 80074ca:	4b65      	ldr	r3, [pc, #404]	; (8007660 <InitializeSystem+0x894>)
 80074cc:	2228      	movs	r2, #40	; 0x28
 80074ce:	701a      	strb	r2, [r3, #0]
  CanBus.SWinfo[0] = SWinfobuff;
 80074d0:	4b62      	ldr	r3, [pc, #392]	; (800765c <InitializeSystem+0x890>)
 80074d2:	4a63      	ldr	r2, [pc, #396]	; (8007660 <InitializeSystem+0x894>)
 80074d4:	679a      	str	r2, [r3, #120]	; 0x78
  CanBus.SWinfo[1] = FactoryConfiguration->SoftwareIdString;
 80074d6:	4b60      	ldr	r3, [pc, #384]	; (8007658 <InitializeSystem+0x88c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3353      	adds	r3, #83	; 0x53
 80074dc:	33ff      	adds	r3, #255	; 0xff
 80074de:	001a      	movs	r2, r3
 80074e0:	4b5e      	ldr	r3, [pc, #376]	; (800765c <InitializeSystem+0x890>)
 80074e2:	67da      	str	r2, [r3, #124]	; 0x7c
  CanBus.Componentinfo[0] = FactoryConfiguration->MakeString;
 80074e4:	4b5c      	ldr	r3, [pc, #368]	; (8007658 <InitializeSystem+0x88c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	337b      	adds	r3, #123	; 0x7b
 80074ea:	33ff      	adds	r3, #255	; 0xff
 80074ec:	001a      	movs	r2, r3
 80074ee:	4b5b      	ldr	r3, [pc, #364]	; (800765c <InitializeSystem+0x890>)
 80074f0:	2180      	movs	r1, #128	; 0x80
 80074f2:	505a      	str	r2, [r3, r1]
  CanBus.Componentinfo[1] = FactoryConfiguration->ModelString;
 80074f4:	4b58      	ldr	r3, [pc, #352]	; (8007658 <InitializeSystem+0x88c>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3383      	adds	r3, #131	; 0x83
 80074fa:	33ff      	adds	r3, #255	; 0xff
 80074fc:	001a      	movs	r2, r3
 80074fe:	4b57      	ldr	r3, [pc, #348]	; (800765c <InitializeSystem+0x890>)
 8007500:	2184      	movs	r1, #132	; 0x84
 8007502:	505a      	str	r2, [r3, r1]
  CanBus.Componentinfo[2] = FactoryConfiguration->SerialString;
 8007504:	4b54      	ldr	r3, [pc, #336]	; (8007658 <InitializeSystem+0x88c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	33ab      	adds	r3, #171	; 0xab
 800750a:	33ff      	adds	r3, #255	; 0xff
 800750c:	001a      	movs	r2, r3
 800750e:	4b53      	ldr	r3, [pc, #332]	; (800765c <InitializeSystem+0x890>)
 8007510:	2188      	movs	r1, #136	; 0x88
 8007512:	505a      	str	r2, [r3, r1]
  CanBus.Componentinfo[3] = FactoryConfiguration->UnitString;
 8007514:	4b50      	ldr	r3, [pc, #320]	; (8007658 <InitializeSystem+0x88c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	33d3      	adds	r3, #211	; 0xd3
 800751a:	33ff      	adds	r3, #255	; 0xff
 800751c:	001a      	movs	r2, r3
 800751e:	4b4f      	ldr	r3, [pc, #316]	; (800765c <InitializeSystem+0x890>)
 8007520:	218c      	movs	r1, #140	; 0x8c
 8007522:	505a      	str	r2, [r3, r1]
  CanBus.Caninfo[0] = CanBus.ECUinfo;
 8007524:	4b4d      	ldr	r3, [pc, #308]	; (800765c <InitializeSystem+0x890>)
 8007526:	2190      	movs	r1, #144	; 0x90
 8007528:	4a4e      	ldr	r2, [pc, #312]	; (8007664 <InitializeSystem+0x898>)
 800752a:	505a      	str	r2, [r3, r1]
  CanBus.Caninfo[1] = CanBus.SWinfo;
 800752c:	4b4b      	ldr	r3, [pc, #300]	; (800765c <InitializeSystem+0x890>)
 800752e:	2194      	movs	r1, #148	; 0x94
 8007530:	4a4d      	ldr	r2, [pc, #308]	; (8007668 <InitializeSystem+0x89c>)
 8007532:	505a      	str	r2, [r3, r1]
  CanBus.Caninfo[2] = CanBus.Componentinfo;
 8007534:	4b49      	ldr	r3, [pc, #292]	; (800765c <InitializeSystem+0x890>)
 8007536:	2198      	movs	r1, #152	; 0x98
 8007538:	4a4c      	ldr	r2, [pc, #304]	; (800766c <InitializeSystem+0x8a0>)
 800753a:	505a      	str	r2, [r3, r1]
  CanBus.InfoSize[0] = sizeof(FactoryConfiguration->ModelNumber);
 800753c:	4b47      	ldr	r3, [pc, #284]	; (800765c <InitializeSystem+0x890>)
 800753e:	229c      	movs	r2, #156	; 0x9c
 8007540:	2128      	movs	r1, #40	; 0x28
 8007542:	5499      	strb	r1, [r3, r2]
  CanBus.InfoSize[1] = sizeof(FactoryConfiguration->SerialNumber);
 8007544:	4b45      	ldr	r3, [pc, #276]	; (800765c <InitializeSystem+0x890>)
 8007546:	229d      	movs	r2, #157	; 0x9d
 8007548:	2128      	movs	r1, #40	; 0x28
 800754a:	5499      	strb	r1, [r3, r2]
  CanBus.InfoSize[2] = sizeof(FactoryConfiguration->LocationString);
 800754c:	4b43      	ldr	r3, [pc, #268]	; (800765c <InitializeSystem+0x890>)
 800754e:	229e      	movs	r2, #158	; 0x9e
 8007550:	2128      	movs	r1, #40	; 0x28
 8007552:	5499      	strb	r1, [r3, r2]
  CanBus.InfoSize[3] = sizeof(FactoryConfiguration->TypeString);
 8007554:	4b41      	ldr	r3, [pc, #260]	; (800765c <InitializeSystem+0x890>)
 8007556:	229f      	movs	r2, #159	; 0x9f
 8007558:	2128      	movs	r1, #40	; 0x28
 800755a:	5499      	strb	r1, [r3, r2]
  CanBus.InfoSize[4] = sizeof(FactoryConfiguration->ManufacturerString);
 800755c:	4b3f      	ldr	r3, [pc, #252]	; (800765c <InitializeSystem+0x890>)
 800755e:	22a0      	movs	r2, #160	; 0xa0
 8007560:	2128      	movs	r1, #40	; 0x28
 8007562:	5499      	strb	r1, [r3, r2]
  CanBus.InfoSize[5] = sizeof(FactoryConfiguration->HardwareIdString);
 8007564:	4b3d      	ldr	r3, [pc, #244]	; (800765c <InitializeSystem+0x890>)
 8007566:	22a1      	movs	r2, #161	; 0xa1
 8007568:	2128      	movs	r1, #40	; 0x28
 800756a:	5499      	strb	r1, [r3, r2]
  CanBus.InfoSize[6] = sizeof(FactoryConfiguration->DateString);
 800756c:	4b3b      	ldr	r3, [pc, #236]	; (800765c <InitializeSystem+0x890>)
 800756e:	22a2      	movs	r2, #162	; 0xa2
 8007570:	2110      	movs	r1, #16
 8007572:	5499      	strb	r1, [r3, r2]
  CanBus.InfoSize[7] = sizeof(CanBus.SWinfo[0]);
 8007574:	4b39      	ldr	r3, [pc, #228]	; (800765c <InitializeSystem+0x890>)
 8007576:	22a3      	movs	r2, #163	; 0xa3
 8007578:	2104      	movs	r1, #4
 800757a:	5499      	strb	r1, [r3, r2]
  CanBus.InfoSize[8] = sizeof(FactoryConfiguration->SoftwareIdString);
 800757c:	4b37      	ldr	r3, [pc, #220]	; (800765c <InitializeSystem+0x890>)
 800757e:	22a4      	movs	r2, #164	; 0xa4
 8007580:	2128      	movs	r1, #40	; 0x28
 8007582:	5499      	strb	r1, [r3, r2]
  CanBus.InfoSize[9] = sizeof(FactoryConfiguration->MakeString);
 8007584:	4b35      	ldr	r3, [pc, #212]	; (800765c <InitializeSystem+0x890>)
 8007586:	22a5      	movs	r2, #165	; 0xa5
 8007588:	2108      	movs	r1, #8
 800758a:	5499      	strb	r1, [r3, r2]
  CanBus.InfoSize[10] = sizeof(FactoryConfiguration->ModelString);
 800758c:	4b33      	ldr	r3, [pc, #204]	; (800765c <InitializeSystem+0x890>)
 800758e:	22a6      	movs	r2, #166	; 0xa6
 8007590:	2128      	movs	r1, #40	; 0x28
 8007592:	5499      	strb	r1, [r3, r2]
  CanBus.InfoSize[11] = sizeof(FactoryConfiguration->SerialString);
 8007594:	4b31      	ldr	r3, [pc, #196]	; (800765c <InitializeSystem+0x890>)
 8007596:	22a7      	movs	r2, #167	; 0xa7
 8007598:	2128      	movs	r1, #40	; 0x28
 800759a:	5499      	strb	r1, [r3, r2]
  CanBus.InfoSize[12] = sizeof(FactoryConfiguration->UnitString);
 800759c:	4b2f      	ldr	r3, [pc, #188]	; (800765c <InitializeSystem+0x890>)
 800759e:	22a8      	movs	r2, #168	; 0xa8
 80075a0:	2128      	movs	r1, #40	; 0x28
 80075a2:	5499      	strb	r1, [r3, r2]
  //
  // Verify Configuration PDI image has the correct CRC16
  //
  CalculatedCrc.Firmware = CalcCrc16Array((uint8_t *)FirmwarePointer, (60 * 2048));
 80075a4:	23f0      	movs	r3, #240	; 0xf0
 80075a6:	025a      	lsls	r2, r3, #9
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	0011      	movs	r1, r2
 80075ac:	0018      	movs	r0, r3
 80075ae:	f7fb fab5 	bl	8002b1c <CalcCrc16Array>
 80075b2:	0003      	movs	r3, r0
 80075b4:	001a      	movs	r2, r3
 80075b6:	4b2e      	ldr	r3, [pc, #184]	; (8007670 <InitializeSystem+0x8a4>)
 80075b8:	801a      	strh	r2, [r3, #0]
  CalculatedCrc.FlashConfiguration = CalcCrc16Array((uint8_t *)FlashConfiguration, 2046);
 80075ba:	4b2e      	ldr	r3, [pc, #184]	; (8007674 <InitializeSystem+0x8a8>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a2e      	ldr	r2, [pc, #184]	; (8007678 <InitializeSystem+0x8ac>)
 80075c0:	0011      	movs	r1, r2
 80075c2:	0018      	movs	r0, r3
 80075c4:	f7fb faaa 	bl	8002b1c <CalcCrc16Array>
 80075c8:	0003      	movs	r3, r0
 80075ca:	001a      	movs	r2, r3
 80075cc:	4b28      	ldr	r3, [pc, #160]	; (8007670 <InitializeSystem+0x8a4>)
 80075ce:	805a      	strh	r2, [r3, #2]
  CalculatedCrc.FuzzyConfiguration = CalcCrc16Array((uint8_t *)FuzzyPage, 2046);
 80075d0:	4b2a      	ldr	r3, [pc, #168]	; (800767c <InitializeSystem+0x8b0>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a28      	ldr	r2, [pc, #160]	; (8007678 <InitializeSystem+0x8ac>)
 80075d6:	0011      	movs	r1, r2
 80075d8:	0018      	movs	r0, r3
 80075da:	f7fb fa9f 	bl	8002b1c <CalcCrc16Array>
 80075de:	0003      	movs	r3, r0
 80075e0:	001a      	movs	r2, r3
 80075e2:	4b23      	ldr	r3, [pc, #140]	; (8007670 <InitializeSystem+0x8a4>)
 80075e4:	80da      	strh	r2, [r3, #6]
  CalculatedCrc.FactoryConfiguration = CalcCrc16Array((uint8_t *)FactoryConfiguration, 2046);
 80075e6:	4b1c      	ldr	r3, [pc, #112]	; (8007658 <InitializeSystem+0x88c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a23      	ldr	r2, [pc, #140]	; (8007678 <InitializeSystem+0x8ac>)
 80075ec:	0011      	movs	r1, r2
 80075ee:	0018      	movs	r0, r3
 80075f0:	f7fb fa94 	bl	8002b1c <CalcCrc16Array>
 80075f4:	0003      	movs	r3, r0
 80075f6:	001a      	movs	r2, r3
 80075f8:	4b1d      	ldr	r3, [pc, #116]	; (8007670 <InitializeSystem+0x8a4>)
 80075fa:	809a      	strh	r2, [r3, #4]

  bFlashConfigurationValid = (FlashConfiguration->Crc16 == CalculatedCrc.FlashConfiguration) & 1;
 80075fc:	4b1d      	ldr	r3, [pc, #116]	; (8007674 <InitializeSystem+0x8a8>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a1d      	ldr	r2, [pc, #116]	; (8007678 <InitializeSystem+0x8ac>)
 8007602:	5a9a      	ldrh	r2, [r3, r2]
 8007604:	4b1a      	ldr	r3, [pc, #104]	; (8007670 <InitializeSystem+0x8a4>)
 8007606:	885b      	ldrh	r3, [r3, #2]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	425a      	negs	r2, r3
 800760c:	4153      	adcs	r3, r2
 800760e:	b2db      	uxtb	r3, r3
 8007610:	001a      	movs	r2, r3
 8007612:	4b1b      	ldr	r3, [pc, #108]	; (8007680 <InitializeSystem+0x8b4>)
 8007614:	701a      	strb	r2, [r3, #0]
  bFactoryConfigurationValid =  (FactoryConfiguration->Crc16 == CalculatedCrc.FactoryConfiguration) & 1;
 8007616:	4b10      	ldr	r3, [pc, #64]	; (8007658 <InitializeSystem+0x88c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a17      	ldr	r2, [pc, #92]	; (8007678 <InitializeSystem+0x8ac>)
 800761c:	5a9a      	ldrh	r2, [r3, r2]
 800761e:	e031      	b.n	8007684 <InitializeSystem+0x8b8>
 8007620:	40005400 	.word	0x40005400
 8007624:	ffffefff 	.word	0xffffefff
 8007628:	fffff0ff 	.word	0xfffff0ff
 800762c:	48000400 	.word	0x48000400
 8007630:	40005800 	.word	0x40005800
 8007634:	00e01a4c 	.word	0x00e01a4c
 8007638:	ffff7fff 	.word	0xffff7fff
 800763c:	02008000 	.word	0x02008000
 8007640:	20002fa0 	.word	0x20002fa0
 8007644:	40012400 	.word	0x40012400
 8007648:	20002f6c 	.word	0x20002f6c
 800764c:	40020008 	.word	0x40020008
 8007650:	fffe0219 	.word	0xfffe0219
 8007654:	00003002 	.word	0x00003002
 8007658:	20001eec 	.word	0x20001eec
 800765c:	200014a4 	.word	0x200014a4
 8007660:	200037f8 	.word	0x200037f8
 8007664:	20001500 	.word	0x20001500
 8007668:	2000151c 	.word	0x2000151c
 800766c:	20001524 	.word	0x20001524
 8007670:	20000b18 	.word	0x20000b18
 8007674:	20002f04 	.word	0x20002f04
 8007678:	000007fe 	.word	0x000007fe
 800767c:	20002f2c 	.word	0x20002f2c
 8007680:	20002cf6 	.word	0x20002cf6
 8007684:	4b96      	ldr	r3, [pc, #600]	; (80078e0 <InitializeSystem+0xb14>)
 8007686:	889b      	ldrh	r3, [r3, #4]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	425a      	negs	r2, r3
 800768c:	4153      	adcs	r3, r2
 800768e:	b2db      	uxtb	r3, r3
 8007690:	001a      	movs	r2, r3
 8007692:	4b94      	ldr	r3, [pc, #592]	; (80078e4 <InitializeSystem+0xb18>)
 8007694:	701a      	strb	r2, [r3, #0]
  bFuzzyPageValid = (FuzzyPage->Fuzzy2.Crc16 == CalculatedCrc.FuzzyConfiguration) & 1;
 8007696:	4b94      	ldr	r3, [pc, #592]	; (80078e8 <InitializeSystem+0xb1c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a94      	ldr	r2, [pc, #592]	; (80078ec <InitializeSystem+0xb20>)
 800769c:	5a9a      	ldrh	r2, [r3, r2]
 800769e:	4b90      	ldr	r3, [pc, #576]	; (80078e0 <InitializeSystem+0xb14>)
 80076a0:	88db      	ldrh	r3, [r3, #6]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	425a      	negs	r2, r3
 80076a6:	4153      	adcs	r3, r2
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	001a      	movs	r2, r3
 80076ac:	4b90      	ldr	r3, [pc, #576]	; (80078f0 <InitializeSystem+0xb24>)
 80076ae:	701a      	strb	r2, [r3, #0]
  bFirmwareValid =  (FactoryConfiguration->FirmwareCrc16 == CalculatedCrc.Firmware) & 1;
 80076b0:	4b90      	ldr	r3, [pc, #576]	; (80078f4 <InitializeSystem+0xb28>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a90      	ldr	r2, [pc, #576]	; (80078f8 <InitializeSystem+0xb2c>)
 80076b6:	5a9a      	ldrh	r2, [r3, r2]
 80076b8:	4b89      	ldr	r3, [pc, #548]	; (80078e0 <InitializeSystem+0xb14>)
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	425a      	negs	r2, r3
 80076c0:	4153      	adcs	r3, r2
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	001a      	movs	r2, r3
 80076c6:	4b8d      	ldr	r3, [pc, #564]	; (80078fc <InitializeSystem+0xb30>)
 80076c8:	701a      	strb	r2, [r3, #0]

  //
  // If on startup something is wrong, load in default settings, not for FLASH - this comes
  // after initialization
  //
  ProcessDefaultProfile();
 80076ca:	f7fb fb51 	bl	8002d70 <ProcessDefaultProfile>

  //
  // Initialize CAN
  //
  if (((bFactoryConfigurationValid != 0) && (FactoryConfiguration->CanDriverPresent != 0))) {
 80076ce:	4b85      	ldr	r3, [pc, #532]	; (80078e4 <InitializeSystem+0xb18>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d009      	beq.n	80076ea <InitializeSystem+0x91e>
 80076d6:	4b87      	ldr	r3, [pc, #540]	; (80078f4 <InitializeSystem+0xb28>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	7f1b      	ldrb	r3, [r3, #28]
 80076dc:	227f      	movs	r2, #127	; 0x7f
 80076de:	4393      	bics	r3, r2
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <InitializeSystem+0x91e>
    MX_CAN_Init();
 80076e6:	f7fb f97d 	bl	80029e4 <MX_CAN_Init>
  }
  //
  // Initialize UART1
  //
  MX_USART1_UART_Init();
 80076ea:	f004 f811 	bl	800b710 <MX_USART1_UART_Init>

  SysVars.Version = FIRMWARE_VERSION;
 80076ee:	4b84      	ldr	r3, [pc, #528]	; (8007900 <InitializeSystem+0xb34>)
 80076f0:	4a84      	ldr	r2, [pc, #528]	; (8007904 <InitializeSystem+0xb38>)
 80076f2:	601a      	str	r2, [r3, #0]

  InitializeDigitalIO(DIG_MODE_POWERUP); // Configure DIG_IO1 as SERIAL_INOUT, all other DIG I/O as Digital Inputs (disabled)
 80076f4:	2000      	movs	r0, #0
 80076f6:	f7fc fcc9 	bl	800408c <InitializeDigitalIO>
  InitializeExecutionTimers();
 80076fa:	f7fc ff77 	bl	80045ec <InitializeExecutionTimers>
  InitializeEventLog();
 80076fe:	f000 f9bf 	bl	8007a80 <InitializeEventLog>
  InitializeAccel();
 8007702:	f7f9 f847 	bl	8000794 <InitializeAccel>
  InitializePWM();
 8007706:	f000 ff59 	bl	80085bc <InitializePWM>
  STM32_Delay(50);
 800770a:	2032      	movs	r0, #50	; 0x32
 800770c:	f7fe fb3c 	bl	8005d88 <STM32_Delay>
  InitializeMcp3421();
 8007710:	f000 fd32 	bl	8008178 <InitializeMcp3421>
  //
  // Set Throttle Data Structure initial values
  //
  SysVars.Quality1 = 0;
 8007714:	4b7a      	ldr	r3, [pc, #488]	; (8007900 <InitializeSystem+0xb34>)
 8007716:	22fc      	movs	r2, #252	; 0xfc
 8007718:	2100      	movs	r1, #0
 800771a:	5099      	str	r1, [r3, r2]
  SysVars.Quality2 = 0;
 800771c:	4a78      	ldr	r2, [pc, #480]	; (8007900 <InitializeSystem+0xb34>)
 800771e:	2380      	movs	r3, #128	; 0x80
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	2100      	movs	r1, #0
 8007724:	50d1      	str	r1, [r2, r3]
  SysVars.ErrorStatus = FALSE;
 8007726:	4b76      	ldr	r3, [pc, #472]	; (8007900 <InitializeSystem+0xb34>)
 8007728:	22e4      	movs	r2, #228	; 0xe4
 800772a:	5899      	ldr	r1, [r3, r2]
 800772c:	4876      	ldr	r0, [pc, #472]	; (8007908 <InitializeSystem+0xb3c>)
 800772e:	4001      	ands	r1, r0
 8007730:	5099      	str	r1, [r3, r2]
  ForeignSysVars.ErrorStatus = FALSE;
 8007732:	4b76      	ldr	r3, [pc, #472]	; (800790c <InitializeSystem+0xb40>)
 8007734:	22e4      	movs	r2, #228	; 0xe4
 8007736:	5899      	ldr	r1, [r3, r2]
 8007738:	4873      	ldr	r0, [pc, #460]	; (8007908 <InitializeSystem+0xb3c>)
 800773a:	4001      	ands	r1, r0
 800773c:	5099      	str	r1, [r3, r2]
  ThrottleInfo.Moved = 0;
 800773e:	4b74      	ldr	r3, [pc, #464]	; (8007910 <InitializeSystem+0xb44>)
 8007740:	2200      	movs	r2, #0
 8007742:	705a      	strb	r2, [r3, #1]
  ThrottleInfo.Moving = 0;
 8007744:	4b72      	ldr	r3, [pc, #456]	; (8007910 <InitializeSystem+0xb44>)
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
  //
  // Get Sensor Unique ID
  //
  uint8_t* IdPtr = (uint8_t*)(UNIQUE_ID_BASE);
 800774a:	4b72      	ldr	r3, [pc, #456]	; (8007914 <InitializeSystem+0xb48>)
 800774c:	613b      	str	r3, [r7, #16]
  UniqueId.XYCoordniates = IdPtr[0];
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	001a      	movs	r2, r3
 8007754:	4b70      	ldr	r3, [pc, #448]	; (8007918 <InitializeSystem+0xb4c>)
 8007756:	605a      	str	r2, [r3, #4]
  UniqueId.XYCoordniates += IdPtr[1] << 8;
 8007758:	4b6f      	ldr	r3, [pc, #444]	; (8007918 <InitializeSystem+0xb4c>)
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	3201      	adds	r2, #1
 8007760:	7812      	ldrb	r2, [r2, #0]
 8007762:	0212      	lsls	r2, r2, #8
 8007764:	189a      	adds	r2, r3, r2
 8007766:	4b6c      	ldr	r3, [pc, #432]	; (8007918 <InitializeSystem+0xb4c>)
 8007768:	605a      	str	r2, [r3, #4]
  UniqueId.XYCoordniates += IdPtr[2] << 16;
 800776a:	4b6b      	ldr	r3, [pc, #428]	; (8007918 <InitializeSystem+0xb4c>)
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	3202      	adds	r2, #2
 8007772:	7812      	ldrb	r2, [r2, #0]
 8007774:	0412      	lsls	r2, r2, #16
 8007776:	189a      	adds	r2, r3, r2
 8007778:	4b67      	ldr	r3, [pc, #412]	; (8007918 <InitializeSystem+0xb4c>)
 800777a:	605a      	str	r2, [r3, #4]
  UniqueId.XYCoordniates += IdPtr[3] << 24;
 800777c:	4b66      	ldr	r3, [pc, #408]	; (8007918 <InitializeSystem+0xb4c>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	3203      	adds	r2, #3
 8007784:	7812      	ldrb	r2, [r2, #0]
 8007786:	0612      	lsls	r2, r2, #24
 8007788:	189a      	adds	r2, r3, r2
 800778a:	4b63      	ldr	r3, [pc, #396]	; (8007918 <InitializeSystem+0xb4c>)
 800778c:	605a      	str	r2, [r3, #4]

  UniqueId.WaferId = IdPtr[4];
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	791a      	ldrb	r2, [r3, #4]
 8007792:	4b61      	ldr	r3, [pc, #388]	; (8007918 <InitializeSystem+0xb4c>)
 8007794:	701a      	strb	r2, [r3, #0]

  UniqueId.Lot1 = IdPtr[5];
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	795a      	ldrb	r2, [r3, #5]
 800779a:	4b5f      	ldr	r3, [pc, #380]	; (8007918 <InitializeSystem+0xb4c>)
 800779c:	721a      	strb	r2, [r3, #8]

  UniqueId.Lot2 = IdPtr[6];
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	3306      	adds	r3, #6
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	4b5c      	ldr	r3, [pc, #368]	; (8007918 <InitializeSystem+0xb4c>)
 80077a8:	815a      	strh	r2, [r3, #10]
  UniqueId.Lot2 += IdPtr[7];
 80077aa:	4b5b      	ldr	r3, [pc, #364]	; (8007918 <InitializeSystem+0xb4c>)
 80077ac:	895a      	ldrh	r2, [r3, #10]
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	3307      	adds	r3, #7
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	18d3      	adds	r3, r2, r3
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	4b57      	ldr	r3, [pc, #348]	; (8007918 <InitializeSystem+0xb4c>)
 80077bc:	815a      	strh	r2, [r3, #10]

  UniqueId.Lot3 = IdPtr[8];
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	3308      	adds	r3, #8
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	001a      	movs	r2, r3
 80077c6:	4b54      	ldr	r3, [pc, #336]	; (8007918 <InitializeSystem+0xb4c>)
 80077c8:	60da      	str	r2, [r3, #12]
  UniqueId.Lot3 += IdPtr[9] << 8;
 80077ca:	4b53      	ldr	r3, [pc, #332]	; (8007918 <InitializeSystem+0xb4c>)
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	3209      	adds	r2, #9
 80077d2:	7812      	ldrb	r2, [r2, #0]
 80077d4:	0212      	lsls	r2, r2, #8
 80077d6:	189a      	adds	r2, r3, r2
 80077d8:	4b4f      	ldr	r3, [pc, #316]	; (8007918 <InitializeSystem+0xb4c>)
 80077da:	60da      	str	r2, [r3, #12]
  UniqueId.Lot3 += IdPtr[10] << 16;
 80077dc:	4b4e      	ldr	r3, [pc, #312]	; (8007918 <InitializeSystem+0xb4c>)
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	320a      	adds	r2, #10
 80077e4:	7812      	ldrb	r2, [r2, #0]
 80077e6:	0412      	lsls	r2, r2, #16
 80077e8:	189a      	adds	r2, r3, r2
 80077ea:	4b4b      	ldr	r3, [pc, #300]	; (8007918 <InitializeSystem+0xb4c>)
 80077ec:	60da      	str	r2, [r3, #12]
  UniqueId.Lot3 += IdPtr[11] << 24;
 80077ee:	4b4a      	ldr	r3, [pc, #296]	; (8007918 <InitializeSystem+0xb4c>)
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	320b      	adds	r2, #11
 80077f6:	7812      	ldrb	r2, [r2, #0]
 80077f8:	0612      	lsls	r2, r2, #24
 80077fa:	189a      	adds	r2, r3, r2
 80077fc:	4b46      	ldr	r3, [pc, #280]	; (8007918 <InitializeSystem+0xb4c>)
 80077fe:	60da      	str	r2, [r3, #12]


  //
  //
  //
  if (FlashConfiguration->SensorMode == 0) {
 8007800:	4b46      	ldr	r3, [pc, #280]	; (800791c <InitializeSystem+0xb50>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a46      	ldr	r2, [pc, #280]	; (8007920 <InitializeSystem+0xb54>)
 8007806:	5c9b      	ldrb	r3, [r3, r2]
 8007808:	2201      	movs	r2, #1
 800780a:	4013      	ands	r3, r2
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d109      	bne.n	8007826 <InitializeSystem+0xa5a>
    RS485.RSControl = 1;
 8007812:	4b44      	ldr	r3, [pc, #272]	; (8007924 <InitializeSystem+0xb58>)
 8007814:	2201      	movs	r2, #1
 8007816:	75da      	strb	r2, [r3, #23]
    SysVars.SensorLetter = 0;
 8007818:	4b39      	ldr	r3, [pc, #228]	; (8007900 <InitializeSystem+0xb34>)
 800781a:	22e4      	movs	r2, #228	; 0xe4
 800781c:	5c99      	ldrb	r1, [r3, r2]
 800781e:	2001      	movs	r0, #1
 8007820:	4381      	bics	r1, r0
 8007822:	5499      	strb	r1, [r3, r2]
 8007824:	e008      	b.n	8007838 <InitializeSystem+0xa6c>
  }
  else {
    RS485.RSControl = 0;
 8007826:	4b3f      	ldr	r3, [pc, #252]	; (8007924 <InitializeSystem+0xb58>)
 8007828:	2200      	movs	r2, #0
 800782a:	75da      	strb	r2, [r3, #23]
    SysVars.SensorLetter = 1;
 800782c:	4b34      	ldr	r3, [pc, #208]	; (8007900 <InitializeSystem+0xb34>)
 800782e:	22e4      	movs	r2, #228	; 0xe4
 8007830:	5c99      	ldrb	r1, [r3, r2]
 8007832:	2001      	movs	r0, #1
 8007834:	4301      	orrs	r1, r0
 8007836:	5499      	strb	r1, [r3, r2]
  }
  SysVars.SensorLetter = FlashConfiguration->SensorMode;
 8007838:	4b38      	ldr	r3, [pc, #224]	; (800791c <InitializeSystem+0xb50>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a38      	ldr	r2, [pc, #224]	; (8007920 <InitializeSystem+0xb54>)
 800783e:	5c9b      	ldrb	r3, [r3, r2]
 8007840:	07db      	lsls	r3, r3, #31
 8007842:	0fdb      	lsrs	r3, r3, #31
 8007844:	b2d9      	uxtb	r1, r3
 8007846:	4b2e      	ldr	r3, [pc, #184]	; (8007900 <InitializeSystem+0xb34>)
 8007848:	22e4      	movs	r2, #228	; 0xe4
 800784a:	2001      	movs	r0, #1
 800784c:	4001      	ands	r1, r0
 800784e:	000c      	movs	r4, r1
 8007850:	5c99      	ldrb	r1, [r3, r2]
 8007852:	2001      	movs	r0, #1
 8007854:	4381      	bics	r1, r0
 8007856:	1c08      	adds	r0, r1, #0
 8007858:	1c21      	adds	r1, r4, #0
 800785a:	4301      	orrs	r1, r0
 800785c:	5499      	strb	r1, [r3, r2]

  SysVars.bStartupComplete = 0; // Startup flag must be 0 at the beginning
 800785e:	4b28      	ldr	r3, [pc, #160]	; (8007900 <InitializeSystem+0xb34>)
 8007860:	22f8      	movs	r2, #248	; 0xf8
 8007862:	189b      	adds	r3, r3, r2
 8007864:	789a      	ldrb	r2, [r3, #2]
 8007866:	2101      	movs	r1, #1
 8007868:	438a      	bics	r2, r1
 800786a:	709a      	strb	r2, [r3, #2]
    // program page while executing from it.  So, reflash.c will actually put the Page 55 code into
    // Page 56.
    // Then, on power-up we check if there is code in Page 56.  If there is, the code is moved back to
    // Page 55 and then Page 56 is erased by programming it with data from PAge 57 (which is always erased).
    //
    uint8_t   bBlank = 1;
 800786c:	231f      	movs	r3, #31
 800786e:	18fb      	adds	r3, r7, r3
 8007870:	2201      	movs	r2, #1
 8007872:	701a      	strb	r2, [r3, #0]
    uint32_t *Ptr = (uint32_t *)(0x08000000u + (2048 * 56));
 8007874:	4b2c      	ldr	r3, [pc, #176]	; (8007928 <InitializeSystem+0xb5c>)
 8007876:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 0; i < 512; i++) {
 8007878:	2300      	movs	r3, #0
 800787a:	61bb      	str	r3, [r7, #24]
 800787c:	e00e      	b.n	800789c <InitializeSystem+0xad0>
        if (Ptr[i] != 0xFFFFFFFFU) {
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	18d3      	adds	r3, r2, r3
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3301      	adds	r3, #1
 800788a:	d004      	beq.n	8007896 <InitializeSystem+0xaca>
            bBlank = 0;
 800788c:	231f      	movs	r3, #31
 800788e:	18fb      	adds	r3, r7, r3
 8007890:	2200      	movs	r2, #0
 8007892:	701a      	strb	r2, [r3, #0]
            break;
 8007894:	e006      	b.n	80078a4 <InitializeSystem+0xad8>
    for (uint32_t i = 0; i < 512; i++) {
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	3301      	adds	r3, #1
 800789a:	61bb      	str	r3, [r7, #24]
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	4a23      	ldr	r2, [pc, #140]	; (800792c <InitializeSystem+0xb60>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d9ec      	bls.n	800787e <InitializeSystem+0xab2>
        }
    }
    if (bBlank == 0) {
 80078a4:	231f      	movs	r3, #31
 80078a6:	18fb      	adds	r3, r7, r3
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10e      	bne.n	80078cc <InitializeSystem+0xb00>
        ReflashTuningParameters(55, (uint16_t *)(0x08000000u + (2048 * 56)));        // Copy Page 56 to Page 55
 80078ae:	4b1e      	ldr	r3, [pc, #120]	; (8007928 <InitializeSystem+0xb5c>)
 80078b0:	0019      	movs	r1, r3
 80078b2:	2037      	movs	r0, #55	; 0x37
 80078b4:	f000 ff46 	bl	8008744 <ReflashTuningParameters>
        ReflashTuningParameters(56, (uint16_t *)(0x08000000u + (2048 * 57)));        // Erase Page 56 by copying page 57 to 56
 80078b8:	4b1d      	ldr	r3, [pc, #116]	; (8007930 <InitializeSystem+0xb64>)
 80078ba:	0019      	movs	r1, r3
 80078bc:	2038      	movs	r0, #56	; 0x38
 80078be:	f000 ff41 	bl	8008744 <ReflashTuningParameters>
        LogEvent(EVENT_MESSAGE_ID_100, 0, 0);
 80078c2:	2200      	movs	r2, #0
 80078c4:	2100      	movs	r1, #0
 80078c6:	2064      	movs	r0, #100	; 0x64
 80078c8:	f000 f9ce 	bl	8007c68 <LogEvent>
    }
    LogEvent(EVENT_MESSAGE_ID_1, 0, 0);
 80078cc:	2200      	movs	r2, #0
 80078ce:	2100      	movs	r1, #0
 80078d0:	2001      	movs	r0, #1
 80078d2:	f000 f9c9 	bl	8007c68 <LogEvent>
}
 80078d6:	46c0      	nop			; (mov r8, r8)
 80078d8:	46bd      	mov	sp, r7
 80078da:	b009      	add	sp, #36	; 0x24
 80078dc:	bd90      	pop	{r4, r7, pc}
 80078de:	46c0      	nop			; (mov r8, r8)
 80078e0:	20000b18 	.word	0x20000b18
 80078e4:	20002f9e 	.word	0x20002f9e
 80078e8:	20002f2c 	.word	0x20002f2c
 80078ec:	000007fe 	.word	0x000007fe
 80078f0:	20002cf5 	.word	0x20002cf5
 80078f4:	20001eec 	.word	0x20001eec
 80078f8:	00000216 	.word	0x00000216
 80078fc:	20002f68 	.word	0x20002f68
 8007900:	200020c0 	.word	0x200020c0
 8007904:	00000202 	.word	0x00000202
 8007908:	fff00fff 	.word	0xfff00fff
 800790c:	20001f20 	.word	0x20001f20
 8007910:	20002f30 	.word	0x20002f30
 8007914:	1ffff7ac 	.word	0x1ffff7ac
 8007918:	20001490 	.word	0x20001490
 800791c:	20002f04 	.word	0x20002f04
 8007920:	00000225 	.word	0x00000225
 8007924:	20002f08 	.word	0x20002f08
 8007928:	0801c000 	.word	0x0801c000
 800792c:	000001ff 	.word	0x000001ff
 8007930:	0801c800 	.word	0x0801c800

08007934 <NMI_Handler>:
//
// Returns:   None
//
// Requirement(s):
//
void NMI_Handler(void) {
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
    Error_Handler(FILE_INTERRUPTS, __LINE__);
 8007938:	213b      	movs	r1, #59	; 0x3b
 800793a:	2014      	movs	r0, #20
 800793c:	f7fc fd4a 	bl	80043d4 <Error_Handler>
}
 8007940:	46c0      	nop			; (mov r8, r8)
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <HardFault_Handler>:
//
// Returns:   None
//
// Requirement(s):
//
void HardFault_Handler(void) {
 8007946:	b580      	push	{r7, lr}
 8007948:	af00      	add	r7, sp, #0
    Error_Handler(FILE_INTERRUPTS, __LINE__);
 800794a:	214a      	movs	r1, #74	; 0x4a
 800794c:	2014      	movs	r0, #20
 800794e:	f7fc fd41 	bl	80043d4 <Error_Handler>
}
 8007952:	46c0      	nop			; (mov r8, r8)
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <SVC_Handler>:
//
// Returns:   None
//
// Requirement(s):
//
void SVC_Handler(void) {
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
    Error_Handler(FILE_INTERRUPTS, __LINE__);
 800795c:	2158      	movs	r1, #88	; 0x58
 800795e:	2014      	movs	r0, #20
 8007960:	f7fc fd38 	bl	80043d4 <Error_Handler>
}
 8007964:	46c0      	nop			; (mov r8, r8)
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <PendSV_Handler>:
//
// Returns:   None
//
// Requirement(s):
//
void PendSV_Handler(void) {
 800796a:	b580      	push	{r7, lr}
 800796c:	af00      	add	r7, sp, #0
    Error_Handler(FILE_INTERRUPTS, __LINE__);
 800796e:	2166      	movs	r1, #102	; 0x66
 8007970:	2014      	movs	r0, #20
 8007972:	f7fc fd2f 	bl	80043d4 <Error_Handler>
}
 8007976:	46c0      	nop			; (mov r8, r8)
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <EXTI0_1_IRQHandler>:
//
// Returns:   None
//
// Requirement(s):
//
void EXTI0_1_IRQHandler(void) {
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
    STM32_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8007980:	2002      	movs	r0, #2
 8007982:	f7fd ffad 	bl	80058e0 <STM32_GPIO_EXTI_IRQHandler>
}
 8007986:	46c0      	nop			; (mov r8, r8)
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <EXTI2_3_IRQHandler>:
//
// Returns:   None
//
// Requirement(s):
//
void EXTI2_3_IRQHandler(void) {
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
    STM32_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8007990:	2008      	movs	r0, #8
 8007992:	f7fd ffa5 	bl	80058e0 <STM32_GPIO_EXTI_IRQHandler>
}
 8007996:	46c0      	nop			; (mov r8, r8)
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <EXTI4_15_IRQHandler>:
//
// Returns:   None
//
// Requirement(s):
//
void EXTI4_15_IRQHandler(void) {
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
    STM32_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80079a0:	2010      	movs	r0, #16
 80079a2:	f7fd ff9d 	bl	80058e0 <STM32_GPIO_EXTI_IRQHandler>
    STM32_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80079a6:	2380      	movs	r3, #128	; 0x80
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	0018      	movs	r0, r3
 80079ac:	f7fd ff98 	bl	80058e0 <STM32_GPIO_EXTI_IRQHandler>
    STM32_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80079b0:	2380      	movs	r3, #128	; 0x80
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	0018      	movs	r0, r3
 80079b6:	f7fd ff93 	bl	80058e0 <STM32_GPIO_EXTI_IRQHandler>
}
 80079ba:	46c0      	nop			; (mov r8, r8)
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <SysTick_Handler>:
//
// Returns:   None
//
// Requirement(s):
//
void SysTick_Handler(void) {
 80079c0:	b580      	push	{r7, lr}
 80079c2:	af00      	add	r7, sp, #0
    uTicks++;
 80079c4:	4b03      	ldr	r3, [pc, #12]	; (80079d4 <SysTick_Handler+0x14>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	4b02      	ldr	r3, [pc, #8]	; (80079d4 <SysTick_Handler+0x14>)
 80079cc:	601a      	str	r2, [r3, #0]
}
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	20000c60 	.word	0x20000c60

080079d8 <USART1_IRQHandler>:
//
// Returns:   None
//
// Requirement(s):
//
void USART1_IRQHandler(void) {
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
    STM32_UART_IRQHandler(&huart1);
 80079dc:	4b03      	ldr	r3, [pc, #12]	; (80079ec <USART1_IRQHandler+0x14>)
 80079de:	0018      	movs	r0, r3
 80079e0:	f003 fe2c 	bl	800b63c <STM32_UART_IRQHandler>
}
 80079e4:	46c0      	nop			; (mov r8, r8)
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	46c0      	nop			; (mov r8, r8)
 80079ec:	200029fc 	.word	0x200029fc

080079f0 <USART2_IRQHandler>:
//
// Returns:   None
//
// Requirement(s):
//
void USART2_IRQHandler(void) {
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
    STM32_UART_IRQHandler(&huart2);
 80079f4:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <USART2_IRQHandler+0x14>)
 80079f6:	0018      	movs	r0, r3
 80079f8:	f003 fe20 	bl	800b63c <STM32_UART_IRQHandler>
}
 80079fc:	46c0      	nop			; (mov r8, r8)
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	20002f34 	.word	0x20002f34

08007a08 <USART3_4_IRQHandler>:
//
// Returns:   None
//
// Requirement(s):
//
void USART3_4_IRQHandler(void) {
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0
    STM32_UART_IRQHandler(&huart4);
 8007a0c:	4b03      	ldr	r3, [pc, #12]	; (8007a1c <USART3_4_IRQHandler+0x14>)
 8007a0e:	0018      	movs	r0, r3
 8007a10:	f003 fe14 	bl	800b63c <STM32_UART_IRQHandler>
}
 8007a14:	46c0      	nop			; (mov r8, r8)
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	46c0      	nop			; (mov r8, r8)
 8007a1c:	20002f20 	.word	0x20002f20

08007a20 <DMA1_Channel1_IRQHandler>:
//
// Returns:   None
//
// Requirement(s):
//
void DMA1_Channel1_IRQHandler(void) {
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
    STM32_DMA_IRQHandler(&hdma_adc);
 8007a24:	4b03      	ldr	r3, [pc, #12]	; (8007a34 <DMA1_Channel1_IRQHandler+0x14>)
 8007a26:	0018      	movs	r0, r3
 8007a28:	f7fc fc86 	bl	8004338 <STM32_DMA_IRQHandler>
}
 8007a2c:	46c0      	nop			; (mov r8, r8)
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	46c0      	nop			; (mov r8, r8)
 8007a34:	20002f6c 	.word	0x20002f6c

08007a38 <DMA1_Channel2_3_IRQHandler>:
//
// Returns:   None
//
// Requirement(s):
//
void DMA1_Channel2_3_IRQHandler(void) {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	af00      	add	r7, sp, #0
    STM32_DMA_IRQHandler(&hdma_usart1_tx);
 8007a3c:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f7fc fc7a 	bl	8004338 <STM32_DMA_IRQHandler>
    STM32_DMA_IRQHandler(&hdma_usart1_rx);
 8007a44:	4b04      	ldr	r3, [pc, #16]	; (8007a58 <DMA1_Channel2_3_IRQHandler+0x20>)
 8007a46:	0018      	movs	r0, r3
 8007a48:	f7fc fc76 	bl	8004338 <STM32_DMA_IRQHandler>
}
 8007a4c:	46c0      	nop			; (mov r8, r8)
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	46c0      	nop			; (mov r8, r8)
 8007a54:	20001ef0 	.word	0x20001ef0
 8007a58:	2000205c 	.word	0x2000205c

08007a5c <DMA1_Channel4_5_6_7_IRQHandler>:
//
// Returns:   None
//
// Requirement(s):
//
void DMA1_Channel4_5_6_7_IRQHandler(void) {
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
    STM32_DMA_IRQHandler(&hdma_usart2_tx);
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8007a62:	0018      	movs	r0, r3
 8007a64:	f7fc fc68 	bl	8004338 <STM32_DMA_IRQHandler>
    STM32_DMA_IRQHandler(&hdma_usart2_rx);
 8007a68:	4b04      	ldr	r3, [pc, #16]	; (8007a7c <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	f7fc fc64 	bl	8004338 <STM32_DMA_IRQHandler>
}
 8007a70:	46c0      	nop			; (mov r8, r8)
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	2000208c 	.word	0x2000208c
 8007a7c:	20000c28 	.word	0x20000c28

08007a80 <InitializeEventLog>:
//
// Returns:   None
//
// Requirement(s):
//
void InitializeEventLog(void) {
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
    // Uses 2024 given this is perfectly divisible by 128 which is how much data is written to a page when clearing the log
    //
    // There is one specical case:  Last message was stored at the end of the Event Log.  In this case, the EntryNumber
    //  doesn't drop.  Too account for this, initialize as follows:
    //
    EventData.NumberOfEntries = 0;
 8007a86:	4b2b      	ldr	r3, [pc, #172]	; (8007b34 <InitializeEventLog+0xb4>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]
    EventData.NextEntry = 0;
 8007a8c:	4b29      	ldr	r3, [pc, #164]	; (8007b34 <InitializeEventLog+0xb4>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	809a      	strh	r2, [r3, #4]
    for (i = 0; i < 2024; i++) {
 8007a92:	2316      	movs	r3, #22
 8007a94:	18fb      	adds	r3, r7, r3
 8007a96:	2200      	movs	r2, #0
 8007a98:	801a      	strh	r2, [r3, #0]
 8007a9a:	e03c      	b.n	8007b16 <InitializeEventLog+0x96>
        I2C2Control.Address = EEPROM_EVENT_DATA_OFFSET + (i * 16);
 8007a9c:	2316      	movs	r3, #22
 8007a9e:	18fb      	adds	r3, r7, r3
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	011b      	lsls	r3, r3, #4
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	4b24      	ldr	r3, [pc, #144]	; (8007b38 <InitializeEventLog+0xb8>)
 8007aa8:	809a      	strh	r2, [r3, #4]
        I2C2Control.Length = 4;
 8007aaa:	4b23      	ldr	r3, [pc, #140]	; (8007b38 <InitializeEventLog+0xb8>)
 8007aac:	2204      	movs	r2, #4
 8007aae:	80da      	strh	r2, [r3, #6]
        I2C2Control.Buffer = (uint8_t *)&EventMessage;
 8007ab0:	4b21      	ldr	r3, [pc, #132]	; (8007b38 <InitializeEventLog+0xb8>)
 8007ab2:	1d3a      	adds	r2, r7, #4
 8007ab4:	601a      	str	r2, [r3, #0]
        I2C2Control.Mode = I2C_MODE_READ_EEPROM;
 8007ab6:	4b20      	ldr	r3, [pc, #128]	; (8007b38 <InitializeEventLog+0xb8>)
 8007ab8:	2202      	movs	r2, #2
 8007aba:	725a      	strb	r2, [r3, #9]
        do {
            ProcessI2C2();
 8007abc:	f7fe fb62 	bl	8006184 <ProcessI2C2>
        }  while (I2C2Control.Mode != I2C_MODE_DONE);
 8007ac0:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <InitializeEventLog+0xb8>)
 8007ac2:	7a5b      	ldrb	r3, [r3, #9]
 8007ac4:	2b07      	cmp	r3, #7
 8007ac6:	d1f9      	bne.n	8007abc <InitializeEventLog+0x3c>
        I2C2Control.Mode = I2C_MODE_IDLE;
 8007ac8:	4b1b      	ldr	r3, [pc, #108]	; (8007b38 <InitializeEventLog+0xb8>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	725a      	strb	r2, [r3, #9]
        // This would indicate the end of the Event Log and would be where the next message should be stored.
        //
        //  If the Event Log has been completely filled and rolled-over, then the location where the next message
        //  should be stored will be where the Index value drops in value.

        if (EventMessage.EntryNumber == -1) {       // End of Event Log has been reached
 8007ace:	1d3b      	adds	r3, r7, #4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	d109      	bne.n	8007aea <InitializeEventLog+0x6a>
            EventData.NextEntry = i;
 8007ad6:	4b17      	ldr	r3, [pc, #92]	; (8007b34 <InitializeEventLog+0xb4>)
 8007ad8:	2116      	movs	r1, #22
 8007ada:	187a      	adds	r2, r7, r1
 8007adc:	8812      	ldrh	r2, [r2, #0]
 8007ade:	809a      	strh	r2, [r3, #4]
            EventData.NumberOfEntries = i;
 8007ae0:	187b      	adds	r3, r7, r1
 8007ae2:	881a      	ldrh	r2, [r3, #0]
 8007ae4:	4b13      	ldr	r3, [pc, #76]	; (8007b34 <InitializeEventLog+0xb4>)
 8007ae6:	601a      	str	r2, [r3, #0]
            break;
 8007ae8:	e01b      	b.n	8007b22 <InitializeEventLog+0xa2>
        } else if (EventMessage.EntryNumber < EventData.NumberOfEntries) {   // If new EntryNumber is less than Max, then this is where the next message will be stored
 8007aea:	1d3b      	adds	r3, r7, #4
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	4b11      	ldr	r3, [pc, #68]	; (8007b34 <InitializeEventLog+0xb4>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	da05      	bge.n	8007b02 <InitializeEventLog+0x82>
            EventData.NextEntry = i;
 8007af6:	4b0f      	ldr	r3, [pc, #60]	; (8007b34 <InitializeEventLog+0xb4>)
 8007af8:	2216      	movs	r2, #22
 8007afa:	18ba      	adds	r2, r7, r2
 8007afc:	8812      	ldrh	r2, [r2, #0]
 8007afe:	809a      	strh	r2, [r3, #4]
            break;
 8007b00:	e00f      	b.n	8007b22 <InitializeEventLog+0xa2>
        } else {                                          // Update MexEntryNumber
            EventData.NumberOfEntries = EventMessage.EntryNumber;
 8007b02:	1d3b      	adds	r3, r7, #4
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	4b0b      	ldr	r3, [pc, #44]	; (8007b34 <InitializeEventLog+0xb4>)
 8007b08:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 2024; i++) {
 8007b0a:	2116      	movs	r1, #22
 8007b0c:	187b      	adds	r3, r7, r1
 8007b0e:	881a      	ldrh	r2, [r3, #0]
 8007b10:	187b      	adds	r3, r7, r1
 8007b12:	3201      	adds	r2, #1
 8007b14:	801a      	strh	r2, [r3, #0]
 8007b16:	2316      	movs	r3, #22
 8007b18:	18fb      	adds	r3, r7, r3
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	4a07      	ldr	r2, [pc, #28]	; (8007b3c <InitializeEventLog+0xbc>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d9bc      	bls.n	8007a9c <InitializeEventLog+0x1c>
        }
    }
    SysVars.NumberOfEventLogEntries = EventData.NumberOfEntries;
 8007b22:	4b04      	ldr	r3, [pc, #16]	; (8007b34 <InitializeEventLog+0xb4>)
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <InitializeEventLog+0xc0>)
 8007b28:	21ac      	movs	r1, #172	; 0xac
 8007b2a:	505a      	str	r2, [r3, r1]
}
 8007b2c:	46c0      	nop			; (mov r8, r8)
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	b006      	add	sp, #24
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	20002a0c 	.word	0x20002a0c
 8007b38:	20001c24 	.word	0x20001c24
 8007b3c:	000007e7 	.word	0x000007e7
 8007b40:	200020c0 	.word	0x200020c0

08007b44 <ProcessClearEventLog>:
//
// Returns:   None
//
// Requirement(s):
//
void ProcessClearEventLog(void) {
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0

    static uint8_t    State;
    static uint16_t   Index;

    ExecutionStart(EXECUTION_PROCESS_CLEAR_LOG);
 8007b48:	2016      	movs	r0, #22
 8007b4a:	f7fc fd5f 	bl	800460c <ExecutionStart>

    if (bClearEventLog == 0) {
 8007b4e:	4b3f      	ldr	r3, [pc, #252]	; (8007c4c <ProcessClearEventLog+0x108>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d102      	bne.n	8007b5c <ProcessClearEventLog+0x18>
        State = 0;
 8007b56:	4b3e      	ldr	r3, [pc, #248]	; (8007c50 <ProcessClearEventLog+0x10c>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	701a      	strb	r2, [r3, #0]
    }

    switch (State) {
 8007b5c:	4b3c      	ldr	r3, [pc, #240]	; (8007c50 <ProcessClearEventLog+0x10c>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d027      	beq.n	8007bb4 <ProcessClearEventLog+0x70>
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d038      	beq.n	8007bda <ProcessClearEventLog+0x96>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d161      	bne.n	8007c30 <ProcessClearEventLog+0xec>
    case 0:
        if ((I2C2Control.Mode == I2C_MODE_IDLE) && (bClearEventLog != 0)) {
 8007b6c:	4b39      	ldr	r3, [pc, #228]	; (8007c54 <ProcessClearEventLog+0x110>)
 8007b6e:	7a5b      	ldrb	r3, [r3, #9]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d162      	bne.n	8007c3a <ProcessClearEventLog+0xf6>
 8007b74:	4b35      	ldr	r3, [pc, #212]	; (8007c4c <ProcessClearEventLog+0x108>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d05e      	beq.n	8007c3a <ProcessClearEventLog+0xf6>
            memset(&TmpBuffer[0], 0xFF, 128);
 8007b7c:	4b36      	ldr	r3, [pc, #216]	; (8007c58 <ProcessClearEventLog+0x114>)
 8007b7e:	2280      	movs	r2, #128	; 0x80
 8007b80:	21ff      	movs	r1, #255	; 0xff
 8007b82:	0018      	movs	r0, r3
 8007b84:	f004 fdd6 	bl	800c734 <memset>
            Index = 0;
 8007b88:	4b34      	ldr	r3, [pc, #208]	; (8007c5c <ProcessClearEventLog+0x118>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	801a      	strh	r2, [r3, #0]
            I2C2Control.Address = EEPROM_EVENT_DATA_OFFSET + (Index * 128);
 8007b8e:	4b33      	ldr	r3, [pc, #204]	; (8007c5c <ProcessClearEventLog+0x118>)
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	01db      	lsls	r3, r3, #7
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	4b2f      	ldr	r3, [pc, #188]	; (8007c54 <ProcessClearEventLog+0x110>)
 8007b98:	809a      	strh	r2, [r3, #4]
            I2C2Control.Buffer = &TmpBuffer[0];
 8007b9a:	4b2e      	ldr	r3, [pc, #184]	; (8007c54 <ProcessClearEventLog+0x110>)
 8007b9c:	4a2e      	ldr	r2, [pc, #184]	; (8007c58 <ProcessClearEventLog+0x114>)
 8007b9e:	601a      	str	r2, [r3, #0]
            I2C2Control.Length = 128;
 8007ba0:	4b2c      	ldr	r3, [pc, #176]	; (8007c54 <ProcessClearEventLog+0x110>)
 8007ba2:	2280      	movs	r2, #128	; 0x80
 8007ba4:	80da      	strh	r2, [r3, #6]
            I2C2Control.Mode = I2C_MODE_WRITE_EEPROM;
 8007ba6:	4b2b      	ldr	r3, [pc, #172]	; (8007c54 <ProcessClearEventLog+0x110>)
 8007ba8:	2201      	movs	r2, #1
 8007baa:	725a      	strb	r2, [r3, #9]
            State = 2;
 8007bac:	4b28      	ldr	r3, [pc, #160]	; (8007c50 <ProcessClearEventLog+0x10c>)
 8007bae:	2202      	movs	r2, #2
 8007bb0:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007bb2:	e042      	b.n	8007c3a <ProcessClearEventLog+0xf6>
    case 1:
        I2C2Control.Address = EEPROM_EVENT_DATA_OFFSET + (Index * 128);
 8007bb4:	4b29      	ldr	r3, [pc, #164]	; (8007c5c <ProcessClearEventLog+0x118>)
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	01db      	lsls	r3, r3, #7
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	4b25      	ldr	r3, [pc, #148]	; (8007c54 <ProcessClearEventLog+0x110>)
 8007bbe:	809a      	strh	r2, [r3, #4]
        I2C2Control.Buffer = &TmpBuffer[0];
 8007bc0:	4b24      	ldr	r3, [pc, #144]	; (8007c54 <ProcessClearEventLog+0x110>)
 8007bc2:	4a25      	ldr	r2, [pc, #148]	; (8007c58 <ProcessClearEventLog+0x114>)
 8007bc4:	601a      	str	r2, [r3, #0]
        I2C2Control.Length = 128;
 8007bc6:	4b23      	ldr	r3, [pc, #140]	; (8007c54 <ProcessClearEventLog+0x110>)
 8007bc8:	2280      	movs	r2, #128	; 0x80
 8007bca:	80da      	strh	r2, [r3, #6]
        I2C2Control.Mode = I2C_MODE_WRITE_EEPROM;
 8007bcc:	4b21      	ldr	r3, [pc, #132]	; (8007c54 <ProcessClearEventLog+0x110>)
 8007bce:	2201      	movs	r2, #1
 8007bd0:	725a      	strb	r2, [r3, #9]
        State = 2;
 8007bd2:	4b1f      	ldr	r3, [pc, #124]	; (8007c50 <ProcessClearEventLog+0x10c>)
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	701a      	strb	r2, [r3, #0]
        break;
 8007bd8:	e032      	b.n	8007c40 <ProcessClearEventLog+0xfc>
    case 2:
        if (I2C2Control.Mode == I2C_MODE_DONE) {
 8007bda:	4b1e      	ldr	r3, [pc, #120]	; (8007c54 <ProcessClearEventLog+0x110>)
 8007bdc:	7a5b      	ldrb	r3, [r3, #9]
 8007bde:	2b07      	cmp	r3, #7
 8007be0:	d12d      	bne.n	8007c3e <ProcessClearEventLog+0xfa>
            Index++;
 8007be2:	4b1e      	ldr	r3, [pc, #120]	; (8007c5c <ProcessClearEventLog+0x118>)
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	3301      	adds	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	4b1c      	ldr	r3, [pc, #112]	; (8007c5c <ProcessClearEventLog+0x118>)
 8007bec:	801a      	strh	r2, [r3, #0]
            // Index is
            if (Index == 238) {
 8007bee:	4b1b      	ldr	r3, [pc, #108]	; (8007c5c <ProcessClearEventLog+0x118>)
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	2bee      	cmp	r3, #238	; 0xee
 8007bf4:	d118      	bne.n	8007c28 <ProcessClearEventLog+0xe4>
                EventData.NextEntry = 0;
 8007bf6:	4b1a      	ldr	r3, [pc, #104]	; (8007c60 <ProcessClearEventLog+0x11c>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	809a      	strh	r2, [r3, #4]
                EventData.NumberOfEntries = 0;
 8007bfc:	4b18      	ldr	r3, [pc, #96]	; (8007c60 <ProcessClearEventLog+0x11c>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	601a      	str	r2, [r3, #0]
                SysVars.NumberOfEventLogEntries = 0;
 8007c02:	4b18      	ldr	r3, [pc, #96]	; (8007c64 <ProcessClearEventLog+0x120>)
 8007c04:	22ac      	movs	r2, #172	; 0xac
 8007c06:	2100      	movs	r1, #0
 8007c08:	5099      	str	r1, [r3, r2]
                bClearEventLog = 0;
 8007c0a:	4b10      	ldr	r3, [pc, #64]	; (8007c4c <ProcessClearEventLog+0x108>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	701a      	strb	r2, [r3, #0]
                I2C2Control.Mode = I2C_MODE_IDLE;
 8007c10:	4b10      	ldr	r3, [pc, #64]	; (8007c54 <ProcessClearEventLog+0x110>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	725a      	strb	r2, [r3, #9]
                LogEvent(EVENT_MESSAGE_ID_0, 0, 0);
 8007c16:	2200      	movs	r2, #0
 8007c18:	2100      	movs	r1, #0
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	f000 f824 	bl	8007c68 <LogEvent>
                State = 0;
 8007c20:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <ProcessClearEventLog+0x10c>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	701a      	strb	r2, [r3, #0]
            } else {
                State = 1;
            }
        }
        break;
 8007c26:	e00a      	b.n	8007c3e <ProcessClearEventLog+0xfa>
                State = 1;
 8007c28:	4b09      	ldr	r3, [pc, #36]	; (8007c50 <ProcessClearEventLog+0x10c>)
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	701a      	strb	r2, [r3, #0]
        break;
 8007c2e:	e006      	b.n	8007c3e <ProcessClearEventLog+0xfa>
    default:
        Error_Handler(FILE_LOGEVENT, __LINE__);
 8007c30:	21af      	movs	r1, #175	; 0xaf
 8007c32:	2015      	movs	r0, #21
 8007c34:	f7fc fbce 	bl	80043d4 <Error_Handler>
        break;
 8007c38:	e002      	b.n	8007c40 <ProcessClearEventLog+0xfc>
        break;
 8007c3a:	46c0      	nop			; (mov r8, r8)
 8007c3c:	e000      	b.n	8007c40 <ProcessClearEventLog+0xfc>
        break;
 8007c3e:	46c0      	nop			; (mov r8, r8)
    }
    ExecutionEnd(EXECUTION_PROCESS_CLEAR_LOG);
 8007c40:	2016      	movs	r0, #22
 8007c42:	f7fc fcfd 	bl	8004640 <ExecutionEnd>
}
 8007c46:	46c0      	nop			; (mov r8, r8)
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20001c55 	.word	0x20001c55
 8007c50:	20000ad0 	.word	0x20000ad0
 8007c54:	20001c24 	.word	0x20001c24
 8007c58:	20000a50 	.word	0x20000a50
 8007c5c:	20000ad2 	.word	0x20000ad2
 8007c60:	20002a0c 	.word	0x20002a0c
 8007c64:	200020c0 	.word	0x200020c0

08007c68 <LogEvent>:
//
// Returns:   None
//
// Requirement(s):
//
void LogEvent(uint32_t EventId, int32_t EventValue1, int32_t EventValue2) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
    //
    // While Event Log is being Cleared, don't write any new messages
    //
    EventData.NumberOfEntries++;
 8007c74:	4b2e      	ldr	r3, [pc, #184]	; (8007d30 <LogEvent+0xc8>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	4b2d      	ldr	r3, [pc, #180]	; (8007d30 <LogEvent+0xc8>)
 8007c7c:	601a      	str	r2, [r3, #0]
    MessageQueue[MessageIndexIn].EventId = EventId;
 8007c7e:	4b2d      	ldr	r3, [pc, #180]	; (8007d34 <LogEvent+0xcc>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	b25b      	sxtb	r3, r3
 8007c84:	0018      	movs	r0, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	051b      	lsls	r3, r3, #20
 8007c8a:	0d1b      	lsrs	r3, r3, #20
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	492a      	ldr	r1, [pc, #168]	; (8007d38 <LogEvent+0xd0>)
 8007c90:	0103      	lsls	r3, r0, #4
 8007c92:	18cb      	adds	r3, r1, r3
 8007c94:	0110      	lsls	r0, r2, #4
 8007c96:	88da      	ldrh	r2, [r3, #6]
 8007c98:	210f      	movs	r1, #15
 8007c9a:	400a      	ands	r2, r1
 8007c9c:	1c11      	adds	r1, r2, #0
 8007c9e:	1c02      	adds	r2, r0, #0
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	80da      	strh	r2, [r3, #6]
    MessageQueue[MessageIndexIn].EntryNumber = EventData.NumberOfEntries;
 8007ca4:	4b23      	ldr	r3, [pc, #140]	; (8007d34 <LogEvent+0xcc>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	b25b      	sxtb	r3, r3
 8007caa:	001a      	movs	r2, r3
 8007cac:	4b20      	ldr	r3, [pc, #128]	; (8007d30 <LogEvent+0xc8>)
 8007cae:	6819      	ldr	r1, [r3, #0]
 8007cb0:	4b21      	ldr	r3, [pc, #132]	; (8007d38 <LogEvent+0xd0>)
 8007cb2:	0112      	lsls	r2, r2, #4
 8007cb4:	50d1      	str	r1, [r2, r3]
    MessageQueue[MessageIndexIn].EventValue1 = EventValue1;
 8007cb6:	4b1f      	ldr	r3, [pc, #124]	; (8007d34 <LogEvent+0xcc>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	b25b      	sxtb	r3, r3
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	491e      	ldr	r1, [pc, #120]	; (8007d38 <LogEvent+0xd0>)
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	18cb      	adds	r3, r1, r3
 8007cc4:	3308      	adds	r3, #8
 8007cc6:	601a      	str	r2, [r3, #0]
    MessageQueue[MessageIndexIn].EventValue2 = EventValue2;
 8007cc8:	4b1a      	ldr	r3, [pc, #104]	; (8007d34 <LogEvent+0xcc>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	b25b      	sxtb	r3, r3
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	4919      	ldr	r1, [pc, #100]	; (8007d38 <LogEvent+0xd0>)
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	18cb      	adds	r3, r1, r3
 8007cd6:	330c      	adds	r3, #12
 8007cd8:	601a      	str	r2, [r3, #0]
    MessageQueue[MessageIndexIn].Timestamp = STM32_GetTick() / 1000;     // Milliseconds to seconds
 8007cda:	f7fe f84b 	bl	8005d74 <STM32_GetTick>
 8007cde:	0002      	movs	r2, r0
 8007ce0:	23fa      	movs	r3, #250	; 0xfa
 8007ce2:	0099      	lsls	r1, r3, #2
 8007ce4:	0010      	movs	r0, r2
 8007ce6:	f7f8 fa73 	bl	80001d0 <__udivsi3>
 8007cea:	0003      	movs	r3, r0
 8007cec:	001a      	movs	r2, r3
 8007cee:	4b11      	ldr	r3, [pc, #68]	; (8007d34 <LogEvent+0xcc>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	b25b      	sxtb	r3, r3
 8007cf4:	0018      	movs	r0, r3
 8007cf6:	0313      	lsls	r3, r2, #12
 8007cf8:	0b1a      	lsrs	r2, r3, #12
 8007cfa:	490f      	ldr	r1, [pc, #60]	; (8007d38 <LogEvent+0xd0>)
 8007cfc:	0103      	lsls	r3, r0, #4
 8007cfe:	18cb      	adds	r3, r1, r3
 8007d00:	0312      	lsls	r2, r2, #12
 8007d02:	0b12      	lsrs	r2, r2, #12
 8007d04:	6859      	ldr	r1, [r3, #4]
 8007d06:	0d09      	lsrs	r1, r1, #20
 8007d08:	0509      	lsls	r1, r1, #20
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	605a      	str	r2, [r3, #4]
    MessageIndexIn = (MessageIndexIn + 1) & 0xF;
 8007d0e:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <LogEvent+0xcc>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	b25b      	sxtb	r3, r3
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	3301      	adds	r3, #1
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	b25b      	sxtb	r3, r3
 8007d1c:	220f      	movs	r2, #15
 8007d1e:	4013      	ands	r3, r2
 8007d20:	b25a      	sxtb	r2, r3
 8007d22:	4b04      	ldr	r3, [pc, #16]	; (8007d34 <LogEvent+0xcc>)
 8007d24:	701a      	strb	r2, [r3, #0]
}
 8007d26:	46c0      	nop			; (mov r8, r8)
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	b004      	add	sp, #16
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	46c0      	nop			; (mov r8, r8)
 8007d30:	20002a0c 	.word	0x20002a0c
 8007d34:	20000c58 	.word	0x20000c58
 8007d38:	20000b20 	.word	0x20000b20

08007d3c <ProcessEventMessageQueue>:
//
// Returns:   None
//
// Requirement(s):
//
void ProcessEventMessageQueue(void) {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0

    static uint8_t  State1;

    ExecutionStart(EXECUTION_PROCESS_MESSAGE_QUEUE);
 8007d40:	2017      	movs	r0, #23
 8007d42:	f7fc fc63 	bl	800460c <ExecutionStart>
    switch (State1) {
 8007d46:	4b36      	ldr	r3, [pc, #216]	; (8007e20 <ProcessEventMessageQueue+0xe4>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d02a      	beq.n	8007da4 <ProcessEventMessageQueue+0x68>
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d030      	beq.n	8007db4 <ProcessEventMessageQueue+0x78>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d154      	bne.n	8007e00 <ProcessEventMessageQueue+0xc4>
    case 0:
        if ((MessageIndexIn != MessageIndexOut) && (I2C2Control.Mode == I2C_MODE_IDLE)) {
 8007d56:	4b33      	ldr	r3, [pc, #204]	; (8007e24 <ProcessEventMessageQueue+0xe8>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	569a      	ldrsb	r2, [r3, r2]
 8007d5c:	4b32      	ldr	r3, [pc, #200]	; (8007e28 <ProcessEventMessageQueue+0xec>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	b25b      	sxtb	r3, r3
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d053      	beq.n	8007e0e <ProcessEventMessageQueue+0xd2>
 8007d66:	4b31      	ldr	r3, [pc, #196]	; (8007e2c <ProcessEventMessageQueue+0xf0>)
 8007d68:	7a5b      	ldrb	r3, [r3, #9]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d14f      	bne.n	8007e0e <ProcessEventMessageQueue+0xd2>
            I2C2Control.Address = EEPROM_EVENT_DATA_OFFSET + (EventData.NextEntry * 16);
 8007d6e:	4b30      	ldr	r3, [pc, #192]	; (8007e30 <ProcessEventMessageQueue+0xf4>)
 8007d70:	889b      	ldrh	r3, [r3, #4]
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	4b2d      	ldr	r3, [pc, #180]	; (8007e2c <ProcessEventMessageQueue+0xf0>)
 8007d78:	809a      	strh	r2, [r3, #4]
            I2C2Control.Buffer = (uint8_t *)&MessageQueue[MessageIndexOut];
 8007d7a:	4b2b      	ldr	r3, [pc, #172]	; (8007e28 <ProcessEventMessageQueue+0xec>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	b25b      	sxtb	r3, r3
 8007d80:	011a      	lsls	r2, r3, #4
 8007d82:	4b2c      	ldr	r3, [pc, #176]	; (8007e34 <ProcessEventMessageQueue+0xf8>)
 8007d84:	18d2      	adds	r2, r2, r3
 8007d86:	4b29      	ldr	r3, [pc, #164]	; (8007e2c <ProcessEventMessageQueue+0xf0>)
 8007d88:	601a      	str	r2, [r3, #0]
            I2C2Control.Length = 16;
 8007d8a:	4b28      	ldr	r3, [pc, #160]	; (8007e2c <ProcessEventMessageQueue+0xf0>)
 8007d8c:	2210      	movs	r2, #16
 8007d8e:	80da      	strh	r2, [r3, #6]
            I2C2Control.Mode = I2C_MODE_WRITE_EEPROM;
 8007d90:	4b26      	ldr	r3, [pc, #152]	; (8007e2c <ProcessEventMessageQueue+0xf0>)
 8007d92:	2201      	movs	r2, #1
 8007d94:	725a      	strb	r2, [r3, #9]
            State1++;
 8007d96:	4b22      	ldr	r3, [pc, #136]	; (8007e20 <ProcessEventMessageQueue+0xe4>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	4b20      	ldr	r3, [pc, #128]	; (8007e20 <ProcessEventMessageQueue+0xe4>)
 8007da0:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007da2:	e034      	b.n	8007e0e <ProcessEventMessageQueue+0xd2>
    case 1:
        if (I2C2Control.Mode == I2C_MODE_DONE) {
 8007da4:	4b21      	ldr	r3, [pc, #132]	; (8007e2c <ProcessEventMessageQueue+0xf0>)
 8007da6:	7a5b      	ldrb	r3, [r3, #9]
 8007da8:	2b07      	cmp	r3, #7
 8007daa:	d132      	bne.n	8007e12 <ProcessEventMessageQueue+0xd6>
            State1 = 2;
 8007dac:	4b1c      	ldr	r3, [pc, #112]	; (8007e20 <ProcessEventMessageQueue+0xe4>)
 8007dae:	2202      	movs	r2, #2
 8007db0:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007db2:	e02e      	b.n	8007e12 <ProcessEventMessageQueue+0xd6>
        //          in the previous case, it needs to be in a seperate case
        //           for timing.  10mS isn't always enough time for EEPROM
        //          to write data.  The extra case extends the time before
        //          the next write to 20mS.
        //
        EventData.NextEntry++;
 8007db4:	4b1e      	ldr	r3, [pc, #120]	; (8007e30 <ProcessEventMessageQueue+0xf4>)
 8007db6:	889b      	ldrh	r3, [r3, #4]
 8007db8:	3301      	adds	r3, #1
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	4b1c      	ldr	r3, [pc, #112]	; (8007e30 <ProcessEventMessageQueue+0xf4>)
 8007dbe:	809a      	strh	r2, [r3, #4]
        // 1904 = 2048 - (2304/16) Subtract backup flash configuration storage
        if (EventData.NextEntry >= 1904) {
 8007dc0:	4b1b      	ldr	r3, [pc, #108]	; (8007e30 <ProcessEventMessageQueue+0xf4>)
 8007dc2:	889b      	ldrh	r3, [r3, #4]
 8007dc4:	4a1c      	ldr	r2, [pc, #112]	; (8007e38 <ProcessEventMessageQueue+0xfc>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d902      	bls.n	8007dd0 <ProcessEventMessageQueue+0x94>
            EventData.NextEntry = 0;
 8007dca:	4b19      	ldr	r3, [pc, #100]	; (8007e30 <ProcessEventMessageQueue+0xf4>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	809a      	strh	r2, [r3, #4]
        }
        SysVars.NumberOfEventLogEntries = EventData.NumberOfEntries;
 8007dd0:	4b17      	ldr	r3, [pc, #92]	; (8007e30 <ProcessEventMessageQueue+0xf4>)
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	4b19      	ldr	r3, [pc, #100]	; (8007e3c <ProcessEventMessageQueue+0x100>)
 8007dd6:	21ac      	movs	r1, #172	; 0xac
 8007dd8:	505a      	str	r2, [r3, r1]
        MessageIndexOut = (MessageIndexOut + 1) & 0xF;
 8007dda:	4b13      	ldr	r3, [pc, #76]	; (8007e28 <ProcessEventMessageQueue+0xec>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	b25b      	sxtb	r3, r3
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	3301      	adds	r3, #1
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	b25b      	sxtb	r3, r3
 8007de8:	220f      	movs	r2, #15
 8007dea:	4013      	ands	r3, r2
 8007dec:	b25a      	sxtb	r2, r3
 8007dee:	4b0e      	ldr	r3, [pc, #56]	; (8007e28 <ProcessEventMessageQueue+0xec>)
 8007df0:	701a      	strb	r2, [r3, #0]
        I2C2Control.Mode = I2C_MODE_IDLE;
 8007df2:	4b0e      	ldr	r3, [pc, #56]	; (8007e2c <ProcessEventMessageQueue+0xf0>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	725a      	strb	r2, [r3, #9]
        State1 = 0;
 8007df8:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <ProcessEventMessageQueue+0xe4>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	701a      	strb	r2, [r3, #0]
        break;
 8007dfe:	e009      	b.n	8007e14 <ProcessEventMessageQueue+0xd8>
    default:
        Error_Handler(FILE_LOGEVENT, __LINE__);
 8007e00:	2302      	movs	r3, #2
 8007e02:	33ff      	adds	r3, #255	; 0xff
 8007e04:	0019      	movs	r1, r3
 8007e06:	2015      	movs	r0, #21
 8007e08:	f7fc fae4 	bl	80043d4 <Error_Handler>
        break;
 8007e0c:	e002      	b.n	8007e14 <ProcessEventMessageQueue+0xd8>
        break;
 8007e0e:	46c0      	nop			; (mov r8, r8)
 8007e10:	e000      	b.n	8007e14 <ProcessEventMessageQueue+0xd8>
        break;
 8007e12:	46c0      	nop			; (mov r8, r8)
    }
    ExecutionEnd(EXECUTION_PROCESS_MESSAGE_QUEUE);
 8007e14:	2017      	movs	r0, #23
 8007e16:	f7fc fc13 	bl	8004640 <ExecutionEnd>
}
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20000ad4 	.word	0x20000ad4
 8007e24:	20000c58 	.word	0x20000c58
 8007e28:	200014a0 	.word	0x200014a0
 8007e2c:	20001c24 	.word	0x20001c24
 8007e30:	20002a0c 	.word	0x20002a0c
 8007e34:	20000b20 	.word	0x20000b20
 8007e38:	0000076f 	.word	0x0000076f
 8007e3c:	200020c0 	.word	0x200020c0

08007e40 <main>:
//
// Returns:   None
//
// Requirement(s):
//
int main(void) {
 8007e40:	b580      	push	{r7, lr}
 8007e42:	af00      	add	r7, sp, #0

  InitializeSystem();
 8007e44:	f7fe ffc2 	bl	8006dcc <InitializeSystem>

  while (1) {

    ExecutionStart(EXECUTION_MAIN_LOOP);
 8007e48:	2000      	movs	r0, #0
 8007e4a:	f7fc fbdf 	bl	800460c <ExecutionStart>
    ProcessTickCounters();
 8007e4e:	f002 ffff 	bl	800ae50 <ProcessTickCounters>
    ProcessI2C1();
 8007e52:	f7fe f841 	bl	8005ed8 <ProcessI2C1>
    ProcessI2C2();
 8007e56:	f7fe f995 	bl	8006184 <ProcessI2C2>
    ProcessMcp3421();
 8007e5a:	f000 f9bb 	bl	80081d4 <ProcessMcp3421>

    if (Ticks1ms >= 1) {
 8007e5e:	4b3e      	ldr	r3, [pc, #248]	; (8007f58 <main+0x118>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	5e9b      	ldrsh	r3, [r3, r2]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	dd73      	ble.n	8007f50 <main+0x110>
      Ticks1ms -= 1;
 8007e68:	4b3b      	ldr	r3, [pc, #236]	; (8007f58 <main+0x118>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	5e9b      	ldrsh	r3, [r3, r2]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	3b01      	subs	r3, #1
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	b21a      	sxth	r2, r3
 8007e76:	4b38      	ldr	r3, [pc, #224]	; (8007f58 <main+0x118>)
 8007e78:	801a      	strh	r2, [r3, #0]
      ProcessRxSerial(&SerialUsart1);
 8007e7a:	4b38      	ldr	r3, [pc, #224]	; (8007f5c <main+0x11c>)
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f000 fe49 	bl	8008b14 <ProcessRxSerial>
      ProcessRxSerial(&SerialUsart2);
 8007e82:	4b37      	ldr	r3, [pc, #220]	; (8007f60 <main+0x120>)
 8007e84:	0018      	movs	r0, r3
 8007e86:	f000 fe45 	bl	8008b14 <ProcessRxSerial>
      ProcessReadAdc();
 8007e8a:	f7f8 fe5d 	bl	8000b48 <ProcessReadAdc>
      ProcessAccelerometer();
 8007e8e:	f7f8 fca1 	bl	80007d4 <ProcessAccelerometer>
      if (Ticks5ms >= 5) {
 8007e92:	4b34      	ldr	r3, [pc, #208]	; (8007f64 <main+0x124>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	5e9b      	ldrsh	r3, [r3, r2]
 8007e98:	2b04      	cmp	r3, #4
 8007e9a:	dd59      	ble.n	8007f50 <main+0x110>
        Ticks5ms -= 5;
 8007e9c:	4b31      	ldr	r3, [pc, #196]	; (8007f64 <main+0x124>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	5e9b      	ldrsh	r3, [r3, r2]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	3b05      	subs	r3, #5
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	b21a      	sxth	r2, r3
 8007eaa:	4b2e      	ldr	r3, [pc, #184]	; (8007f64 <main+0x124>)
 8007eac:	801a      	strh	r2, [r3, #0]
        ProcessAdcFilter();                         // Run Filtering every 5mS
 8007eae:	f7f8 ff7f 	bl	8000db0 <ProcessAdcFilter>
        if (Ticks10ms >= 10) {
 8007eb2:	4b2d      	ldr	r3, [pc, #180]	; (8007f68 <main+0x128>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	5e9b      	ldrsh	r3, [r3, r2]
 8007eb8:	2b09      	cmp	r3, #9
 8007eba:	dd49      	ble.n	8007f50 <main+0x110>
          Ticks10ms -= 10;
 8007ebc:	4b2a      	ldr	r3, [pc, #168]	; (8007f68 <main+0x128>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	5e9b      	ldrsh	r3, [r3, r2]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	3b0a      	subs	r3, #10
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	b21a      	sxth	r2, r3
 8007eca:	4b27      	ldr	r3, [pc, #156]	; (8007f68 <main+0x128>)
 8007ecc:	801a      	strh	r2, [r3, #0]
          ProcessMasterIndex();
 8007ece:	f7fe fd45 	bl	800695c <ProcessMasterIndex>
          ProcessAnalogReadings();
 8007ed2:	f7f9 f869 	bl	8000fa8 <ProcessAnalogReadings>
          ProcessPwmOutput();
 8007ed6:	f000 fb9d 	bl	8008614 <ProcessPwmOutput>
          ProcessSignalStatus();
 8007eda:	f003 fdcb 	bl	800ba74 <ProcessSignalStatus>
          IWDG_TriggerWatchdog();
 8007ede:	f004 fa83 	bl	800c3e8 <IWDG_TriggerWatchdog>
          ProcessClearEventLog();
 8007ee2:	f7ff fe2f 	bl	8007b44 <ProcessClearEventLog>
          ProcessEventMessageQueue();
 8007ee6:	f7ff ff29 	bl	8007d3c <ProcessEventMessageQueue>
          ProcessLogDefaultProfile();
 8007eea:	f7fa fe81 	bl	8002bf0 <ProcessLogDefaultProfile>
          ProcessDefaultProfile();
 8007eee:	f7fa ff3f 	bl	8002d70 <ProcessDefaultProfile>
          ProcessThrottle();
 8007ef2:	f002 ff9b 	bl	800ae2c <ProcessThrottle>
          ProcessCan();
 8007ef6:	f7fa fb5d 	bl	80025b4 <ProcessCan>
          if (Ticks20ms >= 20) {
 8007efa:	4b1c      	ldr	r3, [pc, #112]	; (8007f6c <main+0x12c>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	5e9b      	ldrsh	r3, [r3, r2]
 8007f00:	2b13      	cmp	r3, #19
 8007f02:	dd25      	ble.n	8007f50 <main+0x110>
            Ticks20ms -= 20;
 8007f04:	4b19      	ldr	r3, [pc, #100]	; (8007f6c <main+0x12c>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	5e9b      	ldrsh	r3, [r3, r2]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	3b14      	subs	r3, #20
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	b21a      	sxth	r2, r3
 8007f12:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <main+0x12c>)
 8007f14:	801a      	strh	r2, [r3, #0]
            ProcessFrequencyOutputs();
 8007f16:	f7fc fdd7 	bl	8004ac8 <ProcessFrequencyOutputs>
            ProcessMasterFrequencyOutput();
 8007f1a:	f7fc fe27 	bl	8004b6c <ProcessMasterFrequencyOutput>
            ProcessTestInput();
 8007f1e:	f002 f9cf 	bl	800a2c0 <ProcessTestInput>
            ProcessErrorCondition();
 8007f22:	f7fc fa7f 	bl	8004424 <ProcessErrorCondition>
            if (Ticks1000ms >= 1000) {              // One second
 8007f26:	4b12      	ldr	r3, [pc, #72]	; (8007f70 <main+0x130>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	5e9b      	ldrsh	r3, [r3, r2]
 8007f2c:	4a11      	ldr	r2, [pc, #68]	; (8007f74 <main+0x134>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	dd0e      	ble.n	8007f50 <main+0x110>
              Ticks1000ms -= 1000;
 8007f32:	4b0f      	ldr	r3, [pc, #60]	; (8007f70 <main+0x130>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	5e9b      	ldrsh	r3, [r3, r2]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	4a0f      	ldr	r2, [pc, #60]	; (8007f78 <main+0x138>)
 8007f3c:	4694      	mov	ip, r2
 8007f3e:	4463      	add	r3, ip
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	b21a      	sxth	r2, r3
 8007f44:	4b0a      	ldr	r3, [pc, #40]	; (8007f70 <main+0x130>)
 8007f46:	801a      	strh	r2, [r3, #0]
              ProcessVerifyStack();
 8007f48:	f003 fd08 	bl	800b95c <ProcessVerifyStack>
              ExecutionAverage();
 8007f4c:	f7fc fbf0 	bl	8004730 <ExecutionAverage>
            }
          }
        }
      }
    }
    ExecutionEnd(EXECUTION_MAIN_LOOP);
 8007f50:	2000      	movs	r0, #0
 8007f52:	f7fc fb75 	bl	8004640 <ExecutionEnd>
    ExecutionStart(EXECUTION_MAIN_LOOP);
 8007f56:	e777      	b.n	8007e48 <main+0x8>
 8007f58:	20002cf8 	.word	0x20002cf8
 8007f5c:	20001588 	.word	0x20001588
 8007f60:	200018b4 	.word	0x200018b4
 8007f64:	20002f9c 	.word	0x20002f9c
 8007f68:	20000c5c 	.word	0x20000c5c
 8007f6c:	20002a0a 	.word	0x20002a0a
 8007f70:	20002a08 	.word	0x20002a08
 8007f74:	000003e7 	.word	0x000003e7
 8007f78:	fffffc18 	.word	0xfffffc18

08007f7c <MultDivideWithRounding64>:
// MultDivideWithRounding64 - This routine provides rounding and up to 64 bit math to support
//                            routines that would overflow
//
// Params and Returns : Result = (Dividend + (Divisor / 2)) / Divisor
//
int64_t MultDivideWithRounding64(int32_t Mult1, int32_t Mult2, int32_t Divisor, enumMultDivideResult MultDivideResult) {
 8007f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f7e:	b091      	sub	sp, #68	; 0x44
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6278      	str	r0, [r7, #36]	; 0x24
 8007f84:	6239      	str	r1, [r7, #32]
 8007f86:	61fa      	str	r2, [r7, #28]
 8007f88:	001a      	movs	r2, r3
 8007f8a:	231b      	movs	r3, #27
 8007f8c:	18fb      	adds	r3, r7, r3
 8007f8e:	701a      	strb	r2, [r3, #0]

    uint8_t bNeg;
    int64_t Result;
    int64_t Dividend;

    if (Divisor == 0) {
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d103      	bne.n	8007f9e <MultDivideWithRounding64+0x22>
        Error_Handler(FILE_MATH64,__LINE__);
 8007f96:	2144      	movs	r1, #68	; 0x44
 8007f98:	2017      	movs	r0, #23
 8007f9a:	f7fc fa1b 	bl	80043d4 <Error_Handler>

    }
    bNeg = 0;
 8007f9e:	2327      	movs	r3, #39	; 0x27
 8007fa0:	2218      	movs	r2, #24
 8007fa2:	4694      	mov	ip, r2
 8007fa4:	44bc      	add	ip, r7
 8007fa6:	4463      	add	r3, ip
 8007fa8:	2200      	movs	r2, #0
 8007faa:	701a      	strb	r2, [r3, #0]
    Dividend = (int64_t)Mult1 * Mult2;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	613b      	str	r3, [r7, #16]
 8007fb0:	17db      	asrs	r3, r3, #31
 8007fb2:	617b      	str	r3, [r7, #20]
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	60bb      	str	r3, [r7, #8]
 8007fb8:	17db      	asrs	r3, r3, #31
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6938      	ldr	r0, [r7, #16]
 8007fc2:	6979      	ldr	r1, [r7, #20]
 8007fc4:	f7f8 fa9e 	bl	8000504 <__aeabi_lmul>
 8007fc8:	0003      	movs	r3, r0
 8007fca:	000c      	movs	r4, r1
 8007fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fce:	62fc      	str	r4, [r7, #44]	; 0x2c
    if (Dividend < 0) {
 8007fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	da0d      	bge.n	8007ff2 <MultDivideWithRounding64+0x76>
        Dividend = -Dividend;
 8007fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fda:	2400      	movs	r4, #0
 8007fdc:	424b      	negs	r3, r1
 8007fde:	4194      	sbcs	r4, r2
 8007fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fe2:	62fc      	str	r4, [r7, #44]	; 0x2c
        bNeg = 1;
 8007fe4:	2327      	movs	r3, #39	; 0x27
 8007fe6:	2218      	movs	r2, #24
 8007fe8:	4694      	mov	ip, r2
 8007fea:	44bc      	add	ip, r7
 8007fec:	4463      	add	r3, ip
 8007fee:	2201      	movs	r2, #1
 8007ff0:	701a      	strb	r2, [r3, #0]
    }
    if (Divisor < 0) {
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	da0d      	bge.n	8008014 <MultDivideWithRounding64+0x98>
        Divisor = -Divisor;
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	425b      	negs	r3, r3
 8007ffc:	61fb      	str	r3, [r7, #28]
        bNeg = !bNeg;
 8007ffe:	2127      	movs	r1, #39	; 0x27
 8008000:	2018      	movs	r0, #24
 8008002:	183b      	adds	r3, r7, r0
 8008004:	185b      	adds	r3, r3, r1
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	425a      	negs	r2, r3
 800800a:	4153      	adcs	r3, r2
 800800c:	b2da      	uxtb	r2, r3
 800800e:	183b      	adds	r3, r7, r0
 8008010:	185b      	adds	r3, r3, r1
 8008012:	701a      	strb	r2, [r3, #0]
    }
    Result = (Dividend + (Divisor / 2)) / Divisor;
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	2b00      	cmp	r3, #0
 8008018:	da00      	bge.n	800801c <MultDivideWithRounding64+0xa0>
 800801a:	3301      	adds	r3, #1
 800801c:	105b      	asrs	r3, r3, #1
 800801e:	001d      	movs	r5, r3
 8008020:	17db      	asrs	r3, r3, #31
 8008022:	001e      	movs	r6, r3
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8008028:	0028      	movs	r0, r5
 800802a:	0031      	movs	r1, r6
 800802c:	18c0      	adds	r0, r0, r3
 800802e:	4161      	adcs	r1, r4
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	603b      	str	r3, [r7, #0]
 8008034:	17db      	asrs	r3, r3, #31
 8008036:	607b      	str	r3, [r7, #4]
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f7f8 fa3e 	bl	80004bc <__aeabi_ldivmod>
 8008040:	0003      	movs	r3, r0
 8008042:	000c      	movs	r4, r1
 8008044:	633b      	str	r3, [r7, #48]	; 0x30
 8008046:	637c      	str	r4, [r7, #52]	; 0x34

    if (MultDivideResult == RESULT_U8) {
 8008048:	231b      	movs	r3, #27
 800804a:	18fb      	adds	r3, r7, r3
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d121      	bne.n	8008096 <MultDivideWithRounding64+0x11a>
      bNeg = 0; // Ensure bNeg is not set to flip the sign (unsigned)
 8008052:	2327      	movs	r3, #39	; 0x27
 8008054:	2218      	movs	r2, #24
 8008056:	4694      	mov	ip, r2
 8008058:	44bc      	add	ip, r7
 800805a:	4463      	add	r3, ip
 800805c:	2200      	movs	r2, #0
 800805e:	701a      	strb	r2, [r3, #0]
      // If value is greater than max allowed, trigger an error as an overflow should not occur
      if (Result > MAX_U8) {
 8008060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008062:	2b00      	cmp	r3, #0
 8008064:	dc05      	bgt.n	8008072 <MultDivideWithRounding64+0xf6>
 8008066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10a      	bne.n	8008082 <MultDivideWithRounding64+0x106>
 800806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806e:	2bff      	cmp	r3, #255	; 0xff
 8008070:	d907      	bls.n	8008082 <MultDivideWithRounding64+0x106>
        Error_Handler(FILE_MATH64, __LINE__);
 8008072:	2157      	movs	r1, #87	; 0x57
 8008074:	2017      	movs	r0, #23
 8008076:	f7fc f9ad 	bl	80043d4 <Error_Handler>
        Result = MAX_U8;
 800807a:	23ff      	movs	r3, #255	; 0xff
 800807c:	2400      	movs	r4, #0
 800807e:	633b      	str	r3, [r7, #48]	; 0x30
 8008080:	637c      	str	r4, [r7, #52]	; 0x34
      }
      // Cannot be negative, if it is, flip the sign
      if (Result < 0) {
 8008082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008084:	2b00      	cmp	r3, #0
 8008086:	da06      	bge.n	8008096 <MultDivideWithRounding64+0x11a>
        Result = -Result;
 8008088:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800808a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800808c:	2400      	movs	r4, #0
 800808e:	424b      	negs	r3, r1
 8008090:	4194      	sbcs	r4, r2
 8008092:	633b      	str	r3, [r7, #48]	; 0x30
 8008094:	637c      	str	r4, [r7, #52]	; 0x34
      }
    }

    if ((MultDivideResult == RESULT_U8) && (Result >MAX_U8)) {
 8008096:	231b      	movs	r3, #27
 8008098:	18fb      	adds	r3, r7, r3
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d117      	bne.n	80080d0 <MultDivideWithRounding64+0x154>
 80080a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	dc05      	bgt.n	80080b2 <MultDivideWithRounding64+0x136>
 80080a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d111      	bne.n	80080d0 <MultDivideWithRounding64+0x154>
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	2bff      	cmp	r3, #255	; 0xff
 80080b0:	d90e      	bls.n	80080d0 <MultDivideWithRounding64+0x154>
      Error_Handler(FILE_MATH64, __LINE__);
 80080b2:	2161      	movs	r1, #97	; 0x61
 80080b4:	2017      	movs	r0, #23
 80080b6:	f7fc f98d 	bl	80043d4 <Error_Handler>
      bNeg = 0; // Ensure bNeg is not set to flip the sign
 80080ba:	2327      	movs	r3, #39	; 0x27
 80080bc:	2218      	movs	r2, #24
 80080be:	4694      	mov	ip, r2
 80080c0:	44bc      	add	ip, r7
 80080c2:	4463      	add	r3, ip
 80080c4:	2200      	movs	r2, #0
 80080c6:	701a      	strb	r2, [r3, #0]
      Result = MAX_U8;
 80080c8:	23ff      	movs	r3, #255	; 0xff
 80080ca:	2400      	movs	r4, #0
 80080cc:	633b      	str	r3, [r7, #48]	; 0x30
 80080ce:	637c      	str	r4, [r7, #52]	; 0x34
    }
    // Flip negative values to positive
    if ((MultDivideResult == RESULT_U8) && (Result < 0)) {
 80080d0:	231b      	movs	r3, #27
 80080d2:	18fb      	adds	r3, r7, r3
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d109      	bne.n	80080ee <MultDivideWithRounding64+0x172>
 80080da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080dc:	2b00      	cmp	r3, #0
 80080de:	da06      	bge.n	80080ee <MultDivideWithRounding64+0x172>
      bNeg = 0; // Ensure bNeg is not set to flip the sign
 80080e0:	2327      	movs	r3, #39	; 0x27
 80080e2:	2218      	movs	r2, #24
 80080e4:	4694      	mov	ip, r2
 80080e6:	44bc      	add	ip, r7
 80080e8:	4463      	add	r3, ip
 80080ea:	2200      	movs	r2, #0
 80080ec:	701a      	strb	r2, [r3, #0]

    }

    if ((MultDivideResult == RESULT_16) && (Result > MAX_16)) {
 80080ee:	231b      	movs	r3, #27
 80080f0:	18fb      	adds	r3, r7, r3
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d111      	bne.n	800811c <MultDivideWithRounding64+0x1a0>
 80080f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	dc06      	bgt.n	800810c <MultDivideWithRounding64+0x190>
 80080fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10b      	bne.n	800811c <MultDivideWithRounding64+0x1a0>
 8008104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008106:	4a1a      	ldr	r2, [pc, #104]	; (8008170 <MultDivideWithRounding64+0x1f4>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d907      	bls.n	800811c <MultDivideWithRounding64+0x1a0>
        Error_Handler(FILE_MATH64, __LINE__);
 800810c:	216c      	movs	r1, #108	; 0x6c
 800810e:	2017      	movs	r0, #23
 8008110:	f7fc f960 	bl	80043d4 <Error_Handler>
        Result = MAX_16;
 8008114:	4b16      	ldr	r3, [pc, #88]	; (8008170 <MultDivideWithRounding64+0x1f4>)
 8008116:	2400      	movs	r4, #0
 8008118:	633b      	str	r3, [r7, #48]	; 0x30
 800811a:	637c      	str	r4, [r7, #52]	; 0x34
    }
    if ((MultDivideResult == RESULT_32) && (Result > MAX_32)) {
 800811c:	231b      	movs	r3, #27
 800811e:	18fb      	adds	r3, r7, r3
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	2b02      	cmp	r3, #2
 8008124:	d10d      	bne.n	8008142 <MultDivideWithRounding64+0x1c6>
 8008126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008128:	2b00      	cmp	r3, #0
 800812a:	dc06      	bgt.n	800813a <MultDivideWithRounding64+0x1be>
 800812c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812e:	2b00      	cmp	r3, #0
 8008130:	d107      	bne.n	8008142 <MultDivideWithRounding64+0x1c6>
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	4a0f      	ldr	r2, [pc, #60]	; (8008174 <MultDivideWithRounding64+0x1f8>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d903      	bls.n	8008142 <MultDivideWithRounding64+0x1c6>
        Error_Handler(FILE_MATH64, __LINE__);
 800813a:	2170      	movs	r1, #112	; 0x70
 800813c:	2017      	movs	r0, #23
 800813e:	f7fc f949 	bl	80043d4 <Error_Handler>
    }
    if (bNeg != 0) {
 8008142:	2327      	movs	r3, #39	; 0x27
 8008144:	2218      	movs	r2, #24
 8008146:	4694      	mov	ip, r2
 8008148:	44bc      	add	ip, r7
 800814a:	4463      	add	r3, ip
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d006      	beq.n	8008160 <MultDivideWithRounding64+0x1e4>
        Result = -Result;
 8008152:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008156:	2400      	movs	r4, #0
 8008158:	424b      	negs	r3, r1
 800815a:	4194      	sbcs	r4, r2
 800815c:	633b      	str	r3, [r7, #48]	; 0x30
 800815e:	637c      	str	r4, [r7, #52]	; 0x34
    }
    return Result;
 8008160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008162:	6b7c      	ldr	r4, [r7, #52]	; 0x34
}
 8008164:	0018      	movs	r0, r3
 8008166:	0021      	movs	r1, r4
 8008168:	46bd      	mov	sp, r7
 800816a:	b011      	add	sp, #68	; 0x44
 800816c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800816e:	46c0      	nop			; (mov r8, r8)
 8008170:	00007fff 	.word	0x00007fff
 8008174:	7fffffff 	.word	0x7fffffff

08008178 <InitializeMcp3421>:
//
// Returns:   None
//
// Requirement(s):
//
void InitializeMcp3421(void) {
 8008178:	b580      	push	{r7, lr}
 800817a:	af00      	add	r7, sp, #0

    static uint8_t TmpBuf[1];

    if ((bFactoryConfigurationValid != 0) && (FactoryConfiguration->RVOutputPresent != 0)) {
 800817c:	4b11      	ldr	r3, [pc, #68]	; (80081c4 <InitializeMcp3421+0x4c>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d01c      	beq.n	80081be <InitializeMcp3421+0x46>
 8008184:	4b10      	ldr	r3, [pc, #64]	; (80081c8 <InitializeMcp3421+0x50>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	7f1b      	ldrb	r3, [r3, #28]
 800818a:	2220      	movs	r2, #32
 800818c:	4013      	ands	r3, r2
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b00      	cmp	r3, #0
 8008192:	d014      	beq.n	80081be <InitializeMcp3421+0x46>
        TmpBuf[0] = 0;
 8008194:	4b0d      	ldr	r3, [pc, #52]	; (80081cc <InitializeMcp3421+0x54>)
 8008196:	2200      	movs	r2, #0
 8008198:	701a      	strb	r2, [r3, #0]
        I2C1Control.Length = 1;
 800819a:	4b0d      	ldr	r3, [pc, #52]	; (80081d0 <InitializeMcp3421+0x58>)
 800819c:	2201      	movs	r2, #1
 800819e:	80da      	strh	r2, [r3, #6]
        I2C1Control.Buffer = &TmpBuf[0]; // Set to One-Shot Conversion Mode
 80081a0:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <InitializeMcp3421+0x58>)
 80081a2:	4a0a      	ldr	r2, [pc, #40]	; (80081cc <InitializeMcp3421+0x54>)
 80081a4:	601a      	str	r2, [r3, #0]
        I2C1Control.Mode = I2C_MODE_WRITE_MCP3421;
 80081a6:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <InitializeMcp3421+0x58>)
 80081a8:	2205      	movs	r2, #5
 80081aa:	725a      	strb	r2, [r3, #9]
        do {
            ProcessI2C1();
 80081ac:	f7fd fe94 	bl	8005ed8 <ProcessI2C1>
        } while (I2C1Control.Mode != I2C_MODE_DONE);
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <InitializeMcp3421+0x58>)
 80081b2:	7a5b      	ldrb	r3, [r3, #9]
 80081b4:	2b07      	cmp	r3, #7
 80081b6:	d1f9      	bne.n	80081ac <InitializeMcp3421+0x34>
        I2C1Control.Mode = I2C_MODE_IDLE;
 80081b8:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <InitializeMcp3421+0x58>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	725a      	strb	r2, [r3, #9]
    }
}
 80081be:	46c0      	nop			; (mov r8, r8)
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	20002f9e 	.word	0x20002f9e
 80081c8:	20001eec 	.word	0x20001eec
 80081cc:	20000ad8 	.word	0x20000ad8
 80081d0:	20001c58 	.word	0x20001c58

080081d4 <ProcessMcp3421>:
//
// Returns:   Edits the SysVars data structure
//
// Requirement(s):
//
void ProcessMcp3421(void) {
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0

    int32_t        AdcCounts;
    static uint8_t State;
    static uint8_t TmpBuffer[3];

    ExecutionStart(EXECUTION_PROCESS_MCP3421);
 80081da:	2007      	movs	r0, #7
 80081dc:	f7fc fa16 	bl	800460c <ExecutionStart>

    switch (State) {
 80081e0:	4b68      	ldr	r3, [pc, #416]	; (8008384 <ProcessMcp3421+0x1b0>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b05      	cmp	r3, #5
 80081e6:	d900      	bls.n	80081ea <ProcessMcp3421+0x16>
 80081e8:	e0b9      	b.n	800835e <ProcessMcp3421+0x18a>
 80081ea:	009a      	lsls	r2, r3, #2
 80081ec:	4b66      	ldr	r3, [pc, #408]	; (8008388 <ProcessMcp3421+0x1b4>)
 80081ee:	18d3      	adds	r3, r2, r3
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	469f      	mov	pc, r3
    case 0:
        STM32_GPIO_WritePin(MUX_SEL_GPIO_Port, MUX_SEL_Pin, GPIO_PIN_RESET);
 80081f4:	2380      	movs	r3, #128	; 0x80
 80081f6:	0219      	lsls	r1, r3, #8
 80081f8:	2390      	movs	r3, #144	; 0x90
 80081fa:	05db      	lsls	r3, r3, #23
 80081fc:	2200      	movs	r2, #0
 80081fe:	0018      	movs	r0, r3
 8008200:	f7fd fb84 	bl	800590c <STM32_GPIO_WritePin>
        TmpBuffer[0] = (1u << 7) | (1u << 2) | (0u << 0); // RDY=1, Sample Rate = 60 SPS (14 bits), PGA=x1    R/V Output Voltage
 8008204:	4b61      	ldr	r3, [pc, #388]	; (800838c <ProcessMcp3421+0x1b8>)
 8008206:	2284      	movs	r2, #132	; 0x84
 8008208:	701a      	strb	r2, [r3, #0]
        I2C1Control.Buffer = &TmpBuffer[0];
 800820a:	4b61      	ldr	r3, [pc, #388]	; (8008390 <ProcessMcp3421+0x1bc>)
 800820c:	4a5f      	ldr	r2, [pc, #380]	; (800838c <ProcessMcp3421+0x1b8>)
 800820e:	601a      	str	r2, [r3, #0]
        I2C1Control.Length = 1;
 8008210:	4b5f      	ldr	r3, [pc, #380]	; (8008390 <ProcessMcp3421+0x1bc>)
 8008212:	2201      	movs	r2, #1
 8008214:	80da      	strh	r2, [r3, #6]
        I2C1Control.Mode = I2C_MODE_WRITE_MCP3421;
 8008216:	4b5e      	ldr	r3, [pc, #376]	; (8008390 <ProcessMcp3421+0x1bc>)
 8008218:	2205      	movs	r2, #5
 800821a:	725a      	strb	r2, [r3, #9]
        State++;
 800821c:	4b59      	ldr	r3, [pc, #356]	; (8008384 <ProcessMcp3421+0x1b0>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	3301      	adds	r3, #1
 8008222:	b2da      	uxtb	r2, r3
 8008224:	4b57      	ldr	r3, [pc, #348]	; (8008384 <ProcessMcp3421+0x1b0>)
 8008226:	701a      	strb	r2, [r3, #0]
        break;
 8008228:	e0a5      	b.n	8008376 <ProcessMcp3421+0x1a2>
    case 1:
        if (I2C1Control.Mode == I2C_MODE_DONE) {
 800822a:	4b59      	ldr	r3, [pc, #356]	; (8008390 <ProcessMcp3421+0x1bc>)
 800822c:	7a5b      	ldrb	r3, [r3, #9]
 800822e:	2b07      	cmp	r3, #7
 8008230:	d000      	beq.n	8008234 <ProcessMcp3421+0x60>
 8008232:	e099      	b.n	8008368 <ProcessMcp3421+0x194>
            I2C1Control.Length = 3;
 8008234:	4b56      	ldr	r3, [pc, #344]	; (8008390 <ProcessMcp3421+0x1bc>)
 8008236:	2203      	movs	r2, #3
 8008238:	80da      	strh	r2, [r3, #6]
            I2C1Control.Buffer = &TmpBuffer[0];
 800823a:	4b55      	ldr	r3, [pc, #340]	; (8008390 <ProcessMcp3421+0x1bc>)
 800823c:	4a53      	ldr	r2, [pc, #332]	; (800838c <ProcessMcp3421+0x1b8>)
 800823e:	601a      	str	r2, [r3, #0]
            I2C1Control.Mode = I2C_MODE_READ_MCP3421;
 8008240:	4b53      	ldr	r3, [pc, #332]	; (8008390 <ProcessMcp3421+0x1bc>)
 8008242:	2206      	movs	r2, #6
 8008244:	725a      	strb	r2, [r3, #9]
            State++;
 8008246:	4b4f      	ldr	r3, [pc, #316]	; (8008384 <ProcessMcp3421+0x1b0>)
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	3301      	adds	r3, #1
 800824c:	b2da      	uxtb	r2, r3
 800824e:	4b4d      	ldr	r3, [pc, #308]	; (8008384 <ProcessMcp3421+0x1b0>)
 8008250:	701a      	strb	r2, [r3, #0]
        }
        break;
 8008252:	e089      	b.n	8008368 <ProcessMcp3421+0x194>
    case 2:
        if (I2C1Control.Mode == I2C_MODE_DONE) {
 8008254:	4b4e      	ldr	r3, [pc, #312]	; (8008390 <ProcessMcp3421+0x1bc>)
 8008256:	7a5b      	ldrb	r3, [r3, #9]
 8008258:	2b07      	cmp	r3, #7
 800825a:	d000      	beq.n	800825e <ProcessMcp3421+0x8a>
 800825c:	e086      	b.n	800836c <ProcessMcp3421+0x198>
            if ((TmpBuffer[2] & 0x80) != 0) {
 800825e:	4b4b      	ldr	r3, [pc, #300]	; (800838c <ProcessMcp3421+0x1b8>)
 8008260:	789b      	ldrb	r3, [r3, #2]
 8008262:	b25b      	sxtb	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	da03      	bge.n	8008270 <ProcessMcp3421+0x9c>
                State = 1;
 8008268:	4b46      	ldr	r3, [pc, #280]	; (8008384 <ProcessMcp3421+0x1b0>)
 800826a:	2201      	movs	r2, #1
 800826c:	701a      	strb	r2, [r3, #0]
                AdcCounts = (int32_t)(((uint16_t)TmpBuffer[0] << 8) | TmpBuffer[1]);
                SysVars.RVOutputVoltageCounts = HostData.bManualRVOutputVoltageEnable ? HostData.ManualRVOutputVoltage : AdcCounts; // R/V Voltage
                State++;
            }
        }
        break;
 800826e:	e07d      	b.n	800836c <ProcessMcp3421+0x198>
                AdcCounts = (int32_t)(((uint16_t)TmpBuffer[0] << 8) | TmpBuffer[1]);
 8008270:	4b46      	ldr	r3, [pc, #280]	; (800838c <ProcessMcp3421+0x1b8>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	021b      	lsls	r3, r3, #8
 8008276:	4a45      	ldr	r2, [pc, #276]	; (800838c <ProcessMcp3421+0x1b8>)
 8008278:	7852      	ldrb	r2, [r2, #1]
 800827a:	4313      	orrs	r3, r2
 800827c:	607b      	str	r3, [r7, #4]
                SysVars.RVOutputVoltageCounts = HostData.bManualRVOutputVoltageEnable ? HostData.ManualRVOutputVoltage : AdcCounts; // R/V Voltage
 800827e:	4b45      	ldr	r3, [pc, #276]	; (8008394 <ProcessMcp3421+0x1c0>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2208      	movs	r2, #8
 8008284:	4013      	ands	r3, r2
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	d002      	beq.n	8008292 <ProcessMcp3421+0xbe>
 800828c:	4b41      	ldr	r3, [pc, #260]	; (8008394 <ProcessMcp3421+0x1c0>)
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	e000      	b.n	8008294 <ProcessMcp3421+0xc0>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a40      	ldr	r2, [pc, #256]	; (8008398 <ProcessMcp3421+0x1c4>)
 8008296:	2180      	movs	r1, #128	; 0x80
 8008298:	5053      	str	r3, [r2, r1]
                State++;
 800829a:	4b3a      	ldr	r3, [pc, #232]	; (8008384 <ProcessMcp3421+0x1b0>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	3301      	adds	r3, #1
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	4b38      	ldr	r3, [pc, #224]	; (8008384 <ProcessMcp3421+0x1b0>)
 80082a4:	701a      	strb	r2, [r3, #0]
        break;
 80082a6:	e061      	b.n	800836c <ProcessMcp3421+0x198>
    case 3:
        STM32_GPIO_WritePin(MUX_SEL_GPIO_Port, MUX_SEL_Pin, GPIO_PIN_SET);
 80082a8:	2380      	movs	r3, #128	; 0x80
 80082aa:	0219      	lsls	r1, r3, #8
 80082ac:	2390      	movs	r3, #144	; 0x90
 80082ae:	05db      	lsls	r3, r3, #23
 80082b0:	2201      	movs	r2, #1
 80082b2:	0018      	movs	r0, r3
 80082b4:	f7fd fb2a 	bl	800590c <STM32_GPIO_WritePin>
        TmpBuffer[0] = (1u << 7) | (1u << 2) | (3u << 0); // RDY=1, Sample Rate = 60 SPS (14 bits), PGA=8     R/V Output Current
 80082b8:	4b34      	ldr	r3, [pc, #208]	; (800838c <ProcessMcp3421+0x1b8>)
 80082ba:	2287      	movs	r2, #135	; 0x87
 80082bc:	701a      	strb	r2, [r3, #0]
        I2C1Control.Buffer = &TmpBuffer[0];
 80082be:	4b34      	ldr	r3, [pc, #208]	; (8008390 <ProcessMcp3421+0x1bc>)
 80082c0:	4a32      	ldr	r2, [pc, #200]	; (800838c <ProcessMcp3421+0x1b8>)
 80082c2:	601a      	str	r2, [r3, #0]
        I2C1Control.Length = 1;
 80082c4:	4b32      	ldr	r3, [pc, #200]	; (8008390 <ProcessMcp3421+0x1bc>)
 80082c6:	2201      	movs	r2, #1
 80082c8:	80da      	strh	r2, [r3, #6]
        I2C1Control.Mode = I2C_MODE_WRITE_MCP3421;
 80082ca:	4b31      	ldr	r3, [pc, #196]	; (8008390 <ProcessMcp3421+0x1bc>)
 80082cc:	2205      	movs	r2, #5
 80082ce:	725a      	strb	r2, [r3, #9]
        State++;
 80082d0:	4b2c      	ldr	r3, [pc, #176]	; (8008384 <ProcessMcp3421+0x1b0>)
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	3301      	adds	r3, #1
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	4b2a      	ldr	r3, [pc, #168]	; (8008384 <ProcessMcp3421+0x1b0>)
 80082da:	701a      	strb	r2, [r3, #0]
        break;
 80082dc:	e04b      	b.n	8008376 <ProcessMcp3421+0x1a2>
    case 4:
        if (I2C1Control.Mode == I2C_MODE_DONE) {
 80082de:	4b2c      	ldr	r3, [pc, #176]	; (8008390 <ProcessMcp3421+0x1bc>)
 80082e0:	7a5b      	ldrb	r3, [r3, #9]
 80082e2:	2b07      	cmp	r3, #7
 80082e4:	d144      	bne.n	8008370 <ProcessMcp3421+0x19c>
            I2C1Control.Length = 3;
 80082e6:	4b2a      	ldr	r3, [pc, #168]	; (8008390 <ProcessMcp3421+0x1bc>)
 80082e8:	2203      	movs	r2, #3
 80082ea:	80da      	strh	r2, [r3, #6]
            I2C1Control.Buffer = &TmpBuffer[0];
 80082ec:	4b28      	ldr	r3, [pc, #160]	; (8008390 <ProcessMcp3421+0x1bc>)
 80082ee:	4a27      	ldr	r2, [pc, #156]	; (800838c <ProcessMcp3421+0x1b8>)
 80082f0:	601a      	str	r2, [r3, #0]
            I2C1Control.Mode = I2C_MODE_READ_MCP3421;
 80082f2:	4b27      	ldr	r3, [pc, #156]	; (8008390 <ProcessMcp3421+0x1bc>)
 80082f4:	2206      	movs	r2, #6
 80082f6:	725a      	strb	r2, [r3, #9]
            State++;
 80082f8:	4b22      	ldr	r3, [pc, #136]	; (8008384 <ProcessMcp3421+0x1b0>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	3301      	adds	r3, #1
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	4b20      	ldr	r3, [pc, #128]	; (8008384 <ProcessMcp3421+0x1b0>)
 8008302:	701a      	strb	r2, [r3, #0]
        }
        break;
 8008304:	e034      	b.n	8008370 <ProcessMcp3421+0x19c>
    case 5:
        if (I2C1Control.Mode == I2C_MODE_DONE) {
 8008306:	4b22      	ldr	r3, [pc, #136]	; (8008390 <ProcessMcp3421+0x1bc>)
 8008308:	7a5b      	ldrb	r3, [r3, #9]
 800830a:	2b07      	cmp	r3, #7
 800830c:	d132      	bne.n	8008374 <ProcessMcp3421+0x1a0>
            if ((TmpBuffer[2] & 0x80) != 0) {
 800830e:	4b1f      	ldr	r3, [pc, #124]	; (800838c <ProcessMcp3421+0x1b8>)
 8008310:	789b      	ldrb	r3, [r3, #2]
 8008312:	b25b      	sxtb	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	da03      	bge.n	8008320 <ProcessMcp3421+0x14c>
                State = 4;
 8008318:	4b1a      	ldr	r3, [pc, #104]	; (8008384 <ProcessMcp3421+0x1b0>)
 800831a:	2204      	movs	r2, #4
 800831c:	701a      	strb	r2, [r3, #0]
                bRVUpdate = TRUE;
                I2C1Control.Mode = I2C_MODE_IDLE;
                State = 0;
            }
        }
        break;
 800831e:	e029      	b.n	8008374 <ProcessMcp3421+0x1a0>
                AdcCounts = (int32_t)(((uint16_t)TmpBuffer[0] << 8) | TmpBuffer[1]);
 8008320:	4b1a      	ldr	r3, [pc, #104]	; (800838c <ProcessMcp3421+0x1b8>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	021b      	lsls	r3, r3, #8
 8008326:	4a19      	ldr	r2, [pc, #100]	; (800838c <ProcessMcp3421+0x1b8>)
 8008328:	7852      	ldrb	r2, [r2, #1]
 800832a:	4313      	orrs	r3, r2
 800832c:	607b      	str	r3, [r7, #4]
                SysVars.RVOutputCurrentCounts = HostData.bManualRVOutputCurrentEnable ? HostData.ManualRVOutputCurrent : AdcCounts; // R/V Voltage
 800832e:	4b19      	ldr	r3, [pc, #100]	; (8008394 <ProcessMcp3421+0x1c0>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2210      	movs	r2, #16
 8008334:	4013      	ands	r3, r2
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <ProcessMcp3421+0x16e>
 800833c:	4b15      	ldr	r3, [pc, #84]	; (8008394 <ProcessMcp3421+0x1c0>)
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	e000      	b.n	8008344 <ProcessMcp3421+0x170>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a14      	ldr	r2, [pc, #80]	; (8008398 <ProcessMcp3421+0x1c4>)
 8008346:	218c      	movs	r1, #140	; 0x8c
 8008348:	5053      	str	r3, [r2, r1]
                bRVUpdate = TRUE;
 800834a:	4b14      	ldr	r3, [pc, #80]	; (800839c <ProcessMcp3421+0x1c8>)
 800834c:	2201      	movs	r2, #1
 800834e:	701a      	strb	r2, [r3, #0]
                I2C1Control.Mode = I2C_MODE_IDLE;
 8008350:	4b0f      	ldr	r3, [pc, #60]	; (8008390 <ProcessMcp3421+0x1bc>)
 8008352:	2200      	movs	r2, #0
 8008354:	725a      	strb	r2, [r3, #9]
                State = 0;
 8008356:	4b0b      	ldr	r3, [pc, #44]	; (8008384 <ProcessMcp3421+0x1b0>)
 8008358:	2200      	movs	r2, #0
 800835a:	701a      	strb	r2, [r3, #0]
        break;
 800835c:	e00a      	b.n	8008374 <ProcessMcp3421+0x1a0>
    default:
        Error_Handler(FILE_MCP3421, __LINE__);
 800835e:	219a      	movs	r1, #154	; 0x9a
 8008360:	2018      	movs	r0, #24
 8008362:	f7fc f837 	bl	80043d4 <Error_Handler>
        break;
 8008366:	e006      	b.n	8008376 <ProcessMcp3421+0x1a2>
        break;
 8008368:	46c0      	nop			; (mov r8, r8)
 800836a:	e004      	b.n	8008376 <ProcessMcp3421+0x1a2>
        break;
 800836c:	46c0      	nop			; (mov r8, r8)
 800836e:	e002      	b.n	8008376 <ProcessMcp3421+0x1a2>
        break;
 8008370:	46c0      	nop			; (mov r8, r8)
 8008372:	e000      	b.n	8008376 <ProcessMcp3421+0x1a2>
        break;
 8008374:	46c0      	nop			; (mov r8, r8)
    }
    ExecutionEnd(EXECUTION_PROCESS_MCP3421);
 8008376:	2007      	movs	r0, #7
 8008378:	f7fc f962 	bl	8004640 <ExecutionEnd>
}
 800837c:	46c0      	nop			; (mov r8, r8)
 800837e:	46bd      	mov	sp, r7
 8008380:	b002      	add	sp, #8
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20000ad9 	.word	0x20000ad9
 8008388:	0800cbe4 	.word	0x0800cbe4
 800838c:	20000adc 	.word	0x20000adc
 8008390:	20001c58 	.word	0x20001c58
 8008394:	20002a14 	.word	0x20002a14
 8008398:	200020c0 	.word	0x200020c0
 800839c:	20001c54 	.word	0x20001c54

080083a0 <PWM_Init>:
//
// Returns:   None
//
// Requirement(s):
//
static void PWM_Init(PWM_InitTypeDef PWM_InitStruct) {
 80083a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a2:	b093      	sub	sp, #76	; 0x4c
 80083a4:	af04      	add	r7, sp, #16
 80083a6:	2610      	movs	r6, #16
 80083a8:	19bb      	adds	r3, r7, r6
 80083aa:	6018      	str	r0, [r3, #0]
 80083ac:	6059      	str	r1, [r3, #4]

    TIM_OC_InitTypeDef sConfigOC;

    PWM_HandleStruct.Handle = &htim14;
 80083ae:	4b4c      	ldr	r3, [pc, #304]	; (80084e0 <PWM_Init+0x140>)
 80083b0:	4a4c      	ldr	r2, [pc, #304]	; (80084e4 <PWM_Init+0x144>)
 80083b2:	609a      	str	r2, [r3, #8]
    PWM_HandleStruct.Handle->Instance = TIM14;
 80083b4:	4b4a      	ldr	r3, [pc, #296]	; (80084e0 <PWM_Init+0x140>)
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	4a4b      	ldr	r2, [pc, #300]	; (80084e8 <PWM_Init+0x148>)
 80083ba:	601a      	str	r2, [r3, #0]
    PWM_HandleStruct.TIM_Channel = TIM_CHANNEL_1;
 80083bc:	4b48      	ldr	r3, [pc, #288]	; (80084e0 <PWM_Init+0x140>)
 80083be:	2200      	movs	r2, #0
 80083c0:	60da      	str	r2, [r3, #12]
    PWM_HandleStruct.PWM_InitStruct = PWM_InitStruct;
 80083c2:	4b47      	ldr	r3, [pc, #284]	; (80084e0 <PWM_Init+0x140>)
 80083c4:	19ba      	adds	r2, r7, r6
 80083c6:	ca03      	ldmia	r2!, {r0, r1}
 80083c8:	c303      	stmia	r3!, {r0, r1}
    //
    //
    //
    PWM_HandleStruct.Prescaler = (uint32_t)((4800000000LL / PWM_HandleStruct.PWM_InitStruct.Frequency) / 65000);
 80083ca:	4b45      	ldr	r3, [pc, #276]	; (80084e0 <PWM_Init+0x140>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60bb      	str	r3, [r7, #8]
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4844      	ldr	r0, [pc, #272]	; (80084ec <PWM_Init+0x14c>)
 80083da:	2101      	movs	r1, #1
 80083dc:	f7f8 f86e 	bl	80004bc <__aeabi_ldivmod>
 80083e0:	0002      	movs	r2, r0
 80083e2:	000b      	movs	r3, r1
 80083e4:	0010      	movs	r0, r2
 80083e6:	0019      	movs	r1, r3
 80083e8:	4a41      	ldr	r2, [pc, #260]	; (80084f0 <PWM_Init+0x150>)
 80083ea:	2300      	movs	r3, #0
 80083ec:	f7f8 f866 	bl	80004bc <__aeabi_ldivmod>
 80083f0:	0002      	movs	r2, r0
 80083f2:	000b      	movs	r3, r1
 80083f4:	4b3a      	ldr	r3, [pc, #232]	; (80084e0 <PWM_Init+0x140>)
 80083f6:	611a      	str	r2, [r3, #16]
    PWM_HandleStruct.Period = (uint32_t)((4800000000LL / (PWM_HandleStruct.Prescaler + 1)) / PWM_HandleStruct.PWM_InitStruct.Frequency);
 80083f8:	4b39      	ldr	r3, [pc, #228]	; (80084e0 <PWM_Init+0x140>)
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	3301      	adds	r3, #1
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	2300      	movs	r3, #0
 8008402:	607b      	str	r3, [r7, #4]
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4838      	ldr	r0, [pc, #224]	; (80084ec <PWM_Init+0x14c>)
 800840a:	2101      	movs	r1, #1
 800840c:	f7f8 f856 	bl	80004bc <__aeabi_ldivmod>
 8008410:	0002      	movs	r2, r0
 8008412:	000b      	movs	r3, r1
 8008414:	0010      	movs	r0, r2
 8008416:	0019      	movs	r1, r3
 8008418:	4b31      	ldr	r3, [pc, #196]	; (80084e0 <PWM_Init+0x140>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	001c      	movs	r4, r3
 800841e:	2300      	movs	r3, #0
 8008420:	001d      	movs	r5, r3
 8008422:	0022      	movs	r2, r4
 8008424:	002b      	movs	r3, r5
 8008426:	f7f8 f849 	bl	80004bc <__aeabi_ldivmod>
 800842a:	0003      	movs	r3, r0
 800842c:	000c      	movs	r4, r1
 800842e:	001a      	movs	r2, r3
 8008430:	4b2b      	ldr	r3, [pc, #172]	; (80084e0 <PWM_Init+0x140>)
 8008432:	615a      	str	r2, [r3, #20]
    PWM_HandleStruct.Pulse = MultDivideWithRounding64(PWM_HandleStruct.Period, PWM_HandleStruct.PWM_InitStruct.DutyCycle, PWM_MAX_DUTY_CYCLE, RESULT_32);
 8008434:	4b2a      	ldr	r3, [pc, #168]	; (80084e0 <PWM_Init+0x140>)
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	0018      	movs	r0, r3
 800843a:	4b29      	ldr	r3, [pc, #164]	; (80084e0 <PWM_Init+0x140>)
 800843c:	6859      	ldr	r1, [r3, #4]
 800843e:	4a2d      	ldr	r2, [pc, #180]	; (80084f4 <PWM_Init+0x154>)
 8008440:	2302      	movs	r3, #2
 8008442:	f7ff fd9b 	bl	8007f7c <MultDivideWithRounding64>
 8008446:	0003      	movs	r3, r0
 8008448:	000c      	movs	r4, r1
 800844a:	001a      	movs	r2, r3
 800844c:	4b24      	ldr	r3, [pc, #144]	; (80084e0 <PWM_Init+0x140>)
 800844e:	619a      	str	r2, [r3, #24]
    //
    // Initialize Timer Base
    //
    STM32_TIM_Base_Init(TIM14, PWM_HandleStruct.Prescaler, PWM_HandleStruct.Period - 1, TIM_AUTORELOAD_PRELOAD_DISABLE);
 8008450:	4b23      	ldr	r3, [pc, #140]	; (80084e0 <PWM_Init+0x140>)
 8008452:	6919      	ldr	r1, [r3, #16]
 8008454:	4b22      	ldr	r3, [pc, #136]	; (80084e0 <PWM_Init+0x140>)
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	1e5a      	subs	r2, r3, #1
 800845a:	4823      	ldr	r0, [pc, #140]	; (80084e8 <PWM_Init+0x148>)
 800845c:	2300      	movs	r3, #0
 800845e:	f002 fd87 	bl	800af70 <STM32_TIM_Base_Init>
    //
    // Initialize Timer Channel
    //
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008462:	210c      	movs	r1, #12
 8008464:	19bb      	adds	r3, r7, r6
 8008466:	185b      	adds	r3, r3, r1
 8008468:	2260      	movs	r2, #96	; 0x60
 800846a:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = PWM_HandleStruct.Pulse;
 800846c:	4b1c      	ldr	r3, [pc, #112]	; (80084e0 <PWM_Init+0x140>)
 800846e:	699a      	ldr	r2, [r3, #24]
 8008470:	0030      	movs	r0, r6
 8008472:	183b      	adds	r3, r7, r0
 8008474:	185b      	adds	r3, r3, r1
 8008476:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008478:	183b      	adds	r3, r7, r0
 800847a:	185b      	adds	r3, r3, r1
 800847c:	2200      	movs	r2, #0
 800847e:	609a      	str	r2, [r3, #8]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008480:	183b      	adds	r3, r7, r0
 8008482:	185b      	adds	r3, r3, r1
 8008484:	2200      	movs	r2, #0
 8008486:	60da      	str	r2, [r3, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008488:	183b      	adds	r3, r7, r0
 800848a:	185b      	adds	r3, r3, r1
 800848c:	2200      	movs	r2, #0
 800848e:	611a      	str	r2, [r3, #16]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008490:	183b      	adds	r3, r7, r0
 8008492:	185b      	adds	r3, r3, r1
 8008494:	2200      	movs	r2, #0
 8008496:	615a      	str	r2, [r3, #20]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008498:	183b      	adds	r3, r7, r0
 800849a:	185b      	adds	r3, r3, r1
 800849c:	2200      	movs	r2, #0
 800849e:	619a      	str	r2, [r3, #24]
    STM32_TIM_PWM_ConfigChannel(TIM14, &sConfigOC, PWM_HandleStruct.TIM_Channel);
 80084a0:	4b0f      	ldr	r3, [pc, #60]	; (80084e0 <PWM_Init+0x140>)
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	183b      	adds	r3, r7, r0
 80084a6:	185b      	adds	r3, r3, r1
 80084a8:	480f      	ldr	r0, [pc, #60]	; (80084e8 <PWM_Init+0x148>)
 80084aa:	0019      	movs	r1, r3
 80084ac:	f002 fec2 	bl	800b234 <STM32_TIM_PWM_ConfigChannel>

    STM32_GPIO_Init(PWM_OUTPUT_GPIO_Port, PWM_OUTPUT_Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF4_TIM14, 0);
 80084b0:	2390      	movs	r3, #144	; 0x90
 80084b2:	05d8      	lsls	r0, r3, #23
 80084b4:	2300      	movs	r3, #0
 80084b6:	9302      	str	r3, [sp, #8]
 80084b8:	2304      	movs	r3, #4
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	2300      	movs	r3, #0
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	2300      	movs	r3, #0
 80084c2:	2202      	movs	r2, #2
 80084c4:	2110      	movs	r1, #16
 80084c6:	f7fd fa67 	bl	8005998 <STM32_GPIO_Init>

    STM32_TIM_PWM_Start(TIM14, PWM_HandleStruct.TIM_Channel);
 80084ca:	4b05      	ldr	r3, [pc, #20]	; (80084e0 <PWM_Init+0x140>)
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	4a06      	ldr	r2, [pc, #24]	; (80084e8 <PWM_Init+0x148>)
 80084d0:	0019      	movs	r1, r3
 80084d2:	0010      	movs	r0, r2
 80084d4:	f002 ff6e 	bl	800b3b4 <STM32_TIM_PWM_Start>
}
 80084d8:	46c0      	nop			; (mov r8, r8)
 80084da:	46bd      	mov	sp, r7
 80084dc:	b00f      	add	sp, #60	; 0x3c
 80084de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084e0:	20001c34 	.word	0x20001c34
 80084e4:	20002f40 	.word	0x20002f40
 80084e8:	40002000 	.word	0x40002000
 80084ec:	1e1a3000 	.word	0x1e1a3000
 80084f0:	0000fde8 	.word	0x0000fde8
 80084f4:	000186a0 	.word	0x000186a0

080084f8 <PWM_SetDutyCycle>:
//
// Returns:   None
//
// Requirement(s):
//
void PWM_SetDutyCycle(int32_t NewDutyCycle) {
 80084f8:	b590      	push	{r4, r7, lr}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af04      	add	r7, sp, #16
 80084fe:	6078      	str	r0, [r7, #4]

    if ((bFactoryConfigurationValid != 0) && (FactoryConfiguration->RVOutputPresent != 0)) {
 8008500:	4b2a      	ldr	r3, [pc, #168]	; (80085ac <PWM_SetDutyCycle+0xb4>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d04c      	beq.n	80085a2 <PWM_SetDutyCycle+0xaa>
 8008508:	4b29      	ldr	r3, [pc, #164]	; (80085b0 <PWM_SetDutyCycle+0xb8>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	7f1b      	ldrb	r3, [r3, #28]
 800850e:	2220      	movs	r2, #32
 8008510:	4013      	ands	r3, r2
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d044      	beq.n	80085a2 <PWM_SetDutyCycle+0xaa>
        PWM_HandleStruct.PWM_InitStruct.DutyCycle = NewDutyCycle;
 8008518:	4b26      	ldr	r3, [pc, #152]	; (80085b4 <PWM_SetDutyCycle+0xbc>)
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	605a      	str	r2, [r3, #4]
        PWM_HandleStruct.Pulse = MultDivideWithRounding64(PWM_HandleStruct.Period, PWM_HandleStruct.PWM_InitStruct.DutyCycle, PWM_MAX_DUTY_CYCLE, RESULT_32);
 800851e:	4b25      	ldr	r3, [pc, #148]	; (80085b4 <PWM_SetDutyCycle+0xbc>)
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	0018      	movs	r0, r3
 8008524:	4b23      	ldr	r3, [pc, #140]	; (80085b4 <PWM_SetDutyCycle+0xbc>)
 8008526:	6859      	ldr	r1, [r3, #4]
 8008528:	4a23      	ldr	r2, [pc, #140]	; (80085b8 <PWM_SetDutyCycle+0xc0>)
 800852a:	2302      	movs	r3, #2
 800852c:	f7ff fd26 	bl	8007f7c <MultDivideWithRounding64>
 8008530:	0003      	movs	r3, r0
 8008532:	000c      	movs	r4, r1
 8008534:	001a      	movs	r2, r3
 8008536:	4b1f      	ldr	r3, [pc, #124]	; (80085b4 <PWM_SetDutyCycle+0xbc>)
 8008538:	619a      	str	r2, [r3, #24]
        PWM_HandleStruct.Handle->Instance->CCR1 = PWM_HandleStruct.Pulse;
 800853a:	4b1e      	ldr	r3, [pc, #120]	; (80085b4 <PWM_SetDutyCycle+0xbc>)
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a1c      	ldr	r2, [pc, #112]	; (80085b4 <PWM_SetDutyCycle+0xbc>)
 8008542:	6992      	ldr	r2, [r2, #24]
 8008544:	635a      	str	r2, [r3, #52]	; 0x34
        //
        // On rising edge of DutyCycle == 0, then configure GPIO as an Low Output
        //
        if ((PWM_HandleStruct.Pulse == 0) && (PWM_HandleStruct.OldPulse != 0)) {
 8008546:	4b1b      	ldr	r3, [pc, #108]	; (80085b4 <PWM_SetDutyCycle+0xbc>)
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d110      	bne.n	8008570 <PWM_SetDutyCycle+0x78>
 800854e:	4b19      	ldr	r3, [pc, #100]	; (80085b4 <PWM_SetDutyCycle+0xbc>)
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00c      	beq.n	8008570 <PWM_SetDutyCycle+0x78>
            STM32_GPIO_Init(PWM_OUTPUT_GPIO_Port, PWM_OUTPUT_Pin, GPIO_MODE_INPUT, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, 0, 0);
 8008556:	2390      	movs	r3, #144	; 0x90
 8008558:	05d8      	lsls	r0, r3, #23
 800855a:	2300      	movs	r3, #0
 800855c:	9302      	str	r3, [sp, #8]
 800855e:	2300      	movs	r3, #0
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	2300      	movs	r3, #0
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	2300      	movs	r3, #0
 8008568:	2200      	movs	r2, #0
 800856a:	2110      	movs	r1, #16
 800856c:	f7fd fa14 	bl	8005998 <STM32_GPIO_Init>
        }
        //
        // On falling edge of DutyCycle == 0, then configure GPIO as a Timer Output
        //
        if ((PWM_HandleStruct.Pulse != 0) && (PWM_HandleStruct.OldPulse == 0)) {
 8008570:	4b10      	ldr	r3, [pc, #64]	; (80085b4 <PWM_SetDutyCycle+0xbc>)
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d010      	beq.n	800859a <PWM_SetDutyCycle+0xa2>
 8008578:	4b0e      	ldr	r3, [pc, #56]	; (80085b4 <PWM_SetDutyCycle+0xbc>)
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10c      	bne.n	800859a <PWM_SetDutyCycle+0xa2>
            STM32_GPIO_Init(PWM_OUTPUT_GPIO_Port, PWM_OUTPUT_Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF4_TIM14, 0);
 8008580:	2390      	movs	r3, #144	; 0x90
 8008582:	05d8      	lsls	r0, r3, #23
 8008584:	2300      	movs	r3, #0
 8008586:	9302      	str	r3, [sp, #8]
 8008588:	2304      	movs	r3, #4
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	2300      	movs	r3, #0
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	2300      	movs	r3, #0
 8008592:	2202      	movs	r2, #2
 8008594:	2110      	movs	r1, #16
 8008596:	f7fd f9ff 	bl	8005998 <STM32_GPIO_Init>
        }

        PWM_HandleStruct.OldPulse = PWM_HandleStruct.Pulse;
 800859a:	4b06      	ldr	r3, [pc, #24]	; (80085b4 <PWM_SetDutyCycle+0xbc>)
 800859c:	699a      	ldr	r2, [r3, #24]
 800859e:	4b05      	ldr	r3, [pc, #20]	; (80085b4 <PWM_SetDutyCycle+0xbc>)
 80085a0:	61da      	str	r2, [r3, #28]
    }
}
 80085a2:	46c0      	nop			; (mov r8, r8)
 80085a4:	46bd      	mov	sp, r7
 80085a6:	b003      	add	sp, #12
 80085a8:	bd90      	pop	{r4, r7, pc}
 80085aa:	46c0      	nop			; (mov r8, r8)
 80085ac:	20002f9e 	.word	0x20002f9e
 80085b0:	20001eec 	.word	0x20001eec
 80085b4:	20001c34 	.word	0x20001c34
 80085b8:	000186a0 	.word	0x000186a0

080085bc <InitializePWM>:
//
// Returns:   None
//
// Requirement(s):
//
void InitializePWM(void) {
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0

    PWM_InitTypeDef PWM_InitStruct;

    if ((bFactoryConfigurationValid != 0) && (FactoryConfiguration->RVOutputPresent != 0)) {
 80085c2:	4b10      	ldr	r3, [pc, #64]	; (8008604 <InitializePWM+0x48>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d018      	beq.n	80085fc <InitializePWM+0x40>
 80085ca:	4b0f      	ldr	r3, [pc, #60]	; (8008608 <InitializePWM+0x4c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	7f1b      	ldrb	r3, [r3, #28]
 80085d0:	2220      	movs	r2, #32
 80085d2:	4013      	ands	r3, r2
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d010      	beq.n	80085fc <InitializePWM+0x40>
        SysVars.PwmDutyCycle = 1;                               // xxx.xxx %
 80085da:	4b0c      	ldr	r3, [pc, #48]	; (800860c <InitializePWM+0x50>)
 80085dc:	22b8      	movs	r2, #184	; 0xb8
 80085de:	2101      	movs	r1, #1
 80085e0:	5099      	str	r1, [r3, r2]
        PWM_InitStruct.Frequency = (uint32_t)(4800000000uLL / PWM_COUNTS);     // 40000 = 1200.00Hz
 80085e2:	003b      	movs	r3, r7
 80085e4:	4a0a      	ldr	r2, [pc, #40]	; (8008610 <InitializePWM+0x54>)
 80085e6:	601a      	str	r2, [r3, #0]
        PWM_InitStruct.DutyCycle = SysVars.PwmDutyCycle;        // xxx.xxx %
 80085e8:	4b08      	ldr	r3, [pc, #32]	; (800860c <InitializePWM+0x50>)
 80085ea:	22b8      	movs	r2, #184	; 0xb8
 80085ec:	589a      	ldr	r2, [r3, r2]
 80085ee:	003b      	movs	r3, r7
 80085f0:	605a      	str	r2, [r3, #4]
        PWM_Init(PWM_InitStruct);
 80085f2:	003b      	movs	r3, r7
 80085f4:	6818      	ldr	r0, [r3, #0]
 80085f6:	6859      	ldr	r1, [r3, #4]
 80085f8:	f7ff fed2 	bl	80083a0 <PWM_Init>
    }
}
 80085fc:	46c0      	nop			; (mov r8, r8)
 80085fe:	46bd      	mov	sp, r7
 8008600:	b002      	add	sp, #8
 8008602:	bd80      	pop	{r7, pc}
 8008604:	20002f9e 	.word	0x20002f9e
 8008608:	20001eec 	.word	0x20001eec
 800860c:	200020c0 	.word	0x200020c0
 8008610:	0001d4c0 	.word	0x0001d4c0

08008614 <ProcessPwmOutput>:
//
// Returns:   None
//
// Requirement(s):
//
void ProcessPwmOutput(void) {
 8008614:	b580      	push	{r7, lr}
 8008616:	af00      	add	r7, sp, #0

    ExecutionStart(EXECUTION_PROCESS_PWM_OUT);
 8008618:	2015      	movs	r0, #21
 800861a:	f7fb fff7 	bl	800460c <ExecutionStart>

    if ((bFactoryConfigurationValid != 0) && (FactoryConfiguration->RVOutputPresent != 0)) {
 800861e:	4b15      	ldr	r3, [pc, #84]	; (8008674 <ProcessPwmOutput+0x60>)
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d020      	beq.n	8008668 <ProcessPwmOutput+0x54>
 8008626:	4b14      	ldr	r3, [pc, #80]	; (8008678 <ProcessPwmOutput+0x64>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	7f1b      	ldrb	r3, [r3, #28]
 800862c:	2220      	movs	r2, #32
 800862e:	4013      	ands	r3, r2
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d018      	beq.n	8008668 <ProcessPwmOutput+0x54>
        if (SysVars.PwmDutyCycle < 0) {
 8008636:	4b11      	ldr	r3, [pc, #68]	; (800867c <ProcessPwmOutput+0x68>)
 8008638:	22b8      	movs	r2, #184	; 0xb8
 800863a:	589b      	ldr	r3, [r3, r2]
 800863c:	2b00      	cmp	r3, #0
 800863e:	da03      	bge.n	8008648 <ProcessPwmOutput+0x34>
            SysVars.PwmDutyCycle = 0;
 8008640:	4b0e      	ldr	r3, [pc, #56]	; (800867c <ProcessPwmOutput+0x68>)
 8008642:	22b8      	movs	r2, #184	; 0xb8
 8008644:	2100      	movs	r1, #0
 8008646:	5099      	str	r1, [r3, r2]
        }
        if (SysVars.PwmDutyCycle > PWM_MAX_DUTY_CYCLE) {
 8008648:	4b0c      	ldr	r3, [pc, #48]	; (800867c <ProcessPwmOutput+0x68>)
 800864a:	22b8      	movs	r2, #184	; 0xb8
 800864c:	589b      	ldr	r3, [r3, r2]
 800864e:	4a0c      	ldr	r2, [pc, #48]	; (8008680 <ProcessPwmOutput+0x6c>)
 8008650:	4293      	cmp	r3, r2
 8008652:	dd03      	ble.n	800865c <ProcessPwmOutput+0x48>
            SysVars.PwmDutyCycle = PWM_MAX_DUTY_CYCLE;
 8008654:	4b09      	ldr	r3, [pc, #36]	; (800867c <ProcessPwmOutput+0x68>)
 8008656:	22b8      	movs	r2, #184	; 0xb8
 8008658:	4909      	ldr	r1, [pc, #36]	; (8008680 <ProcessPwmOutput+0x6c>)
 800865a:	5099      	str	r1, [r3, r2]
        }
        PWM_SetDutyCycle(SysVars.PwmDutyCycle);
 800865c:	4b07      	ldr	r3, [pc, #28]	; (800867c <ProcessPwmOutput+0x68>)
 800865e:	22b8      	movs	r2, #184	; 0xb8
 8008660:	589b      	ldr	r3, [r3, r2]
 8008662:	0018      	movs	r0, r3
 8008664:	f7ff ff48 	bl	80084f8 <PWM_SetDutyCycle>
    }
    ExecutionEnd(EXECUTION_PROCESS_PWM_OUT);
 8008668:	2015      	movs	r0, #21
 800866a:	f7fb ffe9 	bl	8004640 <ExecutionEnd>
}
 800866e:	46c0      	nop			; (mov r8, r8)
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	20002f9e 	.word	0x20002f9e
 8008678:	20001eec 	.word	0x20001eec
 800867c:	200020c0 	.word	0x200020c0
 8008680:	000186a0 	.word	0x000186a0

08008684 <WaitForLastOperation>:
//
// Returns:   None
//
// Requirement(s):
//
static void WaitForLastOperation(void) {
 8008684:	b580      	push	{r7, lr}
 8008686:	af00      	add	r7, sp, #0

    do {
    } while ((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY);
 8008688:	4b08      	ldr	r3, [pc, #32]	; (80086ac <WaitForLastOperation+0x28>)
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	4013      	ands	r3, r2
 8008690:	2b01      	cmp	r3, #1
 8008692:	d0f9      	beq.n	8008688 <WaitForLastOperation+0x4>
    if ((FLASH->SR & FLASH_FLAG_EOP) == FLASH_FLAG_EOP) {
 8008694:	4b05      	ldr	r3, [pc, #20]	; (80086ac <WaitForLastOperation+0x28>)
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	2220      	movs	r2, #32
 800869a:	4013      	ands	r3, r2
 800869c:	2b20      	cmp	r3, #32
 800869e:	d102      	bne.n	80086a6 <WaitForLastOperation+0x22>
        FLASH->SR = FLASH_FLAG_EOP;
 80086a0:	4b02      	ldr	r3, [pc, #8]	; (80086ac <WaitForLastOperation+0x28>)
 80086a2:	2220      	movs	r2, #32
 80086a4:	60da      	str	r2, [r3, #12]
    }
}
 80086a6:	46c0      	nop			; (mov r8, r8)
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	40022000 	.word	0x40022000

080086b0 <Flash_Program>:
//
// Returns:   None
//
// Requirement(s):
//
static void Flash_Program(uint32_t Address, uint16_t *WordPtr) {
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]

  uint32_t Index;

  WaitForLastOperation();
 80086ba:	f7ff ffe3 	bl	8008684 <WaitForLastOperation>
  FLASH->CR |= FLASH_CR_PER;
 80086be:	4b1f      	ldr	r3, [pc, #124]	; (800873c <Flash_Program+0x8c>)
 80086c0:	691a      	ldr	r2, [r3, #16]
 80086c2:	4b1e      	ldr	r3, [pc, #120]	; (800873c <Flash_Program+0x8c>)
 80086c4:	2102      	movs	r1, #2
 80086c6:	430a      	orrs	r2, r1
 80086c8:	611a      	str	r2, [r3, #16]
  FLASH->AR = Address;
 80086ca:	4b1c      	ldr	r3, [pc, #112]	; (800873c <Flash_Program+0x8c>)
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	615a      	str	r2, [r3, #20]
  FLASH->CR |= FLASH_CR_STRT;
 80086d0:	4b1a      	ldr	r3, [pc, #104]	; (800873c <Flash_Program+0x8c>)
 80086d2:	691a      	ldr	r2, [r3, #16]
 80086d4:	4b19      	ldr	r3, [pc, #100]	; (800873c <Flash_Program+0x8c>)
 80086d6:	2140      	movs	r1, #64	; 0x40
 80086d8:	430a      	orrs	r2, r1
 80086da:	611a      	str	r2, [r3, #16]
  WaitForLastOperation();
 80086dc:	f7ff ffd2 	bl	8008684 <WaitForLastOperation>
  FLASH->CR &= ~FLASH_CR_PER;
 80086e0:	4b16      	ldr	r3, [pc, #88]	; (800873c <Flash_Program+0x8c>)
 80086e2:	691a      	ldr	r2, [r3, #16]
 80086e4:	4b15      	ldr	r3, [pc, #84]	; (800873c <Flash_Program+0x8c>)
 80086e6:	2102      	movs	r1, #2
 80086e8:	438a      	bics	r2, r1
 80086ea:	611a      	str	r2, [r3, #16]
  WaitForLastOperation();
 80086ec:	f7ff ffca 	bl	8008684 <WaitForLastOperation>
  for (Index = 0; Index < (2048 / 2); Index++) {
 80086f0:	2300      	movs	r3, #0
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	e01a      	b.n	800872c <Flash_Program+0x7c>
      FLASH->CR |= FLASH_CR_PG;
 80086f6:	4b11      	ldr	r3, [pc, #68]	; (800873c <Flash_Program+0x8c>)
 80086f8:	691a      	ldr	r2, [r3, #16]
 80086fa:	4b10      	ldr	r3, [pc, #64]	; (800873c <Flash_Program+0x8c>)
 80086fc:	2101      	movs	r1, #1
 80086fe:	430a      	orrs	r2, r1
 8008700:	611a      	str	r2, [r3, #16]
      *(volatile uint16_t *)Address = WordPtr[Index];
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	18d2      	adds	r2, r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	8812      	ldrh	r2, [r2, #0]
 800870e:	801a      	strh	r2, [r3, #0]
      Address += 2;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3302      	adds	r3, #2
 8008714:	607b      	str	r3, [r7, #4]
      WaitForLastOperation();
 8008716:	f7ff ffb5 	bl	8008684 <WaitForLastOperation>
      FLASH->CR &= ~FLASH_CR_PG;
 800871a:	4b08      	ldr	r3, [pc, #32]	; (800873c <Flash_Program+0x8c>)
 800871c:	691a      	ldr	r2, [r3, #16]
 800871e:	4b07      	ldr	r3, [pc, #28]	; (800873c <Flash_Program+0x8c>)
 8008720:	2101      	movs	r1, #1
 8008722:	438a      	bics	r2, r1
 8008724:	611a      	str	r2, [r3, #16]
  for (Index = 0; Index < (2048 / 2); Index++) {
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	3301      	adds	r3, #1
 800872a:	60fb      	str	r3, [r7, #12]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4a04      	ldr	r2, [pc, #16]	; (8008740 <Flash_Program+0x90>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d9e0      	bls.n	80086f6 <Flash_Program+0x46>
  }
}
 8008734:	46c0      	nop			; (mov r8, r8)
 8008736:	46bd      	mov	sp, r7
 8008738:	b004      	add	sp, #16
 800873a:	bd80      	pop	{r7, pc}
 800873c:	40022000 	.word	0x40022000
 8008740:	000003ff 	.word	0x000003ff

08008744 <ReflashTuningParameters>:
//
// Returns:   None
//
// Requirement(s):
//
void ReflashTuningParameters(uint32_t PageNumber, uint16_t *DataPtr) {
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]

  uint32_t PageAddress;
  volatile uint32_t TmpReg;

  DisableInterrupts();
 800874e:	f7fd fb0b 	bl	8005d68 <DisableInterrupts>
  //
  // Disable Watchdog Windowing
  //
  IWDG->KR = IWDG_KEY_ENABLE;
 8008752:	4b33      	ldr	r3, [pc, #204]	; (8008820 <ReflashTuningParameters+0xdc>)
 8008754:	4a33      	ldr	r2, [pc, #204]	; (8008824 <ReflashTuningParameters+0xe0>)
 8008756:	601a      	str	r2, [r3, #0]
  IWDG->KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 8008758:	4b31      	ldr	r3, [pc, #196]	; (8008820 <ReflashTuningParameters+0xdc>)
 800875a:	4a33      	ldr	r2, [pc, #204]	; (8008828 <ReflashTuningParameters+0xe4>)
 800875c:	601a      	str	r2, [r3, #0]
  IWDG->PR = IWDG_PRESCALER_256;
 800875e:	4b30      	ldr	r3, [pc, #192]	; (8008820 <ReflashTuningParameters+0xdc>)
 8008760:	2206      	movs	r2, #6
 8008762:	605a      	str	r2, [r3, #4]
  IWDG->RLR = (1250 * 10) / 64;
 8008764:	4b2e      	ldr	r3, [pc, #184]	; (8008820 <ReflashTuningParameters+0xdc>)
 8008766:	22c3      	movs	r2, #195	; 0xc3
 8008768:	609a      	str	r2, [r3, #8]
  while (IWDG->SR != RESET) {}
 800876a:	46c0      	nop			; (mov r8, r8)
 800876c:	4b2c      	ldr	r3, [pc, #176]	; (8008820 <ReflashTuningParameters+0xdc>)
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1fb      	bne.n	800876c <ReflashTuningParameters+0x28>
  IWDG->WINR = 0xFFF;           // Disable Windowing
 8008774:	4b2a      	ldr	r3, [pc, #168]	; (8008820 <ReflashTuningParameters+0xdc>)
 8008776:	4a2d      	ldr	r2, [pc, #180]	; (800882c <ReflashTuningParameters+0xe8>)
 8008778:	611a      	str	r2, [r3, #16]

  IWDG->KR = IWDG_KEY_RELOAD;  // Reset Watchdog
 800877a:	4b29      	ldr	r3, [pc, #164]	; (8008820 <ReflashTuningParameters+0xdc>)
 800877c:	4a2c      	ldr	r2, [pc, #176]	; (8008830 <ReflashTuningParameters+0xec>)
 800877e:	601a      	str	r2, [r3, #0]

  RCC->AHBENR |= RCC_AHBENR_CRCEN;
 8008780:	4b2c      	ldr	r3, [pc, #176]	; (8008834 <ReflashTuningParameters+0xf0>)
 8008782:	695a      	ldr	r2, [r3, #20]
 8008784:	4b2b      	ldr	r3, [pc, #172]	; (8008834 <ReflashTuningParameters+0xf0>)
 8008786:	2140      	movs	r1, #64	; 0x40
 8008788:	430a      	orrs	r2, r1
 800878a:	615a      	str	r2, [r3, #20]
  TmpReg = RCC->AHBENR & RCC_AHBENR_CRCEN;
 800878c:	4b29      	ldr	r3, [pc, #164]	; (8008834 <ReflashTuningParameters+0xf0>)
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	2240      	movs	r2, #64	; 0x40
 8008792:	4013      	ands	r3, r2
 8008794:	60bb      	str	r3, [r7, #8]
  UNUSED(TmpReg);
 8008796:	68bb      	ldr	r3, [r7, #8]
  if ((FLASH->CR & FLASH_CR_LOCK) != RESET) {
 8008798:	4b27      	ldr	r3, [pc, #156]	; (8008838 <ReflashTuningParameters+0xf4>)
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	2280      	movs	r2, #128	; 0x80
 800879e:	4013      	ands	r3, r2
 80087a0:	d005      	beq.n	80087ae <ReflashTuningParameters+0x6a>
      FLASH->KEYR = FLASH_KEY1;
 80087a2:	4b25      	ldr	r3, [pc, #148]	; (8008838 <ReflashTuningParameters+0xf4>)
 80087a4:	4a25      	ldr	r2, [pc, #148]	; (800883c <ReflashTuningParameters+0xf8>)
 80087a6:	605a      	str	r2, [r3, #4]
      FLASH->KEYR = FLASH_KEY2;
 80087a8:	4b23      	ldr	r3, [pc, #140]	; (8008838 <ReflashTuningParameters+0xf4>)
 80087aa:	4a25      	ldr	r2, [pc, #148]	; (8008840 <ReflashTuningParameters+0xfc>)
 80087ac:	605a      	str	r2, [r3, #4]
  }
  FLASH->SR = FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR;
 80087ae:	4b22      	ldr	r3, [pc, #136]	; (8008838 <ReflashTuningParameters+0xf4>)
 80087b0:	2214      	movs	r2, #20
 80087b2:	60da      	str	r2, [r3, #12]
  PageAddress = 0x08000000 + (PageNumber * FLASH_PAGE_SIZE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2280      	movs	r2, #128	; 0x80
 80087b8:	0252      	lsls	r2, r2, #9
 80087ba:	4694      	mov	ip, r2
 80087bc:	4463      	add	r3, ip
 80087be:	02db      	lsls	r3, r3, #11
 80087c0:	60fb      	str	r3, [r7, #12]
  WaitForLastOperation();
 80087c2:	f7ff ff5f 	bl	8008684 <WaitForLastOperation>
  FLASH->CR |= FLASH_CR_PER;
 80087c6:	4b1c      	ldr	r3, [pc, #112]	; (8008838 <ReflashTuningParameters+0xf4>)
 80087c8:	691a      	ldr	r2, [r3, #16]
 80087ca:	4b1b      	ldr	r3, [pc, #108]	; (8008838 <ReflashTuningParameters+0xf4>)
 80087cc:	2102      	movs	r1, #2
 80087ce:	430a      	orrs	r2, r1
 80087d0:	611a      	str	r2, [r3, #16]
  FLASH->AR = PageAddress;
 80087d2:	4b19      	ldr	r3, [pc, #100]	; (8008838 <ReflashTuningParameters+0xf4>)
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	615a      	str	r2, [r3, #20]
  FLASH->CR |= FLASH_CR_STRT;
 80087d8:	4b17      	ldr	r3, [pc, #92]	; (8008838 <ReflashTuningParameters+0xf4>)
 80087da:	691a      	ldr	r2, [r3, #16]
 80087dc:	4b16      	ldr	r3, [pc, #88]	; (8008838 <ReflashTuningParameters+0xf4>)
 80087de:	2140      	movs	r1, #64	; 0x40
 80087e0:	430a      	orrs	r2, r1
 80087e2:	611a      	str	r2, [r3, #16]
  WaitForLastOperation();
 80087e4:	f7ff ff4e 	bl	8008684 <WaitForLastOperation>
  FLASH->CR &= ~FLASH_CR_PER;
 80087e8:	4b13      	ldr	r3, [pc, #76]	; (8008838 <ReflashTuningParameters+0xf4>)
 80087ea:	691a      	ldr	r2, [r3, #16]
 80087ec:	4b12      	ldr	r3, [pc, #72]	; (8008838 <ReflashTuningParameters+0xf4>)
 80087ee:	2102      	movs	r1, #2
 80087f0:	438a      	bics	r2, r1
 80087f2:	611a      	str	r2, [r3, #16]
  Flash_Program(PageAddress, DataPtr);
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	0011      	movs	r1, r2
 80087fa:	0018      	movs	r0, r3
 80087fc:	f7ff ff58 	bl	80086b0 <Flash_Program>
  WaitForLastOperation();
 8008800:	f7ff ff40 	bl	8008684 <WaitForLastOperation>
  FLASH->CR |= FLASH_CR_LOCK;
 8008804:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <ReflashTuningParameters+0xf4>)
 8008806:	691a      	ldr	r2, [r3, #16]
 8008808:	4b0b      	ldr	r3, [pc, #44]	; (8008838 <ReflashTuningParameters+0xf4>)
 800880a:	2180      	movs	r1, #128	; 0x80
 800880c:	430a      	orrs	r2, r1
 800880e:	611a      	str	r2, [r3, #16]
  //
  // Restore Watchdog settings
  //
  InitializeWatchDog();
 8008810:	f003 fdbe 	bl	800c390 <InitializeWatchDog>

  EnableInterrupts();
 8008814:	f7fd faa2 	bl	8005d5c <EnableInterrupts>
}
 8008818:	46c0      	nop			; (mov r8, r8)
 800881a:	46bd      	mov	sp, r7
 800881c:	b004      	add	sp, #16
 800881e:	bd80      	pop	{r7, pc}
 8008820:	40003000 	.word	0x40003000
 8008824:	0000cccc 	.word	0x0000cccc
 8008828:	00005555 	.word	0x00005555
 800882c:	00000fff 	.word	0x00000fff
 8008830:	0000aaaa 	.word	0x0000aaaa
 8008834:	40021000 	.word	0x40021000
 8008838:	40022000 	.word	0x40022000
 800883c:	45670123 	.word	0x45670123
 8008840:	cdef89ab 	.word	0xcdef89ab

08008844 <ProcessSerialData>:
//
// Returns:   None
//
// Requirement(s):
//
void ProcessSerialData(stSerial *SerialStruct) {
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]

  uint8_t Data;

  ExecutionStart(EXECUTION_PROCESS_SERIAL_DATA);
 800884c:	200c      	movs	r0, #12
 800884e:	f7fb fedd 	bl	800460c <ExecutionStart>
  //
  // There should never be a 100mS gap between characters coming from Host.  If there is, then reset State Machine
  // back to looking for Sync Characters.
  //
  if (SerialStruct->RxGapTimeout > 100) {           // 100mS
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	2389      	movs	r3, #137	; 0x89
 8008856:	005b      	lsls	r3, r3, #1
 8008858:	5ad3      	ldrh	r3, [r2, r3]
 800885a:	2b64      	cmp	r3, #100	; 0x64
 800885c:	d902      	bls.n	8008864 <ProcessSerialData+0x20>
    SerialStruct->State = 0;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]
  }
  SerialStruct->RxGapTimeout = 0;
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	2389      	movs	r3, #137	; 0x89
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	2100      	movs	r1, #0
 800886c:	52d1      	strh	r1, [r2, r3]

  Data = SerialStruct->RxChar;
 800886e:	230f      	movs	r3, #15
 8008870:	18fb      	adds	r3, r7, r3
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	2287      	movs	r2, #135	; 0x87
 8008876:	0052      	lsls	r2, r2, #1
 8008878:	5c8a      	ldrb	r2, [r1, r2]
 800887a:	701a      	strb	r2, [r3, #0]

  switch (SerialStruct->State) {
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2b3c      	cmp	r3, #60	; 0x3c
 8008882:	d900      	bls.n	8008886 <ProcessSerialData+0x42>
 8008884:	e130      	b.n	8008ae8 <ProcessSerialData+0x2a4>
 8008886:	009a      	lsls	r2, r3, #2
 8008888:	4b9e      	ldr	r3, [pc, #632]	; (8008b04 <ProcessSerialData+0x2c0>)
 800888a:	18d3      	adds	r3, r2, r3
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	469f      	mov	pc, r3
  case 0:
    if (Data == 0xAA) {
 8008890:	230f      	movs	r3, #15
 8008892:	18fb      	adds	r3, r7, r3
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2baa      	cmp	r3, #170	; 0xaa
 8008898:	d106      	bne.n	80088a8 <ProcessSerialData+0x64>
      SerialStruct->SyncCount++;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	785b      	ldrb	r3, [r3, #1]
 800889e:	3301      	adds	r3, #1
 80088a0:	b2da      	uxtb	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	705a      	strb	r2, [r3, #1]
      if ((Data == 0x00) && (SerialStruct->SyncCount >= 3)) {
        SerialStruct->State += 10;                      // Must have received at least 3 of the 5 0xAA's
      }
      SerialStruct->SyncCount = 0;
    }
    break;
 80088a6:	e125      	b.n	8008af4 <ProcessSerialData+0x2b0>
      if ((Data == 0x00) && (SerialStruct->SyncCount >= 3)) {
 80088a8:	230f      	movs	r3, #15
 80088aa:	18fb      	adds	r3, r7, r3
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d109      	bne.n	80088c6 <ProcessSerialData+0x82>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	785b      	ldrb	r3, [r3, #1]
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d905      	bls.n	80088c6 <ProcessSerialData+0x82>
        SerialStruct->State += 10;                      // Must have received at least 3 of the 5 0xAA's
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	330a      	adds	r3, #10
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	701a      	strb	r2, [r3, #0]
      SerialStruct->SyncCount = 0;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	705a      	strb	r2, [r3, #1]
    break;
 80088cc:	e112      	b.n	8008af4 <ProcessSerialData+0x2b0>
  case 10:
    SerialStruct->Command = Data;
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	200f      	movs	r0, #15
 80088d2:	1839      	adds	r1, r7, r0
 80088d4:	238a      	movs	r3, #138	; 0x8a
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	7809      	ldrb	r1, [r1, #0]
 80088da:	54d1      	strb	r1, [r2, r3]
    SerialStruct->Crc16 = CalcCrc16(Data, 0);
 80088dc:	183b      	adds	r3, r7, r0
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	2100      	movs	r1, #0
 80088e2:	0018      	movs	r0, r3
 80088e4:	f7fa f8ee 	bl	8002ac4 <CalcCrc16>
 80088e8:	0003      	movs	r3, r0
 80088ea:	001a      	movs	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	809a      	strh	r2, [r3, #4]
    SerialStruct->State += 10;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	330a      	adds	r3, #10
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	701a      	strb	r2, [r3, #0]
    break;
 80088fc:	e0fa      	b.n	8008af4 <ProcessSerialData+0x2b0>
  case 20:
    SerialStruct->CmdLen = Data;                              // LSB
 80088fe:	210f      	movs	r1, #15
 8008900:	187b      	adds	r3, r7, r1
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	b29a      	uxth	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	805a      	strh	r2, [r3, #2]
    SerialStruct->Crc16 = CalcCrc16(Data, SerialStruct->Crc16);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	889a      	ldrh	r2, [r3, #4]
 800890e:	187b      	adds	r3, r7, r1
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	0011      	movs	r1, r2
 8008914:	0018      	movs	r0, r3
 8008916:	f7fa f8d5 	bl	8002ac4 <CalcCrc16>
 800891a:	0003      	movs	r3, r0
 800891c:	001a      	movs	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	809a      	strh	r2, [r3, #4]
    SerialStruct->State += 10;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	330a      	adds	r3, #10
 8008928:	b2da      	uxtb	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	701a      	strb	r2, [r3, #0]
    break;
 800892e:	e0e1      	b.n	8008af4 <ProcessSerialData+0x2b0>
  case 30:
    SerialStruct->CmdLen += (uint16_t)Data << 8;              // MSB
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	885a      	ldrh	r2, [r3, #2]
 8008934:	200f      	movs	r0, #15
 8008936:	183b      	adds	r3, r7, r0
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	b29b      	uxth	r3, r3
 800893c:	021b      	lsls	r3, r3, #8
 800893e:	b29b      	uxth	r3, r3
 8008940:	18d3      	adds	r3, r2, r3
 8008942:	b29a      	uxth	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	805a      	strh	r2, [r3, #2]
    SerialStruct->Length = SerialStruct->CmdLen;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	8859      	ldrh	r1, [r3, #2]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	238b      	movs	r3, #139	; 0x8b
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	52d1      	strh	r1, [r2, r3]
    SerialStruct->Crc16 = CalcCrc16(Data, SerialStruct->Crc16);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	889a      	ldrh	r2, [r3, #4]
 8008958:	183b      	adds	r3, r7, r0
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	0011      	movs	r1, r2
 800895e:	0018      	movs	r0, r3
 8008960:	f7fa f8b0 	bl	8002ac4 <CalcCrc16>
 8008964:	0003      	movs	r3, r0
 8008966:	001a      	movs	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	809a      	strh	r2, [r3, #4]
    SerialStruct->State += 10;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	330a      	adds	r3, #10
 8008972:	b2da      	uxtb	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	701a      	strb	r2, [r3, #0]
    if (SerialStruct->CmdLen == 0) {
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	885b      	ldrh	r3, [r3, #2]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d105      	bne.n	800898c <ProcessSerialData+0x148>
      SerialStruct->State += 10;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	330a      	adds	r3, #10
 8008986:	b2da      	uxtb	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	701a      	strb	r2, [r3, #0]
    }
    if ((SerialStruct->Command == 0x11) || (SerialStruct->Command == 0x12) || (SerialStruct->Command == 0x13)) {
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	238a      	movs	r3, #138	; 0x8a
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	5cd3      	ldrb	r3, [r2, r3]
 8008994:	2b11      	cmp	r3, #17
 8008996:	d00b      	beq.n	80089b0 <ProcessSerialData+0x16c>
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	238a      	movs	r3, #138	; 0x8a
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	5cd3      	ldrb	r3, [r2, r3]
 80089a0:	2b12      	cmp	r3, #18
 80089a2:	d005      	beq.n	80089b0 <ProcessSerialData+0x16c>
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	238a      	movs	r3, #138	; 0x8a
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	5cd3      	ldrb	r3, [r2, r3]
 80089ac:	2b13      	cmp	r3, #19
 80089ae:	d108      	bne.n	80089c2 <ProcessSerialData+0x17e>
      if (SerialStruct->CmdLen > sizeof(SerialBuffer)) {
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	885b      	ldrh	r3, [r3, #2]
 80089b4:	4a54      	ldr	r2, [pc, #336]	; (8008b08 <ProcessSerialData+0x2c4>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d90b      	bls.n	80089d2 <ProcessSerialData+0x18e>
        SerialStruct->State = 0;          // Make sure Length is valid
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	701a      	strb	r2, [r3, #0]
      if (SerialStruct->CmdLen > sizeof(SerialBuffer)) {
 80089c0:	e007      	b.n	80089d2 <ProcessSerialData+0x18e>
      }
    } else {
      if (SerialStruct->CmdLen > sizeof(SerialStruct->Data)) {
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	885b      	ldrh	r3, [r3, #2]
 80089c6:	4a51      	ldr	r2, [pc, #324]	; (8008b0c <ProcessSerialData+0x2c8>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d902      	bls.n	80089d2 <ProcessSerialData+0x18e>
        SerialStruct->State = 0;          // Make sure Length is valid
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	701a      	strb	r2, [r3, #0]
      }
    }
    SerialStruct->Offset = 0;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	80da      	strh	r2, [r3, #6]
    break;
 80089d8:	e08c      	b.n	8008af4 <ProcessSerialData+0x2b0>
  case 40:
    if ((SerialStruct->Command == 0x11) || (SerialStruct->Command == 0x12) || (SerialStruct->Command == 0x13)) {
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	238a      	movs	r3, #138	; 0x8a
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	5cd3      	ldrb	r3, [r2, r3]
 80089e2:	2b11      	cmp	r3, #17
 80089e4:	d00b      	beq.n	80089fe <ProcessSerialData+0x1ba>
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	238a      	movs	r3, #138	; 0x8a
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	5cd3      	ldrb	r3, [r2, r3]
 80089ee:	2b12      	cmp	r3, #18
 80089f0:	d005      	beq.n	80089fe <ProcessSerialData+0x1ba>
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	238a      	movs	r3, #138	; 0x8a
 80089f6:	005b      	lsls	r3, r3, #1
 80089f8:	5cd3      	ldrb	r3, [r2, r3]
 80089fa:	2b13      	cmp	r3, #19
 80089fc:	d10c      	bne.n	8008a18 <ProcessSerialData+0x1d4>
            SerialBuffer.ByByte[SerialStruct->Offset++] = Data;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	88db      	ldrh	r3, [r3, #6]
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	b291      	uxth	r1, r2
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	80d1      	strh	r1, [r2, #6]
 8008a0a:	0019      	movs	r1, r3
 8008a0c:	4b40      	ldr	r3, [pc, #256]	; (8008b10 <ProcessSerialData+0x2cc>)
 8008a0e:	220f      	movs	r2, #15
 8008a10:	18ba      	adds	r2, r7, r2
 8008a12:	7812      	ldrb	r2, [r2, #0]
 8008a14:	545a      	strb	r2, [r3, r1]
 8008a16:	e022      	b.n	8008a5e <ProcessSerialData+0x21a>
    }
    else if (SerialStruct->Command == 0x72) {
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	238a      	movs	r3, #138	; 0x8a
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	5cd3      	ldrb	r3, [r2, r3]
 8008a20:	2b72      	cmp	r3, #114	; 0x72
 8008a22:	d10c      	bne.n	8008a3e <ProcessSerialData+0x1fa>
      SerialBuffer.ByByte[SerialStruct->Offset++] = Data;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	88db      	ldrh	r3, [r3, #6]
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	b291      	uxth	r1, r2
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	80d1      	strh	r1, [r2, #6]
 8008a30:	0019      	movs	r1, r3
 8008a32:	4b37      	ldr	r3, [pc, #220]	; (8008b10 <ProcessSerialData+0x2cc>)
 8008a34:	220f      	movs	r2, #15
 8008a36:	18ba      	adds	r2, r7, r2
 8008a38:	7812      	ldrb	r2, [r2, #0]
 8008a3a:	545a      	strb	r2, [r3, r1]
 8008a3c:	e00f      	b.n	8008a5e <ProcessSerialData+0x21a>
    }
    else {
      SerialStruct->Data[SerialStruct->Offset++] = Data;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	88db      	ldrh	r3, [r3, #6]
 8008a42:	1c5a      	adds	r2, r3, #1
 8008a44:	b291      	uxth	r1, r2
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	80d1      	strh	r1, [r2, #6]
 8008a4a:	0019      	movs	r1, r3
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	238c      	movs	r3, #140	; 0x8c
 8008a50:	005b      	lsls	r3, r3, #1
 8008a52:	1852      	adds	r2, r2, r1
 8008a54:	18d3      	adds	r3, r2, r3
 8008a56:	220f      	movs	r2, #15
 8008a58:	18ba      	adds	r2, r7, r2
 8008a5a:	7812      	ldrb	r2, [r2, #0]
 8008a5c:	701a      	strb	r2, [r3, #0]
    }

    SerialStruct->Crc16 = CalcCrc16(Data, SerialStruct->Crc16);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	889a      	ldrh	r2, [r3, #4]
 8008a62:	230f      	movs	r3, #15
 8008a64:	18fb      	adds	r3, r7, r3
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	0011      	movs	r1, r2
 8008a6a:	0018      	movs	r0, r3
 8008a6c:	f7fa f82a 	bl	8002ac4 <CalcCrc16>
 8008a70:	0003      	movs	r3, r0
 8008a72:	001a      	movs	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	809a      	strh	r2, [r3, #4]
    SerialStruct->CmdLen--;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	885b      	ldrh	r3, [r3, #2]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	805a      	strh	r2, [r3, #2]
    if (SerialStruct->CmdLen == 0) {
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	885b      	ldrh	r3, [r3, #2]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d132      	bne.n	8008af2 <ProcessSerialData+0x2ae>
      SerialStruct->State += 10;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	330a      	adds	r3, #10
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008a98:	e02b      	b.n	8008af2 <ProcessSerialData+0x2ae>
  case 50:
    SerialStruct->CmdCrc = Data;                          // LSB
 8008a9a:	230f      	movs	r3, #15
 8008a9c:	18fb      	adds	r3, r7, r3
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	811a      	strh	r2, [r3, #8]
    SerialStruct->State += 10;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	330a      	adds	r3, #10
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	701a      	strb	r2, [r3, #0]
    break;
 8008ab2:	e01f      	b.n	8008af4 <ProcessSerialData+0x2b0>
  case 60:
    SerialStruct->CmdCrc += (uint16_t)Data << 8;          // MSB
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	891a      	ldrh	r2, [r3, #8]
 8008ab8:	230f      	movs	r3, #15
 8008aba:	18fb      	adds	r3, r7, r3
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	021b      	lsls	r3, r3, #8
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	18d3      	adds	r3, r2, r3
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	811a      	strh	r2, [r3, #8]
    if (SerialStruct->CmdCrc == SerialStruct->Crc16) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	891a      	ldrh	r2, [r3, #8]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	889b      	ldrh	r3, [r3, #4]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d103      	bne.n	8008ae0 <ProcessSerialData+0x29c>
      ProcessSerialMessage(SerialStruct);             // Process Command if CRC's match
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	0018      	movs	r0, r3
 8008adc:	f000 ffe2 	bl	8009aa4 <ProcessSerialMessage>
    }
    SerialStruct->State = 0;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	701a      	strb	r2, [r3, #0]
    break;
 8008ae6:	e005      	b.n	8008af4 <ProcessSerialData+0x2b0>
  default:
    Error_Handler(FILE_SERIAL, __LINE__);
 8008ae8:	219f      	movs	r1, #159	; 0x9f
 8008aea:	201c      	movs	r0, #28
 8008aec:	f7fb fc72 	bl	80043d4 <Error_Handler>
    break;
 8008af0:	e000      	b.n	8008af4 <ProcessSerialData+0x2b0>
    break;
 8008af2:	46c0      	nop			; (mov r8, r8)
  }

  ExecutionEnd(EXECUTION_PROCESS_SERIAL_DATA);
 8008af4:	200c      	movs	r0, #12
 8008af6:	f7fb fda3 	bl	8004640 <ExecutionEnd>
}
 8008afa:	46c0      	nop			; (mov r8, r8)
 8008afc:	46bd      	mov	sp, r7
 8008afe:	b004      	add	sp, #16
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	46c0      	nop			; (mov r8, r8)
 8008b04:	0800cbfc 	.word	0x0800cbfc
 8008b08:	0000080c 	.word	0x0000080c
 8008b0c:	00000212 	.word	0x00000212
 8008b10:	20002fa8 	.word	0x20002fa8

08008b14 <ProcessRxSerial>:
//
// Returns:   None
//
// Requirement(s):
//
void ProcessRxSerial(stSerial *SerialStruct) {
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]

    ExecutionStart(EXECUTION_PROCESS_RX_SERIAL);
 8008b1c:	2011      	movs	r0, #17
 8008b1e:	f7fb fd75 	bl	800460c <ExecutionStart>

    if (SerialStruct->RxMessageTimeout < 4000) {        // Prevent Timer from continuing to count and then roll-over back to zero
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	2388      	movs	r3, #136	; 0x88
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	5ad3      	ldrh	r3, [r2, r3]
 8008b2a:	4a88      	ldr	r2, [pc, #544]	; (8008d4c <ProcessRxSerial+0x238>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d809      	bhi.n	8008b44 <ProcessRxSerial+0x30>
        SerialStruct->RxMessageTimeout++;
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	2388      	movs	r3, #136	; 0x88
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	5ad3      	ldrh	r3, [r2, r3]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	b299      	uxth	r1, r3
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	2388      	movs	r3, #136	; 0x88
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	52d1      	strh	r1, [r2, r3]
    }
    SerialStruct->RxGapTimeout++;
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	2389      	movs	r3, #137	; 0x89
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	5ad3      	ldrh	r3, [r2, r3]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	b299      	uxth	r1, r3
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	2389      	movs	r3, #137	; 0x89
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	52d1      	strh	r1, [r2, r3]
    //
    // If DIG_Mode is still in Powerup Mode, and USART2 hasn't received a command for 3 seconds, then switch to Normal Mode
    //
    if ((SerialStruct == &SerialUsart2) && (DIG_Mode == DIG_MODE_POWERUP) && (SerialStruct->RxMessageTimeout > 3000)) {
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	4b7d      	ldr	r3, [pc, #500]	; (8008d50 <ProcessRxSerial+0x23c>)
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d10e      	bne.n	8008b7e <ProcessRxSerial+0x6a>
 8008b60:	4b7c      	ldr	r3, [pc, #496]	; (8008d54 <ProcessRxSerial+0x240>)
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	b25b      	sxtb	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <ProcessRxSerial+0x6a>
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	2388      	movs	r3, #136	; 0x88
 8008b6e:	005b      	lsls	r3, r3, #1
 8008b70:	5ad3      	ldrh	r3, [r2, r3]
 8008b72:	4a79      	ldr	r2, [pc, #484]	; (8008d58 <ProcessRxSerial+0x244>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d902      	bls.n	8008b7e <ProcessRxSerial+0x6a>
        InitializeDigitalIO(DIG_MODE_NORMAL);
 8008b78:	2001      	movs	r0, #1
 8008b7a:	f7fb fa87 	bl	800408c <InitializeDigitalIO>
    }
    //
    //  RS485 Message output, but only if no RS485 commands have been received for 2 seconds and is Message mode 1.
    //
    if ((SerialStruct == &SerialUsart1) && (SerialStruct->RxMessageTimeout > 2000) && (FlashConfiguration->RS485MessageMode == 1)) {
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	4b76      	ldr	r3, [pc, #472]	; (8008d5c <ProcessRxSerial+0x248>)
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d15a      	bne.n	8008c3c <ProcessRxSerial+0x128>
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	2388      	movs	r3, #136	; 0x88
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	5ad2      	ldrh	r2, [r2, r3]
 8008b8e:	23fa      	movs	r3, #250	; 0xfa
 8008b90:	00db      	lsls	r3, r3, #3
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d952      	bls.n	8008c3c <ProcessRxSerial+0x128>
 8008b96:	4b72      	ldr	r3, [pc, #456]	; (8008d60 <ProcessRxSerial+0x24c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a72      	ldr	r2, [pc, #456]	; (8008d64 <ProcessRxSerial+0x250>)
 8008b9c:	5c9b      	ldrb	r3, [r3, r2]
 8008b9e:	221e      	movs	r2, #30
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d149      	bne.n	8008c3c <ProcessRxSerial+0x128>
        if (RS485Timer != 0) {
 8008ba8:	4b6f      	ldr	r3, [pc, #444]	; (8008d68 <ProcessRxSerial+0x254>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d004      	beq.n	8008bba <ProcessRxSerial+0xa6>
            RS485Timer--;
 8008bb0:	4b6d      	ldr	r3, [pc, #436]	; (8008d68 <ProcessRxSerial+0x254>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	1e5a      	subs	r2, r3, #1
 8008bb6:	4b6c      	ldr	r3, [pc, #432]	; (8008d68 <ProcessRxSerial+0x254>)
 8008bb8:	601a      	str	r2, [r3, #0]
        }
        if ((RS485Timer == 0) && (bFlashConfigurationValid != 0)) {
 8008bba:	4b6b      	ldr	r3, [pc, #428]	; (8008d68 <ProcessRxSerial+0x254>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d13c      	bne.n	8008c3c <ProcessRxSerial+0x128>
 8008bc2:	4b6a      	ldr	r3, [pc, #424]	; (8008d6c <ProcessRxSerial+0x258>)
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d038      	beq.n	8008c3c <ProcessRxSerial+0x128>
            RS485Timer = FlashConfiguration->RS485MessageTime * 100;
 8008bca:	4b65      	ldr	r3, [pc, #404]	; (8008d60 <ProcessRxSerial+0x24c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a65      	ldr	r2, [pc, #404]	; (8008d64 <ProcessRxSerial+0x250>)
 8008bd0:	5a9b      	ldrh	r3, [r3, r2]
 8008bd2:	041b      	lsls	r3, r3, #16
 8008bd4:	0d5b      	lsrs	r3, r3, #21
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	001a      	movs	r2, r3
 8008bda:	2364      	movs	r3, #100	; 0x64
 8008bdc:	435a      	muls	r2, r3
 8008bde:	4b62      	ldr	r3, [pc, #392]	; (8008d68 <ProcessRxSerial+0x254>)
 8008be0:	601a      	str	r2, [r3, #0]
            if (FlashConfiguration->RS485MessageMode == 1) {
 8008be2:	4b5f      	ldr	r3, [pc, #380]	; (8008d60 <ProcessRxSerial+0x24c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a5f      	ldr	r2, [pc, #380]	; (8008d64 <ProcessRxSerial+0x250>)
 8008be8:	5c9b      	ldrb	r3, [r3, r2]
 8008bea:	221e      	movs	r2, #30
 8008bec:	4013      	ands	r3, r2
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d123      	bne.n	8008c3c <ProcessRxSerial+0x128>
                memmove(&SerialStruct->Data[9], &SysVars.MasterFrequency, 4);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	3322      	adds	r3, #34	; 0x22
 8008bf8:	33ff      	adds	r3, #255	; 0xff
 8008bfa:	001a      	movs	r2, r3
 8008bfc:	4b5c      	ldr	r3, [pc, #368]	; (8008d70 <ProcessRxSerial+0x25c>)
 8008bfe:	0010      	movs	r0, r2
 8008c00:	0019      	movs	r1, r3
 8008c02:	2304      	movs	r3, #4
 8008c04:	001a      	movs	r2, r3
 8008c06:	f003 fd79 	bl	800c6fc <memcpy>
                memmove(&SerialStruct->Data[13], &SysVars.RVOutputVoltage, 4);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	3326      	adds	r3, #38	; 0x26
 8008c0e:	33ff      	adds	r3, #255	; 0xff
 8008c10:	001a      	movs	r2, r3
 8008c12:	4b58      	ldr	r3, [pc, #352]	; (8008d74 <ProcessRxSerial+0x260>)
 8008c14:	0010      	movs	r0, r2
 8008c16:	0019      	movs	r1, r3
 8008c18:	2304      	movs	r3, #4
 8008c1a:	001a      	movs	r2, r3
 8008c1c:	f003 fd6e 	bl	800c6fc <memcpy>
                SerialStruct->Length = 8;
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	238b      	movs	r3, #139	; 0x8b
 8008c24:	005b      	lsls	r3, r3, #1
 8008c26:	2108      	movs	r1, #8
 8008c28:	52d1      	strh	r1, [r2, r3]
                SerialStruct->Command = 0x75;
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	238a      	movs	r3, #138	; 0x8a
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	2175      	movs	r1, #117	; 0x75
 8008c32:	54d1      	strb	r1, [r2, r3]
                SerialSend(SerialStruct);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	0018      	movs	r0, r3
 8008c38:	f000 f8c8 	bl	8008dcc <SerialSend>
        }
    }
    //
    // For Throttle, we are using RS485 in Half Duplex
    //
    if (SerialStruct == &SerialUsart1) {
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	4b47      	ldr	r3, [pc, #284]	; (8008d5c <ProcessRxSerial+0x248>)
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d14a      	bne.n	8008cda <ProcessRxSerial+0x1c6>
      if (FlashConfiguration->RS485MessageMode == 2) {
 8008c44:	4b46      	ldr	r3, [pc, #280]	; (8008d60 <ProcessRxSerial+0x24c>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a46      	ldr	r2, [pc, #280]	; (8008d64 <ProcessRxSerial+0x250>)
 8008c4a:	5c9b      	ldrb	r3, [r3, r2]
 8008c4c:	221e      	movs	r2, #30
 8008c4e:	4013      	ands	r3, r2
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	d141      	bne.n	8008cda <ProcessRxSerial+0x1c6>
        if ((RS485.RSControl == 1) || ((RS_Miss >= 151) && (!(SysVars.SensorLetter))) || ((RS_Miss >= 202) && (SysVars.SensorLetter))){
 8008c56:	4b48      	ldr	r3, [pc, #288]	; (8008d78 <ProcessRxSerial+0x264>)
 8008c58:	7ddb      	ldrb	r3, [r3, #23]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d017      	beq.n	8008c8e <ProcessRxSerial+0x17a>
 8008c5e:	4b47      	ldr	r3, [pc, #284]	; (8008d7c <ProcessRxSerial+0x268>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b96      	cmp	r3, #150	; 0x96
 8008c64:	d907      	bls.n	8008c76 <ProcessRxSerial+0x162>
 8008c66:	4b46      	ldr	r3, [pc, #280]	; (8008d80 <ProcessRxSerial+0x26c>)
 8008c68:	22e4      	movs	r2, #228	; 0xe4
 8008c6a:	5c9b      	ldrb	r3, [r3, r2]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	4013      	ands	r3, r2
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00b      	beq.n	8008c8e <ProcessRxSerial+0x17a>
 8008c76:	4b41      	ldr	r3, [pc, #260]	; (8008d7c <ProcessRxSerial+0x268>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	2bc9      	cmp	r3, #201	; 0xc9
 8008c7c:	d927      	bls.n	8008cce <ProcessRxSerial+0x1ba>
 8008c7e:	4b40      	ldr	r3, [pc, #256]	; (8008d80 <ProcessRxSerial+0x26c>)
 8008c80:	22e4      	movs	r2, #228	; 0xe4
 8008c82:	5c9b      	ldrb	r3, [r3, r2]
 8008c84:	2201      	movs	r2, #1
 8008c86:	4013      	ands	r3, r2
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d01f      	beq.n	8008cce <ProcessRxSerial+0x1ba>
          // Send data
          memmove(&SerialStruct->Data[9], &SysVars, sizeof(SysVars));
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3322      	adds	r3, #34	; 0x22
 8008c92:	33ff      	adds	r3, #255	; 0xff
 8008c94:	0018      	movs	r0, r3
 8008c96:	239e      	movs	r3, #158	; 0x9e
 8008c98:	005a      	lsls	r2, r3, #1
 8008c9a:	4b39      	ldr	r3, [pc, #228]	; (8008d80 <ProcessRxSerial+0x26c>)
 8008c9c:	0019      	movs	r1, r3
 8008c9e:	f003 fd36 	bl	800c70e <memmove>
          SerialStruct->Length = sizeof(SysVars);
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	238b      	movs	r3, #139	; 0x8b
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	219e      	movs	r1, #158	; 0x9e
 8008caa:	0049      	lsls	r1, r1, #1
 8008cac:	52d1      	strh	r1, [r2, r3]
          SerialStruct->Command = 0x72;
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	238a      	movs	r3, #138	; 0x8a
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	2172      	movs	r1, #114	; 0x72
 8008cb6:	54d1      	strb	r1, [r2, r3]
          SerialSend(SerialStruct);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	0018      	movs	r0, r3
 8008cbc:	f000 f886 	bl	8008dcc <SerialSend>
          RS485.RSControl = 0;
 8008cc0:	4b2d      	ldr	r3, [pc, #180]	; (8008d78 <ProcessRxSerial+0x264>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	75da      	strb	r2, [r3, #23]
          RS_Miss = 0;
 8008cc6:	4b2d      	ldr	r3, [pc, #180]	; (8008d7c <ProcessRxSerial+0x268>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	701a      	strb	r2, [r3, #0]
 8008ccc:	e005      	b.n	8008cda <ProcessRxSerial+0x1c6>
        }
        else {
          RS_Miss++;
 8008cce:	4b2b      	ldr	r3, [pc, #172]	; (8008d7c <ProcessRxSerial+0x268>)
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	4b29      	ldr	r3, [pc, #164]	; (8008d7c <ProcessRxSerial+0x268>)
 8008cd8:	701a      	strb	r2, [r3, #0]
      }
    }
    //
    // Process any Serial Input that has been received
    //
    if (SerialStruct == &SerialUsart2) {
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	4b1c      	ldr	r3, [pc, #112]	; (8008d50 <ProcessRxSerial+0x23c>)
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d123      	bne.n	8008d2a <ProcessRxSerial+0x216>
        if (bSendingMessage != 0) {
 8008ce2:	4b28      	ldr	r3, [pc, #160]	; (8008d84 <ProcessRxSerial+0x270>)
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01e      	beq.n	8008d2a <ProcessRxSerial+0x216>
            SerialStruct->RightBufferOut = SerialStruct->RingBufferIn;
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	2386      	movs	r3, #134	; 0x86
 8008cf0:	005b      	lsls	r3, r3, #1
 8008cf2:	5cd1      	ldrb	r1, [r2, r3]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	230e      	movs	r3, #14
 8008cf8:	33ff      	adds	r3, #255	; 0xff
 8008cfa:	54d1      	strb	r1, [r2, r3]
        }
    }
    while (SerialStruct->RightBufferOut != SerialStruct->RingBufferIn) {
 8008cfc:	e015      	b.n	8008d2a <ProcessRxSerial+0x216>
        SerialStruct->RxChar = SerialStruct->DmaRingBuffer[SerialStruct->RightBufferOut++];
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	230e      	movs	r3, #14
 8008d02:	33ff      	adds	r3, #255	; 0xff
 8008d04:	5cd3      	ldrb	r3, [r2, r3]
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	b2d0      	uxtb	r0, r2
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	220e      	movs	r2, #14
 8008d0e:	32ff      	adds	r2, #255	; 0xff
 8008d10:	5488      	strb	r0, [r1, r2]
 8008d12:	001a      	movs	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	189b      	adds	r3, r3, r2
 8008d18:	7a99      	ldrb	r1, [r3, #10]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	2387      	movs	r3, #135	; 0x87
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	54d1      	strb	r1, [r2, r3]
        ProcessSerialData(SerialStruct);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	0018      	movs	r0, r3
 8008d26:	f7ff fd8d 	bl	8008844 <ProcessSerialData>
    while (SerialStruct->RightBufferOut != SerialStruct->RingBufferIn) {
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	230e      	movs	r3, #14
 8008d2e:	33ff      	adds	r3, #255	; 0xff
 8008d30:	5cd2      	ldrb	r2, [r2, r3]
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	2386      	movs	r3, #134	; 0x86
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	5ccb      	ldrb	r3, [r1, r3]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d1df      	bne.n	8008cfe <ProcessRxSerial+0x1ea>
    }

    ExecutionEnd(EXECUTION_PROCESS_RX_SERIAL);
 8008d3e:	2011      	movs	r0, #17
 8008d40:	f7fb fc7e 	bl	8004640 <ExecutionEnd>
}
 8008d44:	46c0      	nop			; (mov r8, r8)
 8008d46:	46bd      	mov	sp, r7
 8008d48:	b002      	add	sp, #8
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	00000f9f 	.word	0x00000f9f
 8008d50:	200018b4 	.word	0x200018b4
 8008d54:	200037e0 	.word	0x200037e0
 8008d58:	00000bb8 	.word	0x00000bb8
 8008d5c:	20001588 	.word	0x20001588
 8008d60:	20002f04 	.word	0x20002f04
 8008d64:	00000474 	.word	0x00000474
 8008d68:	20000ae0 	.word	0x20000ae0
 8008d6c:	20002cf6 	.word	0x20002cf6
 8008d70:	20002160 	.word	0x20002160
 8008d74:	20002148 	.word	0x20002148
 8008d78:	20002f08 	.word	0x20002f08
 8008d7c:	20000aec 	.word	0x20000aec
 8008d80:	200020c0 	.word	0x200020c0
 8008d84:	20002cf4 	.word	0x20002cf4

08008d88 <MicroDelay>:
//
// Returns:   None
//
// Requirement(s):
//
void MicroDelay(uint32_t uS) {
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]

  uint32_t OldCounts, MicroSecondDelay, DelayCounts, NewCounts;

  OldCounts = TIM2->CNT;                          // This 32-bit Timer is running at 16MHz
 8008d90:	2380      	movs	r3, #128	; 0x80
 8008d92:	05db      	lsls	r3, r3, #23
 8008d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d96:	617b      	str	r3, [r7, #20]
  DelayCounts = 0;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	613b      	str	r3, [r7, #16]
  MicroSecondDelay = uS * 16;                   // Calculate number of timer counts to delay
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	011b      	lsls	r3, r3, #4
 8008da0:	60fb      	str	r3, [r7, #12]
  while (DelayCounts < MicroSecondDelay) {
 8008da2:	e00b      	b.n	8008dbc <MicroDelay+0x34>
    NewCounts = TIM2->CNT;
 8008da4:	2380      	movs	r3, #128	; 0x80
 8008da6:	05db      	lsls	r3, r3, #23
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	60bb      	str	r3, [r7, #8]
    DelayCounts += NewCounts - OldCounts;
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	18d3      	adds	r3, r2, r3
 8008db6:	613b      	str	r3, [r7, #16]
    OldCounts = NewCounts;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	617b      	str	r3, [r7, #20]
  while (DelayCounts < MicroSecondDelay) {
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d3ef      	bcc.n	8008da4 <MicroDelay+0x1c>
  }
}
 8008dc4:	46c0      	nop			; (mov r8, r8)
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	b006      	add	sp, #24
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <SerialSend>:
//
// Returns:   None
//
// Requirement(s):
//
void SerialSend(stSerial *SerialStruct) {
 8008dcc:	b5b0      	push	{r4, r5, r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]

  uint16_t Crc;

  SerialStruct->Data[0] = 0xAA;                    // Sync
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	238c      	movs	r3, #140	; 0x8c
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	21aa      	movs	r1, #170	; 0xaa
 8008ddc:	54d1      	strb	r1, [r2, r3]
  SerialStruct->Data[1] = 0xAA;
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	231a      	movs	r3, #26
 8008de2:	33ff      	adds	r3, #255	; 0xff
 8008de4:	21aa      	movs	r1, #170	; 0xaa
 8008de6:	54d1      	strb	r1, [r2, r3]
  SerialStruct->Data[2] = 0xAA;
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	238d      	movs	r3, #141	; 0x8d
 8008dec:	005b      	lsls	r3, r3, #1
 8008dee:	21aa      	movs	r1, #170	; 0xaa
 8008df0:	54d1      	strb	r1, [r2, r3]
  SerialStruct->Data[3] = 0xAA;
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	231c      	movs	r3, #28
 8008df6:	33ff      	adds	r3, #255	; 0xff
 8008df8:	21aa      	movs	r1, #170	; 0xaa
 8008dfa:	54d1      	strb	r1, [r2, r3]
  SerialStruct->Data[4] = 0xAA;
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	238e      	movs	r3, #142	; 0x8e
 8008e00:	005b      	lsls	r3, r3, #1
 8008e02:	21aa      	movs	r1, #170	; 0xaa
 8008e04:	54d1      	strb	r1, [r2, r3]
  SerialStruct->Data[5] = 0x00;
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	231e      	movs	r3, #30
 8008e0a:	33ff      	adds	r3, #255	; 0xff
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	54d1      	strb	r1, [r2, r3]
  SerialStruct->Data[6] = SerialStruct->Command;                // Command
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	238a      	movs	r3, #138	; 0x8a
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	5cd1      	ldrb	r1, [r2, r3]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	238f      	movs	r3, #143	; 0x8f
 8008e1c:	005b      	lsls	r3, r3, #1
 8008e1e:	54d1      	strb	r1, [r2, r3]
  SerialStruct->Data[7] = (uint8_t)(SerialStruct->Length & 0xFF);          // Length
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	238b      	movs	r3, #139	; 0x8b
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	5ad3      	ldrh	r3, [r2, r3]
 8008e28:	b2d9      	uxtb	r1, r3
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	2320      	movs	r3, #32
 8008e2e:	33ff      	adds	r3, #255	; 0xff
 8008e30:	54d1      	strb	r1, [r2, r3]
  SerialStruct->Data[8] = (uint8_t)(SerialStruct->Length >> 8);
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	238b      	movs	r3, #139	; 0x8b
 8008e36:	005b      	lsls	r3, r3, #1
 8008e38:	5ad3      	ldrh	r3, [r2, r3]
 8008e3a:	0a1b      	lsrs	r3, r3, #8
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	b2d9      	uxtb	r1, r3
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	2390      	movs	r3, #144	; 0x90
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	54d1      	strb	r1, [r2, r3]
  //
  //  Calculate CRC
  //
  Crc = CalcCrc16Array(&SerialStruct->Data[6], SerialStruct->Length + 3);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	331f      	adds	r3, #31
 8008e4c:	33ff      	adds	r3, #255	; 0xff
 8008e4e:	0018      	movs	r0, r3
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	238b      	movs	r3, #139	; 0x8b
 8008e54:	005b      	lsls	r3, r3, #1
 8008e56:	5ad3      	ldrh	r3, [r2, r3]
 8008e58:	3303      	adds	r3, #3
 8008e5a:	250e      	movs	r5, #14
 8008e5c:	197c      	adds	r4, r7, r5
 8008e5e:	0019      	movs	r1, r3
 8008e60:	f7f9 fe5c 	bl	8002b1c <CalcCrc16Array>
 8008e64:	0003      	movs	r3, r0
 8008e66:	8023      	strh	r3, [r4, #0]
  SerialStruct->Data[SerialStruct->Length + 9] = (uint8_t)(Crc & 0xFF);
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	238b      	movs	r3, #139	; 0x8b
 8008e6c:	005b      	lsls	r3, r3, #1
 8008e6e:	5ad3      	ldrh	r3, [r2, r3]
 8008e70:	3309      	adds	r3, #9
 8008e72:	001a      	movs	r2, r3
 8008e74:	197b      	adds	r3, r7, r5
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	b2d8      	uxtb	r0, r3
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	238c      	movs	r3, #140	; 0x8c
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	188a      	adds	r2, r1, r2
 8008e82:	18d3      	adds	r3, r2, r3
 8008e84:	1c02      	adds	r2, r0, #0
 8008e86:	701a      	strb	r2, [r3, #0]
  SerialStruct->Data[SerialStruct->Length + 10] = (uint8_t)(Crc >> 8);
 8008e88:	197b      	adds	r3, r7, r5
 8008e8a:	881b      	ldrh	r3, [r3, #0]
 8008e8c:	0a1b      	lsrs	r3, r3, #8
 8008e8e:	b299      	uxth	r1, r3
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	238b      	movs	r3, #139	; 0x8b
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	5ad3      	ldrh	r3, [r2, r3]
 8008e98:	330a      	adds	r3, #10
 8008e9a:	001a      	movs	r2, r3
 8008e9c:	b2c8      	uxtb	r0, r1
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	238c      	movs	r3, #140	; 0x8c
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	188a      	adds	r2, r1, r2
 8008ea6:	18d3      	adds	r3, r2, r3
 8008ea8:	1c02      	adds	r2, r0, #0
 8008eaa:	701a      	strb	r2, [r3, #0]
  //
  // Send Message via selected SerialMode Mode.
  //
  if (SerialStruct == &SerialUsart1) {
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	4b24      	ldr	r3, [pc, #144]	; (8008f40 <SerialSend+0x174>)
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d119      	bne.n	8008ee8 <SerialSend+0x11c>
    STM32_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_SET);                              // Turn on RS422/485 Driver
 8008eb4:	2380      	movs	r3, #128	; 0x80
 8008eb6:	01db      	lsls	r3, r3, #7
 8008eb8:	4822      	ldr	r0, [pc, #136]	; (8008f44 <SerialSend+0x178>)
 8008eba:	2201      	movs	r2, #1
 8008ebc:	0019      	movs	r1, r3
 8008ebe:	f7fc fd25 	bl	800590c <STM32_GPIO_WritePin>
    MicroDelay(500);
 8008ec2:	23fa      	movs	r3, #250	; 0xfa
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	0018      	movs	r0, r3
 8008ec8:	f7ff ff5e 	bl	8008d88 <MicroDelay>
    STM32_UART_Transmit_DMA(&huart1, (uint8_t *)&SerialStruct->Data[0], SerialStruct->Length + 11);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	3319      	adds	r3, #25
 8008ed0:	33ff      	adds	r3, #255	; 0xff
 8008ed2:	0019      	movs	r1, r3
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	238b      	movs	r3, #139	; 0x8b
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	5ad3      	ldrh	r3, [r2, r3]
 8008edc:	330b      	adds	r3, #11
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	4b19      	ldr	r3, [pc, #100]	; (8008f48 <SerialSend+0x17c>)
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	f002 fb34 	bl	800b550 <STM32_UART_Transmit_DMA>
  }
  if (SerialStruct == &SerialUsart2) {
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	4b18      	ldr	r3, [pc, #96]	; (8008f4c <SerialSend+0x180>)
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d122      	bne.n	8008f36 <SerialSend+0x16a>
    if (DIG_HandleStruct[0].DIG_InitStruct.Mode == DIG_SERIAL_INOUT) {
 8008ef0:	4b17      	ldr	r3, [pc, #92]	; (8008f50 <SerialSend+0x184>)
 8008ef2:	7a1b      	ldrb	r3, [r3, #8]
 8008ef4:	2b08      	cmp	r3, #8
 8008ef6:	d10d      	bne.n	8008f14 <SerialSend+0x148>
      //
      //  Switch Bi-Directional Buffer to an Output
      //
      STM32_GPIO_WritePin(DIG_HandleStruct[0].Dir_Port, DIG_HandleStruct[0].Dir_Pin, GPIO_PIN_SET);       // Set DIG_IO1 buffer as output
 8008ef8:	4b15      	ldr	r3, [pc, #84]	; (8008f50 <SerialSend+0x184>)
 8008efa:	6918      	ldr	r0, [r3, #16]
 8008efc:	4b14      	ldr	r3, [pc, #80]	; (8008f50 <SerialSend+0x184>)
 8008efe:	2240      	movs	r2, #64	; 0x40
 8008f00:	5a9b      	ldrh	r3, [r3, r2]
 8008f02:	2201      	movs	r2, #1
 8008f04:	0019      	movs	r1, r3
 8008f06:	f7fc fd01 	bl	800590c <STM32_GPIO_WritePin>
      MicroDelay(500);
 8008f0a:	23fa      	movs	r3, #250	; 0xfa
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	0018      	movs	r0, r3
 8008f10:	f7ff ff3a 	bl	8008d88 <MicroDelay>
    }
    STM32_UART_Transmit_DMA(&huart2, (uint8_t *)&SerialStruct->Data[0], SerialStruct->Length + 11);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3319      	adds	r3, #25
 8008f18:	33ff      	adds	r3, #255	; 0xff
 8008f1a:	0019      	movs	r1, r3
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	238b      	movs	r3, #139	; 0x8b
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	5ad3      	ldrh	r3, [r2, r3]
 8008f24:	330b      	adds	r3, #11
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	4b0a      	ldr	r3, [pc, #40]	; (8008f54 <SerialSend+0x188>)
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	f002 fb10 	bl	800b550 <STM32_UART_Transmit_DMA>
    //
    // As data is transmitted, it will be received also.  This flag prevents the received data from being placed into the Receiver Buffer
    //
    bSendingMessage = TRUE;
 8008f30:	4b09      	ldr	r3, [pc, #36]	; (8008f58 <SerialSend+0x18c>)
 8008f32:	2201      	movs	r2, #1
 8008f34:	701a      	strb	r2, [r3, #0]
  }
}
 8008f36:	46c0      	nop			; (mov r8, r8)
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	b004      	add	sp, #16
 8008f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8008f3e:	46c0      	nop			; (mov r8, r8)
 8008f40:	20001588 	.word	0x20001588
 8008f44:	48000400 	.word	0x48000400
 8008f48:	200029fc 	.word	0x200029fc
 8008f4c:	200018b4 	.word	0x200018b4
 8008f50:	20002d24 	.word	0x20002d24
 8008f54:	20002f34 	.word	0x20002f34
 8008f58:	20002cf4 	.word	0x20002cf4

08008f5c <VerifyFlashData>:
//
// Returns:   Value 0-255 where 0 indicates no errors with new FlashConfiguration data and > 0 is an error
//
// Requirement(s):
//
uint8_t VerifyFlashData(stFlashConfiguration *NewData) {
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]

  int32_t TmpIndex, i, TestInputCount;
  uint32_t Dig = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	60bb      	str	r3, [r7, #8]

  //
  // Only Modes 0 through 2 are supported at this time
  //
  if ((NewData->RS485MessageMode < 0) || (NewData->RS485MessageMode > 2)) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4aca      	ldr	r2, [pc, #808]	; (8009294 <VerifyFlashData+0x338>)
 8008f6c:	5c9b      	ldrb	r3, [r3, r2]
 8008f6e:	06db      	lsls	r3, r3, #27
 8008f70:	0f1b      	lsrs	r3, r3, #28
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d902      	bls.n	8008f7e <VerifyFlashData+0x22>
    return 5;
 8008f78:	2305      	movs	r3, #5
 8008f7a:	f000 fca3 	bl	80098c4 <VerifyFlashData+0x968>
  }
  //
  // If Mode isn't Disabled, then Time must be greater than 0 and less than 1001, or 0.1 to 100.0 seconds
  //
  if (NewData->RS485MessageMode > 0) {
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4ac4      	ldr	r2, [pc, #784]	; (8009294 <VerifyFlashData+0x338>)
 8008f82:	5c9b      	ldrb	r3, [r3, r2]
 8008f84:	221e      	movs	r2, #30
 8008f86:	4013      	ands	r3, r2
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d014      	beq.n	8008fb8 <VerifyFlashData+0x5c>
    if ((NewData->RS485MessageTime < 1) || (NewData->RS485MessageTime > 1000)) {          // 0.1 to 100.0 seconds
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4ac0      	ldr	r2, [pc, #768]	; (8009294 <VerifyFlashData+0x338>)
 8008f92:	5a9b      	ldrh	r3, [r3, r2]
 8008f94:	221f      	movs	r2, #31
 8008f96:	4393      	bics	r3, r2
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d009      	beq.n	8008fb2 <VerifyFlashData+0x56>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4abc      	ldr	r2, [pc, #752]	; (8009294 <VerifyFlashData+0x338>)
 8008fa2:	5a9b      	ldrh	r3, [r3, r2]
 8008fa4:	041b      	lsls	r3, r3, #16
 8008fa6:	0d5b      	lsrs	r3, r3, #21
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	23fa      	movs	r3, #250	; 0xfa
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d902      	bls.n	8008fb8 <VerifyFlashData+0x5c>
      return 10;
 8008fb2:	230a      	movs	r3, #10
 8008fb4:	f000 fc86 	bl	80098c4 <VerifyFlashData+0x968>
    }
  }
  //
  // Verify all FilteringGains are within the range of 1 to 16384
  //
  if ((NewData->KmaFilteringGain < 1) || (NewData->KmaFilteringGain > 16384)) {
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	2383      	movs	r3, #131	; 0x83
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	58d3      	ldr	r3, [r2, r3]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	dd07      	ble.n	8008fd4 <VerifyFlashData+0x78>
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	2383      	movs	r3, #131	; 0x83
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	58d2      	ldr	r2, [r2, r3]
 8008fcc:	2380      	movs	r3, #128	; 0x80
 8008fce:	01db      	lsls	r3, r3, #7
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	dd02      	ble.n	8008fda <VerifyFlashData+0x7e>
    return 15;
 8008fd4:	230f      	movs	r3, #15
 8008fd6:	f000 fc75 	bl	80098c4 <VerifyFlashData+0x968>
  }
  if ((NewData->MasterIndexFilteringGain < 1) || (NewData->MasterIndexFilteringGain > 16384)) {
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	2384      	movs	r3, #132	; 0x84
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	58d3      	ldr	r3, [r2, r3]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	dd07      	ble.n	8008ff6 <VerifyFlashData+0x9a>
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	2384      	movs	r3, #132	; 0x84
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	58d2      	ldr	r2, [r2, r3]
 8008fee:	2380      	movs	r3, #128	; 0x80
 8008ff0:	01db      	lsls	r3, r3, #7
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	dd02      	ble.n	8008ffc <VerifyFlashData+0xa0>
    return 20;
 8008ff6:	2314      	movs	r3, #20
 8008ff8:	f000 fc64 	bl	80098c4 <VerifyFlashData+0x968>
  }
  if ((NewData->AccelXAdcFilteringGain < 1) || (NewData->AccelXAdcFilteringGain > 16384)) {
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	2385      	movs	r3, #133	; 0x85
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	58d3      	ldr	r3, [r2, r3]
 8009004:	2b00      	cmp	r3, #0
 8009006:	dd07      	ble.n	8009018 <VerifyFlashData+0xbc>
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	2385      	movs	r3, #133	; 0x85
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	58d2      	ldr	r2, [r2, r3]
 8009010:	2380      	movs	r3, #128	; 0x80
 8009012:	01db      	lsls	r3, r3, #7
 8009014:	429a      	cmp	r2, r3
 8009016:	dd02      	ble.n	800901e <VerifyFlashData+0xc2>
    return 25;
 8009018:	2319      	movs	r3, #25
 800901a:	f000 fc53 	bl	80098c4 <VerifyFlashData+0x968>
  }
  if ((NewData->AccelYAdcFilteringGain < 1) || (NewData->AccelYAdcFilteringGain > 16384)) {
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	2386      	movs	r3, #134	; 0x86
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	58d3      	ldr	r3, [r2, r3]
 8009026:	2b00      	cmp	r3, #0
 8009028:	dd07      	ble.n	800903a <VerifyFlashData+0xde>
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	2386      	movs	r3, #134	; 0x86
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	58d2      	ldr	r2, [r2, r3]
 8009032:	2380      	movs	r3, #128	; 0x80
 8009034:	01db      	lsls	r3, r3, #7
 8009036:	429a      	cmp	r2, r3
 8009038:	dd02      	ble.n	8009040 <VerifyFlashData+0xe4>
    return 30;
 800903a:	231e      	movs	r3, #30
 800903c:	f000 fc42 	bl	80098c4 <VerifyFlashData+0x968>
  }
  if ((NewData->AccelZAdcFilteringGain < 1) || (NewData->AccelZAdcFilteringGain > 16384)) {
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	2387      	movs	r3, #135	; 0x87
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	58d3      	ldr	r3, [r2, r3]
 8009048:	2b00      	cmp	r3, #0
 800904a:	dd07      	ble.n	800905c <VerifyFlashData+0x100>
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	2387      	movs	r3, #135	; 0x87
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	58d2      	ldr	r2, [r2, r3]
 8009054:	2380      	movs	r3, #128	; 0x80
 8009056:	01db      	lsls	r3, r3, #7
 8009058:	429a      	cmp	r2, r3
 800905a:	dd02      	ble.n	8009062 <VerifyFlashData+0x106>
    return 35;
 800905c:	2323      	movs	r3, #35	; 0x23
 800905e:	f000 fc31 	bl	80098c4 <VerifyFlashData+0x968>
  }
  //
  // Verify Mode is within the range of 0 to 2
  // TESTING!! Update these values
  //
  if ((NewData->RVOutputMode < 0) || (NewData->RVOutputMode > 2)) {
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	2382      	movs	r3, #130	; 0x82
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	5cd3      	ldrb	r3, [r2, r3]
 800906a:	2203      	movs	r2, #3
 800906c:	4013      	ands	r3, r2
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b03      	cmp	r3, #3
 8009072:	d102      	bne.n	800907a <VerifyFlashData+0x11e>
    return 50;
 8009074:	2332      	movs	r3, #50	; 0x32
 8009076:	f000 fc25 	bl	80098c4 <VerifyFlashData+0x968>
  }
  //
  // Verify DIGIO1 0 to 7, or 10 to 12
  //
  if (((NewData->Digio1 > 7) && (NewData->Digio1 < 10)) || (NewData->Digio1 > 12)) {
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	2388      	movs	r3, #136	; 0x88
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	5cd3      	ldrb	r3, [r2, r3]
 8009082:	06db      	lsls	r3, r3, #27
 8009084:	0edb      	lsrs	r3, r3, #27
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b07      	cmp	r3, #7
 800908a:	d908      	bls.n	800909e <VerifyFlashData+0x142>
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	2388      	movs	r3, #136	; 0x88
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	5cd3      	ldrb	r3, [r2, r3]
 8009094:	06db      	lsls	r3, r3, #27
 8009096:	0edb      	lsrs	r3, r3, #27
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b09      	cmp	r3, #9
 800909c:	d908      	bls.n	80090b0 <VerifyFlashData+0x154>
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	2388      	movs	r3, #136	; 0x88
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	5cd3      	ldrb	r3, [r2, r3]
 80090a6:	06db      	lsls	r3, r3, #27
 80090a8:	0edb      	lsrs	r3, r3, #27
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b0c      	cmp	r3, #12
 80090ae:	d902      	bls.n	80090b6 <VerifyFlashData+0x15a>
    return 55;
 80090b0:	2337      	movs	r3, #55	; 0x37
 80090b2:	f000 fc07 	bl	80098c4 <VerifyFlashData+0x968>
  }
  //
  // Verify DIGIO2 0 to 6, or 9 to 12
  //
  if (((NewData->Digio2 > 6) && (NewData->Digio2 < 9)) || (NewData->Digio2 > 12)) {
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	2388      	movs	r3, #136	; 0x88
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	5ad3      	ldrh	r3, [r2, r3]
 80090be:	059b      	lsls	r3, r3, #22
 80090c0:	0edb      	lsrs	r3, r3, #27
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b06      	cmp	r3, #6
 80090c6:	d908      	bls.n	80090da <VerifyFlashData+0x17e>
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	2388      	movs	r3, #136	; 0x88
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	5ad3      	ldrh	r3, [r2, r3]
 80090d0:	059b      	lsls	r3, r3, #22
 80090d2:	0edb      	lsrs	r3, r3, #27
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b08      	cmp	r3, #8
 80090d8:	d908      	bls.n	80090ec <VerifyFlashData+0x190>
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	2388      	movs	r3, #136	; 0x88
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	5ad3      	ldrh	r3, [r2, r3]
 80090e2:	059b      	lsls	r3, r3, #22
 80090e4:	0edb      	lsrs	r3, r3, #27
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	2b0c      	cmp	r3, #12
 80090ea:	d902      	bls.n	80090f2 <VerifyFlashData+0x196>
    return 60;
 80090ec:	233c      	movs	r3, #60	; 0x3c
 80090ee:	f000 fbe9 	bl	80098c4 <VerifyFlashData+0x968>
  }
  //
  // Verify DIGIO3 0 to 6, or 10 to 12
  //
  if (((NewData->Digio3 > 6) && (NewData->Digio3 < 10)) || (NewData->Digio3 > 12)) {
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a68      	ldr	r2, [pc, #416]	; (8009298 <VerifyFlashData+0x33c>)
 80090f6:	5c9b      	ldrb	r3, [r3, r2]
 80090f8:	065b      	lsls	r3, r3, #25
 80090fa:	0edb      	lsrs	r3, r3, #27
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b06      	cmp	r3, #6
 8009100:	d907      	bls.n	8009112 <VerifyFlashData+0x1b6>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a64      	ldr	r2, [pc, #400]	; (8009298 <VerifyFlashData+0x33c>)
 8009106:	5c9b      	ldrb	r3, [r3, r2]
 8009108:	065b      	lsls	r3, r3, #25
 800910a:	0edb      	lsrs	r3, r3, #27
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b09      	cmp	r3, #9
 8009110:	d907      	bls.n	8009122 <VerifyFlashData+0x1c6>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a60      	ldr	r2, [pc, #384]	; (8009298 <VerifyFlashData+0x33c>)
 8009116:	5c9b      	ldrb	r3, [r3, r2]
 8009118:	065b      	lsls	r3, r3, #25
 800911a:	0edb      	lsrs	r3, r3, #27
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b0c      	cmp	r3, #12
 8009120:	d902      	bls.n	8009128 <VerifyFlashData+0x1cc>
    return 65;
 8009122:	2341      	movs	r3, #65	; 0x41
 8009124:	f000 fbce 	bl	80098c4 <VerifyFlashData+0x968>
  }
  //
  // Verify DIGIO4 0 to 6, or 10 to 12
  //
  if (((NewData->Digio4 > 6) && (NewData->Digio4 < 10)) || (NewData->Digio4 > 12)) {
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	2388      	movs	r3, #136	; 0x88
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	58d3      	ldr	r3, [r2, r3]
 8009130:	031b      	lsls	r3, r3, #12
 8009132:	0edb      	lsrs	r3, r3, #27
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b06      	cmp	r3, #6
 8009138:	d908      	bls.n	800914c <VerifyFlashData+0x1f0>
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	2388      	movs	r3, #136	; 0x88
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	58d3      	ldr	r3, [r2, r3]
 8009142:	031b      	lsls	r3, r3, #12
 8009144:	0edb      	lsrs	r3, r3, #27
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b09      	cmp	r3, #9
 800914a:	d908      	bls.n	800915e <VerifyFlashData+0x202>
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	2388      	movs	r3, #136	; 0x88
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	58d3      	ldr	r3, [r2, r3]
 8009154:	031b      	lsls	r3, r3, #12
 8009156:	0edb      	lsrs	r3, r3, #27
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b0c      	cmp	r3, #12
 800915c:	d902      	bls.n	8009164 <VerifyFlashData+0x208>
    return 70;
 800915e:	2346      	movs	r3, #70	; 0x46
 8009160:	f000 fbb0 	bl	80098c4 <VerifyFlashData+0x968>
  }
  //
  // Verify DIGIO5 is 0,2,4,6,8,10,11,12
  //
  if ((NewData->Digio5 == 1) || (NewData->Digio5 == 3) || (NewData->Digio5 == 5) || (NewData->Digio5 == 7) || (NewData->Digio5 == 9) || (NewData->Digio5 > 12)) {
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a4d      	ldr	r2, [pc, #308]	; (800929c <VerifyFlashData+0x340>)
 8009168:	5a9a      	ldrh	r2, [r3, r2]
 800916a:	23f8      	movs	r3, #248	; 0xf8
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	4013      	ands	r3, r2
 8009170:	b29b      	uxth	r3, r3
 8009172:	2b10      	cmp	r3, #16
 8009174:	d02b      	beq.n	80091ce <VerifyFlashData+0x272>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a48      	ldr	r2, [pc, #288]	; (800929c <VerifyFlashData+0x340>)
 800917a:	5a9a      	ldrh	r2, [r3, r2]
 800917c:	23f8      	movs	r3, #248	; 0xf8
 800917e:	005b      	lsls	r3, r3, #1
 8009180:	4013      	ands	r3, r2
 8009182:	b29b      	uxth	r3, r3
 8009184:	2b30      	cmp	r3, #48	; 0x30
 8009186:	d022      	beq.n	80091ce <VerifyFlashData+0x272>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a44      	ldr	r2, [pc, #272]	; (800929c <VerifyFlashData+0x340>)
 800918c:	5a9a      	ldrh	r2, [r3, r2]
 800918e:	23f8      	movs	r3, #248	; 0xf8
 8009190:	005b      	lsls	r3, r3, #1
 8009192:	4013      	ands	r3, r2
 8009194:	b29b      	uxth	r3, r3
 8009196:	2b50      	cmp	r3, #80	; 0x50
 8009198:	d019      	beq.n	80091ce <VerifyFlashData+0x272>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a3f      	ldr	r2, [pc, #252]	; (800929c <VerifyFlashData+0x340>)
 800919e:	5a9a      	ldrh	r2, [r3, r2]
 80091a0:	23f8      	movs	r3, #248	; 0xf8
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	4013      	ands	r3, r2
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	2b70      	cmp	r3, #112	; 0x70
 80091aa:	d010      	beq.n	80091ce <VerifyFlashData+0x272>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a3b      	ldr	r2, [pc, #236]	; (800929c <VerifyFlashData+0x340>)
 80091b0:	5a9a      	ldrh	r2, [r3, r2]
 80091b2:	23f8      	movs	r3, #248	; 0xf8
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	4013      	ands	r3, r2
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	2b90      	cmp	r3, #144	; 0x90
 80091bc:	d007      	beq.n	80091ce <VerifyFlashData+0x272>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a36      	ldr	r2, [pc, #216]	; (800929c <VerifyFlashData+0x340>)
 80091c2:	5a9b      	ldrh	r3, [r3, r2]
 80091c4:	05db      	lsls	r3, r3, #23
 80091c6:	0edb      	lsrs	r3, r3, #27
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2b0c      	cmp	r3, #12
 80091cc:	d902      	bls.n	80091d4 <VerifyFlashData+0x278>
    return 75;
 80091ce:	234b      	movs	r3, #75	; 0x4b
 80091d0:	f000 fb78 	bl	80098c4 <VerifyFlashData+0x968>
  }
  //
  // Verify DIGIO6 0 to 6, or 10 to 12
  //
  if (((NewData->Digio6 > 6) && (NewData->Digio6 < 10)) || (NewData->Digio6 > 12)) {
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a32      	ldr	r2, [pc, #200]	; (80092a0 <VerifyFlashData+0x344>)
 80091d8:	5c9b      	ldrb	r3, [r3, r2]
 80091da:	069b      	lsls	r3, r3, #26
 80091dc:	0edb      	lsrs	r3, r3, #27
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b06      	cmp	r3, #6
 80091e2:	d907      	bls.n	80091f4 <VerifyFlashData+0x298>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a2e      	ldr	r2, [pc, #184]	; (80092a0 <VerifyFlashData+0x344>)
 80091e8:	5c9b      	ldrb	r3, [r3, r2]
 80091ea:	069b      	lsls	r3, r3, #26
 80091ec:	0edb      	lsrs	r3, r3, #27
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b09      	cmp	r3, #9
 80091f2:	d907      	bls.n	8009204 <VerifyFlashData+0x2a8>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a2a      	ldr	r2, [pc, #168]	; (80092a0 <VerifyFlashData+0x344>)
 80091f8:	5c9b      	ldrb	r3, [r3, r2]
 80091fa:	069b      	lsls	r3, r3, #26
 80091fc:	0edb      	lsrs	r3, r3, #27
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b0c      	cmp	r3, #12
 8009202:	d902      	bls.n	800920a <VerifyFlashData+0x2ae>
    return 80;
 8009204:	2350      	movs	r3, #80	; 0x50
 8009206:	f000 fb5d 	bl	80098c4 <VerifyFlashData+0x968>
  }

  //
  // DIGIO2 and DIGIO6 can not both be configured as SLAVE_FREQ_INPUTS
  //
  if ((NewData->Digio2 == 2) && (NewData->Digio6 == 2)) {
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	2388      	movs	r3, #136	; 0x88
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	5ad2      	ldrh	r2, [r2, r3]
 8009212:	23f8      	movs	r3, #248	; 0xf8
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4013      	ands	r3, r2
 8009218:	b29b      	uxth	r3, r3
 800921a:	2b40      	cmp	r3, #64	; 0x40
 800921c:	d10a      	bne.n	8009234 <VerifyFlashData+0x2d8>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a1f      	ldr	r2, [pc, #124]	; (80092a0 <VerifyFlashData+0x344>)
 8009222:	5c9b      	ldrb	r3, [r3, r2]
 8009224:	223e      	movs	r2, #62	; 0x3e
 8009226:	4013      	ands	r3, r2
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b04      	cmp	r3, #4
 800922c:	d102      	bne.n	8009234 <VerifyFlashData+0x2d8>
    return 100;
 800922e:	2364      	movs	r3, #100	; 0x64
 8009230:	f000 fb48 	bl	80098c4 <VerifyFlashData+0x968>
  }
  //
  // If RVOutput is configured in Resistance Mode, then RV Pullup must be disabled
  //
  if ((NewData->RVOutputMode == 2) && (NewData->RVOutputPullup != 0)) {      // if RV Output Mode is Resistance, then Pullup can not be enabled
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	2382      	movs	r3, #130	; 0x82
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	5cd3      	ldrb	r3, [r2, r3]
 800923c:	2203      	movs	r2, #3
 800923e:	4013      	ands	r3, r2
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b02      	cmp	r3, #2
 8009244:	d10a      	bne.n	800925c <VerifyFlashData+0x300>
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	2382      	movs	r3, #130	; 0x82
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	5cd3      	ldrb	r3, [r2, r3]
 800924e:	2204      	movs	r2, #4
 8009250:	4013      	ands	r3, r2
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <VerifyFlashData+0x300>
    return 110;
 8009258:	236e      	movs	r3, #110	; 0x6e
 800925a:	e333      	b.n	80098c4 <VerifyFlashData+0x968>
  }
  //
  // If MasterFreqMode is configured for FreqTableMode, then verify MasterFreqTable is correct.
  //
  if (NewData->MasterFreqMode == 0) {
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	2382      	movs	r3, #130	; 0x82
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	5cd3      	ldrb	r3, [r2, r3]
 8009264:	2210      	movs	r2, #16
 8009266:	4013      	ands	r3, r2
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d000      	beq.n	8009270 <VerifyFlashData+0x314>
 800926e:	e072      	b.n	8009356 <VerifyFlashData+0x3fa>
    //
    // There must be at least 2 entries in table
    //
    if (NewData->MasterFreqTable.TableLength < 2) {
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	2382      	movs	r3, #130	; 0x82
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	58d3      	ldr	r3, [r2, r3]
 8009278:	2b01      	cmp	r3, #1
 800927a:	dc01      	bgt.n	8009280 <VerifyFlashData+0x324>
      return 115;
 800927c:	2373      	movs	r3, #115	; 0x73
 800927e:	e321      	b.n	80098c4 <VerifyFlashData+0x968>
    }
    //
    // Index of First Entry must be 400 (4.00)
    //
    if (NewData->MasterFreqTable.TablePoint[0].Point1 != 400) {
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	2384      	movs	r3, #132	; 0x84
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	58d2      	ldr	r2, [r2, r3]
 8009288:	23c8      	movs	r3, #200	; 0xc8
 800928a:	005b      	lsls	r3, r3, #1
 800928c:	429a      	cmp	r2, r3
 800928e:	d009      	beq.n	80092a4 <VerifyFlashData+0x348>
      return 120;
 8009290:	2378      	movs	r3, #120	; 0x78
 8009292:	e317      	b.n	80098c4 <VerifyFlashData+0x968>
 8009294:	00000474 	.word	0x00000474
 8009298:	00000221 	.word	0x00000221
 800929c:	00000222 	.word	0x00000222
 80092a0:	00000223 	.word	0x00000223
    }
    //
    // Index of Last Entry must be 102300 (1023.00)
    //
    if (NewData->MasterFreqTable.TablePoint[NewData->MasterFreqTable.TableLength - 1].Point1 != 102300) {
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	2382      	movs	r3, #130	; 0x82
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	58d3      	ldr	r3, [r2, r3]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	3320      	adds	r3, #32
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	18d3      	adds	r3, r2, r3
 80092b6:	3308      	adds	r3, #8
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4ac3      	ldr	r2, [pc, #780]	; (80095c8 <VerifyFlashData+0x66c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d001      	beq.n	80092c4 <VerifyFlashData+0x368>
      return 125;
 80092c0:	237d      	movs	r3, #125	; 0x7d
 80092c2:	e2ff      	b.n	80098c4 <VerifyFlashData+0x968>
    }
    //
    // Indexes must be increasing
    //
    TmpIndex = NewData->MasterFreqTable.TablePoint[0].Point1;
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	2384      	movs	r3, #132	; 0x84
 80092c8:	005b      	lsls	r3, r3, #1
 80092ca:	58d3      	ldr	r3, [r2, r3]
 80092cc:	617b      	str	r3, [r7, #20]
    for (i = 1; i < NewData->MasterFreqTable.TableLength; i++) {
 80092ce:	2301      	movs	r3, #1
 80092d0:	613b      	str	r3, [r7, #16]
 80092d2:	e016      	b.n	8009302 <VerifyFlashData+0x3a6>
      if (NewData->MasterFreqTable.TablePoint[i].Point1 <= TmpIndex) {
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	3320      	adds	r3, #32
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	18d3      	adds	r3, r2, r3
 80092de:	3308      	adds	r3, #8
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	db01      	blt.n	80092ec <VerifyFlashData+0x390>
        return 130;
 80092e8:	2382      	movs	r3, #130	; 0x82
 80092ea:	e2eb      	b.n	80098c4 <VerifyFlashData+0x968>
      }
      TmpIndex = NewData->MasterFreqTable.TablePoint[i].Point1;
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	3320      	adds	r3, #32
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	18d3      	adds	r3, r2, r3
 80092f6:	3308      	adds	r3, #8
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	617b      	str	r3, [r7, #20]
    for (i = 1; i < NewData->MasterFreqTable.TableLength; i++) {
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	3301      	adds	r3, #1
 8009300:	613b      	str	r3, [r7, #16]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	2382      	movs	r3, #130	; 0x82
 8009306:	005b      	lsls	r3, r3, #1
 8009308:	58d3      	ldr	r3, [r2, r3]
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	429a      	cmp	r2, r3
 800930e:	dbe1      	blt.n	80092d4 <VerifyFlashData+0x378>
    }
    //
    // Frequenies must be >= 10Hz and <= 20KHz
    //
    for (i = 0; i < NewData->MasterFreqTable.TableLength; i++) {
 8009310:	2300      	movs	r3, #0
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	e018      	b.n	8009348 <VerifyFlashData+0x3ec>
      if ((NewData->MasterFreqTable.TablePoint[i].Point2 < 1000) || (NewData->MasterFreqTable.TablePoint[i].Point2 > 2000000)) {
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	3320      	adds	r3, #32
 800931c:	00db      	lsls	r3, r3, #3
 800931e:	18d3      	adds	r3, r2, r3
 8009320:	330c      	adds	r3, #12
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4aa9      	ldr	r2, [pc, #676]	; (80095cc <VerifyFlashData+0x670>)
 8009326:	4293      	cmp	r3, r2
 8009328:	dd09      	ble.n	800933e <VerifyFlashData+0x3e2>
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	3320      	adds	r3, #32
 8009330:	00db      	lsls	r3, r3, #3
 8009332:	18d3      	adds	r3, r2, r3
 8009334:	330c      	adds	r3, #12
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4aa5      	ldr	r2, [pc, #660]	; (80095d0 <VerifyFlashData+0x674>)
 800933a:	4293      	cmp	r3, r2
 800933c:	dd01      	ble.n	8009342 <VerifyFlashData+0x3e6>
        return 135;
 800933e:	2387      	movs	r3, #135	; 0x87
 8009340:	e2c0      	b.n	80098c4 <VerifyFlashData+0x968>
    for (i = 0; i < NewData->MasterFreqTable.TableLength; i++) {
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	3301      	adds	r3, #1
 8009346:	613b      	str	r3, [r7, #16]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	2382      	movs	r3, #130	; 0x82
 800934c:	005b      	lsls	r3, r3, #1
 800934e:	58d3      	ldr	r3, [r2, r3]
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	429a      	cmp	r2, r3
 8009354:	dbdf      	blt.n	8009316 <VerifyFlashData+0x3ba>
    }
  }
  //
  // IF RVOutput is enabled (voltage or resistance), then verify SetpointTable
  //
  if (NewData->RVOutputMode != 0) {
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	2382      	movs	r3, #130	; 0x82
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	5cd3      	ldrb	r3, [r2, r3]
 800935e:	2203      	movs	r2, #3
 8009360:	4013      	ands	r3, r2
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b00      	cmp	r3, #0
 8009366:	d100      	bne.n	800936a <VerifyFlashData+0x40e>
 8009368:	e08d      	b.n	8009486 <VerifyFlashData+0x52a>
    //
    // There must be >= 2 entries in table and <= 32
    //
    if ((NewData->SetpointTable.TableLength < 2) || (NewData->SetpointTable.TableLength > 32)) {     // Must have at least two entries
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b01      	cmp	r3, #1
 8009370:	dd03      	ble.n	800937a <VerifyFlashData+0x41e>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b20      	cmp	r3, #32
 8009378:	dd01      	ble.n	800937e <VerifyFlashData+0x422>
      return 140;
 800937a:	238c      	movs	r3, #140	; 0x8c
 800937c:	e2a2      	b.n	80098c4 <VerifyFlashData+0x968>
    }
    //
    // Index of First Entry must be 400 (4.00)
    //
    if (NewData->SetpointTable.TablePoint[0].Point1 != 400) {     // Index of first Entry must be 4.00
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	23c8      	movs	r3, #200	; 0xc8
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	429a      	cmp	r2, r3
 8009388:	d001      	beq.n	800938e <VerifyFlashData+0x432>
      return 145;
 800938a:	2391      	movs	r3, #145	; 0x91
 800938c:	e29a      	b.n	80098c4 <VerifyFlashData+0x968>
    }
    //
    // Index of Last Entry must be 102300 (1023.00)
    //
    if (NewData->SetpointTable.TablePoint[NewData->SetpointTable.TableLength - 1].Point1 != 102300) {  // Index of last entry must be 1023.00
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3b01      	subs	r3, #1
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	18d3      	adds	r3, r2, r3
 800939a:	3304      	adds	r3, #4
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a8a      	ldr	r2, [pc, #552]	; (80095c8 <VerifyFlashData+0x66c>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d001      	beq.n	80093a8 <VerifyFlashData+0x44c>
      return 150;
 80093a4:	2396      	movs	r3, #150	; 0x96
 80093a6:	e28d      	b.n	80098c4 <VerifyFlashData+0x968>
    }
    //
    // Indexes must be increasing
    //
    TmpIndex = NewData->SetpointTable.TablePoint[0].Point1;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	617b      	str	r3, [r7, #20]
    for (i = 1; i < NewData->SetpointTable.TableLength; i++) {
 80093ae:	2301      	movs	r3, #1
 80093b0:	613b      	str	r3, [r7, #16]
 80093b2:	e014      	b.n	80093de <VerifyFlashData+0x482>
      if (NewData->SetpointTable.TablePoint[i].Point1 <= TmpIndex) {
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	18d3      	adds	r3, r2, r3
 80093bc:	3304      	adds	r3, #4
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	db01      	blt.n	80093ca <VerifyFlashData+0x46e>
        return 155;
 80093c6:	239b      	movs	r3, #155	; 0x9b
 80093c8:	e27c      	b.n	80098c4 <VerifyFlashData+0x968>
      }
      TmpIndex = NewData->SetpointTable.TablePoint[i].Point1;
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	00db      	lsls	r3, r3, #3
 80093d0:	18d3      	adds	r3, r2, r3
 80093d2:	3304      	adds	r3, #4
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	617b      	str	r3, [r7, #20]
    for (i = 1; i < NewData->SetpointTable.TableLength; i++) {
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	3301      	adds	r3, #1
 80093dc:	613b      	str	r3, [r7, #16]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	dbe5      	blt.n	80093b4 <VerifyFlashData+0x458>
    }
    //
    // If RV Output Mode is Voltage, then Setpoint must be from 0 to 9999 (9.999) volts
    //
    if (NewData->RVOutputMode == 1) {
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	2382      	movs	r3, #130	; 0x82
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	5cd3      	ldrb	r3, [r2, r3]
 80093f0:	2203      	movs	r2, #3
 80093f2:	4013      	ands	r3, r2
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d11d      	bne.n	8009436 <VerifyFlashData+0x4da>
      for (i = 0; i < NewData->SetpointTable.TableLength; i++) {
 80093fa:	2300      	movs	r3, #0
 80093fc:	613b      	str	r3, [r7, #16]
 80093fe:	e015      	b.n	800942c <VerifyFlashData+0x4d0>
        if ((NewData->SetpointTable.TablePoint[i].Point2 < 0) || (NewData->SetpointTable.TablePoint[i].Point2 > 9999)) {
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	00db      	lsls	r3, r3, #3
 8009406:	18d3      	adds	r3, r2, r3
 8009408:	3308      	adds	r3, #8
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	db08      	blt.n	8009422 <VerifyFlashData+0x4c6>
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	00db      	lsls	r3, r3, #3
 8009416:	18d3      	adds	r3, r2, r3
 8009418:	3308      	adds	r3, #8
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a6d      	ldr	r2, [pc, #436]	; (80095d4 <VerifyFlashData+0x678>)
 800941e:	4293      	cmp	r3, r2
 8009420:	dd01      	ble.n	8009426 <VerifyFlashData+0x4ca>
          return 160;
 8009422:	23a0      	movs	r3, #160	; 0xa0
 8009424:	e24e      	b.n	80098c4 <VerifyFlashData+0x968>
      for (i = 0; i < NewData->SetpointTable.TableLength; i++) {
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	3301      	adds	r3, #1
 800942a:	613b      	str	r3, [r7, #16]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	429a      	cmp	r2, r3
 8009434:	dbe4      	blt.n	8009400 <VerifyFlashData+0x4a4>
      }
    }
    //
    // If RV Output Mode is Resistance, then Setpoint must be from 1000 to 999999 (1.000 to 999.999 ohms)
    //
    if (NewData->RVOutputMode == 2) {              // RV Output mode is Resistance
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	2382      	movs	r3, #130	; 0x82
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	5cd3      	ldrb	r3, [r2, r3]
 800943e:	2203      	movs	r2, #3
 8009440:	4013      	ands	r3, r2
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2b02      	cmp	r3, #2
 8009446:	d11e      	bne.n	8009486 <VerifyFlashData+0x52a>
      for (i = 0; i < NewData->SetpointTable.TableLength; i++) {
 8009448:	2300      	movs	r3, #0
 800944a:	613b      	str	r3, [r7, #16]
 800944c:	e016      	b.n	800947c <VerifyFlashData+0x520>
        if ((NewData->SetpointTable.TablePoint[i].Point2 < 1000) || (NewData->SetpointTable.TablePoint[i].Point2 > 999999)) {        // 0.5 to 999.999 Ohms
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	00db      	lsls	r3, r3, #3
 8009454:	18d3      	adds	r3, r2, r3
 8009456:	3308      	adds	r3, #8
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a5c      	ldr	r2, [pc, #368]	; (80095cc <VerifyFlashData+0x670>)
 800945c:	4293      	cmp	r3, r2
 800945e:	dd08      	ble.n	8009472 <VerifyFlashData+0x516>
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	00db      	lsls	r3, r3, #3
 8009466:	18d3      	adds	r3, r2, r3
 8009468:	3308      	adds	r3, #8
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a5a      	ldr	r2, [pc, #360]	; (80095d8 <VerifyFlashData+0x67c>)
 800946e:	4293      	cmp	r3, r2
 8009470:	dd01      	ble.n	8009476 <VerifyFlashData+0x51a>
          return 165;
 8009472:	23a5      	movs	r3, #165	; 0xa5
 8009474:	e226      	b.n	80098c4 <VerifyFlashData+0x968>
      for (i = 0; i < NewData->SetpointTable.TableLength; i++) {
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	3301      	adds	r3, #1
 800947a:	613b      	str	r3, [r7, #16]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	429a      	cmp	r2, r3
 8009484:	dbe3      	blt.n	800944e <VerifyFlashData+0x4f2>
  //
  // Only one DIGIO can be configured as a TEST_IN
  // Only one DIGIO can be configured as a KINGAIR_CLOCK
  // Only one DIGIO can be configured as a KINGAIR_DATA
  //
  TestInputCount = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < 6; i++) {
 800948a:	2300      	movs	r3, #0
 800948c:	613b      	str	r3, [r7, #16]
 800948e:	e04a      	b.n	8009526 <VerifyFlashData+0x5ca>
    switch (i) {
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2b05      	cmp	r3, #5
 8009494:	d838      	bhi.n	8009508 <VerifyFlashData+0x5ac>
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	009a      	lsls	r2, r3, #2
 800949a:	4b50      	ldr	r3, [pc, #320]	; (80095dc <VerifyFlashData+0x680>)
 800949c:	18d3      	adds	r3, r2, r3
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	469f      	mov	pc, r3
    case 0:
      Dig = NewData->Digio1;
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	2388      	movs	r3, #136	; 0x88
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	5cd3      	ldrb	r3, [r2, r3]
 80094aa:	06db      	lsls	r3, r3, #27
 80094ac:	0edb      	lsrs	r3, r3, #27
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	60bb      	str	r3, [r7, #8]
      break;
 80094b2:	e02f      	b.n	8009514 <VerifyFlashData+0x5b8>
    case 1:
      Dig = NewData->Digio2;
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	2388      	movs	r3, #136	; 0x88
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	5ad3      	ldrh	r3, [r2, r3]
 80094bc:	059b      	lsls	r3, r3, #22
 80094be:	0edb      	lsrs	r3, r3, #27
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	60bb      	str	r3, [r7, #8]
      break;
 80094c4:	e026      	b.n	8009514 <VerifyFlashData+0x5b8>
    case 2:
      Dig = NewData->Digio3;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a45      	ldr	r2, [pc, #276]	; (80095e0 <VerifyFlashData+0x684>)
 80094ca:	5c9b      	ldrb	r3, [r3, r2]
 80094cc:	065b      	lsls	r3, r3, #25
 80094ce:	0edb      	lsrs	r3, r3, #27
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	60bb      	str	r3, [r7, #8]
      break;
 80094d4:	e01e      	b.n	8009514 <VerifyFlashData+0x5b8>
    case 3:
      Dig = NewData->Digio4;
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	2388      	movs	r3, #136	; 0x88
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	58d3      	ldr	r3, [r2, r3]
 80094de:	031b      	lsls	r3, r3, #12
 80094e0:	0edb      	lsrs	r3, r3, #27
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	60bb      	str	r3, [r7, #8]
      break;
 80094e6:	e015      	b.n	8009514 <VerifyFlashData+0x5b8>
    case 4:
      Dig = NewData->Digio5;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a3e      	ldr	r2, [pc, #248]	; (80095e4 <VerifyFlashData+0x688>)
 80094ec:	5a9b      	ldrh	r3, [r3, r2]
 80094ee:	05db      	lsls	r3, r3, #23
 80094f0:	0edb      	lsrs	r3, r3, #27
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	60bb      	str	r3, [r7, #8]
      break;
 80094f6:	e00d      	b.n	8009514 <VerifyFlashData+0x5b8>
    case 5:
      Dig = NewData->Digio6;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a3b      	ldr	r2, [pc, #236]	; (80095e8 <VerifyFlashData+0x68c>)
 80094fc:	5c9b      	ldrb	r3, [r3, r2]
 80094fe:	069b      	lsls	r3, r3, #26
 8009500:	0edb      	lsrs	r3, r3, #27
 8009502:	b2db      	uxtb	r3, r3
 8009504:	60bb      	str	r3, [r7, #8]
      break;
 8009506:	e005      	b.n	8009514 <VerifyFlashData+0x5b8>
    default:
      Error_Handler(FILE_SERIAL, __LINE__);
 8009508:	4b37      	ldr	r3, [pc, #220]	; (80095e8 <VerifyFlashData+0x68c>)
 800950a:	0019      	movs	r1, r3
 800950c:	201c      	movs	r0, #28
 800950e:	f7fa ff61 	bl	80043d4 <Error_Handler>
      break;
 8009512:	46c0      	nop			; (mov r8, r8)
    }
    if (Dig == CONFIG_DIG_TEST_IN) {
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2b0a      	cmp	r3, #10
 8009518:	d102      	bne.n	8009520 <VerifyFlashData+0x5c4>
      TestInputCount++;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3301      	adds	r3, #1
 800951e:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < 6; i++) {
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	3301      	adds	r3, #1
 8009524:	613b      	str	r3, [r7, #16]
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	2b05      	cmp	r3, #5
 800952a:	ddb1      	ble.n	8009490 <VerifyFlashData+0x534>
    }
  }
  if (TestInputCount > 1) {               // Only one DIG_IO can be configured as a TEST_INPUT
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2b01      	cmp	r3, #1
 8009530:	dd01      	ble.n	8009536 <VerifyFlashData+0x5da>
    return 170;
 8009532:	23aa      	movs	r3, #170	; 0xaa
 8009534:	e1c6      	b.n	80098c4 <VerifyFlashData+0x968>
  }
  //
  // Scaling must be 0, 1 or 2
  //
  if (NewData->AccelerometerScaling > 2) {
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a2c      	ldr	r2, [pc, #176]	; (80095ec <VerifyFlashData+0x690>)
 800953a:	5c9b      	ldrb	r3, [r3, r2]
 800953c:	2203      	movs	r2, #3
 800953e:	4013      	ands	r3, r2
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b03      	cmp	r3, #3
 8009544:	d101      	bne.n	800954a <VerifyFlashData+0x5ee>
    return 195;
 8009546:	23c3      	movs	r3, #195	; 0xc3
 8009548:	e1bc      	b.n	80098c4 <VerifyFlashData+0x968>
  }
  if (NewData->DefaultOutput > 4) {
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	2389      	movs	r3, #137	; 0x89
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	5cd3      	ldrb	r3, [r2, r3]
 8009552:	2b04      	cmp	r3, #4
 8009554:	d901      	bls.n	800955a <VerifyFlashData+0x5fe>
    return 200;
 8009556:	23c8      	movs	r3, #200	; 0xc8
 8009558:	e1b4      	b.n	80098c4 <VerifyFlashData+0x968>
  }
  if (NewData->SensorMode > 1) {
    return 201;
  }
  if (NewData->CanUse != 0 && NewData->CanUse != 1) {
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a24      	ldr	r2, [pc, #144]	; (80095f0 <VerifyFlashData+0x694>)
 800955e:	5c9b      	ldrb	r3, [r3, r2]
 8009560:	2202      	movs	r2, #2
 8009562:	4013      	ands	r3, r2
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d009      	beq.n	800957e <VerifyFlashData+0x622>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a20      	ldr	r2, [pc, #128]	; (80095f0 <VerifyFlashData+0x694>)
 800956e:	5c9b      	ldrb	r3, [r3, r2]
 8009570:	2202      	movs	r2, #2
 8009572:	4013      	ands	r3, r2
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d101      	bne.n	800957e <VerifyFlashData+0x622>
    return 202;
 800957a:	23ca      	movs	r3, #202	; 0xca
 800957c:	e1a2      	b.n	80098c4 <VerifyFlashData+0x968>
  }
  if (NewData->CanEcho != 0 && NewData->CanEcho != 1) {
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a1c      	ldr	r2, [pc, #112]	; (80095f4 <VerifyFlashData+0x698>)
 8009582:	5c9b      	ldrb	r3, [r3, r2]
 8009584:	2204      	movs	r2, #4
 8009586:	4013      	ands	r3, r2
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d009      	beq.n	80095a2 <VerifyFlashData+0x646>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a18      	ldr	r2, [pc, #96]	; (80095f4 <VerifyFlashData+0x698>)
 8009592:	5c9b      	ldrb	r3, [r3, r2]
 8009594:	2204      	movs	r2, #4
 8009596:	4013      	ands	r3, r2
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d101      	bne.n	80095a2 <VerifyFlashData+0x646>
    return 203;
 800959e:	23cb      	movs	r3, #203	; 0xcb
 80095a0:	e190      	b.n	80098c4 <VerifyFlashData+0x968>
  }
  if (NewData->CanCrcEnable != 0 && NewData->CanCrcEnable != 1) {
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a13      	ldr	r2, [pc, #76]	; (80095f4 <VerifyFlashData+0x698>)
 80095a6:	5c9b      	ldrb	r3, [r3, r2]
 80095a8:	2208      	movs	r2, #8
 80095aa:	4013      	ands	r3, r2
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d022      	beq.n	80095f8 <VerifyFlashData+0x69c>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a0f      	ldr	r2, [pc, #60]	; (80095f4 <VerifyFlashData+0x698>)
 80095b6:	5c9b      	ldrb	r3, [r3, r2]
 80095b8:	2208      	movs	r2, #8
 80095ba:	4013      	ands	r3, r2
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d11a      	bne.n	80095f8 <VerifyFlashData+0x69c>
    return 204;
 80095c2:	23cc      	movs	r3, #204	; 0xcc
 80095c4:	e17e      	b.n	80098c4 <VerifyFlashData+0x968>
 80095c6:	46c0      	nop			; (mov r8, r8)
 80095c8:	00018f9c 	.word	0x00018f9c
 80095cc:	000003e7 	.word	0x000003e7
 80095d0:	001e8480 	.word	0x001e8480
 80095d4:	0000270f 	.word	0x0000270f
 80095d8:	000f423f 	.word	0x000f423f
 80095dc:	0800ccf0 	.word	0x0800ccf0
 80095e0:	00000221 	.word	0x00000221
 80095e4:	00000222 	.word	0x00000222
 80095e8:	00000223 	.word	0x00000223
 80095ec:	00000476 	.word	0x00000476
 80095f0:	00000225 	.word	0x00000225
 80095f4:	00000226 	.word	0x00000226
  }
  if (NewData->CanPrescaler != 3 && NewData->CanPrescaler != 6 && NewData->CanPrescaler != 12 &&
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4ab4      	ldr	r2, [pc, #720]	; (80098cc <VerifyFlashData+0x970>)
 80095fc:	5a9b      	ldrh	r3, [r3, r2]
 80095fe:	4ab4      	ldr	r2, [pc, #720]	; (80098d0 <VerifyFlashData+0x974>)
 8009600:	4013      	ands	r3, r2
 8009602:	b29b      	uxth	r3, r3
 8009604:	2b30      	cmp	r3, #48	; 0x30
 8009606:	d04d      	beq.n	80096a4 <VerifyFlashData+0x748>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4ab0      	ldr	r2, [pc, #704]	; (80098cc <VerifyFlashData+0x970>)
 800960c:	5a9b      	ldrh	r3, [r3, r2]
 800960e:	4ab0      	ldr	r2, [pc, #704]	; (80098d0 <VerifyFlashData+0x974>)
 8009610:	4013      	ands	r3, r2
 8009612:	b29b      	uxth	r3, r3
 8009614:	2b60      	cmp	r3, #96	; 0x60
 8009616:	d045      	beq.n	80096a4 <VerifyFlashData+0x748>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4aac      	ldr	r2, [pc, #688]	; (80098cc <VerifyFlashData+0x970>)
 800961c:	5a9b      	ldrh	r3, [r3, r2]
 800961e:	4aac      	ldr	r2, [pc, #688]	; (80098d0 <VerifyFlashData+0x974>)
 8009620:	4013      	ands	r3, r2
 8009622:	b29b      	uxth	r3, r3
 8009624:	2bc0      	cmp	r3, #192	; 0xc0
 8009626:	d03d      	beq.n	80096a4 <VerifyFlashData+0x748>
      NewData->CanPrescaler != 24 && NewData->CanPrescaler != 30 && NewData->CanPrescaler != 36 &&
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4aa8      	ldr	r2, [pc, #672]	; (80098cc <VerifyFlashData+0x970>)
 800962c:	5a9b      	ldrh	r3, [r3, r2]
 800962e:	4aa8      	ldr	r2, [pc, #672]	; (80098d0 <VerifyFlashData+0x974>)
 8009630:	4013      	ands	r3, r2
 8009632:	b29a      	uxth	r2, r3
  if (NewData->CanPrescaler != 3 && NewData->CanPrescaler != 6 && NewData->CanPrescaler != 12 &&
 8009634:	23c0      	movs	r3, #192	; 0xc0
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	429a      	cmp	r2, r3
 800963a:	d033      	beq.n	80096a4 <VerifyFlashData+0x748>
      NewData->CanPrescaler != 24 && NewData->CanPrescaler != 30 && NewData->CanPrescaler != 36 &&
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4aa3      	ldr	r2, [pc, #652]	; (80098cc <VerifyFlashData+0x970>)
 8009640:	5a9b      	ldrh	r3, [r3, r2]
 8009642:	4aa3      	ldr	r2, [pc, #652]	; (80098d0 <VerifyFlashData+0x974>)
 8009644:	4013      	ands	r3, r2
 8009646:	b29a      	uxth	r2, r3
 8009648:	23f0      	movs	r3, #240	; 0xf0
 800964a:	005b      	lsls	r3, r3, #1
 800964c:	429a      	cmp	r2, r3
 800964e:	d029      	beq.n	80096a4 <VerifyFlashData+0x748>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a9e      	ldr	r2, [pc, #632]	; (80098cc <VerifyFlashData+0x970>)
 8009654:	5a9b      	ldrh	r3, [r3, r2]
 8009656:	4a9e      	ldr	r2, [pc, #632]	; (80098d0 <VerifyFlashData+0x974>)
 8009658:	4013      	ands	r3, r2
 800965a:	b29a      	uxth	r2, r3
 800965c:	2390      	movs	r3, #144	; 0x90
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	429a      	cmp	r2, r3
 8009662:	d01f      	beq.n	80096a4 <VerifyFlashData+0x748>
      NewData->CanPrescaler != 60 && NewData->CanPrescaler != 150 && NewData->CanPrescaler != 300) {
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a99      	ldr	r2, [pc, #612]	; (80098cc <VerifyFlashData+0x970>)
 8009668:	5a9b      	ldrh	r3, [r3, r2]
 800966a:	4a99      	ldr	r2, [pc, #612]	; (80098d0 <VerifyFlashData+0x974>)
 800966c:	4013      	ands	r3, r2
 800966e:	b29a      	uxth	r2, r3
      NewData->CanPrescaler != 24 && NewData->CanPrescaler != 30 && NewData->CanPrescaler != 36 &&
 8009670:	23f0      	movs	r3, #240	; 0xf0
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	429a      	cmp	r2, r3
 8009676:	d015      	beq.n	80096a4 <VerifyFlashData+0x748>
      NewData->CanPrescaler != 60 && NewData->CanPrescaler != 150 && NewData->CanPrescaler != 300) {
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a94      	ldr	r2, [pc, #592]	; (80098cc <VerifyFlashData+0x970>)
 800967c:	5a9b      	ldrh	r3, [r3, r2]
 800967e:	4a94      	ldr	r2, [pc, #592]	; (80098d0 <VerifyFlashData+0x974>)
 8009680:	4013      	ands	r3, r2
 8009682:	b29a      	uxth	r2, r3
 8009684:	2396      	movs	r3, #150	; 0x96
 8009686:	011b      	lsls	r3, r3, #4
 8009688:	429a      	cmp	r2, r3
 800968a:	d00b      	beq.n	80096a4 <VerifyFlashData+0x748>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a8f      	ldr	r2, [pc, #572]	; (80098cc <VerifyFlashData+0x970>)
 8009690:	5a9b      	ldrh	r3, [r3, r2]
 8009692:	4a8f      	ldr	r2, [pc, #572]	; (80098d0 <VerifyFlashData+0x974>)
 8009694:	4013      	ands	r3, r2
 8009696:	b29a      	uxth	r2, r3
 8009698:	2396      	movs	r3, #150	; 0x96
 800969a:	015b      	lsls	r3, r3, #5
 800969c:	429a      	cmp	r2, r3
 800969e:	d001      	beq.n	80096a4 <VerifyFlashData+0x748>
    return 205;
 80096a0:	23cd      	movs	r3, #205	; 0xcd
 80096a2:	e10f      	b.n	80098c4 <VerifyFlashData+0x968>
  }
  //
  // There must be >= 2 entries in table and <= 32
  //
  if ((NewData->CanTable.TableLength < 2) || (NewData->CanTable.TableLength > 32)) {     // Must have at least two entries
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	238a      	movs	r3, #138	; 0x8a
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	58d3      	ldr	r3, [r2, r3]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	dd05      	ble.n	80096bc <VerifyFlashData+0x760>
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	238a      	movs	r3, #138	; 0x8a
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	58d3      	ldr	r3, [r2, r3]
 80096b8:	2b20      	cmp	r3, #32
 80096ba:	dd01      	ble.n	80096c0 <VerifyFlashData+0x764>
    return 206;
 80096bc:	23ce      	movs	r3, #206	; 0xce
 80096be:	e101      	b.n	80098c4 <VerifyFlashData+0x968>
  }
  //
  // Index of First Entry must be 400 (4.00)
  //
  if (NewData->CanTable.TablePoint[0].Point1 != 400) {     // Index of first Entry must be 4.00
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	238b      	movs	r3, #139	; 0x8b
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	58d2      	ldr	r2, [r2, r3]
 80096c8:	23c8      	movs	r3, #200	; 0xc8
 80096ca:	005b      	lsls	r3, r3, #1
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d001      	beq.n	80096d4 <VerifyFlashData+0x778>
    return 207;
 80096d0:	23cf      	movs	r3, #207	; 0xcf
 80096d2:	e0f7      	b.n	80098c4 <VerifyFlashData+0x968>
  }
  //
  // Index of Last Entry must be 102300 (1023.00)
  //
  if (NewData->CanTable.TablePoint[NewData->CanTable.TableLength - 1].Point1 != 102300) {  // Index of last entry must be 1023.00
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	238a      	movs	r3, #138	; 0x8a
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	58d3      	ldr	r3, [r2, r3]
 80096dc:	3b01      	subs	r3, #1
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	3345      	adds	r3, #69	; 0x45
 80096e2:	00db      	lsls	r3, r3, #3
 80096e4:	18d3      	adds	r3, r2, r3
 80096e6:	3304      	adds	r3, #4
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a7a      	ldr	r2, [pc, #488]	; (80098d4 <VerifyFlashData+0x978>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d001      	beq.n	80096f4 <VerifyFlashData+0x798>
    return 208;
 80096f0:	23d0      	movs	r3, #208	; 0xd0
 80096f2:	e0e7      	b.n	80098c4 <VerifyFlashData+0x968>
  }
  //
  // Indexes must be increasing
  //
  TmpIndex = NewData->CanTable.TablePoint[0].Point1;
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	238b      	movs	r3, #139	; 0x8b
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	58d3      	ldr	r3, [r2, r3]
 80096fc:	617b      	str	r3, [r7, #20]
  for (i = 1; i < NewData->CanTable.TableLength; i++) {
 80096fe:	2301      	movs	r3, #1
 8009700:	613b      	str	r3, [r7, #16]
 8009702:	e016      	b.n	8009732 <VerifyFlashData+0x7d6>
    if (NewData->CanTable.TablePoint[i].Point1 <= TmpIndex) {
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	3345      	adds	r3, #69	; 0x45
 800970a:	00db      	lsls	r3, r3, #3
 800970c:	18d3      	adds	r3, r2, r3
 800970e:	3304      	adds	r3, #4
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	429a      	cmp	r2, r3
 8009716:	db01      	blt.n	800971c <VerifyFlashData+0x7c0>
      return 209;
 8009718:	23d1      	movs	r3, #209	; 0xd1
 800971a:	e0d3      	b.n	80098c4 <VerifyFlashData+0x968>
    }
    TmpIndex = NewData->CanTable.TablePoint[i].Point1;
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	3345      	adds	r3, #69	; 0x45
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	18d3      	adds	r3, r2, r3
 8009726:	3304      	adds	r3, #4
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	617b      	str	r3, [r7, #20]
  for (i = 1; i < NewData->CanTable.TableLength; i++) {
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	3301      	adds	r3, #1
 8009730:	613b      	str	r3, [r7, #16]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	238a      	movs	r3, #138	; 0x8a
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	58d3      	ldr	r3, [r2, r3]
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	429a      	cmp	r2, r3
 800973e:	dbe1      	blt.n	8009704 <VerifyFlashData+0x7a8>
  }

  for (i = 0; i < 3; i++) {
 8009740:	2300      	movs	r3, #0
 8009742:	613b      	str	r3, [r7, #16]
 8009744:	e014      	b.n	8009770 <VerifyFlashData+0x814>
    if (NewData->CanMsgOutTime[i] != 0) {
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	3213      	adds	r2, #19
 800974c:	32ff      	adds	r2, #255	; 0xff
 800974e:	0092      	lsls	r2, r2, #2
 8009750:	58d3      	ldr	r3, [r2, r3]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d009      	beq.n	800976a <VerifyFlashData+0x80e>
      if (NewData->CanMsgOutTime[i] < 10) {
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	3213      	adds	r2, #19
 800975c:	32ff      	adds	r2, #255	; 0xff
 800975e:	0092      	lsls	r2, r2, #2
 8009760:	58d3      	ldr	r3, [r2, r3]
 8009762:	2b09      	cmp	r3, #9
 8009764:	d801      	bhi.n	800976a <VerifyFlashData+0x80e>
        return 211;
 8009766:	23d3      	movs	r3, #211	; 0xd3
 8009768:	e0ac      	b.n	80098c4 <VerifyFlashData+0x968>
  for (i = 0; i < 3; i++) {
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	3301      	adds	r3, #1
 800976e:	613b      	str	r3, [r7, #16]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	2b02      	cmp	r3, #2
 8009774:	dde7      	ble.n	8009746 <VerifyFlashData+0x7ea>
      }
    }
  }
  for (i = 0; i < 2; i++) {
 8009776:	2300      	movs	r3, #0
 8009778:	613b      	str	r3, [r7, #16]
 800977a:	e02e      	b.n	80097da <VerifyFlashData+0x87e>
    if (NewData->CanAddressIn[i] != 0) {
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	3315      	adds	r3, #21
 8009782:	33ff      	adds	r3, #255	; 0xff
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	18d3      	adds	r3, r2, r3
 8009788:	3304      	adds	r3, #4
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d021      	beq.n	80097d4 <VerifyFlashData+0x878>
      if (NewData->CanMsgInTime[i] < 10 && NewData->CanMsgInTime[i] > 0) {
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	3317      	adds	r3, #23
 8009796:	33ff      	adds	r3, #255	; 0xff
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	18d3      	adds	r3, r2, r3
 800979c:	3304      	adds	r3, #4
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b09      	cmp	r3, #9
 80097a2:	d80b      	bhi.n	80097bc <VerifyFlashData+0x860>
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	3317      	adds	r3, #23
 80097aa:	33ff      	adds	r3, #255	; 0xff
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	18d3      	adds	r3, r2, r3
 80097b0:	3304      	adds	r3, #4
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <VerifyFlashData+0x860>
        return 212;
 80097b8:	23d4      	movs	r3, #212	; 0xd4
 80097ba:	e083      	b.n	80098c4 <VerifyFlashData+0x968>
      }
      if (NewData->CanMaskIn[i] == 0) {
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	3319      	adds	r3, #25
 80097c2:	33ff      	adds	r3, #255	; 0xff
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	18d3      	adds	r3, r2, r3
 80097c8:	3304      	adds	r3, #4
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <VerifyFlashData+0x878>
        return 213;
 80097d0:	23d5      	movs	r3, #213	; 0xd5
 80097d2:	e077      	b.n	80098c4 <VerifyFlashData+0x968>
  for (i = 0; i < 2; i++) {
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	3301      	adds	r3, #1
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	ddcd      	ble.n	800977c <VerifyFlashData+0x820>
      }
    }
  }
  if (NewData->Endianess != 0 && NewData->Endianess != 1) {
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a3d      	ldr	r2, [pc, #244]	; (80098d8 <VerifyFlashData+0x97c>)
 80097e4:	5c9b      	ldrb	r3, [r3, r2]
 80097e6:	2220      	movs	r2, #32
 80097e8:	4013      	ands	r3, r2
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d009      	beq.n	8009804 <VerifyFlashData+0x8a8>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a39      	ldr	r2, [pc, #228]	; (80098d8 <VerifyFlashData+0x97c>)
 80097f4:	5c9b      	ldrb	r3, [r3, r2]
 80097f6:	2220      	movs	r2, #32
 80097f8:	4013      	ands	r3, r2
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <VerifyFlashData+0x8a8>
    return 214;
 8009800:	23d6      	movs	r3, #214	; 0xd6
 8009802:	e05f      	b.n	80098c4 <VerifyFlashData+0x968>
  }

  //
  // There must be >= 2 entries in table and <= 32
  //
  if ((NewData->AngularOutput.TableLength < 2) || (NewData->AngularOutput.TableLength > 32)) {     // Must have at least two entries
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	23cb      	movs	r3, #203	; 0xcb
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	58d3      	ldr	r3, [r2, r3]
 800980c:	2b01      	cmp	r3, #1
 800980e:	dd05      	ble.n	800981c <VerifyFlashData+0x8c0>
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	23cb      	movs	r3, #203	; 0xcb
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	58d3      	ldr	r3, [r2, r3]
 8009818:	2b20      	cmp	r3, #32
 800981a:	dd01      	ble.n	8009820 <VerifyFlashData+0x8c4>
    return 215;
 800981c:	23d7      	movs	r3, #215	; 0xd7
 800981e:	e051      	b.n	80098c4 <VerifyFlashData+0x968>
  }
  //
  // Index of First Entry must be 400 (4.00)
  //
  if (NewData->AngularOutput.TablePoint[0].Point1 != 400) {     // Index of first Entry must be 4.00
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	23cc      	movs	r3, #204	; 0xcc
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	58d2      	ldr	r2, [r2, r3]
 8009828:	23c8      	movs	r3, #200	; 0xc8
 800982a:	005b      	lsls	r3, r3, #1
 800982c:	429a      	cmp	r2, r3
 800982e:	d001      	beq.n	8009834 <VerifyFlashData+0x8d8>
    return 216;
 8009830:	23d8      	movs	r3, #216	; 0xd8
 8009832:	e047      	b.n	80098c4 <VerifyFlashData+0x968>
  }
  //
  // Index of Last Entry must be 102300 (1023.00)
  //
  if (NewData->AngularOutput.TablePoint[NewData->AngularOutput.TableLength - 1].Point1 != 102300) {  // Index of last entry must be 1023.00
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	23cb      	movs	r3, #203	; 0xcb
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	58d3      	ldr	r3, [r2, r3]
 800983c:	3b01      	subs	r3, #1
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	3365      	adds	r3, #101	; 0x65
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	18d3      	adds	r3, r2, r3
 8009846:	3308      	adds	r3, #8
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a22      	ldr	r2, [pc, #136]	; (80098d4 <VerifyFlashData+0x978>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d001      	beq.n	8009854 <VerifyFlashData+0x8f8>
    return 217;
 8009850:	23d9      	movs	r3, #217	; 0xd9
 8009852:	e037      	b.n	80098c4 <VerifyFlashData+0x968>
  }
  //
  // Indexes must be increasing
  //
  TmpIndex = NewData->AngularOutput.TablePoint[0].Point1;
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	23cc      	movs	r3, #204	; 0xcc
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	58d3      	ldr	r3, [r2, r3]
 800985c:	617b      	str	r3, [r7, #20]
  for (i = 1; i < NewData->AngularOutput.TableLength; i++) {
 800985e:	2301      	movs	r3, #1
 8009860:	613b      	str	r3, [r7, #16]
 8009862:	e016      	b.n	8009892 <VerifyFlashData+0x936>
    if (NewData->AngularOutput.TablePoint[i].Point1 <= TmpIndex) {
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	3365      	adds	r3, #101	; 0x65
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	18d3      	adds	r3, r2, r3
 800986e:	3308      	adds	r3, #8
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	429a      	cmp	r2, r3
 8009876:	db01      	blt.n	800987c <VerifyFlashData+0x920>
      return 218;
 8009878:	23da      	movs	r3, #218	; 0xda
 800987a:	e023      	b.n	80098c4 <VerifyFlashData+0x968>
    }
    TmpIndex = NewData->AngularOutput.TablePoint[i].Point1;
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	3365      	adds	r3, #101	; 0x65
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	18d3      	adds	r3, r2, r3
 8009886:	3308      	adds	r3, #8
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	617b      	str	r3, [r7, #20]
  for (i = 1; i < NewData->AngularOutput.TableLength; i++) {
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	3301      	adds	r3, #1
 8009890:	613b      	str	r3, [r7, #16]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	23cb      	movs	r3, #203	; 0xcb
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	58d3      	ldr	r3, [r2, r3]
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	429a      	cmp	r2, r3
 800989e:	dbe1      	blt.n	8009864 <VerifyFlashData+0x908>
  }

  NewData->Version = FLASH_VERSION;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a0e      	ldr	r2, [pc, #56]	; (80098dc <VerifyFlashData+0x980>)
 80098a4:	490e      	ldr	r1, [pc, #56]	; (80098e0 <VerifyFlashData+0x984>)
 80098a6:	5299      	strh	r1, [r3, r2]
  NewData->Crc16 = CalcCrc16Array((uint8_t *)NewData, 2046);
 80098a8:	4a0e      	ldr	r2, [pc, #56]	; (80098e4 <VerifyFlashData+0x988>)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	0011      	movs	r1, r2
 80098ae:	0018      	movs	r0, r3
 80098b0:	f7f9 f934 	bl	8002b1c <CalcCrc16Array>
 80098b4:	0003      	movs	r3, r0
 80098b6:	0019      	movs	r1, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a08      	ldr	r2, [pc, #32]	; (80098dc <VerifyFlashData+0x980>)
 80098bc:	189b      	adds	r3, r3, r2
 80098be:	1c0a      	adds	r2, r1, #0
 80098c0:	805a      	strh	r2, [r3, #2]
  return 0;           // No Errors Detected
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	0018      	movs	r0, r3
 80098c6:	46bd      	mov	sp, r7
 80098c8:	b006      	add	sp, #24
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	00000226 	.word	0x00000226
 80098d0:	00001ff0 	.word	0x00001ff0
 80098d4:	00018f9c 	.word	0x00018f9c
 80098d8:	00000227 	.word	0x00000227
 80098dc:	000007fc 	.word	0x000007fc
 80098e0:	00000202 	.word	0x00000202
 80098e4:	000007fe 	.word	0x000007fe

080098e8 <VerifyFactoryData>:
//
// Params:    NewData - Buffer containing the new FactoryConfiguration data written from the host to the MCU
//
// Returns:   Value 0-255 where 0 indicates no errors with new FactoryConfiguration data and > 0 is an error
//
uint8_t VerifyFactoryData(stFactoryConfiguration *NewData) {
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]

    if ((NewData->Calibration33 < 3250) || (NewData->Calibration33 > 3350)) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a58      	ldr	r2, [pc, #352]	; (8009a58 <VerifyFactoryData+0x170>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	dd04      	ble.n	8009904 <VerifyFactoryData+0x1c>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a57      	ldr	r2, [pc, #348]	; (8009a5c <VerifyFactoryData+0x174>)
 8009900:	4293      	cmp	r3, r2
 8009902:	dd01      	ble.n	8009908 <VerifyFactoryData+0x20>
        return 1;
 8009904:	2301      	movs	r3, #1
 8009906:	e0a2      	b.n	8009a4e <VerifyFactoryData+0x166>
    }
    if ((NewData->PowerInputFilteringGain < 1) || (NewData->PowerInputFilteringGain > 16384)) {
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	23fe      	movs	r3, #254	; 0xfe
 800990c:	005b      	lsls	r3, r3, #1
 800990e:	58d3      	ldr	r3, [r2, r3]
 8009910:	2b00      	cmp	r3, #0
 8009912:	dd07      	ble.n	8009924 <VerifyFactoryData+0x3c>
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	23fe      	movs	r3, #254	; 0xfe
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	58d2      	ldr	r2, [r2, r3]
 800991c:	2380      	movs	r3, #128	; 0x80
 800991e:	01db      	lsls	r3, r3, #7
 8009920:	429a      	cmp	r2, r3
 8009922:	dd01      	ble.n	8009928 <VerifyFactoryData+0x40>
        return 2;
 8009924:	2302      	movs	r3, #2
 8009926:	e092      	b.n	8009a4e <VerifyFactoryData+0x166>
    }
    if ((NewData->PowerRail5FilteringGain < 1) || (NewData->PowerRail5FilteringGain > 16384)) {
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	2380      	movs	r3, #128	; 0x80
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	58d3      	ldr	r3, [r2, r3]
 8009930:	2b00      	cmp	r3, #0
 8009932:	dd07      	ble.n	8009944 <VerifyFactoryData+0x5c>
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	2380      	movs	r3, #128	; 0x80
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	58d2      	ldr	r2, [r2, r3]
 800993c:	2380      	movs	r3, #128	; 0x80
 800993e:	01db      	lsls	r3, r3, #7
 8009940:	429a      	cmp	r2, r3
 8009942:	dd01      	ble.n	8009948 <VerifyFactoryData+0x60>
        return 3;
 8009944:	2303      	movs	r3, #3
 8009946:	e082      	b.n	8009a4e <VerifyFactoryData+0x166>
    }
    if ((NewData->TemperatureFilteringGain < 1) || (NewData->TemperatureFilteringGain > 16384)) {
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	2381      	movs	r3, #129	; 0x81
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	58d3      	ldr	r3, [r2, r3]
 8009950:	2b00      	cmp	r3, #0
 8009952:	dd07      	ble.n	8009964 <VerifyFactoryData+0x7c>
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	2381      	movs	r3, #129	; 0x81
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	58d2      	ldr	r2, [r2, r3]
 800995c:	2380      	movs	r3, #128	; 0x80
 800995e:	01db      	lsls	r3, r3, #7
 8009960:	429a      	cmp	r2, r3
 8009962:	dd01      	ble.n	8009968 <VerifyFactoryData+0x80>
        return 4;
 8009964:	2304      	movs	r3, #4
 8009966:	e072      	b.n	8009a4e <VerifyFactoryData+0x166>
    }
    if ((NewData->InternalReferenceFilteringGain < 1) || (NewData->InternalReferenceFilteringGain > 16384)) {
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	2382      	movs	r3, #130	; 0x82
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	58d3      	ldr	r3, [r2, r3]
 8009970:	2b00      	cmp	r3, #0
 8009972:	dd07      	ble.n	8009984 <VerifyFactoryData+0x9c>
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	2382      	movs	r3, #130	; 0x82
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	58d2      	ldr	r2, [r2, r3]
 800997c:	2380      	movs	r3, #128	; 0x80
 800997e:	01db      	lsls	r3, r3, #7
 8009980:	429a      	cmp	r2, r3
 8009982:	dd01      	ble.n	8009988 <VerifyFactoryData+0xa0>
        return 5;
 8009984:	2305      	movs	r3, #5
 8009986:	e062      	b.n	8009a4e <VerifyFactoryData+0x166>
    }
    if ((NewData->RVOutputVoltageFilteringGain < 1) || (NewData->RVOutputVoltageFilteringGain > 16384)) {
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	2383      	movs	r3, #131	; 0x83
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	58d3      	ldr	r3, [r2, r3]
 8009990:	2b00      	cmp	r3, #0
 8009992:	dd07      	ble.n	80099a4 <VerifyFactoryData+0xbc>
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	2383      	movs	r3, #131	; 0x83
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	58d2      	ldr	r2, [r2, r3]
 800999c:	2380      	movs	r3, #128	; 0x80
 800999e:	01db      	lsls	r3, r3, #7
 80099a0:	429a      	cmp	r2, r3
 80099a2:	dd01      	ble.n	80099a8 <VerifyFactoryData+0xc0>
        return 6;
 80099a4:	2306      	movs	r3, #6
 80099a6:	e052      	b.n	8009a4e <VerifyFactoryData+0x166>
    }
    if ((NewData->RVOutputCurrentFilteringGain < 1) || (NewData->RVOutputCurrentFilteringGain > 16384)) {
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	2384      	movs	r3, #132	; 0x84
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	58d3      	ldr	r3, [r2, r3]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	dd07      	ble.n	80099c4 <VerifyFactoryData+0xdc>
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	2384      	movs	r3, #132	; 0x84
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	58d2      	ldr	r2, [r2, r3]
 80099bc:	2380      	movs	r3, #128	; 0x80
 80099be:	01db      	lsls	r3, r3, #7
 80099c0:	429a      	cmp	r2, r3
 80099c2:	dd01      	ble.n	80099c8 <VerifyFactoryData+0xe0>
        return 7;
 80099c4:	2307      	movs	r3, #7
 80099c6:	e042      	b.n	8009a4e <VerifyFactoryData+0x166>
    }
    if ((NewData->KmaKFactor < 1) || (NewData->KmaKFactor > 100000)) {
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	dd04      	ble.n	80099da <VerifyFactoryData+0xf2>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	4a22      	ldr	r2, [pc, #136]	; (8009a60 <VerifyFactoryData+0x178>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	dd01      	ble.n	80099de <VerifyFactoryData+0xf6>
        return 8;
 80099da:	2308      	movs	r3, #8
 80099dc:	e037      	b.n	8009a4e <VerifyFactoryData+0x166>
    }
    if ((NewData->PowerInputKFactor < 1) || (NewData->PowerInputKFactor > 100000)) {
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	dd04      	ble.n	80099f0 <VerifyFactoryData+0x108>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	4a1d      	ldr	r2, [pc, #116]	; (8009a60 <VerifyFactoryData+0x178>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	dd01      	ble.n	80099f4 <VerifyFactoryData+0x10c>
        return 9;
 80099f0:	2309      	movs	r3, #9
 80099f2:	e02c      	b.n	8009a4e <VerifyFactoryData+0x166>
    }
    if ((NewData->PowerRail5KFactor < 1) || (NewData->PowerRail5KFactor > 100000)) {
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	dd04      	ble.n	8009a06 <VerifyFactoryData+0x11e>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	4a17      	ldr	r2, [pc, #92]	; (8009a60 <VerifyFactoryData+0x178>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	dd01      	ble.n	8009a0a <VerifyFactoryData+0x122>
        return 10;
 8009a06:	230a      	movs	r3, #10
 8009a08:	e021      	b.n	8009a4e <VerifyFactoryData+0x166>
    }
    if ((NewData->PwmOutputKFactor < 1) || (NewData->PwmOutputKFactor > 100000)) {
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	dd04      	ble.n	8009a1c <VerifyFactoryData+0x134>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	4a12      	ldr	r2, [pc, #72]	; (8009a60 <VerifyFactoryData+0x178>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	dd01      	ble.n	8009a20 <VerifyFactoryData+0x138>
        return 11;
 8009a1c:	230b      	movs	r3, #11
 8009a1e:	e016      	b.n	8009a4e <VerifyFactoryData+0x166>
    }
    if ((NewData->RVOutputCurrentKFactor < 1) || (NewData->RVOutputCurrentKFactor > 100000)) {
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	dd04      	ble.n	8009a32 <VerifyFactoryData+0x14a>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	4a0c      	ldr	r2, [pc, #48]	; (8009a60 <VerifyFactoryData+0x178>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	dd01      	ble.n	8009a36 <VerifyFactoryData+0x14e>
        return 12;
 8009a32:	230c      	movs	r3, #12
 8009a34:	e00b      	b.n	8009a4e <VerifyFactoryData+0x166>
    }
    if ((NewData->RVOutputVoltageKFactor < 1) || (NewData->RVOutputVoltageKFactor > 100000)) {
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	dd04      	ble.n	8009a48 <VerifyFactoryData+0x160>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	4a07      	ldr	r2, [pc, #28]	; (8009a60 <VerifyFactoryData+0x178>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	dd01      	ble.n	8009a4c <VerifyFactoryData+0x164>
        return 13;
 8009a48:	230d      	movs	r3, #13
 8009a4a:	e000      	b.n	8009a4e <VerifyFactoryData+0x166>
    }
    return 0;           // No Errors Detected
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	0018      	movs	r0, r3
 8009a50:	46bd      	mov	sp, r7
 8009a52:	b002      	add	sp, #8
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	46c0      	nop			; (mov r8, r8)
 8009a58:	00000cb1 	.word	0x00000cb1
 8009a5c:	00000d16 	.word	0x00000d16
 8009a60:	000186a0 	.word	0x000186a0

08009a64 <VerifyFuzzyData>:
// Returns:   None
//
// Requirement(s):
//

int32_t VerifyFuzzyData(stFuzzyPage *NewData) {
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  // TESTING - In development
  NewData->Fuzzy2.Version = FUZZY_VERSION;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a0b      	ldr	r2, [pc, #44]	; (8009a9c <VerifyFuzzyData+0x38>)
 8009a70:	2102      	movs	r1, #2
 8009a72:	31ff      	adds	r1, #255	; 0xff
 8009a74:	5299      	strh	r1, [r3, r2]
  NewData->Fuzzy2.Crc16 = CalcCrc16Array((uint8_t *) NewData, 2046);
 8009a76:	4a0a      	ldr	r2, [pc, #40]	; (8009aa0 <VerifyFuzzyData+0x3c>)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	0011      	movs	r1, r2
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	f7f9 f84d 	bl	8002b1c <CalcCrc16Array>
 8009a82:	0003      	movs	r3, r0
 8009a84:	0019      	movs	r1, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a04      	ldr	r2, [pc, #16]	; (8009a9c <VerifyFuzzyData+0x38>)
 8009a8a:	189b      	adds	r3, r3, r2
 8009a8c:	1c0a      	adds	r2, r1, #0
 8009a8e:	805a      	strh	r2, [r3, #2]
  return 0;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	0018      	movs	r0, r3
 8009a94:	46bd      	mov	sp, r7
 8009a96:	b002      	add	sp, #8
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	46c0      	nop			; (mov r8, r8)
 8009a9c:	000007fc 	.word	0x000007fc
 8009aa0:	000007fe 	.word	0x000007fe

08009aa4 <ProcessSerialMessage>:
//
// Returns:   None
//
// Requirement(s):
//
void ProcessSerialMessage(stSerial *SerialStruct) {
 8009aa4:	b5b0      	push	{r4, r5, r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]

  uint16_t BlockNo, FlashIndex;
  uint8_t *BytePointer, VerifyResults;

  ExecutionStart(EXECUTION_PROCESS_SERIAL_MESSAGE); //
 8009aac:	200b      	movs	r0, #11
 8009aae:	f7fa fdad 	bl	800460c <ExecutionStart>
  //
  // If a Message is received, then reset  RS485Timer to prevent messages from being sent.
  //
  if (SerialStruct == &SerialUsart1) {
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	4bd4      	ldr	r3, [pc, #848]	; (8009e08 <ProcessSerialMessage+0x364>)
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d10b      	bne.n	8009ad2 <ProcessSerialMessage+0x2e>
    RS485Timer = FlashConfiguration->RS485MessageTime * 100;
 8009aba:	4bd4      	ldr	r3, [pc, #848]	; (8009e0c <ProcessSerialMessage+0x368>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4ad4      	ldr	r2, [pc, #848]	; (8009e10 <ProcessSerialMessage+0x36c>)
 8009ac0:	5a9b      	ldrh	r3, [r3, r2]
 8009ac2:	041b      	lsls	r3, r3, #16
 8009ac4:	0d5b      	lsrs	r3, r3, #21
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	001a      	movs	r2, r3
 8009aca:	2364      	movs	r3, #100	; 0x64
 8009acc:	435a      	muls	r2, r3
 8009ace:	4bd1      	ldr	r3, [pc, #836]	; (8009e14 <ProcessSerialMessage+0x370>)
 8009ad0:	601a      	str	r2, [r3, #0]
  }
  //
  // If a Message is received, then reset RxMEssageTimeout.  This will prevent DIGIO1 from switching to NormalMode
  //
  if (SerialStruct == &SerialUsart2) {
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	4bd0      	ldr	r3, [pc, #832]	; (8009e18 <ProcessSerialMessage+0x374>)
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d104      	bne.n	8009ae4 <ProcessSerialMessage+0x40>
      SerialStruct->RxMessageTimeout = 0;
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	2388      	movs	r3, #136	; 0x88
 8009ade:	005b      	lsls	r3, r3, #1
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	52d1      	strh	r1, [r2, r3]
  }
  //
  //  Write FlashConfiguration Data
  //
  if (SerialStruct->Command == 0x11) {
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	238a      	movs	r3, #138	; 0x8a
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	5cd3      	ldrb	r3, [r2, r3]
 8009aec:	2b11      	cmp	r3, #17
 8009aee:	d16b      	bne.n	8009bc8 <ProcessSerialMessage+0x124>
    if (SerialStruct->Length == 2048) {
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	238b      	movs	r3, #139	; 0x8b
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	5ad2      	ldrh	r2, [r2, r3]
 8009af8:	2380      	movs	r3, #128	; 0x80
 8009afa:	011b      	lsls	r3, r3, #4
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d163      	bne.n	8009bc8 <ProcessSerialMessage+0x124>
      VerifyResults = VerifyFlashData((stFlashConfiguration *)&SerialBuffer.ByWord[0]);
 8009b00:	2517      	movs	r5, #23
 8009b02:	197c      	adds	r4, r7, r5
 8009b04:	4bc5      	ldr	r3, [pc, #788]	; (8009e1c <ProcessSerialMessage+0x378>)
 8009b06:	0018      	movs	r0, r3
 8009b08:	f7ff fa28 	bl	8008f5c <VerifyFlashData>
 8009b0c:	0003      	movs	r3, r0
 8009b0e:	7023      	strb	r3, [r4, #0]
      if (VerifyResults == 0) {
 8009b10:	197b      	adds	r3, r7, r5
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d142      	bne.n	8009b9e <ProcessSerialMessage+0xfa>
        LogEvent(EVENT_MESSAGE_ID_4, 0, 0);
 8009b18:	2200      	movs	r2, #0
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	2004      	movs	r0, #4
 8009b1e:	f7fe f8a3 	bl	8007c68 <LogEvent>
        ReflashTuningParameters(62, &SerialBuffer.ByWord[0]);
 8009b22:	4bbe      	ldr	r3, [pc, #760]	; (8009e1c <ProcessSerialMessage+0x378>)
 8009b24:	0019      	movs	r1, r3
 8009b26:	203e      	movs	r0, #62	; 0x3e
 8009b28:	f7fe fe0c 	bl	8008744 <ReflashTuningParameters>
        CalculatedCrc.FlashConfiguration = CalcCrc16Array((uint8_t *)FlashConfiguration, 2046);
 8009b2c:	4bb7      	ldr	r3, [pc, #732]	; (8009e0c <ProcessSerialMessage+0x368>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4abb      	ldr	r2, [pc, #748]	; (8009e20 <ProcessSerialMessage+0x37c>)
 8009b32:	0011      	movs	r1, r2
 8009b34:	0018      	movs	r0, r3
 8009b36:	f7f8 fff1 	bl	8002b1c <CalcCrc16Array>
 8009b3a:	0003      	movs	r3, r0
 8009b3c:	001a      	movs	r2, r3
 8009b3e:	4bb9      	ldr	r3, [pc, #740]	; (8009e24 <ProcessSerialMessage+0x380>)
 8009b40:	805a      	strh	r2, [r3, #2]
        SysVars.SensorLetter = FlashConfiguration->SensorMode;
 8009b42:	4bb2      	ldr	r3, [pc, #712]	; (8009e0c <ProcessSerialMessage+0x368>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4ab8      	ldr	r2, [pc, #736]	; (8009e28 <ProcessSerialMessage+0x384>)
 8009b48:	5c9b      	ldrb	r3, [r3, r2]
 8009b4a:	07db      	lsls	r3, r3, #31
 8009b4c:	0fdb      	lsrs	r3, r3, #31
 8009b4e:	b2d9      	uxtb	r1, r3
 8009b50:	4bb6      	ldr	r3, [pc, #728]	; (8009e2c <ProcessSerialMessage+0x388>)
 8009b52:	22e4      	movs	r2, #228	; 0xe4
 8009b54:	2001      	movs	r0, #1
 8009b56:	4001      	ands	r1, r0
 8009b58:	000c      	movs	r4, r1
 8009b5a:	5c99      	ldrb	r1, [r3, r2]
 8009b5c:	2001      	movs	r0, #1
 8009b5e:	4381      	bics	r1, r0
 8009b60:	1c08      	adds	r0, r1, #0
 8009b62:	1c21      	adds	r1, r4, #0
 8009b64:	4301      	orrs	r1, r0
 8009b66:	5499      	strb	r1, [r3, r2]
        bFlashConfigurationValid = (FlashConfiguration->Crc16 == CalculatedCrc.FlashConfiguration);
 8009b68:	4ba8      	ldr	r3, [pc, #672]	; (8009e0c <ProcessSerialMessage+0x368>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4aac      	ldr	r2, [pc, #688]	; (8009e20 <ProcessSerialMessage+0x37c>)
 8009b6e:	5a9a      	ldrh	r2, [r3, r2]
 8009b70:	4bac      	ldr	r3, [pc, #688]	; (8009e24 <ProcessSerialMessage+0x380>)
 8009b72:	885b      	ldrh	r3, [r3, #2]
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	425a      	negs	r2, r3
 8009b78:	4153      	adcs	r3, r2
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	001a      	movs	r2, r3
 8009b7e:	4bac      	ldr	r3, [pc, #688]	; (8009e30 <ProcessSerialMessage+0x38c>)
 8009b80:	701a      	strb	r2, [r3, #0]
        bLogDefaultProfile = bFlashConfigurationValid; //Only log default profile if flash is valid
 8009b82:	4bab      	ldr	r3, [pc, #684]	; (8009e30 <ProcessSerialMessage+0x38c>)
 8009b84:	781a      	ldrb	r2, [r3, #0]
 8009b86:	4bab      	ldr	r3, [pc, #684]	; (8009e34 <ProcessSerialMessage+0x390>)
 8009b88:	701a      	strb	r2, [r3, #0]
        InitializeDigitalIO(DIG_Mode);
 8009b8a:	4bab      	ldr	r3, [pc, #684]	; (8009e38 <ProcessSerialMessage+0x394>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	b25b      	sxtb	r3, r3
 8009b90:	0018      	movs	r0, r3
 8009b92:	f7fa fa7b 	bl	800408c <InitializeDigitalIO>
        InitializeAccel();
 8009b96:	f7f6 fdfd 	bl	8000794 <InitializeAccel>
        MX_CAN_Init(); // Initalize CAN in case addresses or prescaler changes
 8009b9a:	f7f8 ff23 	bl	80029e4 <MX_CAN_Init>



      }
      SerialStruct->Command = 0x11;
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	238a      	movs	r3, #138	; 0x8a
 8009ba2:	005b      	lsls	r3, r3, #1
 8009ba4:	2111      	movs	r1, #17
 8009ba6:	54d1      	strb	r1, [r2, r3]
      SerialStruct->Length = 1;
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	238b      	movs	r3, #139	; 0x8b
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	2101      	movs	r1, #1
 8009bb0:	52d1      	strh	r1, [r2, r3]
      SerialStruct->Data[9] = VerifyResults;
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	2317      	movs	r3, #23
 8009bb6:	18f9      	adds	r1, r7, r3
 8009bb8:	2322      	movs	r3, #34	; 0x22
 8009bba:	33ff      	adds	r3, #255	; 0xff
 8009bbc:	7809      	ldrb	r1, [r1, #0]
 8009bbe:	54d1      	strb	r1, [r2, r3]
      SerialSend(SerialStruct);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	f7ff f902 	bl	8008dcc <SerialSend>
    }
  }
  //
  // Write FactoryConfiguration Data
  //
  if (SerialStruct->Command == 0x12) {
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	238a      	movs	r3, #138	; 0x8a
 8009bcc:	005b      	lsls	r3, r3, #1
 8009bce:	5cd3      	ldrb	r3, [r2, r3]
 8009bd0:	2b12      	cmp	r3, #18
 8009bd2:	d14a      	bne.n	8009c6a <ProcessSerialMessage+0x1c6>
    if (SerialStruct->Length == 2048) {
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	238b      	movs	r3, #139	; 0x8b
 8009bd8:	005b      	lsls	r3, r3, #1
 8009bda:	5ad2      	ldrh	r2, [r2, r3]
 8009bdc:	2380      	movs	r3, #128	; 0x80
 8009bde:	011b      	lsls	r3, r3, #4
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d142      	bne.n	8009c6a <ProcessSerialMessage+0x1c6>
      VerifyResults = VerifyFactoryData((stFactoryConfiguration *)&SerialBuffer.ByWord[0]);
 8009be4:	2517      	movs	r5, #23
 8009be6:	197c      	adds	r4, r7, r5
 8009be8:	4b8c      	ldr	r3, [pc, #560]	; (8009e1c <ProcessSerialMessage+0x378>)
 8009bea:	0018      	movs	r0, r3
 8009bec:	f7ff fe7c 	bl	80098e8 <VerifyFactoryData>
 8009bf0:	0003      	movs	r3, r0
 8009bf2:	7023      	strb	r3, [r4, #0]
      if (VerifyResults == 0) {
 8009bf4:	197b      	adds	r3, r7, r5
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d121      	bne.n	8009c40 <ProcessSerialMessage+0x19c>
        LogEvent(EVENT_MESSAGE_ID_5, 0, 0);
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2100      	movs	r1, #0
 8009c00:	2005      	movs	r0, #5
 8009c02:	f7fe f831 	bl	8007c68 <LogEvent>
        ReflashTuningParameters(63, &SerialBuffer.ByWord[0]);
 8009c06:	4b85      	ldr	r3, [pc, #532]	; (8009e1c <ProcessSerialMessage+0x378>)
 8009c08:	0019      	movs	r1, r3
 8009c0a:	203f      	movs	r0, #63	; 0x3f
 8009c0c:	f7fe fd9a 	bl	8008744 <ReflashTuningParameters>
        CalculatedCrc.FactoryConfiguration = CalcCrc16Array((uint8_t *)FactoryConfiguration, 2046);
 8009c10:	4b8a      	ldr	r3, [pc, #552]	; (8009e3c <ProcessSerialMessage+0x398>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a82      	ldr	r2, [pc, #520]	; (8009e20 <ProcessSerialMessage+0x37c>)
 8009c16:	0011      	movs	r1, r2
 8009c18:	0018      	movs	r0, r3
 8009c1a:	f7f8 ff7f 	bl	8002b1c <CalcCrc16Array>
 8009c1e:	0003      	movs	r3, r0
 8009c20:	001a      	movs	r2, r3
 8009c22:	4b80      	ldr	r3, [pc, #512]	; (8009e24 <ProcessSerialMessage+0x380>)
 8009c24:	809a      	strh	r2, [r3, #4]
        bFactoryConfigurationValid = (FactoryConfiguration->Crc16 == CalculatedCrc.FactoryConfiguration);
 8009c26:	4b85      	ldr	r3, [pc, #532]	; (8009e3c <ProcessSerialMessage+0x398>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a7d      	ldr	r2, [pc, #500]	; (8009e20 <ProcessSerialMessage+0x37c>)
 8009c2c:	5a9a      	ldrh	r2, [r3, r2]
 8009c2e:	4b7d      	ldr	r3, [pc, #500]	; (8009e24 <ProcessSerialMessage+0x380>)
 8009c30:	889b      	ldrh	r3, [r3, #4]
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	425a      	negs	r2, r3
 8009c36:	4153      	adcs	r3, r2
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	001a      	movs	r2, r3
 8009c3c:	4b80      	ldr	r3, [pc, #512]	; (8009e40 <ProcessSerialMessage+0x39c>)
 8009c3e:	701a      	strb	r2, [r3, #0]
      }
      SerialStruct->Command = 0x12;
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	238a      	movs	r3, #138	; 0x8a
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	2112      	movs	r1, #18
 8009c48:	54d1      	strb	r1, [r2, r3]
      SerialStruct->Length = 1;
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	238b      	movs	r3, #139	; 0x8b
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	2101      	movs	r1, #1
 8009c52:	52d1      	strh	r1, [r2, r3]
      SerialStruct->Data[9] = VerifyResults;
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	2317      	movs	r3, #23
 8009c58:	18f9      	adds	r1, r7, r3
 8009c5a:	2322      	movs	r3, #34	; 0x22
 8009c5c:	33ff      	adds	r3, #255	; 0xff
 8009c5e:	7809      	ldrb	r1, [r1, #0]
 8009c60:	54d1      	strb	r1, [r2, r3]
      SerialSend(SerialStruct);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	0018      	movs	r0, r3
 8009c66:	f7ff f8b1 	bl	8008dcc <SerialSend>
    }
  }
  //
  // Write Fuzzy Logic Compensation Data
  //
  if (SerialStruct->Command == 0x13) {
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	238a      	movs	r3, #138	; 0x8a
 8009c6e:	005b      	lsls	r3, r3, #1
 8009c70:	5cd3      	ldrb	r3, [r2, r3]
 8009c72:	2b13      	cmp	r3, #19
 8009c74:	d145      	bne.n	8009d02 <ProcessSerialMessage+0x25e>
    if (SerialStruct->Length == 2048) {
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	238b      	movs	r3, #139	; 0x8b
 8009c7a:	005b      	lsls	r3, r3, #1
 8009c7c:	5ad2      	ldrh	r2, [r2, r3]
 8009c7e:	2380      	movs	r3, #128	; 0x80
 8009c80:	011b      	lsls	r3, r3, #4
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d13d      	bne.n	8009d02 <ProcessSerialMessage+0x25e>
      VerifyResults = VerifyFuzzyData((stFuzzyPage *)&SerialBuffer.ByWord[0]);
 8009c86:	4b65      	ldr	r3, [pc, #404]	; (8009e1c <ProcessSerialMessage+0x378>)
 8009c88:	0018      	movs	r0, r3
 8009c8a:	f7ff feeb 	bl	8009a64 <VerifyFuzzyData>
 8009c8e:	0002      	movs	r2, r0
 8009c90:	2117      	movs	r1, #23
 8009c92:	187b      	adds	r3, r7, r1
 8009c94:	701a      	strb	r2, [r3, #0]
      if (VerifyResults == 0) {
 8009c96:	187b      	adds	r3, r7, r1
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d11c      	bne.n	8009cd8 <ProcessSerialMessage+0x234>
        LogEvent(EVENT_MESSAGE_ID_6, 0, 0);
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	2006      	movs	r0, #6
 8009ca4:	f7fd ffe0 	bl	8007c68 <LogEvent>
        ReflashTuningParameters(61, &SerialBuffer.ByWord[0]);
 8009ca8:	4b5c      	ldr	r3, [pc, #368]	; (8009e1c <ProcessSerialMessage+0x378>)
 8009caa:	0019      	movs	r1, r3
 8009cac:	203d      	movs	r0, #61	; 0x3d
 8009cae:	f7fe fd49 	bl	8008744 <ReflashTuningParameters>
        bFuzzyPageValid = (FuzzyPage->Fuzzy2.Crc16 == CalcCrc16Array((uint8_t *)FuzzyPage, 2046));
 8009cb2:	4b64      	ldr	r3, [pc, #400]	; (8009e44 <ProcessSerialMessage+0x3a0>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a5a      	ldr	r2, [pc, #360]	; (8009e20 <ProcessSerialMessage+0x37c>)
 8009cb8:	5a9c      	ldrh	r4, [r3, r2]
 8009cba:	4b62      	ldr	r3, [pc, #392]	; (8009e44 <ProcessSerialMessage+0x3a0>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a58      	ldr	r2, [pc, #352]	; (8009e20 <ProcessSerialMessage+0x37c>)
 8009cc0:	0011      	movs	r1, r2
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	f7f8 ff2a 	bl	8002b1c <CalcCrc16Array>
 8009cc8:	0003      	movs	r3, r0
 8009cca:	1ae3      	subs	r3, r4, r3
 8009ccc:	425a      	negs	r2, r3
 8009cce:	4153      	adcs	r3, r2
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	001a      	movs	r2, r3
 8009cd4:	4b5c      	ldr	r3, [pc, #368]	; (8009e48 <ProcessSerialMessage+0x3a4>)
 8009cd6:	701a      	strb	r2, [r3, #0]

      }
      SerialStruct->Command = 0x13;
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	238a      	movs	r3, #138	; 0x8a
 8009cdc:	005b      	lsls	r3, r3, #1
 8009cde:	2113      	movs	r1, #19
 8009ce0:	54d1      	strb	r1, [r2, r3]
      SerialStruct->Length = 1;
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	238b      	movs	r3, #139	; 0x8b
 8009ce6:	005b      	lsls	r3, r3, #1
 8009ce8:	2101      	movs	r1, #1
 8009cea:	52d1      	strh	r1, [r2, r3]
      SerialStruct->Data[9] = VerifyResults;
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	2317      	movs	r3, #23
 8009cf0:	18f9      	adds	r1, r7, r3
 8009cf2:	2322      	movs	r3, #34	; 0x22
 8009cf4:	33ff      	adds	r3, #255	; 0xff
 8009cf6:	7809      	ldrb	r1, [r1, #0]
 8009cf8:	54d1      	strb	r1, [r2, r3]
      SerialSend(SerialStruct);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	0018      	movs	r0, r3
 8009cfe:	f7ff f865 	bl	8008dcc <SerialSend>
    }
  }
  //
  // Clear Event Log
  //
  if (SerialStruct->Command == 0x14) {
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	238a      	movs	r3, #138	; 0x8a
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	5cd3      	ldrb	r3, [r2, r3]
 8009d0a:	2b14      	cmp	r3, #20
 8009d0c:	d111      	bne.n	8009d32 <ProcessSerialMessage+0x28e>
    if (SerialStruct->Length == 0) {
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	238b      	movs	r3, #139	; 0x8b
 8009d12:	005b      	lsls	r3, r3, #1
 8009d14:	5ad3      	ldrh	r3, [r2, r3]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10b      	bne.n	8009d32 <ProcessSerialMessage+0x28e>
      bClearEventLog = 1;
 8009d1a:	4b4c      	ldr	r3, [pc, #304]	; (8009e4c <ProcessSerialMessage+0x3a8>)
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	701a      	strb	r2, [r3, #0]
      SerialStruct->Length = 0;
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	238b      	movs	r3, #139	; 0x8b
 8009d24:	005b      	lsls	r3, r3, #1
 8009d26:	2100      	movs	r1, #0
 8009d28:	52d1      	strh	r1, [r2, r3]
      SerialSend(SerialStruct);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	0018      	movs	r0, r3
 8009d2e:	f7ff f84d 	bl	8008dcc <SerialSend>
    }
  }
  //
  // Read FlashConfiguration Data
  //
  if (SerialStruct->Command == 0x41) {
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	238a      	movs	r3, #138	; 0x8a
 8009d36:	005b      	lsls	r3, r3, #1
 8009d38:	5cd3      	ldrb	r3, [r2, r3]
 8009d3a:	2b41      	cmp	r3, #65	; 0x41
 8009d3c:	d12e      	bne.n	8009d9c <ProcessSerialMessage+0x2f8>
    if (SerialStruct->Length == 1) {
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	238b      	movs	r3, #139	; 0x8b
 8009d42:	005b      	lsls	r3, r3, #1
 8009d44:	5ad3      	ldrh	r3, [r2, r3]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d128      	bne.n	8009d9c <ProcessSerialMessage+0x2f8>
      FlashIndex = SerialStruct->Data[0];
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	238c      	movs	r3, #140	; 0x8c
 8009d4e:	005b      	lsls	r3, r3, #1
 8009d50:	5cd2      	ldrb	r2, [r2, r3]
 8009d52:	2414      	movs	r4, #20
 8009d54:	193b      	adds	r3, r7, r4
 8009d56:	801a      	strh	r2, [r3, #0]
      SerialStruct->Data[9] = FlashIndex;
 8009d58:	193b      	adds	r3, r7, r4
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	b2d9      	uxtb	r1, r3
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	2322      	movs	r3, #34	; 0x22
 8009d62:	33ff      	adds	r3, #255	; 0xff
 8009d64:	54d1      	strb	r1, [r2, r3]
      BytePointer = (uint8_t *)FlashConfiguration;
 8009d66:	4b29      	ldr	r3, [pc, #164]	; (8009e0c <ProcessSerialMessage+0x368>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	613b      	str	r3, [r7, #16]
      memmove(&SerialStruct->Data[10], &BytePointer[FlashIndex * 512], 512);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3323      	adds	r3, #35	; 0x23
 8009d70:	33ff      	adds	r3, #255	; 0xff
 8009d72:	0018      	movs	r0, r3
 8009d74:	193b      	adds	r3, r7, r4
 8009d76:	881b      	ldrh	r3, [r3, #0]
 8009d78:	025b      	lsls	r3, r3, #9
 8009d7a:	001a      	movs	r2, r3
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	1899      	adds	r1, r3, r2
 8009d80:	2380      	movs	r3, #128	; 0x80
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	001a      	movs	r2, r3
 8009d86:	f002 fcc2 	bl	800c70e <memmove>
      SerialStruct->Length = 513;
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	238b      	movs	r3, #139	; 0x8b
 8009d8e:	005b      	lsls	r3, r3, #1
 8009d90:	492f      	ldr	r1, [pc, #188]	; (8009e50 <ProcessSerialMessage+0x3ac>)
 8009d92:	52d1      	strh	r1, [r2, r3]
      SerialSend(SerialStruct);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	0018      	movs	r0, r3
 8009d98:	f7ff f818 	bl	8008dcc <SerialSend>
    }
  }
  //
  // Read FactoryConfiguration Data
  //
  if (SerialStruct->Command == 0x42) {
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	238a      	movs	r3, #138	; 0x8a
 8009da0:	005b      	lsls	r3, r3, #1
 8009da2:	5cd3      	ldrb	r3, [r2, r3]
 8009da4:	2b42      	cmp	r3, #66	; 0x42
 8009da6:	d155      	bne.n	8009e54 <ProcessSerialMessage+0x3b0>
    if (SerialStruct->Length == 1) {
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	238b      	movs	r3, #139	; 0x8b
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	5ad3      	ldrh	r3, [r2, r3]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d14f      	bne.n	8009e54 <ProcessSerialMessage+0x3b0>
      FlashIndex = SerialStruct->Data[0];
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	238c      	movs	r3, #140	; 0x8c
 8009db8:	005b      	lsls	r3, r3, #1
 8009dba:	5cd2      	ldrb	r2, [r2, r3]
 8009dbc:	2414      	movs	r4, #20
 8009dbe:	193b      	adds	r3, r7, r4
 8009dc0:	801a      	strh	r2, [r3, #0]
      SerialStruct->Data[9] = FlashIndex;
 8009dc2:	193b      	adds	r3, r7, r4
 8009dc4:	881b      	ldrh	r3, [r3, #0]
 8009dc6:	b2d9      	uxtb	r1, r3
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	2322      	movs	r3, #34	; 0x22
 8009dcc:	33ff      	adds	r3, #255	; 0xff
 8009dce:	54d1      	strb	r1, [r2, r3]
      BytePointer = (uint8_t *)FactoryConfiguration;
 8009dd0:	4b1a      	ldr	r3, [pc, #104]	; (8009e3c <ProcessSerialMessage+0x398>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	613b      	str	r3, [r7, #16]
      memmove(&SerialStruct->Data[10], &BytePointer[FlashIndex * 512], 512);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	3323      	adds	r3, #35	; 0x23
 8009dda:	33ff      	adds	r3, #255	; 0xff
 8009ddc:	0018      	movs	r0, r3
 8009dde:	193b      	adds	r3, r7, r4
 8009de0:	881b      	ldrh	r3, [r3, #0]
 8009de2:	025b      	lsls	r3, r3, #9
 8009de4:	001a      	movs	r2, r3
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	1899      	adds	r1, r3, r2
 8009dea:	2380      	movs	r3, #128	; 0x80
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	001a      	movs	r2, r3
 8009df0:	f002 fc8d 	bl	800c70e <memmove>
      SerialStruct->Length = 513;
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	238b      	movs	r3, #139	; 0x8b
 8009df8:	005b      	lsls	r3, r3, #1
 8009dfa:	4915      	ldr	r1, [pc, #84]	; (8009e50 <ProcessSerialMessage+0x3ac>)
 8009dfc:	52d1      	strh	r1, [r2, r3]
      SerialSend(SerialStruct);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	0018      	movs	r0, r3
 8009e02:	f7fe ffe3 	bl	8008dcc <SerialSend>
 8009e06:	e025      	b.n	8009e54 <ProcessSerialMessage+0x3b0>
 8009e08:	20001588 	.word	0x20001588
 8009e0c:	20002f04 	.word	0x20002f04
 8009e10:	00000474 	.word	0x00000474
 8009e14:	20000ae0 	.word	0x20000ae0
 8009e18:	200018b4 	.word	0x200018b4
 8009e1c:	20002fa8 	.word	0x20002fa8
 8009e20:	000007fe 	.word	0x000007fe
 8009e24:	20000b18 	.word	0x20000b18
 8009e28:	00000225 	.word	0x00000225
 8009e2c:	200020c0 	.word	0x200020c0
 8009e30:	20002cf6 	.word	0x20002cf6
 8009e34:	200037b4 	.word	0x200037b4
 8009e38:	200037e0 	.word	0x200037e0
 8009e3c:	20001eec 	.word	0x20001eec
 8009e40:	20002f9e 	.word	0x20002f9e
 8009e44:	20002f2c 	.word	0x20002f2c
 8009e48:	20002cf5 	.word	0x20002cf5
 8009e4c:	20001c55 	.word	0x20001c55
 8009e50:	00000201 	.word	0x00000201
    }
  }
  //
  // Read Fuzzy Logic Data
  //
  if (SerialStruct->Command == 0x43) {
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	238a      	movs	r3, #138	; 0x8a
 8009e58:	005b      	lsls	r3, r3, #1
 8009e5a:	5cd3      	ldrb	r3, [r2, r3]
 8009e5c:	2b43      	cmp	r3, #67	; 0x43
 8009e5e:	d12e      	bne.n	8009ebe <ProcessSerialMessage+0x41a>
    if (SerialStruct->Length == 1) {
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	238b      	movs	r3, #139	; 0x8b
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	5ad3      	ldrh	r3, [r2, r3]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d128      	bne.n	8009ebe <ProcessSerialMessage+0x41a>
      FlashIndex = SerialStruct->Data[0];
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	238c      	movs	r3, #140	; 0x8c
 8009e70:	005b      	lsls	r3, r3, #1
 8009e72:	5cd2      	ldrb	r2, [r2, r3]
 8009e74:	2414      	movs	r4, #20
 8009e76:	193b      	adds	r3, r7, r4
 8009e78:	801a      	strh	r2, [r3, #0]
      SerialStruct->Data[9] = FlashIndex;
 8009e7a:	193b      	adds	r3, r7, r4
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	b2d9      	uxtb	r1, r3
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	2322      	movs	r3, #34	; 0x22
 8009e84:	33ff      	adds	r3, #255	; 0xff
 8009e86:	54d1      	strb	r1, [r2, r3]
      BytePointer = (uint8_t *)FuzzyPage;
 8009e88:	4b48      	ldr	r3, [pc, #288]	; (8009fac <ProcessSerialMessage+0x508>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	613b      	str	r3, [r7, #16]
      memmove(&SerialStruct->Data[10], &BytePointer[FlashIndex * 512], 512);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	3323      	adds	r3, #35	; 0x23
 8009e92:	33ff      	adds	r3, #255	; 0xff
 8009e94:	0018      	movs	r0, r3
 8009e96:	193b      	adds	r3, r7, r4
 8009e98:	881b      	ldrh	r3, [r3, #0]
 8009e9a:	025b      	lsls	r3, r3, #9
 8009e9c:	001a      	movs	r2, r3
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	1899      	adds	r1, r3, r2
 8009ea2:	2380      	movs	r3, #128	; 0x80
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	001a      	movs	r2, r3
 8009ea8:	f002 fc31 	bl	800c70e <memmove>
      SerialStruct->Length = 513;
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	238b      	movs	r3, #139	; 0x8b
 8009eb0:	005b      	lsls	r3, r3, #1
 8009eb2:	493f      	ldr	r1, [pc, #252]	; (8009fb0 <ProcessSerialMessage+0x50c>)
 8009eb4:	52d1      	strh	r1, [r2, r3]
      SerialSend(SerialStruct);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	0018      	movs	r0, r3
 8009eba:	f7fe ff87 	bl	8008dcc <SerialSend>
    }
  }
    //
    // Read Event Log Partition  32K - 110 blocks of 256 bytes each
    //
  if (SerialStruct->Command == 0x44) {
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	238a      	movs	r3, #138	; 0x8a
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	5cd3      	ldrb	r3, [r2, r3]
 8009ec6:	2b44      	cmp	r3, #68	; 0x44
 8009ec8:	d000      	beq.n	8009ecc <ProcessSerialMessage+0x428>
 8009eca:	e080      	b.n	8009fce <ProcessSerialMessage+0x52a>
    if ((SerialStruct->Length == 2) && (!bClearEventLog) && (I2C2Control.Mode == I2C_MODE_IDLE)) {
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	238b      	movs	r3, #139	; 0x8b
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	5ad3      	ldrh	r3, [r2, r3]
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d171      	bne.n	8009fbc <ProcessSerialMessage+0x518>
 8009ed8:	4b36      	ldr	r3, [pc, #216]	; (8009fb4 <ProcessSerialMessage+0x510>)
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d16d      	bne.n	8009fbc <ProcessSerialMessage+0x518>
 8009ee0:	4b35      	ldr	r3, [pc, #212]	; (8009fb8 <ProcessSerialMessage+0x514>)
 8009ee2:	7a5b      	ldrb	r3, [r3, #9]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d169      	bne.n	8009fbc <ProcessSerialMessage+0x518>
      BlockNo = SerialStruct->Data[0] + ((uint16_t)SerialStruct->Data[1] << 8);
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	238c      	movs	r3, #140	; 0x8c
 8009eec:	005b      	lsls	r3, r3, #1
 8009eee:	5cd3      	ldrb	r3, [r2, r3]
 8009ef0:	b299      	uxth	r1, r3
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	231a      	movs	r3, #26
 8009ef6:	33ff      	adds	r3, #255	; 0xff
 8009ef8:	5cd3      	ldrb	r3, [r2, r3]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	021b      	lsls	r3, r3, #8
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	200e      	movs	r0, #14
 8009f02:	183b      	adds	r3, r7, r0
 8009f04:	188a      	adds	r2, r1, r2
 8009f06:	801a      	strh	r2, [r3, #0]
      SerialStruct->Data[9] = SerialStruct->Data[0];                               // Block Count, 0 to 127
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	238c      	movs	r3, #140	; 0x8c
 8009f0c:	005b      	lsls	r3, r3, #1
 8009f0e:	5cd1      	ldrb	r1, [r2, r3]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	2322      	movs	r3, #34	; 0x22
 8009f14:	33ff      	adds	r3, #255	; 0xff
 8009f16:	54d1      	strb	r1, [r2, r3]
      SerialStruct->Data[10] = SerialStruct->Data[1];                               // Block Count, 0 to 127
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	231a      	movs	r3, #26
 8009f1c:	33ff      	adds	r3, #255	; 0xff
 8009f1e:	5cd1      	ldrb	r1, [r2, r3]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	2391      	movs	r3, #145	; 0x91
 8009f24:	005b      	lsls	r3, r3, #1
 8009f26:	54d1      	strb	r1, [r2, r3]
      I2C2Control.Address = EEPROM_EVENT_DATA_OFFSET + (256 * BlockNo);           // Read 128 bytes from EEPROM
 8009f28:	183b      	adds	r3, r7, r0
 8009f2a:	881b      	ldrh	r3, [r3, #0]
 8009f2c:	021b      	lsls	r3, r3, #8
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	4b21      	ldr	r3, [pc, #132]	; (8009fb8 <ProcessSerialMessage+0x514>)
 8009f32:	809a      	strh	r2, [r3, #4]
      I2C2Control.Length = 128;
 8009f34:	4b20      	ldr	r3, [pc, #128]	; (8009fb8 <ProcessSerialMessage+0x514>)
 8009f36:	2280      	movs	r2, #128	; 0x80
 8009f38:	80da      	strh	r2, [r3, #6]
      I2C2Control.Buffer = &SerialStruct->Data[11];
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	3324      	adds	r3, #36	; 0x24
 8009f3e:	33ff      	adds	r3, #255	; 0xff
 8009f40:	001a      	movs	r2, r3
 8009f42:	4b1d      	ldr	r3, [pc, #116]	; (8009fb8 <ProcessSerialMessage+0x514>)
 8009f44:	601a      	str	r2, [r3, #0]
      I2C2Control.Mode = I2C_MODE_READ_EEPROM;
 8009f46:	4b1c      	ldr	r3, [pc, #112]	; (8009fb8 <ProcessSerialMessage+0x514>)
 8009f48:	2202      	movs	r2, #2
 8009f4a:	725a      	strb	r2, [r3, #9]
      do {
        ProcessI2C2();
 8009f4c:	f7fc f91a 	bl	8006184 <ProcessI2C2>
      } while (I2C2Control.Mode != I2C_MODE_DONE);
 8009f50:	4b19      	ldr	r3, [pc, #100]	; (8009fb8 <ProcessSerialMessage+0x514>)
 8009f52:	7a5b      	ldrb	r3, [r3, #9]
 8009f54:	2b07      	cmp	r3, #7
 8009f56:	d1f9      	bne.n	8009f4c <ProcessSerialMessage+0x4a8>
      I2C2Control.Address = EEPROM_EVENT_DATA_OFFSET + (256 * BlockNo) + 128;     // Read another 128 bytes from EEPROM
 8009f58:	230e      	movs	r3, #14
 8009f5a:	18fb      	adds	r3, r7, r3
 8009f5c:	881b      	ldrh	r3, [r3, #0]
 8009f5e:	021b      	lsls	r3, r3, #8
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	3380      	adds	r3, #128	; 0x80
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	4b14      	ldr	r3, [pc, #80]	; (8009fb8 <ProcessSerialMessage+0x514>)
 8009f68:	809a      	strh	r2, [r3, #4]
      I2C2Control.Length = 128;
 8009f6a:	4b13      	ldr	r3, [pc, #76]	; (8009fb8 <ProcessSerialMessage+0x514>)
 8009f6c:	2280      	movs	r2, #128	; 0x80
 8009f6e:	80da      	strh	r2, [r3, #6]
      I2C2Control.Buffer = &SerialStruct->Data[11 + 128];
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	33a4      	adds	r3, #164	; 0xa4
 8009f74:	33ff      	adds	r3, #255	; 0xff
 8009f76:	001a      	movs	r2, r3
 8009f78:	4b0f      	ldr	r3, [pc, #60]	; (8009fb8 <ProcessSerialMessage+0x514>)
 8009f7a:	601a      	str	r2, [r3, #0]
      I2C2Control.Mode = I2C_MODE_READ_EEPROM;
 8009f7c:	4b0e      	ldr	r3, [pc, #56]	; (8009fb8 <ProcessSerialMessage+0x514>)
 8009f7e:	2202      	movs	r2, #2
 8009f80:	725a      	strb	r2, [r3, #9]
      do {
          ProcessI2C2();
 8009f82:	f7fc f8ff 	bl	8006184 <ProcessI2C2>
      } while (I2C2Control.Mode != I2C_MODE_DONE);
 8009f86:	4b0c      	ldr	r3, [pc, #48]	; (8009fb8 <ProcessSerialMessage+0x514>)
 8009f88:	7a5b      	ldrb	r3, [r3, #9]
 8009f8a:	2b07      	cmp	r3, #7
 8009f8c:	d1f9      	bne.n	8009f82 <ProcessSerialMessage+0x4de>
      I2C2Control.Mode = I2C_MODE_IDLE;
 8009f8e:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <ProcessSerialMessage+0x514>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	725a      	strb	r2, [r3, #9]
      SerialStruct->Length = 256 + 2;
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	238b      	movs	r3, #139	; 0x8b
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	2181      	movs	r1, #129	; 0x81
 8009f9c:	0049      	lsls	r1, r1, #1
 8009f9e:	52d1      	strh	r1, [r2, r3]
      SerialSend(SerialStruct);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f7fe ff12 	bl	8008dcc <SerialSend>
 8009fa8:	e011      	b.n	8009fce <ProcessSerialMessage+0x52a>
 8009faa:	46c0      	nop			; (mov r8, r8)
 8009fac:	20002f2c 	.word	0x20002f2c
 8009fb0:	00000201 	.word	0x00000201
 8009fb4:	20001c55 	.word	0x20001c55
 8009fb8:	20001c24 	.word	0x20001c24
    }
    else {
      SerialStruct->Length = 0;
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	238b      	movs	r3, #139	; 0x8b
 8009fc0:	005b      	lsls	r3, r3, #1
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	52d1      	strh	r1, [r2, r3]
      SerialSend(SerialStruct);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f7fe feff 	bl	8008dcc <SerialSend>
    }
  }
  //
  // Read Signal Status Information
  //
  if (SerialStruct->Command == 0x48) {
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	238a      	movs	r3, #138	; 0x8a
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	5cd3      	ldrb	r3, [r2, r3]
 8009fd6:	2b48      	cmp	r3, #72	; 0x48
 8009fd8:	d119      	bne.n	800a00e <ProcessSerialMessage+0x56a>
    if (SerialStruct->Length == 0) {
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	238b      	movs	r3, #139	; 0x8b
 8009fde:	005b      	lsls	r3, r3, #1
 8009fe0:	5ad3      	ldrh	r3, [r2, r3]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d113      	bne.n	800a00e <ProcessSerialMessage+0x56a>
      memmove(&SerialStruct->Data[9], &SignalStatus, sizeof(SignalStatus));
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	3322      	adds	r3, #34	; 0x22
 8009fea:	33ff      	adds	r3, #255	; 0xff
 8009fec:	001a      	movs	r2, r3
 8009fee:	4ba8      	ldr	r3, [pc, #672]	; (800a290 <ProcessSerialMessage+0x7ec>)
 8009ff0:	0010      	movs	r0, r2
 8009ff2:	0019      	movs	r1, r3
 8009ff4:	23e0      	movs	r3, #224	; 0xe0
 8009ff6:	001a      	movs	r2, r3
 8009ff8:	f002 fb80 	bl	800c6fc <memcpy>
      SerialStruct->Length = sizeof(SignalStatus);
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	238b      	movs	r3, #139	; 0x8b
 800a000:	005b      	lsls	r3, r3, #1
 800a002:	21e0      	movs	r1, #224	; 0xe0
 800a004:	52d1      	strh	r1, [r2, r3]
      SerialSend(SerialStruct);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	0018      	movs	r0, r3
 800a00a:	f7fe fedf 	bl	8008dcc <SerialSend>
    }
  }
  //
  // Read System Variables and Throttle Variables
  //
  if (SerialStruct->Command == 0x70) {
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	238a      	movs	r3, #138	; 0x8a
 800a012:	005b      	lsls	r3, r3, #1
 800a014:	5cd3      	ldrb	r3, [r2, r3]
 800a016:	2b70      	cmp	r3, #112	; 0x70
 800a018:	d147      	bne.n	800a0aa <ProcessSerialMessage+0x606>
    if (SerialStruct->Length == sizeof(HostData)) {
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	238b      	movs	r3, #139	; 0x8b
 800a01e:	005b      	lsls	r3, r3, #1
 800a020:	5ad3      	ldrh	r3, [r2, r3]
 800a022:	2b30      	cmp	r3, #48	; 0x30
 800a024:	d141      	bne.n	800a0aa <ProcessSerialMessage+0x606>
      memmove(&HostData, &SerialStruct->Data[0], sizeof(HostData));
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3319      	adds	r3, #25
 800a02a:	33ff      	adds	r3, #255	; 0xff
 800a02c:	4a99      	ldr	r2, [pc, #612]	; (800a294 <ProcessSerialMessage+0x7f0>)
 800a02e:	0010      	movs	r0, r2
 800a030:	0019      	movs	r1, r3
 800a032:	2330      	movs	r3, #48	; 0x30
 800a034:	001a      	movs	r2, r3
 800a036:	f002 fb61 	bl	800c6fc <memcpy>
      if (bFlashConfigurationValid != 0) {
 800a03a:	4b97      	ldr	r3, [pc, #604]	; (800a298 <ProcessSerialMessage+0x7f4>)
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d013      	beq.n	800a06a <ProcessSerialMessage+0x5c6>
        SysVars.RVOutputMode = FlashConfiguration->RVOutputMode;
 800a042:	4b96      	ldr	r3, [pc, #600]	; (800a29c <ProcessSerialMessage+0x7f8>)
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	2382      	movs	r3, #130	; 0x82
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	5cd3      	ldrb	r3, [r2, r3]
 800a04c:	079b      	lsls	r3, r3, #30
 800a04e:	0f9b      	lsrs	r3, r3, #30
 800a050:	b2d9      	uxtb	r1, r3
 800a052:	4b93      	ldr	r3, [pc, #588]	; (800a2a0 <ProcessSerialMessage+0x7fc>)
 800a054:	22c4      	movs	r2, #196	; 0xc4
 800a056:	2003      	movs	r0, #3
 800a058:	4001      	ands	r1, r0
 800a05a:	184c      	adds	r4, r1, r1
 800a05c:	5c99      	ldrb	r1, [r3, r2]
 800a05e:	2006      	movs	r0, #6
 800a060:	4381      	bics	r1, r0
 800a062:	1c08      	adds	r0, r1, #0
 800a064:	1c21      	adds	r1, r4, #0
 800a066:	4301      	orrs	r1, r0
 800a068:	5499      	strb	r1, [r3, r2]
      }
      SysVars.SystemTicks = STM32_GetTick();
 800a06a:	f7fb fe83 	bl	8005d74 <STM32_GetTick>
 800a06e:	0001      	movs	r1, r0
 800a070:	4b8b      	ldr	r3, [pc, #556]	; (800a2a0 <ProcessSerialMessage+0x7fc>)
 800a072:	22dc      	movs	r2, #220	; 0xdc
 800a074:	5099      	str	r1, [r3, r2]
      SysVars.Timer2Counts = TIM2->CNT;
 800a076:	2380      	movs	r3, #128	; 0x80
 800a078:	05db      	lsls	r3, r3, #23
 800a07a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a07c:	4b88      	ldr	r3, [pc, #544]	; (800a2a0 <ProcessSerialMessage+0x7fc>)
 800a07e:	21e0      	movs	r1, #224	; 0xe0
 800a080:	505a      	str	r2, [r3, r1]
      memmove(&SerialStruct->Data[9], &SysVars, sizeof(SysVars));
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	3322      	adds	r3, #34	; 0x22
 800a086:	33ff      	adds	r3, #255	; 0xff
 800a088:	0018      	movs	r0, r3
 800a08a:	239e      	movs	r3, #158	; 0x9e
 800a08c:	005a      	lsls	r2, r3, #1
 800a08e:	4b84      	ldr	r3, [pc, #528]	; (800a2a0 <ProcessSerialMessage+0x7fc>)
 800a090:	0019      	movs	r1, r3
 800a092:	f002 fb3c 	bl	800c70e <memmove>
      SerialStruct->Length = sizeof(SysVars);
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	238b      	movs	r3, #139	; 0x8b
 800a09a:	005b      	lsls	r3, r3, #1
 800a09c:	219e      	movs	r1, #158	; 0x9e
 800a09e:	0049      	lsls	r1, r1, #1
 800a0a0:	52d1      	strh	r1, [r2, r3]
      SerialSend(SerialStruct);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	0018      	movs	r0, r3
 800a0a6:	f7fe fe91 	bl	8008dcc <SerialSend>
    }
  }
  //
  // Read Execution Timing Report
  //
  if (SerialStruct->Command == 0x71) {
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	238a      	movs	r3, #138	; 0x8a
 800a0ae:	005b      	lsls	r3, r3, #1
 800a0b0:	5cd3      	ldrb	r3, [r2, r3]
 800a0b2:	2b71      	cmp	r3, #113	; 0x71
 800a0b4:	d119      	bne.n	800a0ea <ProcessSerialMessage+0x646>
    if (SerialStruct->Length == 0) {
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	238b      	movs	r3, #139	; 0x8b
 800a0ba:	005b      	lsls	r3, r3, #1
 800a0bc:	5ad3      	ldrh	r3, [r2, r3]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d113      	bne.n	800a0ea <ProcessSerialMessage+0x646>
      memmove(&SerialStruct->Data[9], &ExecutionTimeReport, sizeof(stExecutionTimeReport) * EXECUTION_PROCESS_COUNT);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3322      	adds	r3, #34	; 0x22
 800a0c6:	33ff      	adds	r3, #255	; 0xff
 800a0c8:	0018      	movs	r0, r3
 800a0ca:	23e8      	movs	r3, #232	; 0xe8
 800a0cc:	005a      	lsls	r2, r3, #1
 800a0ce:	4b75      	ldr	r3, [pc, #468]	; (800a2a4 <ProcessSerialMessage+0x800>)
 800a0d0:	0019      	movs	r1, r3
 800a0d2:	f002 fb1c 	bl	800c70e <memmove>
      SerialStruct->Length = sizeof(stExecutionTimeReport) * EXECUTION_PROCESS_COUNT;
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	238b      	movs	r3, #139	; 0x8b
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	21e8      	movs	r1, #232	; 0xe8
 800a0de:	0049      	lsls	r1, r1, #1
 800a0e0:	52d1      	strh	r1, [r2, r3]
      SerialSend(SerialStruct);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	0018      	movs	r0, r3
 800a0e6:	f7fe fe71 	bl	8008dcc <SerialSend>
    }
  }
  //
  // Store Throttle Data
  //
  if (SerialStruct->Command == 0x72) {
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	238a      	movs	r3, #138	; 0x8a
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	5cd3      	ldrb	r3, [r2, r3]
 800a0f2:	2b72      	cmp	r3, #114	; 0x72
 800a0f4:	d14e      	bne.n	800a194 <ProcessSerialMessage+0x6f0>
    if (SerialStruct->Length == sizeof(SysVars)) {
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	238b      	movs	r3, #139	; 0x8b
 800a0fa:	005b      	lsls	r3, r3, #1
 800a0fc:	5ad2      	ldrh	r2, [r2, r3]
 800a0fe:	239e      	movs	r3, #158	; 0x9e
 800a100:	005b      	lsls	r3, r3, #1
 800a102:	429a      	cmp	r2, r3
 800a104:	d146      	bne.n	800a194 <ProcessSerialMessage+0x6f0>
      if (SerialStruct == &SerialUsart1) {
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	4b67      	ldr	r3, [pc, #412]	; (800a2a8 <ProcessSerialMessage+0x804>)
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d142      	bne.n	800a194 <ProcessSerialMessage+0x6f0>
        memmove(&ForeignSysVars, &SerialBuffer.ByByte[0], sizeof(ForeignSysVars));
 800a10e:	4a67      	ldr	r2, [pc, #412]	; (800a2ac <ProcessSerialMessage+0x808>)
 800a110:	4b67      	ldr	r3, [pc, #412]	; (800a2b0 <ProcessSerialMessage+0x80c>)
 800a112:	0010      	movs	r0, r2
 800a114:	0019      	movs	r1, r3
 800a116:	239e      	movs	r3, #158	; 0x9e
 800a118:	005b      	lsls	r3, r3, #1
 800a11a:	001a      	movs	r2, r3
 800a11c:	f002 faee 	bl	800c6fc <memcpy>
        // Used to ensure one sensor is always A and the other is B
        if (SysVars.SensorLetter == ForeignSysVars.SensorLetter) {
 800a120:	4b5f      	ldr	r3, [pc, #380]	; (800a2a0 <ProcessSerialMessage+0x7fc>)
 800a122:	22e4      	movs	r2, #228	; 0xe4
 800a124:	5c9b      	ldrb	r3, [r3, r2]
 800a126:	07db      	lsls	r3, r3, #31
 800a128:	0fdb      	lsrs	r3, r3, #31
 800a12a:	b2da      	uxtb	r2, r3
 800a12c:	4b5f      	ldr	r3, [pc, #380]	; (800a2ac <ProcessSerialMessage+0x808>)
 800a12e:	21e4      	movs	r1, #228	; 0xe4
 800a130:	5c5b      	ldrb	r3, [r3, r1]
 800a132:	07db      	lsls	r3, r3, #31
 800a134:	0fdb      	lsrs	r3, r3, #31
 800a136:	b2db      	uxtb	r3, r3
 800a138:	429a      	cmp	r2, r3
 800a13a:	d114      	bne.n	800a166 <ProcessSerialMessage+0x6c2>
          SysVars.SensorLetter = !ForeignSysVars.SensorLetter;
 800a13c:	4b5b      	ldr	r3, [pc, #364]	; (800a2ac <ProcessSerialMessage+0x808>)
 800a13e:	22e4      	movs	r2, #228	; 0xe4
 800a140:	5c9b      	ldrb	r3, [r3, r2]
 800a142:	2201      	movs	r2, #1
 800a144:	4013      	ands	r3, r2
 800a146:	b2db      	uxtb	r3, r3
 800a148:	425a      	negs	r2, r3
 800a14a:	4153      	adcs	r3, r2
 800a14c:	b2d9      	uxtb	r1, r3
 800a14e:	4b54      	ldr	r3, [pc, #336]	; (800a2a0 <ProcessSerialMessage+0x7fc>)
 800a150:	22e4      	movs	r2, #228	; 0xe4
 800a152:	2001      	movs	r0, #1
 800a154:	4001      	ands	r1, r0
 800a156:	000c      	movs	r4, r1
 800a158:	5c99      	ldrb	r1, [r3, r2]
 800a15a:	2001      	movs	r0, #1
 800a15c:	4381      	bics	r1, r0
 800a15e:	1c08      	adds	r0, r1, #0
 800a160:	1c21      	adds	r1, r4, #0
 800a162:	4301      	orrs	r1, r0
 800a164:	5499      	strb	r1, [r3, r2]
        }

        SysVars.RS485Counter++;
 800a166:	4b4e      	ldr	r3, [pc, #312]	; (800a2a0 <ProcessSerialMessage+0x7fc>)
 800a168:	22f1      	movs	r2, #241	; 0xf1
 800a16a:	5c9b      	ldrb	r3, [r3, r2]
 800a16c:	3301      	adds	r3, #1
 800a16e:	b2d9      	uxtb	r1, r3
 800a170:	4b4b      	ldr	r3, [pc, #300]	; (800a2a0 <ProcessSerialMessage+0x7fc>)
 800a172:	22f0      	movs	r2, #240	; 0xf0
 800a174:	189b      	adds	r3, r3, r2
 800a176:	1c0a      	adds	r2, r1, #0
 800a178:	705a      	strb	r2, [r3, #1]
        if (SysVars.RS485Counter >= 15) {
 800a17a:	4b49      	ldr	r3, [pc, #292]	; (800a2a0 <ProcessSerialMessage+0x7fc>)
 800a17c:	22f1      	movs	r2, #241	; 0xf1
 800a17e:	5c9b      	ldrb	r3, [r3, r2]
 800a180:	2b0e      	cmp	r3, #14
 800a182:	d904      	bls.n	800a18e <ProcessSerialMessage+0x6ea>
          SysVars.RS485Counter = 0;
 800a184:	4b46      	ldr	r3, [pc, #280]	; (800a2a0 <ProcessSerialMessage+0x7fc>)
 800a186:	22f0      	movs	r2, #240	; 0xf0
 800a188:	189b      	adds	r3, r3, r2
 800a18a:	2200      	movs	r2, #0
 800a18c:	705a      	strb	r2, [r3, #1]
        }
        RS485.RSControl = 1;
 800a18e:	4b49      	ldr	r3, [pc, #292]	; (800a2b4 <ProcessSerialMessage+0x810>)
 800a190:	2201      	movs	r2, #1
 800a192:	75da      	strb	r2, [r3, #23]
    }
  }
  //
  // Send Foreign Throttle Data
  //
  if (SerialStruct->Command == 0x73) {
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	238a      	movs	r3, #138	; 0x8a
 800a198:	005b      	lsls	r3, r3, #1
 800a19a:	5cd3      	ldrb	r3, [r2, r3]
 800a19c:	2b73      	cmp	r3, #115	; 0x73
 800a19e:	d119      	bne.n	800a1d4 <ProcessSerialMessage+0x730>
    if (SerialStruct->Length == 0) {
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	238b      	movs	r3, #139	; 0x8b
 800a1a4:	005b      	lsls	r3, r3, #1
 800a1a6:	5ad3      	ldrh	r3, [r2, r3]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d113      	bne.n	800a1d4 <ProcessSerialMessage+0x730>
      memmove(&SerialStruct->Data[9], &ForeignSysVars, sizeof(ForeignSysVars));
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	3322      	adds	r3, #34	; 0x22
 800a1b0:	33ff      	adds	r3, #255	; 0xff
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	239e      	movs	r3, #158	; 0x9e
 800a1b6:	005a      	lsls	r2, r3, #1
 800a1b8:	4b3c      	ldr	r3, [pc, #240]	; (800a2ac <ProcessSerialMessage+0x808>)
 800a1ba:	0019      	movs	r1, r3
 800a1bc:	f002 faa7 	bl	800c70e <memmove>
      SerialStruct->Length = sizeof(SysVars);
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	238b      	movs	r3, #139	; 0x8b
 800a1c4:	005b      	lsls	r3, r3, #1
 800a1c6:	219e      	movs	r1, #158	; 0x9e
 800a1c8:	0049      	lsls	r1, r1, #1
 800a1ca:	52d1      	strh	r1, [r2, r3]
      SerialSend(SerialStruct);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	0018      	movs	r0, r3
 800a1d0:	f7fe fdfc 	bl	8008dcc <SerialSend>
  }
#endif
  //
  // Return Firmware CRC Information
  //
  if (SerialStruct->Command == 0x99) {
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	238a      	movs	r3, #138	; 0x8a
 800a1d8:	005b      	lsls	r3, r3, #1
 800a1da:	5cd3      	ldrb	r3, [r2, r3]
 800a1dc:	2b99      	cmp	r3, #153	; 0x99
 800a1de:	d12c      	bne.n	800a23a <ProcessSerialMessage+0x796>
    if (SerialStruct->Length == 0) {
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	238b      	movs	r3, #139	; 0x8b
 800a1e4:	005b      	lsls	r3, r3, #1
 800a1e6:	5ad3      	ldrh	r3, [r2, r3]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d126      	bne.n	800a23a <ProcessSerialMessage+0x796>
      //
      // Calculate Firmware Checksum - Pages 0 to 59
      //
      uint16_t Crc = CalcCrc16Array((uint8_t *)0x08000000, (2048 * 60));  //
 800a1ec:	200c      	movs	r0, #12
 800a1ee:	0005      	movs	r5, r0
 800a1f0:	183c      	adds	r4, r7, r0
 800a1f2:	23f0      	movs	r3, #240	; 0xf0
 800a1f4:	025a      	lsls	r2, r3, #9
 800a1f6:	2380      	movs	r3, #128	; 0x80
 800a1f8:	051b      	lsls	r3, r3, #20
 800a1fa:	0011      	movs	r1, r2
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	f7f8 fc8d 	bl	8002b1c <CalcCrc16Array>
 800a202:	0003      	movs	r3, r0
 800a204:	8023      	strh	r3, [r4, #0]
      SerialStruct->Data[9] = (uint8_t)(Crc & 0xFF);
 800a206:	0028      	movs	r0, r5
 800a208:	183b      	adds	r3, r7, r0
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	b2d9      	uxtb	r1, r3
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	2322      	movs	r3, #34	; 0x22
 800a212:	33ff      	adds	r3, #255	; 0xff
 800a214:	54d1      	strb	r1, [r2, r3]
      SerialStruct->Data[10] = (uint8_t)(Crc >> 8);
 800a216:	183b      	adds	r3, r7, r0
 800a218:	881b      	ldrh	r3, [r3, #0]
 800a21a:	0a1b      	lsrs	r3, r3, #8
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	b2d9      	uxtb	r1, r3
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	2391      	movs	r3, #145	; 0x91
 800a224:	005b      	lsls	r3, r3, #1
 800a226:	54d1      	strb	r1, [r2, r3]
      SerialStruct->Length = 2;
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	238b      	movs	r3, #139	; 0x8b
 800a22c:	005b      	lsls	r3, r3, #1
 800a22e:	2102      	movs	r1, #2
 800a230:	52d1      	strh	r1, [r2, r3]
      SerialSend(SerialStruct);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	0018      	movs	r0, r3
 800a236:	f7fe fdc9 	bl	8008dcc <SerialSend>
    }
  }
  //
  // Flash new Firmware
  //
  if (SerialStruct->Command == 0xCC) {
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	238a      	movs	r3, #138	; 0x8a
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	5cd3      	ldrb	r3, [r2, r3]
 800a242:	2bcc      	cmp	r3, #204	; 0xcc
 800a244:	d11c      	bne.n	800a280 <ProcessSerialMessage+0x7dc>
    if (SerialStruct->Length == sizeof(FirmwareUpload)) {
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	238b      	movs	r3, #139	; 0x8b
 800a24a:	005b      	lsls	r3, r3, #1
 800a24c:	5ad3      	ldrh	r3, [r2, r3]
 800a24e:	2b08      	cmp	r3, #8
 800a250:	d116      	bne.n	800a280 <ProcessSerialMessage+0x7dc>
      memmove(&FirmwareUpload, &SerialStruct->Data[0], sizeof(FirmwareUpload));
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	3319      	adds	r3, #25
 800a256:	33ff      	adds	r3, #255	; 0xff
 800a258:	4a17      	ldr	r2, [pc, #92]	; (800a2b8 <ProcessSerialMessage+0x814>)
 800a25a:	0010      	movs	r0, r2
 800a25c:	0019      	movs	r1, r3
 800a25e:	2308      	movs	r3, #8
 800a260:	001a      	movs	r2, r3
 800a262:	f002 fa4b 	bl	800c6fc <memcpy>
      if (FirmwareUpload.KeyCode == 0x78563412) {
 800a266:	4b14      	ldr	r3, [pc, #80]	; (800a2b8 <ProcessSerialMessage+0x814>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a14      	ldr	r2, [pc, #80]	; (800a2bc <ProcessSerialMessage+0x818>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d107      	bne.n	800a280 <ProcessSerialMessage+0x7dc>
        reflash(SerialStruct, FirmwareUpload.Crc, FirmwareUpload.Version);
 800a270:	4b11      	ldr	r3, [pc, #68]	; (800a2b8 <ProcessSerialMessage+0x814>)
 800a272:	88d9      	ldrh	r1, [r3, #6]
 800a274:	4b10      	ldr	r3, [pc, #64]	; (800a2b8 <ProcessSerialMessage+0x814>)
 800a276:	889a      	ldrh	r2, [r3, #4]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	0018      	movs	r0, r3
 800a27c:	f011 fcc6 	bl	801bc0c <reflash>
      }
    }
  }

  ExecutionEnd(EXECUTION_PROCESS_SERIAL_MESSAGE);
 800a280:	200b      	movs	r0, #11
 800a282:	f7fa f9dd 	bl	8004640 <ExecutionEnd>
}
 800a286:	46c0      	nop			; (mov r8, r8)
 800a288:	46bd      	mov	sp, r7
 800a28a:	b006      	add	sp, #24
 800a28c:	bdb0      	pop	{r4, r5, r7, pc}
 800a28e:	46c0      	nop			; (mov r8, r8)
 800a290:	20002c14 	.word	0x20002c14
 800a294:	20002a14 	.word	0x20002a14
 800a298:	20002cf6 	.word	0x20002cf6
 800a29c:	20002f04 	.word	0x20002f04
 800a2a0:	200020c0 	.word	0x200020c0
 800a2a4:	20002a44 	.word	0x20002a44
 800a2a8:	20001588 	.word	0x20001588
 800a2ac:	20001f20 	.word	0x20001f20
 800a2b0:	20002fa8 	.word	0x20002fa8
 800a2b4:	20002f08 	.word	0x20002f08
 800a2b8:	20000ae4 	.word	0x20000ae4
 800a2bc:	78563412 	.word	0x78563412

0800a2c0 <ProcessTestInput>:
//
// Returns:   None
//
// Requirement(s):
//
void ProcessTestInput(void) {
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0

    int32_t i;

    ExecutionStart(EXECUTION_PROCESS_TEST_INPUT);
 800a2c6:	2014      	movs	r0, #20
 800a2c8:	f7fa f9a0 	bl	800460c <ExecutionStart>

    for (i = 0; i < 6; i++) {
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	607b      	str	r3, [r7, #4]
 800a2d0:	e015      	b.n	800a2fe <ProcessTestInput+0x3e>
        if (DIG_HandleStruct[i].DIG_InitStruct.Config == CONFIG_DIG_TEST_IN) {
 800a2d2:	4910      	ldr	r1, [pc, #64]	; (800a314 <ProcessTestInput+0x54>)
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	0013      	movs	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	189b      	adds	r3, r3, r2
 800a2dc:	011b      	lsls	r3, r3, #4
 800a2de:	18cb      	adds	r3, r1, r3
 800a2e0:	3309      	adds	r3, #9
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	2b0a      	cmp	r3, #10
 800a2e6:	d107      	bne.n	800a2f8 <ProcessTestInput+0x38>
            SysVars.TestInput = DIG_ReadPin(i);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	0018      	movs	r0, r3
 800a2ec:	f7f9 fe50 	bl	8003f90 <DIG_ReadPin>
 800a2f0:	0001      	movs	r1, r0
 800a2f2:	4b09      	ldr	r3, [pc, #36]	; (800a318 <ProcessTestInput+0x58>)
 800a2f4:	22d0      	movs	r2, #208	; 0xd0
 800a2f6:	5099      	str	r1, [r3, r2]
    for (i = 0; i < 6; i++) {
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	607b      	str	r3, [r7, #4]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2b05      	cmp	r3, #5
 800a302:	dde6      	ble.n	800a2d2 <ProcessTestInput+0x12>
        }
    }
    ExecutionEnd(EXECUTION_PROCESS_TEST_INPUT);
 800a304:	2014      	movs	r0, #20
 800a306:	f7fa f99b 	bl	8004640 <ExecutionEnd>
}
 800a30a:	46c0      	nop			; (mov r8, r8)
 800a30c:	46bd      	mov	sp, r7
 800a30e:	b002      	add	sp, #8
 800a310:	bd80      	pop	{r7, pc}
 800a312:	46c0      	nop			; (mov r8, r8)
 800a314:	20002d24 	.word	0x20002d24
 800a318:	200020c0 	.word	0x200020c0

0800a31c <ThrottleStatus>:
//
// Returns:   None
//
// Requirement(s):
//
void ThrottleStatus (void) {
 800a31c:	b590      	push	{r4, r7, lr}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0

  uint8_t Tmp;

  SysVars.ErrorStatus = 0;
 800a322:	4bad      	ldr	r3, [pc, #692]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a324:	22e4      	movs	r2, #228	; 0xe4
 800a326:	5899      	ldr	r1, [r3, r2]
 800a328:	48ac      	ldr	r0, [pc, #688]	; (800a5dc <ThrottleStatus+0x2c0>)
 800a32a:	4001      	ands	r1, r0
 800a32c:	5099      	str	r1, [r3, r2]
  // 4 = Setpoint B error, 8 = RS485 error, 16 = Setpoint A and B mismatch
  // 32 = CAN not Updating, 64 = Local sensor lost mismatch comparison,
  // 128 = Using default flash or factory configuration -> FLASH was corrupted
  // Note that these are OR'd together
  // Find if any error other than those specific to the throttle exists
  for (uint8_t i = 0; i <= GENERAL_SP_FB_DIFF; i++) {
 800a32e:	1dbb      	adds	r3, r7, #6
 800a330:	2200      	movs	r2, #0
 800a332:	701a      	strb	r2, [r3, #0]
 800a334:	e01d      	b.n	800a372 <ThrottleStatus+0x56>
    if (SignalStatus.bErrorPresent[i] != 0) {
 800a336:	1dbb      	adds	r3, r7, #6
 800a338:	781a      	ldrb	r2, [r3, #0]
 800a33a:	4ba9      	ldr	r3, [pc, #676]	; (800a5e0 <ThrottleStatus+0x2c4>)
 800a33c:	3238      	adds	r2, #56	; 0x38
 800a33e:	0052      	lsls	r2, r2, #1
 800a340:	5ad3      	ldrh	r3, [r2, r3]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d010      	beq.n	800a368 <ThrottleStatus+0x4c>
      SysVars.ErrorStatus |= 0x01u;
 800a346:	4ba4      	ldr	r3, [pc, #656]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a348:	22e4      	movs	r2, #228	; 0xe4
 800a34a:	589b      	ldr	r3, [r3, r2]
 800a34c:	031b      	lsls	r3, r3, #12
 800a34e:	0e1b      	lsrs	r3, r3, #24
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2201      	movs	r2, #1
 800a354:	4313      	orrs	r3, r2
 800a356:	b2d9      	uxtb	r1, r3
 800a358:	4b9f      	ldr	r3, [pc, #636]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a35a:	22e4      	movs	r2, #228	; 0xe4
 800a35c:	0309      	lsls	r1, r1, #12
 800a35e:	5898      	ldr	r0, [r3, r2]
 800a360:	4c9e      	ldr	r4, [pc, #632]	; (800a5dc <ThrottleStatus+0x2c0>)
 800a362:	4020      	ands	r0, r4
 800a364:	4301      	orrs	r1, r0
 800a366:	5099      	str	r1, [r3, r2]
  for (uint8_t i = 0; i <= GENERAL_SP_FB_DIFF; i++) {
 800a368:	1dbb      	adds	r3, r7, #6
 800a36a:	781a      	ldrb	r2, [r3, #0]
 800a36c:	1dbb      	adds	r3, r7, #6
 800a36e:	3201      	adds	r2, #1
 800a370:	701a      	strb	r2, [r3, #0]
 800a372:	1dbb      	adds	r3, r7, #6
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	2b0b      	cmp	r3, #11
 800a378:	d9dd      	bls.n	800a336 <ThrottleStatus+0x1a>
    }
  }
  for (uint8_t i = GENERAL_BAD_FIRMWARE_CRC; i <= GENERAL_BAD_FUZZY_CRC; i++) {
 800a37a:	1d7b      	adds	r3, r7, #5
 800a37c:	2216      	movs	r2, #22
 800a37e:	701a      	strb	r2, [r3, #0]
 800a380:	e01d      	b.n	800a3be <ThrottleStatus+0xa2>
    if (SignalStatus.bErrorPresent[i] != 0) {
 800a382:	1d7b      	adds	r3, r7, #5
 800a384:	781a      	ldrb	r2, [r3, #0]
 800a386:	4b96      	ldr	r3, [pc, #600]	; (800a5e0 <ThrottleStatus+0x2c4>)
 800a388:	3238      	adds	r2, #56	; 0x38
 800a38a:	0052      	lsls	r2, r2, #1
 800a38c:	5ad3      	ldrh	r3, [r2, r3]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d010      	beq.n	800a3b4 <ThrottleStatus+0x98>
      SysVars.ErrorStatus |= 0x01u;
 800a392:	4b91      	ldr	r3, [pc, #580]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a394:	22e4      	movs	r2, #228	; 0xe4
 800a396:	589b      	ldr	r3, [r3, r2]
 800a398:	031b      	lsls	r3, r3, #12
 800a39a:	0e1b      	lsrs	r3, r3, #24
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2201      	movs	r2, #1
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	b2d9      	uxtb	r1, r3
 800a3a4:	4b8c      	ldr	r3, [pc, #560]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a3a6:	22e4      	movs	r2, #228	; 0xe4
 800a3a8:	0309      	lsls	r1, r1, #12
 800a3aa:	5898      	ldr	r0, [r3, r2]
 800a3ac:	4c8b      	ldr	r4, [pc, #556]	; (800a5dc <ThrottleStatus+0x2c0>)
 800a3ae:	4020      	ands	r0, r4
 800a3b0:	4301      	orrs	r1, r0
 800a3b2:	5099      	str	r1, [r3, r2]
  for (uint8_t i = GENERAL_BAD_FIRMWARE_CRC; i <= GENERAL_BAD_FUZZY_CRC; i++) {
 800a3b4:	1d7b      	adds	r3, r7, #5
 800a3b6:	781a      	ldrb	r2, [r3, #0]
 800a3b8:	1d7b      	adds	r3, r7, #5
 800a3ba:	3201      	adds	r2, #1
 800a3bc:	701a      	strb	r2, [r3, #0]
 800a3be:	1d7b      	adds	r3, r7, #5
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	2b19      	cmp	r3, #25
 800a3c4:	d9dd      	bls.n	800a382 <ThrottleStatus+0x66>
    }
  }

  SysVars.ErrorStatus |= (((SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_A_LOW_LIMIT] || SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_A_HIGH_LIMIT] || SignalStatus.bErrorPresent[GENERAL_SENSOR_A_QUALITY]) << 1) |
 800a3c6:	4b84      	ldr	r3, [pc, #528]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a3c8:	22e4      	movs	r2, #228	; 0xe4
 800a3ca:	589b      	ldr	r3, [r3, r2]
 800a3cc:	031b      	lsls	r3, r3, #12
 800a3ce:	0e1b      	lsrs	r3, r3, #24
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	b25a      	sxtb	r2, r3
 800a3d4:	4b82      	ldr	r3, [pc, #520]	; (800a5e0 <ThrottleStatus+0x2c4>)
 800a3d6:	2188      	movs	r1, #136	; 0x88
 800a3d8:	5a5b      	ldrh	r3, [r3, r1]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d109      	bne.n	800a3f2 <ThrottleStatus+0xd6>
 800a3de:	4b80      	ldr	r3, [pc, #512]	; (800a5e0 <ThrottleStatus+0x2c4>)
 800a3e0:	218a      	movs	r1, #138	; 0x8a
 800a3e2:	5a5b      	ldrh	r3, [r3, r1]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d104      	bne.n	800a3f2 <ThrottleStatus+0xd6>
 800a3e8:	4b7d      	ldr	r3, [pc, #500]	; (800a5e0 <ThrottleStatus+0x2c4>)
 800a3ea:	21a4      	movs	r1, #164	; 0xa4
 800a3ec:	5a5b      	ldrh	r3, [r3, r1]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <ThrottleStatus+0xda>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e000      	b.n	800a3f8 <ThrottleStatus+0xdc>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	b259      	sxtb	r1, r3
                        ((SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_B_LOW_LIMIT] || SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_B_HIGH_LIMIT] || SignalStatus.bErrorPresent[GENERAL_SENSOR_B_QUALITY]) << 2) |
 800a3fc:	4b78      	ldr	r3, [pc, #480]	; (800a5e0 <ThrottleStatus+0x2c4>)
 800a3fe:	208c      	movs	r0, #140	; 0x8c
 800a400:	5a1b      	ldrh	r3, [r3, r0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d109      	bne.n	800a41a <ThrottleStatus+0xfe>
 800a406:	4b76      	ldr	r3, [pc, #472]	; (800a5e0 <ThrottleStatus+0x2c4>)
 800a408:	208e      	movs	r0, #142	; 0x8e
 800a40a:	5a1b      	ldrh	r3, [r3, r0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d104      	bne.n	800a41a <ThrottleStatus+0xfe>
 800a410:	4b73      	ldr	r3, [pc, #460]	; (800a5e0 <ThrottleStatus+0x2c4>)
 800a412:	20a6      	movs	r0, #166	; 0xa6
 800a414:	5a1b      	ldrh	r3, [r3, r0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <ThrottleStatus+0x102>
 800a41a:	2301      	movs	r3, #1
 800a41c:	e000      	b.n	800a420 <ThrottleStatus+0x104>
 800a41e:	2300      	movs	r3, #0
 800a420:	009b      	lsls	r3, r3, #2
  SysVars.ErrorStatus |= (((SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_A_LOW_LIMIT] || SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_A_HIGH_LIMIT] || SignalStatus.bErrorPresent[GENERAL_SENSOR_A_QUALITY]) << 1) |
 800a422:	b25b      	sxtb	r3, r3
 800a424:	430b      	orrs	r3, r1
 800a426:	b259      	sxtb	r1, r3
                        ((SignalStatus.bErrorPresent[GENERAL_RS485_NOT_UPDATING]) << 3) |
 800a428:	4b6d      	ldr	r3, [pc, #436]	; (800a5e0 <ThrottleStatus+0x2c4>)
 800a42a:	2090      	movs	r0, #144	; 0x90
 800a42c:	5a1b      	ldrh	r3, [r3, r0]
 800a42e:	00db      	lsls	r3, r3, #3
                        ((SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_B_LOW_LIMIT] || SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_B_HIGH_LIMIT] || SignalStatus.bErrorPresent[GENERAL_SENSOR_B_QUALITY]) << 2) |
 800a430:	b25b      	sxtb	r3, r3
 800a432:	430b      	orrs	r3, r1
 800a434:	b259      	sxtb	r1, r3
                        ((SignalStatus.bErrorPresent[GENERAL_SENSOR_MISMATCH]) << 4) |
 800a436:	4b6a      	ldr	r3, [pc, #424]	; (800a5e0 <ThrottleStatus+0x2c4>)
 800a438:	2092      	movs	r0, #146	; 0x92
 800a43a:	5a1b      	ldrh	r3, [r3, r0]
 800a43c:	011b      	lsls	r3, r3, #4
                        ((SignalStatus.bErrorPresent[GENERAL_RS485_NOT_UPDATING]) << 3) |
 800a43e:	b25b      	sxtb	r3, r3
 800a440:	430b      	orrs	r3, r1
 800a442:	b259      	sxtb	r1, r3
                        (((SignalStatus.bErrorPresent[GENERAL_CAN_RECEPTION_ERROR]) || (SignalStatus.bErrorPresent[GENERAL_CAN_TRANSMISSION_EEROR]) ||
 800a444:	4b66      	ldr	r3, [pc, #408]	; (800a5e0 <ThrottleStatus+0x2c4>)
 800a446:	2094      	movs	r0, #148	; 0x94
 800a448:	5a1b      	ldrh	r3, [r3, r0]
                         (SignalStatus.bErrorPresent[GENERAL_CAN_ECHO_ERROR]) || (SignalStatus.bErrorPresent[GENERAL_CAN_CRC_ERROR])) << 5) |
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d10e      	bne.n	800a46c <ThrottleStatus+0x150>
                        (((SignalStatus.bErrorPresent[GENERAL_CAN_RECEPTION_ERROR]) || (SignalStatus.bErrorPresent[GENERAL_CAN_TRANSMISSION_EEROR]) ||
 800a44e:	4b64      	ldr	r3, [pc, #400]	; (800a5e0 <ThrottleStatus+0x2c4>)
 800a450:	2096      	movs	r0, #150	; 0x96
 800a452:	5a1b      	ldrh	r3, [r3, r0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d109      	bne.n	800a46c <ThrottleStatus+0x150>
                         (SignalStatus.bErrorPresent[GENERAL_CAN_ECHO_ERROR]) || (SignalStatus.bErrorPresent[GENERAL_CAN_CRC_ERROR])) << 5) |
 800a458:	4b61      	ldr	r3, [pc, #388]	; (800a5e0 <ThrottleStatus+0x2c4>)
 800a45a:	2098      	movs	r0, #152	; 0x98
 800a45c:	5a1b      	ldrh	r3, [r3, r0]
                        (((SignalStatus.bErrorPresent[GENERAL_CAN_RECEPTION_ERROR]) || (SignalStatus.bErrorPresent[GENERAL_CAN_TRANSMISSION_EEROR]) ||
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d104      	bne.n	800a46c <ThrottleStatus+0x150>
                         (SignalStatus.bErrorPresent[GENERAL_CAN_ECHO_ERROR]) || (SignalStatus.bErrorPresent[GENERAL_CAN_CRC_ERROR])) << 5) |
 800a462:	4b5f      	ldr	r3, [pc, #380]	; (800a5e0 <ThrottleStatus+0x2c4>)
 800a464:	209a      	movs	r0, #154	; 0x9a
 800a466:	5a1b      	ldrh	r3, [r3, r0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d001      	beq.n	800a470 <ThrottleStatus+0x154>
 800a46c:	2301      	movs	r3, #1
 800a46e:	e000      	b.n	800a472 <ThrottleStatus+0x156>
 800a470:	2300      	movs	r3, #0
 800a472:	015b      	lsls	r3, r3, #5
                        ((SignalStatus.bErrorPresent[GENERAL_SENSOR_MISMATCH]) << 4) |
 800a474:	b25b      	sxtb	r3, r3
 800a476:	430b      	orrs	r3, r1
 800a478:	b259      	sxtb	r1, r3
                         (((bUseDefaultFlash != 0) || (bUseDefaultFactory != 0)) << 6));
 800a47a:	4b5a      	ldr	r3, [pc, #360]	; (800a5e4 <ThrottleStatus+0x2c8>)
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d103      	bne.n	800a48a <ThrottleStatus+0x16e>
 800a482:	4b59      	ldr	r3, [pc, #356]	; (800a5e8 <ThrottleStatus+0x2cc>)
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <ThrottleStatus+0x172>
 800a48a:	2301      	movs	r3, #1
 800a48c:	e000      	b.n	800a490 <ThrottleStatus+0x174>
 800a48e:	2300      	movs	r3, #0
 800a490:	019b      	lsls	r3, r3, #6
                         (SignalStatus.bErrorPresent[GENERAL_CAN_ECHO_ERROR]) || (SignalStatus.bErrorPresent[GENERAL_CAN_CRC_ERROR])) << 5) |
 800a492:	b25b      	sxtb	r3, r3
 800a494:	430b      	orrs	r3, r1
 800a496:	b25b      	sxtb	r3, r3
  SysVars.ErrorStatus |= (((SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_A_LOW_LIMIT] || SignalStatus.bErrorPresent[GENERAL_CAN_SETPOINT_A_HIGH_LIMIT] || SignalStatus.bErrorPresent[GENERAL_SENSOR_A_QUALITY]) << 1) |
 800a498:	4313      	orrs	r3, r2
 800a49a:	b25b      	sxtb	r3, r3
 800a49c:	b2d9      	uxtb	r1, r3
 800a49e:	4b4e      	ldr	r3, [pc, #312]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a4a0:	22e4      	movs	r2, #228	; 0xe4
 800a4a2:	0309      	lsls	r1, r1, #12
 800a4a4:	5898      	ldr	r0, [r3, r2]
 800a4a6:	4c4d      	ldr	r4, [pc, #308]	; (800a5dc <ThrottleStatus+0x2c0>)
 800a4a8:	4020      	ands	r0, r4
 800a4aa:	4301      	orrs	r1, r0
 800a4ac:	5099      	str	r1, [r3, r2]

  // Reset error bits before setting
  SysVars.MinorFault = 0x0000u;
 800a4ae:	4b4a      	ldr	r3, [pc, #296]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a4b0:	22f0      	movs	r2, #240	; 0xf0
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	5499      	strb	r1, [r3, r2]
  SysVars.MajorFault = 0x0000u;
 800a4b6:	4b48      	ldr	r3, [pc, #288]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a4b8:	22ec      	movs	r2, #236	; 0xec
 800a4ba:	189b      	adds	r3, r3, r2
 800a4bc:	2200      	movs	r2, #0
 800a4be:	805a      	strh	r2, [r3, #2]
  SysVars.CriticalFault = 0x0000u;
 800a4c0:	4b45      	ldr	r3, [pc, #276]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a4c2:	22ec      	movs	r2, #236	; 0xec
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	5299      	strh	r1, [r3, r2]
  SysVars.ErrorType = 0u;
 800a4c8:	4b43      	ldr	r3, [pc, #268]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a4ca:	22e4      	movs	r2, #228	; 0xe4
 800a4cc:	5a99      	ldrh	r1, [r3, r2]
 800a4ce:	4847      	ldr	r0, [pc, #284]	; (800a5ec <ThrottleStatus+0x2d0>)
 800a4d0:	4001      	ands	r1, r0
 800a4d2:	5299      	strh	r1, [r3, r2]
  SysVars.MatchStatus = 0x01u; // Assume they match to start
 800a4d4:	4b40      	ldr	r3, [pc, #256]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a4d6:	22e4      	movs	r2, #228	; 0xe4
 800a4d8:	189b      	adds	r3, r3, r2
 800a4da:	785a      	ldrb	r2, [r3, #1]
 800a4dc:	210e      	movs	r1, #14
 800a4de:	438a      	bics	r2, r1
 800a4e0:	1c11      	adds	r1, r2, #0
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	430a      	orrs	r2, r1
 800a4e6:	705a      	strb	r2, [r3, #1]

  if (SysVars.ErrorStatus != 0 || ForeignSysVars.ErrorStatus != 0) {
 800a4e8:	4b3b      	ldr	r3, [pc, #236]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a4ea:	22e4      	movs	r2, #228	; 0xe4
 800a4ec:	589a      	ldr	r2, [r3, r2]
 800a4ee:	23ff      	movs	r3, #255	; 0xff
 800a4f0:	031b      	lsls	r3, r3, #12
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	d107      	bne.n	800a506 <ThrottleStatus+0x1ea>
 800a4f6:	4b3e      	ldr	r3, [pc, #248]	; (800a5f0 <ThrottleStatus+0x2d4>)
 800a4f8:	22e4      	movs	r2, #228	; 0xe4
 800a4fa:	589a      	ldr	r2, [r3, r2]
 800a4fc:	23ff      	movs	r3, #255	; 0xff
 800a4fe:	031b      	lsls	r3, r3, #12
 800a500:	4013      	ands	r3, r2
 800a502:	d100      	bne.n	800a506 <ThrottleStatus+0x1ea>
 800a504:	e32a      	b.n	800ab5c <ThrottleStatus+0x840>

    //  RS485 Error
    if (SysVars.ErrorStatus & 0x08u) {
 800a506:	4b34      	ldr	r3, [pc, #208]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a508:	22e4      	movs	r2, #228	; 0xe4
 800a50a:	589b      	ldr	r3, [r3, r2]
 800a50c:	031b      	lsls	r3, r3, #12
 800a50e:	0e1b      	lsrs	r3, r3, #24
 800a510:	b2db      	uxtb	r3, r3
 800a512:	001a      	movs	r2, r3
 800a514:	2308      	movs	r3, #8
 800a516:	4013      	ands	r3, r2
 800a518:	d06c      	beq.n	800a5f4 <ThrottleStatus+0x2d8>
      SysVars.ErrorType |= 0x02u; // Major Error Type
 800a51a:	4b2f      	ldr	r3, [pc, #188]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a51c:	22e4      	movs	r2, #228	; 0xe4
 800a51e:	5a9b      	ldrh	r3, [r3, r2]
 800a520:	05db      	lsls	r3, r3, #23
 800a522:	0f5b      	lsrs	r3, r3, #29
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2202      	movs	r2, #2
 800a528:	4313      	orrs	r3, r2
 800a52a:	b2d9      	uxtb	r1, r3
 800a52c:	4b2a      	ldr	r3, [pc, #168]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a52e:	22e4      	movs	r2, #228	; 0xe4
 800a530:	1c08      	adds	r0, r1, #0
 800a532:	2107      	movs	r1, #7
 800a534:	4001      	ands	r1, r0
 800a536:	018c      	lsls	r4, r1, #6
 800a538:	5a99      	ldrh	r1, [r3, r2]
 800a53a:	482c      	ldr	r0, [pc, #176]	; (800a5ec <ThrottleStatus+0x2d0>)
 800a53c:	4001      	ands	r1, r0
 800a53e:	1c08      	adds	r0, r1, #0
 800a540:	1c21      	adds	r1, r4, #0
 800a542:	4301      	orrs	r1, r0
 800a544:	5299      	strh	r1, [r3, r2]
      SysVars.MatchStatus = 0x03u; // Not available due to insufficient data
 800a546:	4b24      	ldr	r3, [pc, #144]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a548:	22e4      	movs	r2, #228	; 0xe4
 800a54a:	189b      	adds	r3, r3, r2
 800a54c:	785a      	ldrb	r2, [r3, #1]
 800a54e:	210e      	movs	r1, #14
 800a550:	438a      	bics	r2, r1
 800a552:	1c11      	adds	r1, r2, #0
 800a554:	2206      	movs	r2, #6
 800a556:	430a      	orrs	r2, r1
 800a558:	705a      	strb	r2, [r3, #1]
      // The opposite sensor is unavailable
      if (SysVars.SensorLetter == 0) {
 800a55a:	4b1f      	ldr	r3, [pc, #124]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a55c:	22e4      	movs	r2, #228	; 0xe4
 800a55e:	5c9b      	ldrb	r3, [r3, r2]
 800a560:	2201      	movs	r2, #1
 800a562:	4013      	ands	r3, r2
 800a564:	b2db      	uxtb	r3, r3
 800a566:	2b00      	cmp	r3, #0
 800a568:	d103      	bne.n	800a572 <ThrottleStatus+0x256>
        Tmp = 1;
 800a56a:	1dfb      	adds	r3, r7, #7
 800a56c:	2201      	movs	r2, #1
 800a56e:	701a      	strb	r2, [r3, #0]
 800a570:	e002      	b.n	800a578 <ThrottleStatus+0x25c>
      }
      else {
        Tmp = 0;
 800a572:	1dfb      	adds	r3, r7, #7
 800a574:	2200      	movs	r2, #0
 800a576:	701a      	strb	r2, [r3, #0]
      }
      SysVars.MajorFault |= 0x0100u << Tmp; // Sensor A or Sensor B Unavailble
 800a578:	4b17      	ldr	r3, [pc, #92]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a57a:	22ee      	movs	r2, #238	; 0xee
 800a57c:	5a9a      	ldrh	r2, [r3, r2]
 800a57e:	1dfb      	adds	r3, r7, #7
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	2180      	movs	r1, #128	; 0x80
 800a584:	0049      	lsls	r1, r1, #1
 800a586:	4099      	lsls	r1, r3
 800a588:	000b      	movs	r3, r1
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	4313      	orrs	r3, r2
 800a58e:	b299      	uxth	r1, r3
 800a590:	4b11      	ldr	r3, [pc, #68]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a592:	22ec      	movs	r2, #236	; 0xec
 800a594:	189b      	adds	r3, r3, r2
 800a596:	1c0a      	adds	r2, r1, #0
 800a598:	805a      	strh	r2, [r3, #2]
      // If RS485 Error occurs - either the opposite sensor lost power
      // or the RS485 connection is bad, etc. Therefore, overwrite the foregin
      // sensor's setpoint data with the local
      ForeignSysVars.ThrottleSetpoint = SysVars.ThrottleSetpoint;
 800a59a:	4b0f      	ldr	r3, [pc, #60]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a59c:	22e8      	movs	r2, #232	; 0xe8
 800a59e:	589a      	ldr	r2, [r3, r2]
 800a5a0:	4b13      	ldr	r3, [pc, #76]	; (800a5f0 <ThrottleStatus+0x2d4>)
 800a5a2:	21e8      	movs	r1, #232	; 0xe8
 800a5a4:	505a      	str	r2, [r3, r1]
      ForeignSysVars.CanSetpoint = SysVars.CanSetpoint;
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <ThrottleStatus+0x2bc>)
 800a5a8:	22d8      	movs	r2, #216	; 0xd8
 800a5aa:	589a      	ldr	r2, [r3, r2]
 800a5ac:	4b10      	ldr	r3, [pc, #64]	; (800a5f0 <ThrottleStatus+0x2d4>)
 800a5ae:	21d8      	movs	r1, #216	; 0xd8
 800a5b0:	505a      	str	r2, [r3, r1]
      ForeignSysVars.SensorLetter = Tmp;
 800a5b2:	1dfb      	adds	r3, r7, #7
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	b2d9      	uxtb	r1, r3
 800a5bc:	4b0c      	ldr	r3, [pc, #48]	; (800a5f0 <ThrottleStatus+0x2d4>)
 800a5be:	22e4      	movs	r2, #228	; 0xe4
 800a5c0:	2001      	movs	r0, #1
 800a5c2:	4001      	ands	r1, r0
 800a5c4:	000c      	movs	r4, r1
 800a5c6:	5c99      	ldrb	r1, [r3, r2]
 800a5c8:	2001      	movs	r0, #1
 800a5ca:	4381      	bics	r1, r0
 800a5cc:	1c08      	adds	r0, r1, #0
 800a5ce:	1c21      	adds	r1, r4, #0
 800a5d0:	4301      	orrs	r1, r0
 800a5d2:	5499      	strb	r1, [r3, r2]
 800a5d4:	e181      	b.n	800a8da <ThrottleStatus+0x5be>
 800a5d6:	46c0      	nop			; (mov r8, r8)
 800a5d8:	200020c0 	.word	0x200020c0
 800a5dc:	fff00fff 	.word	0xfff00fff
 800a5e0:	20002c14 	.word	0x20002c14
 800a5e4:	20002cfa 	.word	0x20002cfa
 800a5e8:	20000c25 	.word	0x20000c25
 800a5ec:	fffffe3f 	.word	0xfffffe3f
 800a5f0:	20001f20 	.word	0x20001f20
    }
    else {
      // Sensor Mismatch - Cannot have RS485 error
      if ((SysVars.ErrorStatus & 0x10u)) {
 800a5f4:	4bdd      	ldr	r3, [pc, #884]	; (800a96c <ThrottleStatus+0x650>)
 800a5f6:	22e4      	movs	r2, #228	; 0xe4
 800a5f8:	589b      	ldr	r3, [r3, r2]
 800a5fa:	031b      	lsls	r3, r3, #12
 800a5fc:	0e1b      	lsrs	r3, r3, #24
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	001a      	movs	r2, r3
 800a602:	2310      	movs	r3, #16
 800a604:	4013      	ands	r3, r2
 800a606:	d029      	beq.n	800a65c <ThrottleStatus+0x340>
        SysVars.ErrorType |= 0x02u; //Major Error Type
 800a608:	4bd8      	ldr	r3, [pc, #864]	; (800a96c <ThrottleStatus+0x650>)
 800a60a:	22e4      	movs	r2, #228	; 0xe4
 800a60c:	5a9b      	ldrh	r3, [r3, r2]
 800a60e:	05db      	lsls	r3, r3, #23
 800a610:	0f5b      	lsrs	r3, r3, #29
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2202      	movs	r2, #2
 800a616:	4313      	orrs	r3, r2
 800a618:	b2d9      	uxtb	r1, r3
 800a61a:	4bd4      	ldr	r3, [pc, #848]	; (800a96c <ThrottleStatus+0x650>)
 800a61c:	22e4      	movs	r2, #228	; 0xe4
 800a61e:	1c08      	adds	r0, r1, #0
 800a620:	2107      	movs	r1, #7
 800a622:	4001      	ands	r1, r0
 800a624:	018c      	lsls	r4, r1, #6
 800a626:	5a99      	ldrh	r1, [r3, r2]
 800a628:	48d1      	ldr	r0, [pc, #836]	; (800a970 <ThrottleStatus+0x654>)
 800a62a:	4001      	ands	r1, r0
 800a62c:	1c08      	adds	r0, r1, #0
 800a62e:	1c21      	adds	r1, r4, #0
 800a630:	4301      	orrs	r1, r0
 800a632:	5299      	strh	r1, [r3, r2]
        SysVars.MatchStatus = 0x00u; // Sensors do not match
 800a634:	4bcd      	ldr	r3, [pc, #820]	; (800a96c <ThrottleStatus+0x650>)
 800a636:	22e4      	movs	r2, #228	; 0xe4
 800a638:	189b      	adds	r3, r3, r2
 800a63a:	785a      	ldrb	r2, [r3, #1]
 800a63c:	210e      	movs	r1, #14
 800a63e:	438a      	bics	r2, r1
 800a640:	705a      	strb	r2, [r3, #1]
        SysVars.MajorFault |= 0x04u; // Mismatch compare
 800a642:	4bca      	ldr	r3, [pc, #808]	; (800a96c <ThrottleStatus+0x650>)
 800a644:	22ee      	movs	r2, #238	; 0xee
 800a646:	5a9b      	ldrh	r3, [r3, r2]
 800a648:	2204      	movs	r2, #4
 800a64a:	4313      	orrs	r3, r2
 800a64c:	b299      	uxth	r1, r3
 800a64e:	4bc7      	ldr	r3, [pc, #796]	; (800a96c <ThrottleStatus+0x650>)
 800a650:	22ec      	movs	r2, #236	; 0xec
 800a652:	189b      	adds	r3, r3, r2
 800a654:	1c0a      	adds	r2, r1, #0
 800a656:	805a      	strh	r2, [r3, #2]
        ThrottleMisMatch();
 800a658:	f000 fb42 	bl	800ace0 <ThrottleMisMatch>

      }
      // Error on CAN A and CAN B, cannot have RS485 Error
      if ((SysVars.ErrorStatus & 0x20u) && (ForeignSysVars.ErrorStatus & 0x20u)) {
 800a65c:	4bc3      	ldr	r3, [pc, #780]	; (800a96c <ThrottleStatus+0x650>)
 800a65e:	22e4      	movs	r2, #228	; 0xe4
 800a660:	589b      	ldr	r3, [r3, r2]
 800a662:	031b      	lsls	r3, r3, #12
 800a664:	0e1b      	lsrs	r3, r3, #24
 800a666:	b2db      	uxtb	r3, r3
 800a668:	001a      	movs	r2, r3
 800a66a:	2320      	movs	r3, #32
 800a66c:	4013      	ands	r3, r2
 800a66e:	d028      	beq.n	800a6c2 <ThrottleStatus+0x3a6>
 800a670:	4bc0      	ldr	r3, [pc, #768]	; (800a974 <ThrottleStatus+0x658>)
 800a672:	22e4      	movs	r2, #228	; 0xe4
 800a674:	589b      	ldr	r3, [r3, r2]
 800a676:	031b      	lsls	r3, r3, #12
 800a678:	0e1b      	lsrs	r3, r3, #24
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	001a      	movs	r2, r3
 800a67e:	2320      	movs	r3, #32
 800a680:	4013      	ands	r3, r2
 800a682:	d01e      	beq.n	800a6c2 <ThrottleStatus+0x3a6>
        SysVars.ErrorType |= 0x01u; // Hazardous
 800a684:	4bb9      	ldr	r3, [pc, #740]	; (800a96c <ThrottleStatus+0x650>)
 800a686:	22e4      	movs	r2, #228	; 0xe4
 800a688:	5a9b      	ldrh	r3, [r3, r2]
 800a68a:	05db      	lsls	r3, r3, #23
 800a68c:	0f5b      	lsrs	r3, r3, #29
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2201      	movs	r2, #1
 800a692:	4313      	orrs	r3, r2
 800a694:	b2d9      	uxtb	r1, r3
 800a696:	4bb5      	ldr	r3, [pc, #724]	; (800a96c <ThrottleStatus+0x650>)
 800a698:	22e4      	movs	r2, #228	; 0xe4
 800a69a:	1c08      	adds	r0, r1, #0
 800a69c:	2107      	movs	r1, #7
 800a69e:	4001      	ands	r1, r0
 800a6a0:	018c      	lsls	r4, r1, #6
 800a6a2:	5a99      	ldrh	r1, [r3, r2]
 800a6a4:	48b2      	ldr	r0, [pc, #712]	; (800a970 <ThrottleStatus+0x654>)
 800a6a6:	4001      	ands	r1, r0
 800a6a8:	1c08      	adds	r0, r1, #0
 800a6aa:	1c21      	adds	r1, r4, #0
 800a6ac:	4301      	orrs	r1, r0
 800a6ae:	5299      	strh	r1, [r3, r2]
        SysVars.CriticalFault |= 0x02u; // CAN A and CAN B failure
 800a6b0:	4bae      	ldr	r3, [pc, #696]	; (800a96c <ThrottleStatus+0x650>)
 800a6b2:	22ec      	movs	r2, #236	; 0xec
 800a6b4:	5a9b      	ldrh	r3, [r3, r2]
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	b299      	uxth	r1, r3
 800a6bc:	4bab      	ldr	r3, [pc, #684]	; (800a96c <ThrottleStatus+0x650>)
 800a6be:	22ec      	movs	r2, #236	; 0xec
 800a6c0:	5299      	strh	r1, [r3, r2]
      }
      // Error only on foreign CAN Bus, canont have RS485 error
      if (((SysVars.ErrorStatus & 0x20u) == 0x00u) && (ForeignSysVars.ErrorStatus & 0x20u)) {
 800a6c2:	4baa      	ldr	r3, [pc, #680]	; (800a96c <ThrottleStatus+0x650>)
 800a6c4:	22e4      	movs	r2, #228	; 0xe4
 800a6c6:	589b      	ldr	r3, [r3, r2]
 800a6c8:	031b      	lsls	r3, r3, #12
 800a6ca:	0e1b      	lsrs	r3, r3, #24
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	001a      	movs	r2, r3
 800a6d0:	2320      	movs	r3, #32
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	d133      	bne.n	800a73e <ThrottleStatus+0x422>
 800a6d6:	4ba7      	ldr	r3, [pc, #668]	; (800a974 <ThrottleStatus+0x658>)
 800a6d8:	22e4      	movs	r2, #228	; 0xe4
 800a6da:	589b      	ldr	r3, [r3, r2]
 800a6dc:	031b      	lsls	r3, r3, #12
 800a6de:	0e1b      	lsrs	r3, r3, #24
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	001a      	movs	r2, r3
 800a6e4:	2320      	movs	r3, #32
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	d029      	beq.n	800a73e <ThrottleStatus+0x422>
        SysVars.ErrorType |= 0x02u; // Major
 800a6ea:	4ba0      	ldr	r3, [pc, #640]	; (800a96c <ThrottleStatus+0x650>)
 800a6ec:	22e4      	movs	r2, #228	; 0xe4
 800a6ee:	5a9b      	ldrh	r3, [r3, r2]
 800a6f0:	05db      	lsls	r3, r3, #23
 800a6f2:	0f5b      	lsrs	r3, r3, #29
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	b2d9      	uxtb	r1, r3
 800a6fc:	4b9b      	ldr	r3, [pc, #620]	; (800a96c <ThrottleStatus+0x650>)
 800a6fe:	22e4      	movs	r2, #228	; 0xe4
 800a700:	1c08      	adds	r0, r1, #0
 800a702:	2107      	movs	r1, #7
 800a704:	4001      	ands	r1, r0
 800a706:	018c      	lsls	r4, r1, #6
 800a708:	5a99      	ldrh	r1, [r3, r2]
 800a70a:	4899      	ldr	r0, [pc, #612]	; (800a970 <ThrottleStatus+0x654>)
 800a70c:	4001      	ands	r1, r0
 800a70e:	1c08      	adds	r0, r1, #0
 800a710:	1c21      	adds	r1, r4, #0
 800a712:	4301      	orrs	r1, r0
 800a714:	5299      	strh	r1, [r3, r2]
        SysVars.MajorFault |= 0x10u << ForeignSysVars.SensorLetter; // CAN A/B failure depending on foreign sensor
 800a716:	4b95      	ldr	r3, [pc, #596]	; (800a96c <ThrottleStatus+0x650>)
 800a718:	22ee      	movs	r2, #238	; 0xee
 800a71a:	5a9a      	ldrh	r2, [r3, r2]
 800a71c:	4b95      	ldr	r3, [pc, #596]	; (800a974 <ThrottleStatus+0x658>)
 800a71e:	21e4      	movs	r1, #228	; 0xe4
 800a720:	5c5b      	ldrb	r3, [r3, r1]
 800a722:	07db      	lsls	r3, r3, #31
 800a724:	0fdb      	lsrs	r3, r3, #31
 800a726:	b2db      	uxtb	r3, r3
 800a728:	0019      	movs	r1, r3
 800a72a:	2310      	movs	r3, #16
 800a72c:	408b      	lsls	r3, r1
 800a72e:	b29b      	uxth	r3, r3
 800a730:	4313      	orrs	r3, r2
 800a732:	b299      	uxth	r1, r3
 800a734:	4b8d      	ldr	r3, [pc, #564]	; (800a96c <ThrottleStatus+0x650>)
 800a736:	22ec      	movs	r2, #236	; 0xec
 800a738:	189b      	adds	r3, r3, r2
 800a73a:	1c0a      	adds	r2, r1, #0
 800a73c:	805a      	strh	r2, [r3, #2]
      }
      // Both sensors are using default factory/flash
      if ((SysVars.ErrorStatus & 0x40u) && (ForeignSysVars.ErrorStatus & 0x40u)) {
 800a73e:	4b8b      	ldr	r3, [pc, #556]	; (800a96c <ThrottleStatus+0x650>)
 800a740:	22e4      	movs	r2, #228	; 0xe4
 800a742:	589b      	ldr	r3, [r3, r2]
 800a744:	031b      	lsls	r3, r3, #12
 800a746:	0e1b      	lsrs	r3, r3, #24
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	001a      	movs	r2, r3
 800a74c:	2340      	movs	r3, #64	; 0x40
 800a74e:	4013      	ands	r3, r2
 800a750:	d028      	beq.n	800a7a4 <ThrottleStatus+0x488>
 800a752:	4b88      	ldr	r3, [pc, #544]	; (800a974 <ThrottleStatus+0x658>)
 800a754:	22e4      	movs	r2, #228	; 0xe4
 800a756:	589b      	ldr	r3, [r3, r2]
 800a758:	031b      	lsls	r3, r3, #12
 800a75a:	0e1b      	lsrs	r3, r3, #24
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	001a      	movs	r2, r3
 800a760:	2340      	movs	r3, #64	; 0x40
 800a762:	4013      	ands	r3, r2
 800a764:	d01e      	beq.n	800a7a4 <ThrottleStatus+0x488>
        SysVars.ErrorType |= 0x01u; // Hazardous
 800a766:	4b81      	ldr	r3, [pc, #516]	; (800a96c <ThrottleStatus+0x650>)
 800a768:	22e4      	movs	r2, #228	; 0xe4
 800a76a:	5a9b      	ldrh	r3, [r3, r2]
 800a76c:	05db      	lsls	r3, r3, #23
 800a76e:	0f5b      	lsrs	r3, r3, #29
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2201      	movs	r2, #1
 800a774:	4313      	orrs	r3, r2
 800a776:	b2d9      	uxtb	r1, r3
 800a778:	4b7c      	ldr	r3, [pc, #496]	; (800a96c <ThrottleStatus+0x650>)
 800a77a:	22e4      	movs	r2, #228	; 0xe4
 800a77c:	1c08      	adds	r0, r1, #0
 800a77e:	2107      	movs	r1, #7
 800a780:	4001      	ands	r1, r0
 800a782:	018c      	lsls	r4, r1, #6
 800a784:	5a99      	ldrh	r1, [r3, r2]
 800a786:	487a      	ldr	r0, [pc, #488]	; (800a970 <ThrottleStatus+0x654>)
 800a788:	4001      	ands	r1, r0
 800a78a:	1c08      	adds	r0, r1, #0
 800a78c:	1c21      	adds	r1, r4, #0
 800a78e:	4301      	orrs	r1, r0
 800a790:	5299      	strh	r1, [r3, r2]
        SysVars.CriticalFault |= 0x01u;
 800a792:	4b76      	ldr	r3, [pc, #472]	; (800a96c <ThrottleStatus+0x650>)
 800a794:	22ec      	movs	r2, #236	; 0xec
 800a796:	5a9b      	ldrh	r3, [r3, r2]
 800a798:	2201      	movs	r2, #1
 800a79a:	4313      	orrs	r3, r2
 800a79c:	b299      	uxth	r1, r3
 800a79e:	4b73      	ldr	r3, [pc, #460]	; (800a96c <ThrottleStatus+0x650>)
 800a7a0:	22ec      	movs	r2, #236	; 0xec
 800a7a2:	5299      	strh	r1, [r3, r2]
      }
      // Foreign sensor using default factory/flash
      // Using default Flash/factory settings - indicated FLASH was corrupted
      if (ForeignSysVars.ErrorStatus & 0x40u) {
 800a7a4:	4b73      	ldr	r3, [pc, #460]	; (800a974 <ThrottleStatus+0x658>)
 800a7a6:	22e4      	movs	r2, #228	; 0xe4
 800a7a8:	589b      	ldr	r3, [r3, r2]
 800a7aa:	031b      	lsls	r3, r3, #12
 800a7ac:	0e1b      	lsrs	r3, r3, #24
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	001a      	movs	r2, r3
 800a7b2:	2340      	movs	r3, #64	; 0x40
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	d029      	beq.n	800a80c <ThrottleStatus+0x4f0>
        SysVars.ErrorType |= 0x02u; // Major error type
 800a7b8:	4b6c      	ldr	r3, [pc, #432]	; (800a96c <ThrottleStatus+0x650>)
 800a7ba:	22e4      	movs	r2, #228	; 0xe4
 800a7bc:	5a9b      	ldrh	r3, [r3, r2]
 800a7be:	05db      	lsls	r3, r3, #23
 800a7c0:	0f5b      	lsrs	r3, r3, #29
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	b2d9      	uxtb	r1, r3
 800a7ca:	4b68      	ldr	r3, [pc, #416]	; (800a96c <ThrottleStatus+0x650>)
 800a7cc:	22e4      	movs	r2, #228	; 0xe4
 800a7ce:	1c08      	adds	r0, r1, #0
 800a7d0:	2107      	movs	r1, #7
 800a7d2:	4001      	ands	r1, r0
 800a7d4:	018c      	lsls	r4, r1, #6
 800a7d6:	5a99      	ldrh	r1, [r3, r2]
 800a7d8:	4865      	ldr	r0, [pc, #404]	; (800a970 <ThrottleStatus+0x654>)
 800a7da:	4001      	ands	r1, r0
 800a7dc:	1c08      	adds	r0, r1, #0
 800a7de:	1c21      	adds	r1, r4, #0
 800a7e0:	4301      	orrs	r1, r0
 800a7e2:	5299      	strh	r1, [r3, r2]
        SysVars.MajorFault |= 0x04u << ForeignSysVars.SensorLetter;
 800a7e4:	4b61      	ldr	r3, [pc, #388]	; (800a96c <ThrottleStatus+0x650>)
 800a7e6:	22ee      	movs	r2, #238	; 0xee
 800a7e8:	5a9a      	ldrh	r2, [r3, r2]
 800a7ea:	4b62      	ldr	r3, [pc, #392]	; (800a974 <ThrottleStatus+0x658>)
 800a7ec:	21e4      	movs	r1, #228	; 0xe4
 800a7ee:	5c5b      	ldrb	r3, [r3, r1]
 800a7f0:	07db      	lsls	r3, r3, #31
 800a7f2:	0fdb      	lsrs	r3, r3, #31
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	0019      	movs	r1, r3
 800a7f8:	2304      	movs	r3, #4
 800a7fa:	408b      	lsls	r3, r1
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	4313      	orrs	r3, r2
 800a800:	b299      	uxth	r1, r3
 800a802:	4b5a      	ldr	r3, [pc, #360]	; (800a96c <ThrottleStatus+0x650>)
 800a804:	22ec      	movs	r2, #236	; 0xec
 800a806:	189b      	adds	r3, r3, r2
 800a808:	1c0a      	adds	r2, r1, #0
 800a80a:	805a      	strh	r2, [r3, #2]
      }
      // If both sensors have other failure then raise error
      if ((SysVars.ErrorStatus == 0x01u) && (ForeignSysVars.ErrorStatus == 0x01u)) {
 800a80c:	4b57      	ldr	r3, [pc, #348]	; (800a96c <ThrottleStatus+0x650>)
 800a80e:	22e4      	movs	r2, #228	; 0xe4
 800a810:	589a      	ldr	r2, [r3, r2]
 800a812:	23ff      	movs	r3, #255	; 0xff
 800a814:	031b      	lsls	r3, r3, #12
 800a816:	401a      	ands	r2, r3
 800a818:	2380      	movs	r3, #128	; 0x80
 800a81a:	015b      	lsls	r3, r3, #5
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d128      	bne.n	800a872 <ThrottleStatus+0x556>
 800a820:	4b54      	ldr	r3, [pc, #336]	; (800a974 <ThrottleStatus+0x658>)
 800a822:	22e4      	movs	r2, #228	; 0xe4
 800a824:	589a      	ldr	r2, [r3, r2]
 800a826:	23ff      	movs	r3, #255	; 0xff
 800a828:	031b      	lsls	r3, r3, #12
 800a82a:	401a      	ands	r2, r3
 800a82c:	2380      	movs	r3, #128	; 0x80
 800a82e:	015b      	lsls	r3, r3, #5
 800a830:	429a      	cmp	r2, r3
 800a832:	d11e      	bne.n	800a872 <ThrottleStatus+0x556>
        SysVars.ErrorType |= 0x01u; // Hazardous
 800a834:	4b4d      	ldr	r3, [pc, #308]	; (800a96c <ThrottleStatus+0x650>)
 800a836:	22e4      	movs	r2, #228	; 0xe4
 800a838:	5a9b      	ldrh	r3, [r3, r2]
 800a83a:	05db      	lsls	r3, r3, #23
 800a83c:	0f5b      	lsrs	r3, r3, #29
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	2201      	movs	r2, #1
 800a842:	4313      	orrs	r3, r2
 800a844:	b2d9      	uxtb	r1, r3
 800a846:	4b49      	ldr	r3, [pc, #292]	; (800a96c <ThrottleStatus+0x650>)
 800a848:	22e4      	movs	r2, #228	; 0xe4
 800a84a:	1c08      	adds	r0, r1, #0
 800a84c:	2107      	movs	r1, #7
 800a84e:	4001      	ands	r1, r0
 800a850:	018c      	lsls	r4, r1, #6
 800a852:	5a99      	ldrh	r1, [r3, r2]
 800a854:	4846      	ldr	r0, [pc, #280]	; (800a970 <ThrottleStatus+0x654>)
 800a856:	4001      	ands	r1, r0
 800a858:	1c08      	adds	r0, r1, #0
 800a85a:	1c21      	adds	r1, r4, #0
 800a85c:	4301      	orrs	r1, r0
 800a85e:	5299      	strh	r1, [r3, r2]
        SysVars.CriticalFault |= 0x01u;
 800a860:	4b42      	ldr	r3, [pc, #264]	; (800a96c <ThrottleStatus+0x650>)
 800a862:	22ec      	movs	r2, #236	; 0xec
 800a864:	5a9b      	ldrh	r3, [r3, r2]
 800a866:	2201      	movs	r2, #1
 800a868:	4313      	orrs	r3, r2
 800a86a:	b299      	uxth	r1, r3
 800a86c:	4b3f      	ldr	r3, [pc, #252]	; (800a96c <ThrottleStatus+0x650>)
 800a86e:	22ec      	movs	r2, #236	; 0xec
 800a870:	5299      	strh	r1, [r3, r2]
      }

      // If only another type of error exists - then sensor failure
      if (ForeignSysVars.ErrorStatus == 0x01u) {
 800a872:	4b40      	ldr	r3, [pc, #256]	; (800a974 <ThrottleStatus+0x658>)
 800a874:	22e4      	movs	r2, #228	; 0xe4
 800a876:	589a      	ldr	r2, [r3, r2]
 800a878:	23ff      	movs	r3, #255	; 0xff
 800a87a:	031b      	lsls	r3, r3, #12
 800a87c:	401a      	ands	r2, r3
 800a87e:	2380      	movs	r3, #128	; 0x80
 800a880:	015b      	lsls	r3, r3, #5
 800a882:	429a      	cmp	r2, r3
 800a884:	d129      	bne.n	800a8da <ThrottleStatus+0x5be>
        SysVars.ErrorType |= 0x02u;
 800a886:	4b39      	ldr	r3, [pc, #228]	; (800a96c <ThrottleStatus+0x650>)
 800a888:	22e4      	movs	r2, #228	; 0xe4
 800a88a:	5a9b      	ldrh	r3, [r3, r2]
 800a88c:	05db      	lsls	r3, r3, #23
 800a88e:	0f5b      	lsrs	r3, r3, #29
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2202      	movs	r2, #2
 800a894:	4313      	orrs	r3, r2
 800a896:	b2d9      	uxtb	r1, r3
 800a898:	4b34      	ldr	r3, [pc, #208]	; (800a96c <ThrottleStatus+0x650>)
 800a89a:	22e4      	movs	r2, #228	; 0xe4
 800a89c:	1c08      	adds	r0, r1, #0
 800a89e:	2107      	movs	r1, #7
 800a8a0:	4001      	ands	r1, r0
 800a8a2:	018c      	lsls	r4, r1, #6
 800a8a4:	5a99      	ldrh	r1, [r3, r2]
 800a8a6:	4832      	ldr	r0, [pc, #200]	; (800a970 <ThrottleStatus+0x654>)
 800a8a8:	4001      	ands	r1, r0
 800a8aa:	1c08      	adds	r0, r1, #0
 800a8ac:	1c21      	adds	r1, r4, #0
 800a8ae:	4301      	orrs	r1, r0
 800a8b0:	5299      	strh	r1, [r3, r2]
        SysVars.MajorFault |= 0x40u << ForeignSysVars.SensorLetter;
 800a8b2:	4b2e      	ldr	r3, [pc, #184]	; (800a96c <ThrottleStatus+0x650>)
 800a8b4:	22ee      	movs	r2, #238	; 0xee
 800a8b6:	5a9a      	ldrh	r2, [r3, r2]
 800a8b8:	4b2e      	ldr	r3, [pc, #184]	; (800a974 <ThrottleStatus+0x658>)
 800a8ba:	21e4      	movs	r1, #228	; 0xe4
 800a8bc:	5c5b      	ldrb	r3, [r3, r1]
 800a8be:	07db      	lsls	r3, r3, #31
 800a8c0:	0fdb      	lsrs	r3, r3, #31
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	0019      	movs	r1, r3
 800a8c6:	2340      	movs	r3, #64	; 0x40
 800a8c8:	408b      	lsls	r3, r1
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	b299      	uxth	r1, r3
 800a8d0:	4b26      	ldr	r3, [pc, #152]	; (800a96c <ThrottleStatus+0x650>)
 800a8d2:	22ec      	movs	r2, #236	; 0xec
 800a8d4:	189b      	adds	r3, r3, r2
 800a8d6:	1c0a      	adds	r2, r1, #0
 800a8d8:	805a      	strh	r2, [r3, #2]
      }
    }
    // Setpoint/Sensor A Error and Setpoint/Sensor B Error
    if ((SysVars.ErrorStatus & 0x02u) && (SysVars.ErrorStatus & 0x04u)) {
 800a8da:	4b24      	ldr	r3, [pc, #144]	; (800a96c <ThrottleStatus+0x650>)
 800a8dc:	22e4      	movs	r2, #228	; 0xe4
 800a8de:	589b      	ldr	r3, [r3, r2]
 800a8e0:	031b      	lsls	r3, r3, #12
 800a8e2:	0e1b      	lsrs	r3, r3, #24
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	001a      	movs	r2, r3
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	d028      	beq.n	800a940 <ThrottleStatus+0x624>
 800a8ee:	4b1f      	ldr	r3, [pc, #124]	; (800a96c <ThrottleStatus+0x650>)
 800a8f0:	22e4      	movs	r2, #228	; 0xe4
 800a8f2:	589b      	ldr	r3, [r3, r2]
 800a8f4:	031b      	lsls	r3, r3, #12
 800a8f6:	0e1b      	lsrs	r3, r3, #24
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	001a      	movs	r2, r3
 800a8fc:	2304      	movs	r3, #4
 800a8fe:	4013      	ands	r3, r2
 800a900:	d01e      	beq.n	800a940 <ThrottleStatus+0x624>
      SysVars.ErrorType |= 0x01u; // Hazardous error
 800a902:	4b1a      	ldr	r3, [pc, #104]	; (800a96c <ThrottleStatus+0x650>)
 800a904:	22e4      	movs	r2, #228	; 0xe4
 800a906:	5a9b      	ldrh	r3, [r3, r2]
 800a908:	05db      	lsls	r3, r3, #23
 800a90a:	0f5b      	lsrs	r3, r3, #29
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2201      	movs	r2, #1
 800a910:	4313      	orrs	r3, r2
 800a912:	b2d9      	uxtb	r1, r3
 800a914:	4b15      	ldr	r3, [pc, #84]	; (800a96c <ThrottleStatus+0x650>)
 800a916:	22e4      	movs	r2, #228	; 0xe4
 800a918:	1c08      	adds	r0, r1, #0
 800a91a:	2107      	movs	r1, #7
 800a91c:	4001      	ands	r1, r0
 800a91e:	018c      	lsls	r4, r1, #6
 800a920:	5a99      	ldrh	r1, [r3, r2]
 800a922:	4813      	ldr	r0, [pc, #76]	; (800a970 <ThrottleStatus+0x654>)
 800a924:	4001      	ands	r1, r0
 800a926:	1c08      	adds	r0, r1, #0
 800a928:	1c21      	adds	r1, r4, #0
 800a92a:	4301      	orrs	r1, r0
 800a92c:	5299      	strh	r1, [r3, r2]
      SysVars.CriticalFault |= 0x01u;
 800a92e:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <ThrottleStatus+0x650>)
 800a930:	22ec      	movs	r2, #236	; 0xec
 800a932:	5a9b      	ldrh	r3, [r3, r2]
 800a934:	2201      	movs	r2, #1
 800a936:	4313      	orrs	r3, r2
 800a938:	b299      	uxth	r1, r3
 800a93a:	4b0c      	ldr	r3, [pc, #48]	; (800a96c <ThrottleStatus+0x650>)
 800a93c:	22ec      	movs	r2, #236	; 0xec
 800a93e:	5299      	strh	r1, [r3, r2]
    }

    // Setpoint/Sensor A Error, no Setpoint/Sensor B Error
    if ((SysVars.ErrorStatus & 0x02u) && ((SysVars.ErrorStatus & 0x04u) == 0)) {
 800a940:	4b0a      	ldr	r3, [pc, #40]	; (800a96c <ThrottleStatus+0x650>)
 800a942:	22e4      	movs	r2, #228	; 0xe4
 800a944:	589b      	ldr	r3, [r3, r2]
 800a946:	031b      	lsls	r3, r3, #12
 800a948:	0e1b      	lsrs	r3, r3, #24
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	001a      	movs	r2, r3
 800a94e:	2302      	movs	r3, #2
 800a950:	4013      	ands	r3, r2
 800a952:	d032      	beq.n	800a9ba <ThrottleStatus+0x69e>
 800a954:	4b05      	ldr	r3, [pc, #20]	; (800a96c <ThrottleStatus+0x650>)
 800a956:	22e4      	movs	r2, #228	; 0xe4
 800a958:	589b      	ldr	r3, [r3, r2]
 800a95a:	031b      	lsls	r3, r3, #12
 800a95c:	0e1b      	lsrs	r3, r3, #24
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	001a      	movs	r2, r3
 800a962:	2304      	movs	r3, #4
 800a964:	4013      	ands	r3, r2
 800a966:	d128      	bne.n	800a9ba <ThrottleStatus+0x69e>
 800a968:	e006      	b.n	800a978 <ThrottleStatus+0x65c>
 800a96a:	46c0      	nop			; (mov r8, r8)
 800a96c:	200020c0 	.word	0x200020c0
 800a970:	fffffe3f 	.word	0xfffffe3f
 800a974:	20001f20 	.word	0x20001f20
      SysVars.ErrorType |= 0x02u; // Major error
 800a978:	4b7f      	ldr	r3, [pc, #508]	; (800ab78 <ThrottleStatus+0x85c>)
 800a97a:	22e4      	movs	r2, #228	; 0xe4
 800a97c:	5a9b      	ldrh	r3, [r3, r2]
 800a97e:	05db      	lsls	r3, r3, #23
 800a980:	0f5b      	lsrs	r3, r3, #29
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2202      	movs	r2, #2
 800a986:	4313      	orrs	r3, r2
 800a988:	b2d9      	uxtb	r1, r3
 800a98a:	4b7b      	ldr	r3, [pc, #492]	; (800ab78 <ThrottleStatus+0x85c>)
 800a98c:	22e4      	movs	r2, #228	; 0xe4
 800a98e:	1c08      	adds	r0, r1, #0
 800a990:	2107      	movs	r1, #7
 800a992:	4001      	ands	r1, r0
 800a994:	018c      	lsls	r4, r1, #6
 800a996:	5a99      	ldrh	r1, [r3, r2]
 800a998:	4878      	ldr	r0, [pc, #480]	; (800ab7c <ThrottleStatus+0x860>)
 800a99a:	4001      	ands	r1, r0
 800a99c:	1c08      	adds	r0, r1, #0
 800a99e:	1c21      	adds	r1, r4, #0
 800a9a0:	4301      	orrs	r1, r0
 800a9a2:	5299      	strh	r1, [r3, r2]
      SysVars.MajorFault |= 0x40u; // Sensor A Failure
 800a9a4:	4b74      	ldr	r3, [pc, #464]	; (800ab78 <ThrottleStatus+0x85c>)
 800a9a6:	22ee      	movs	r2, #238	; 0xee
 800a9a8:	5a9b      	ldrh	r3, [r3, r2]
 800a9aa:	2240      	movs	r2, #64	; 0x40
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	b299      	uxth	r1, r3
 800a9b0:	4b71      	ldr	r3, [pc, #452]	; (800ab78 <ThrottleStatus+0x85c>)
 800a9b2:	22ec      	movs	r2, #236	; 0xec
 800a9b4:	189b      	adds	r3, r3, r2
 800a9b6:	1c0a      	adds	r2, r1, #0
 800a9b8:	805a      	strh	r2, [r3, #2]
    }
    // Setpoint/Sensor A Error, no Setpoint/Sensor B Error
    if (((SysVars.ErrorStatus & 0x02u) == 0) && (SysVars.ErrorStatus & 0x04u)) {
 800a9ba:	4b6f      	ldr	r3, [pc, #444]	; (800ab78 <ThrottleStatus+0x85c>)
 800a9bc:	22e4      	movs	r2, #228	; 0xe4
 800a9be:	589b      	ldr	r3, [r3, r2]
 800a9c0:	031b      	lsls	r3, r3, #12
 800a9c2:	0e1b      	lsrs	r3, r3, #24
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	001a      	movs	r2, r3
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	d12a      	bne.n	800aa24 <ThrottleStatus+0x708>
 800a9ce:	4b6a      	ldr	r3, [pc, #424]	; (800ab78 <ThrottleStatus+0x85c>)
 800a9d0:	22e4      	movs	r2, #228	; 0xe4
 800a9d2:	589b      	ldr	r3, [r3, r2]
 800a9d4:	031b      	lsls	r3, r3, #12
 800a9d6:	0e1b      	lsrs	r3, r3, #24
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	001a      	movs	r2, r3
 800a9dc:	2304      	movs	r3, #4
 800a9de:	4013      	ands	r3, r2
 800a9e0:	d020      	beq.n	800aa24 <ThrottleStatus+0x708>
      SysVars.ErrorType |= 0x02u; // Major error
 800a9e2:	4b65      	ldr	r3, [pc, #404]	; (800ab78 <ThrottleStatus+0x85c>)
 800a9e4:	22e4      	movs	r2, #228	; 0xe4
 800a9e6:	5a9b      	ldrh	r3, [r3, r2]
 800a9e8:	05db      	lsls	r3, r3, #23
 800a9ea:	0f5b      	lsrs	r3, r3, #29
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	b2d9      	uxtb	r1, r3
 800a9f4:	4b60      	ldr	r3, [pc, #384]	; (800ab78 <ThrottleStatus+0x85c>)
 800a9f6:	22e4      	movs	r2, #228	; 0xe4
 800a9f8:	1c08      	adds	r0, r1, #0
 800a9fa:	2107      	movs	r1, #7
 800a9fc:	4001      	ands	r1, r0
 800a9fe:	018c      	lsls	r4, r1, #6
 800aa00:	5a99      	ldrh	r1, [r3, r2]
 800aa02:	485e      	ldr	r0, [pc, #376]	; (800ab7c <ThrottleStatus+0x860>)
 800aa04:	4001      	ands	r1, r0
 800aa06:	1c08      	adds	r0, r1, #0
 800aa08:	1c21      	adds	r1, r4, #0
 800aa0a:	4301      	orrs	r1, r0
 800aa0c:	5299      	strh	r1, [r3, r2]
      SysVars.MajorFault |= 0x80u; // Sensor B Failure
 800aa0e:	4b5a      	ldr	r3, [pc, #360]	; (800ab78 <ThrottleStatus+0x85c>)
 800aa10:	22ee      	movs	r2, #238	; 0xee
 800aa12:	5a9b      	ldrh	r3, [r3, r2]
 800aa14:	2280      	movs	r2, #128	; 0x80
 800aa16:	4313      	orrs	r3, r2
 800aa18:	b299      	uxth	r1, r3
 800aa1a:	4b57      	ldr	r3, [pc, #348]	; (800ab78 <ThrottleStatus+0x85c>)
 800aa1c:	22ec      	movs	r2, #236	; 0xec
 800aa1e:	189b      	adds	r3, r3, r2
 800aa20:	1c0a      	adds	r2, r1, #0
 800aa22:	805a      	strh	r2, [r3, #2]
    }
    // Error on local CAN Bus
    if (SysVars.ErrorStatus & 0x20u) {
 800aa24:	4b54      	ldr	r3, [pc, #336]	; (800ab78 <ThrottleStatus+0x85c>)
 800aa26:	22e4      	movs	r2, #228	; 0xe4
 800aa28:	589b      	ldr	r3, [r3, r2]
 800aa2a:	031b      	lsls	r3, r3, #12
 800aa2c:	0e1b      	lsrs	r3, r3, #24
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	001a      	movs	r2, r3
 800aa32:	2320      	movs	r3, #32
 800aa34:	4013      	ands	r3, r2
 800aa36:	d029      	beq.n	800aa8c <ThrottleStatus+0x770>
      SysVars.ErrorType |= 0x02u; // Major
 800aa38:	4b4f      	ldr	r3, [pc, #316]	; (800ab78 <ThrottleStatus+0x85c>)
 800aa3a:	22e4      	movs	r2, #228	; 0xe4
 800aa3c:	5a9b      	ldrh	r3, [r3, r2]
 800aa3e:	05db      	lsls	r3, r3, #23
 800aa40:	0f5b      	lsrs	r3, r3, #29
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2202      	movs	r2, #2
 800aa46:	4313      	orrs	r3, r2
 800aa48:	b2d9      	uxtb	r1, r3
 800aa4a:	4b4b      	ldr	r3, [pc, #300]	; (800ab78 <ThrottleStatus+0x85c>)
 800aa4c:	22e4      	movs	r2, #228	; 0xe4
 800aa4e:	1c08      	adds	r0, r1, #0
 800aa50:	2107      	movs	r1, #7
 800aa52:	4001      	ands	r1, r0
 800aa54:	018c      	lsls	r4, r1, #6
 800aa56:	5a99      	ldrh	r1, [r3, r2]
 800aa58:	4848      	ldr	r0, [pc, #288]	; (800ab7c <ThrottleStatus+0x860>)
 800aa5a:	4001      	ands	r1, r0
 800aa5c:	1c08      	adds	r0, r1, #0
 800aa5e:	1c21      	adds	r1, r4, #0
 800aa60:	4301      	orrs	r1, r0
 800aa62:	5299      	strh	r1, [r3, r2]
      SysVars.MajorFault |= 0x10u << SysVars.SensorLetter;
 800aa64:	4b44      	ldr	r3, [pc, #272]	; (800ab78 <ThrottleStatus+0x85c>)
 800aa66:	22ee      	movs	r2, #238	; 0xee
 800aa68:	5a9a      	ldrh	r2, [r3, r2]
 800aa6a:	4b43      	ldr	r3, [pc, #268]	; (800ab78 <ThrottleStatus+0x85c>)
 800aa6c:	21e4      	movs	r1, #228	; 0xe4
 800aa6e:	5c5b      	ldrb	r3, [r3, r1]
 800aa70:	07db      	lsls	r3, r3, #31
 800aa72:	0fdb      	lsrs	r3, r3, #31
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	0019      	movs	r1, r3
 800aa78:	2310      	movs	r3, #16
 800aa7a:	408b      	lsls	r3, r1
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	b299      	uxth	r1, r3
 800aa82:	4b3d      	ldr	r3, [pc, #244]	; (800ab78 <ThrottleStatus+0x85c>)
 800aa84:	22ec      	movs	r2, #236	; 0xec
 800aa86:	189b      	adds	r3, r3, r2
 800aa88:	1c0a      	adds	r2, r1, #0
 800aa8a:	805a      	strh	r2, [r3, #2]
    }
    // Using default Flash/factory settings - indicated FLASH was corrupted
    if (SysVars.ErrorStatus & 0x40u) {
 800aa8c:	4b3a      	ldr	r3, [pc, #232]	; (800ab78 <ThrottleStatus+0x85c>)
 800aa8e:	22e4      	movs	r2, #228	; 0xe4
 800aa90:	589b      	ldr	r3, [r3, r2]
 800aa92:	031b      	lsls	r3, r3, #12
 800aa94:	0e1b      	lsrs	r3, r3, #24
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	001a      	movs	r2, r3
 800aa9a:	2340      	movs	r3, #64	; 0x40
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	d029      	beq.n	800aaf4 <ThrottleStatus+0x7d8>
      SysVars.ErrorType |= 0x02u; // Major error type
 800aaa0:	4b35      	ldr	r3, [pc, #212]	; (800ab78 <ThrottleStatus+0x85c>)
 800aaa2:	22e4      	movs	r2, #228	; 0xe4
 800aaa4:	5a9b      	ldrh	r3, [r3, r2]
 800aaa6:	05db      	lsls	r3, r3, #23
 800aaa8:	0f5b      	lsrs	r3, r3, #29
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2202      	movs	r2, #2
 800aaae:	4313      	orrs	r3, r2
 800aab0:	b2d9      	uxtb	r1, r3
 800aab2:	4b31      	ldr	r3, [pc, #196]	; (800ab78 <ThrottleStatus+0x85c>)
 800aab4:	22e4      	movs	r2, #228	; 0xe4
 800aab6:	1c08      	adds	r0, r1, #0
 800aab8:	2107      	movs	r1, #7
 800aaba:	4001      	ands	r1, r0
 800aabc:	018c      	lsls	r4, r1, #6
 800aabe:	5a99      	ldrh	r1, [r3, r2]
 800aac0:	482e      	ldr	r0, [pc, #184]	; (800ab7c <ThrottleStatus+0x860>)
 800aac2:	4001      	ands	r1, r0
 800aac4:	1c08      	adds	r0, r1, #0
 800aac6:	1c21      	adds	r1, r4, #0
 800aac8:	4301      	orrs	r1, r0
 800aaca:	5299      	strh	r1, [r3, r2]
      SysVars.MajorFault |= 0x04u << SysVars.SensorLetter;
 800aacc:	4b2a      	ldr	r3, [pc, #168]	; (800ab78 <ThrottleStatus+0x85c>)
 800aace:	22ee      	movs	r2, #238	; 0xee
 800aad0:	5a9a      	ldrh	r2, [r3, r2]
 800aad2:	4b29      	ldr	r3, [pc, #164]	; (800ab78 <ThrottleStatus+0x85c>)
 800aad4:	21e4      	movs	r1, #228	; 0xe4
 800aad6:	5c5b      	ldrb	r3, [r3, r1]
 800aad8:	07db      	lsls	r3, r3, #31
 800aada:	0fdb      	lsrs	r3, r3, #31
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	0019      	movs	r1, r3
 800aae0:	2304      	movs	r3, #4
 800aae2:	408b      	lsls	r3, r1
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	4313      	orrs	r3, r2
 800aae8:	b299      	uxth	r1, r3
 800aaea:	4b23      	ldr	r3, [pc, #140]	; (800ab78 <ThrottleStatus+0x85c>)
 800aaec:	22ec      	movs	r2, #236	; 0xec
 800aaee:	189b      	adds	r3, r3, r2
 800aaf0:	1c0a      	adds	r2, r1, #0
 800aaf2:	805a      	strh	r2, [r3, #2]
    }
    // If only another type of error exists - then sensor failure
    if (SysVars.ErrorStatus == 0x01u) {
 800aaf4:	4b20      	ldr	r3, [pc, #128]	; (800ab78 <ThrottleStatus+0x85c>)
 800aaf6:	22e4      	movs	r2, #228	; 0xe4
 800aaf8:	589a      	ldr	r2, [r3, r2]
 800aafa:	23ff      	movs	r3, #255	; 0xff
 800aafc:	031b      	lsls	r3, r3, #12
 800aafe:	401a      	ands	r2, r3
 800ab00:	2380      	movs	r3, #128	; 0x80
 800ab02:	015b      	lsls	r3, r3, #5
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d129      	bne.n	800ab5c <ThrottleStatus+0x840>
      SysVars.ErrorType |= 0x02u;
 800ab08:	4b1b      	ldr	r3, [pc, #108]	; (800ab78 <ThrottleStatus+0x85c>)
 800ab0a:	22e4      	movs	r2, #228	; 0xe4
 800ab0c:	5a9b      	ldrh	r3, [r3, r2]
 800ab0e:	05db      	lsls	r3, r3, #23
 800ab10:	0f5b      	lsrs	r3, r3, #29
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	2202      	movs	r2, #2
 800ab16:	4313      	orrs	r3, r2
 800ab18:	b2d9      	uxtb	r1, r3
 800ab1a:	4b17      	ldr	r3, [pc, #92]	; (800ab78 <ThrottleStatus+0x85c>)
 800ab1c:	22e4      	movs	r2, #228	; 0xe4
 800ab1e:	1c08      	adds	r0, r1, #0
 800ab20:	2107      	movs	r1, #7
 800ab22:	4001      	ands	r1, r0
 800ab24:	018c      	lsls	r4, r1, #6
 800ab26:	5a99      	ldrh	r1, [r3, r2]
 800ab28:	4814      	ldr	r0, [pc, #80]	; (800ab7c <ThrottleStatus+0x860>)
 800ab2a:	4001      	ands	r1, r0
 800ab2c:	1c08      	adds	r0, r1, #0
 800ab2e:	1c21      	adds	r1, r4, #0
 800ab30:	4301      	orrs	r1, r0
 800ab32:	5299      	strh	r1, [r3, r2]
      SysVars.MajorFault |= 0x40u << SysVars.SensorLetter;
 800ab34:	4b10      	ldr	r3, [pc, #64]	; (800ab78 <ThrottleStatus+0x85c>)
 800ab36:	22ee      	movs	r2, #238	; 0xee
 800ab38:	5a9a      	ldrh	r2, [r3, r2]
 800ab3a:	4b0f      	ldr	r3, [pc, #60]	; (800ab78 <ThrottleStatus+0x85c>)
 800ab3c:	21e4      	movs	r1, #228	; 0xe4
 800ab3e:	5c5b      	ldrb	r3, [r3, r1]
 800ab40:	07db      	lsls	r3, r3, #31
 800ab42:	0fdb      	lsrs	r3, r3, #31
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	0019      	movs	r1, r3
 800ab48:	2340      	movs	r3, #64	; 0x40
 800ab4a:	408b      	lsls	r3, r1
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	b299      	uxth	r1, r3
 800ab52:	4b09      	ldr	r3, [pc, #36]	; (800ab78 <ThrottleStatus+0x85c>)
 800ab54:	22ec      	movs	r2, #236	; 0xec
 800ab56:	189b      	adds	r3, r3, r2
 800ab58:	1c0a      	adds	r2, r1, #0
 800ab5a:	805a      	strh	r2, [r3, #2]
    }
  }
  // Set CanBus control mode message = 7 for Torque mode (% Nm)
  SysVars.ControlMode = 0x07;
 800ab5c:	4b06      	ldr	r3, [pc, #24]	; (800ab78 <ThrottleStatus+0x85c>)
 800ab5e:	22e4      	movs	r2, #228	; 0xe4
 800ab60:	5c99      	ldrb	r1, [r3, r2]
 800ab62:	203e      	movs	r0, #62	; 0x3e
 800ab64:	4381      	bics	r1, r0
 800ab66:	1c08      	adds	r0, r1, #0
 800ab68:	210e      	movs	r1, #14
 800ab6a:	4301      	orrs	r1, r0
 800ab6c:	5499      	strb	r1, [r3, r2]
}
 800ab6e:	46c0      	nop			; (mov r8, r8)
 800ab70:	46bd      	mov	sp, r7
 800ab72:	b003      	add	sp, #12
 800ab74:	bd90      	pop	{r4, r7, pc}
 800ab76:	46c0      	nop			; (mov r8, r8)
 800ab78:	200020c0 	.word	0x200020c0
 800ab7c:	fffffe3f 	.word	0xfffffe3f

0800ab80 <Noise>:
//
// Returns:   None
//
// Requirement(s):
//
void Noise(void) {
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0

  // Initialize old_min to be much greater than the real min
  // Initialize old_max to be much smaller than the real max
  int32_t old_min, old_max, current_noise;

  if (Noise_Counter < 100) {
 800ab86:	4b42      	ldr	r3, [pc, #264]	; (800ac90 <Noise+0x110>)
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	2b63      	cmp	r3, #99	; 0x63
 800ab8c:	d820      	bhi.n	800abd0 <Noise+0x50>

    old_min = Min(Tmp_Min, SysVars.KmaCounts);
 800ab8e:	4b41      	ldr	r3, [pc, #260]	; (800ac94 <Noise+0x114>)
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	4b41      	ldr	r3, [pc, #260]	; (800ac98 <Noise+0x118>)
 800ab94:	699b      	ldr	r3, [r3, #24]
 800ab96:	0019      	movs	r1, r3
 800ab98:	0010      	movs	r0, r2
 800ab9a:	f7fa f8c3 	bl	8004d24 <Min>
 800ab9e:	0003      	movs	r3, r0
 800aba0:	60bb      	str	r3, [r7, #8]
    old_max = Max(Tmp_Max, SysVars.KmaCounts);
 800aba2:	4b3e      	ldr	r3, [pc, #248]	; (800ac9c <Noise+0x11c>)
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	4b3c      	ldr	r3, [pc, #240]	; (800ac98 <Noise+0x118>)
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	0019      	movs	r1, r3
 800abac:	0010      	movs	r0, r2
 800abae:	f7fa f8c9 	bl	8004d44 <Max>
 800abb2:	0003      	movs	r3, r0
 800abb4:	607b      	str	r3, [r7, #4]
    Tmp_Min = old_min;
 800abb6:	4b37      	ldr	r3, [pc, #220]	; (800ac94 <Noise+0x114>)
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	601a      	str	r2, [r3, #0]
    Tmp_Max = old_max;
 800abbc:	4b37      	ldr	r3, [pc, #220]	; (800ac9c <Noise+0x11c>)
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	601a      	str	r2, [r3, #0]
    Noise_Counter++;
 800abc2:	4b33      	ldr	r3, [pc, #204]	; (800ac90 <Noise+0x110>)
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	3301      	adds	r3, #1
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	4b31      	ldr	r3, [pc, #196]	; (800ac90 <Noise+0x110>)
 800abcc:	701a      	strb	r2, [r3, #0]
    }
    Noise_Counter = 0;
    Tmp_Min = SysVars.KmaCounts;
    Tmp_Max = SysVars.KmaCounts;
  }
}
 800abce:	e05a      	b.n	800ac86 <Noise+0x106>
  else if (Noise_Counter == 100) {
 800abd0:	4b2f      	ldr	r3, [pc, #188]	; (800ac90 <Noise+0x110>)
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	2b64      	cmp	r3, #100	; 0x64
 800abd6:	d128      	bne.n	800ac2a <Noise+0xaa>
    current_noise = Tmp_Max - Tmp_Min;
 800abd8:	4b30      	ldr	r3, [pc, #192]	; (800ac9c <Noise+0x11c>)
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	4b2d      	ldr	r3, [pc, #180]	; (800ac94 <Noise+0x114>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	60fb      	str	r3, [r7, #12]
    Noise_Counter++;
 800abe4:	4b2a      	ldr	r3, [pc, #168]	; (800ac90 <Noise+0x110>)
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	3301      	adds	r3, #1
 800abea:	b2da      	uxtb	r2, r3
 800abec:	4b28      	ldr	r3, [pc, #160]	; (800ac90 <Noise+0x110>)
 800abee:	701a      	strb	r2, [r3, #0]
    if (current_noise < 40) {
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2b27      	cmp	r3, #39	; 0x27
 800abf4:	dc15      	bgt.n	800ac22 <Noise+0xa2>
      ThrottleInfo.Moving = FALSE;
 800abf6:	4b2a      	ldr	r3, [pc, #168]	; (800aca0 <Noise+0x120>)
 800abf8:	2200      	movs	r2, #0
 800abfa:	701a      	strb	r2, [r3, #0]
      if (Avg_Noise == 0) {
 800abfc:	4b29      	ldr	r3, [pc, #164]	; (800aca4 <Noise+0x124>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d103      	bne.n	800ac0c <Noise+0x8c>
        Avg_Noise = current_noise;
 800ac04:	4b27      	ldr	r3, [pc, #156]	; (800aca4 <Noise+0x124>)
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	601a      	str	r2, [r3, #0]
}
 800ac0a:	e03c      	b.n	800ac86 <Noise+0x106>
        Avg_Noise = ExpAverage(Avg_Noise, current_noise);
 800ac0c:	4b25      	ldr	r3, [pc, #148]	; (800aca4 <Noise+0x124>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	0011      	movs	r1, r2
 800ac14:	0018      	movs	r0, r3
 800ac16:	f000 f847 	bl	800aca8 <ExpAverage>
 800ac1a:	0002      	movs	r2, r0
 800ac1c:	4b21      	ldr	r3, [pc, #132]	; (800aca4 <Noise+0x124>)
 800ac1e:	601a      	str	r2, [r3, #0]
}
 800ac20:	e031      	b.n	800ac86 <Noise+0x106>
      ThrottleInfo.Moving = TRUE;
 800ac22:	4b1f      	ldr	r3, [pc, #124]	; (800aca0 <Noise+0x120>)
 800ac24:	2201      	movs	r2, #1
 800ac26:	701a      	strb	r2, [r3, #0]
}
 800ac28:	e02d      	b.n	800ac86 <Noise+0x106>
    SysVars.Noise = Avg_Noise * 10;
 800ac2a:	4b1e      	ldr	r3, [pc, #120]	; (800aca4 <Noise+0x124>)
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	0013      	movs	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	189b      	adds	r3, r3, r2
 800ac34:	005b      	lsls	r3, r3, #1
 800ac36:	0019      	movs	r1, r3
 800ac38:	4b17      	ldr	r3, [pc, #92]	; (800ac98 <Noise+0x118>)
 800ac3a:	22f4      	movs	r2, #244	; 0xf4
 800ac3c:	5099      	str	r1, [r3, r2]
    if (SysVars.bStartupComplete == 0 && SysVars.Noise >= 0 && SysVars.Noise < 100) {
 800ac3e:	4b16      	ldr	r3, [pc, #88]	; (800ac98 <Noise+0x118>)
 800ac40:	22fa      	movs	r2, #250	; 0xfa
 800ac42:	5c9b      	ldrb	r3, [r3, r2]
 800ac44:	2201      	movs	r2, #1
 800ac46:	4013      	ands	r3, r2
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d110      	bne.n	800ac70 <Noise+0xf0>
 800ac4e:	4b12      	ldr	r3, [pc, #72]	; (800ac98 <Noise+0x118>)
 800ac50:	22f4      	movs	r2, #244	; 0xf4
 800ac52:	589b      	ldr	r3, [r3, r2]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	db0b      	blt.n	800ac70 <Noise+0xf0>
 800ac58:	4b0f      	ldr	r3, [pc, #60]	; (800ac98 <Noise+0x118>)
 800ac5a:	22f4      	movs	r2, #244	; 0xf4
 800ac5c:	589b      	ldr	r3, [r3, r2]
 800ac5e:	2b63      	cmp	r3, #99	; 0x63
 800ac60:	dc06      	bgt.n	800ac70 <Noise+0xf0>
      SysVars.bStartupComplete = 1;
 800ac62:	4b0d      	ldr	r3, [pc, #52]	; (800ac98 <Noise+0x118>)
 800ac64:	22f8      	movs	r2, #248	; 0xf8
 800ac66:	189b      	adds	r3, r3, r2
 800ac68:	789a      	ldrb	r2, [r3, #2]
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	430a      	orrs	r2, r1
 800ac6e:	709a      	strb	r2, [r3, #2]
    Noise_Counter = 0;
 800ac70:	4b07      	ldr	r3, [pc, #28]	; (800ac90 <Noise+0x110>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	701a      	strb	r2, [r3, #0]
    Tmp_Min = SysVars.KmaCounts;
 800ac76:	4b08      	ldr	r3, [pc, #32]	; (800ac98 <Noise+0x118>)
 800ac78:	699a      	ldr	r2, [r3, #24]
 800ac7a:	4b06      	ldr	r3, [pc, #24]	; (800ac94 <Noise+0x114>)
 800ac7c:	601a      	str	r2, [r3, #0]
    Tmp_Max = SysVars.KmaCounts;
 800ac7e:	4b06      	ldr	r3, [pc, #24]	; (800ac98 <Noise+0x118>)
 800ac80:	699a      	ldr	r2, [r3, #24]
 800ac82:	4b06      	ldr	r3, [pc, #24]	; (800ac9c <Noise+0x11c>)
 800ac84:	601a      	str	r2, [r3, #0]
}
 800ac86:	46c0      	nop			; (mov r8, r8)
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	b004      	add	sp, #16
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	46c0      	nop			; (mov r8, r8)
 800ac90:	20000afc 	.word	0x20000afc
 800ac94:	20000af0 	.word	0x20000af0
 800ac98:	200020c0 	.word	0x200020c0
 800ac9c:	20000af4 	.word	0x20000af4
 800aca0:	20002f30 	.word	0x20002f30
 800aca4:	20000af8 	.word	0x20000af8

0800aca8 <ExpAverage>:
//
// Returns:   The newest exponential average
//
// Requirement(s):
//
int32_t ExpAverage(int32_t avg, int32_t sample) {
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]

  int32_t average;
  int32_t alpha; // alpha controls the weight put on the current sample

  // Average = Average * (1-alpha) + current_sample * alpha
  alpha = 10; // value between 1-100 (0.01-1.00)
 800acb2:	230a      	movs	r3, #10
 800acb4:	60fb      	str	r3, [r7, #12]

  average = (avg*alpha + sample * (100-alpha))/100;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	435a      	muls	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2164      	movs	r1, #100	; 0x64
 800acc0:	1acb      	subs	r3, r1, r3
 800acc2:	6839      	ldr	r1, [r7, #0]
 800acc4:	434b      	muls	r3, r1
 800acc6:	18d3      	adds	r3, r2, r3
 800acc8:	2164      	movs	r1, #100	; 0x64
 800acca:	0018      	movs	r0, r3
 800accc:	f7f5 fb0a 	bl	80002e4 <__divsi3>
 800acd0:	0003      	movs	r3, r0
 800acd2:	60bb      	str	r3, [r7, #8]

  return average;
 800acd4:	68bb      	ldr	r3, [r7, #8]
}
 800acd6:	0018      	movs	r0, r3
 800acd8:	46bd      	mov	sp, r7
 800acda:	b004      	add	sp, #16
 800acdc:	bd80      	pop	{r7, pc}
	...

0800ace0 <ThrottleMisMatch>:
//
// Returns:   None
//
// Requirement(s):
//
void ThrottleMisMatch(void) {
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0

  // Code to run if throttle sensors mismatch
  // But only run the code on the first mismatch error
  if (bFuzzyPageValid != 0 && SysVars.bStartupComplete != 0) {
 800ace4:	4b0b      	ldr	r3, [pc, #44]	; (800ad14 <ThrottleMisMatch+0x34>)
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00f      	beq.n	800ad0c <ThrottleMisMatch+0x2c>
 800acec:	4b0a      	ldr	r3, [pc, #40]	; (800ad18 <ThrottleMisMatch+0x38>)
 800acee:	22fa      	movs	r2, #250	; 0xfa
 800acf0:	5c9b      	ldrb	r3, [r3, r2]
 800acf2:	2201      	movs	r2, #1
 800acf4:	4013      	ands	r3, r2
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d007      	beq.n	800ad0c <ThrottleMisMatch+0x2c>
    while (SysVars.Quality1 == 0) {
 800acfc:	e001      	b.n	800ad02 <ThrottleMisMatch+0x22>

      Qual_1(); // First run quality check 1 to see if there is a clear error
 800acfe:	f7f9 ffe3 	bl	8004cc8 <Qual_1>
    while (SysVars.Quality1 == 0) {
 800ad02:	4b05      	ldr	r3, [pc, #20]	; (800ad18 <ThrottleMisMatch+0x38>)
 800ad04:	22fc      	movs	r2, #252	; 0xfc
 800ad06:	589b      	ldr	r3, [r3, r2]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d0f8      	beq.n	800acfe <ThrottleMisMatch+0x1e>
    }
  }
}
 800ad0c:	46c0      	nop			; (mov r8, r8)
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	46c0      	nop			; (mov r8, r8)
 800ad14:	20002cf5 	.word	0x20002cf5
 800ad18:	200020c0 	.word	0x200020c0

0800ad1c <AngularConversion>:
//
// Returns:   None
//
// Requirement(s):
//
void AngularConversion(void) {
 800ad1c:	b5b0      	push	{r4, r5, r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0

  uint8_t i;
  int32_t SetpointRange, IndexRange;

  for (i = 1; i < FlashConfiguration->AngularOutput.TableLength; i++) {
 800ad22:	230f      	movs	r3, #15
 800ad24:	18fb      	adds	r3, r7, r3
 800ad26:	2201      	movs	r2, #1
 800ad28:	701a      	strb	r2, [r3, #0]
 800ad2a:	e06a      	b.n	800ae02 <AngularConversion+0xe6>
    if (SysVars.SetpointIndex <= FlashConfiguration->AngularOutput.TablePoint[i].Point1) {
 800ad2c:	4b3d      	ldr	r3, [pc, #244]	; (800ae24 <AngularConversion+0x108>)
 800ad2e:	22a8      	movs	r2, #168	; 0xa8
 800ad30:	589a      	ldr	r2, [r3, r2]
 800ad32:	4b3d      	ldr	r3, [pc, #244]	; (800ae28 <AngularConversion+0x10c>)
 800ad34:	6819      	ldr	r1, [r3, #0]
 800ad36:	230f      	movs	r3, #15
 800ad38:	18fb      	adds	r3, r7, r3
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	3365      	adds	r3, #101	; 0x65
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	18cb      	adds	r3, r1, r3
 800ad42:	3308      	adds	r3, #8
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	dc55      	bgt.n	800adf6 <AngularConversion+0xda>
      IndexRange = FlashConfiguration->AngularOutput.TablePoint[i].Point1 - FlashConfiguration->AngularOutput.TablePoint[i - 1].Point1;
 800ad4a:	4b37      	ldr	r3, [pc, #220]	; (800ae28 <AngularConversion+0x10c>)
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	200f      	movs	r0, #15
 800ad50:	183b      	adds	r3, r7, r0
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	3365      	adds	r3, #101	; 0x65
 800ad56:	00db      	lsls	r3, r3, #3
 800ad58:	18d3      	adds	r3, r2, r3
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	4b32      	ldr	r3, [pc, #200]	; (800ae28 <AngularConversion+0x10c>)
 800ad60:	6819      	ldr	r1, [r3, #0]
 800ad62:	183b      	adds	r3, r7, r0
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	3b01      	subs	r3, #1
 800ad68:	3365      	adds	r3, #101	; 0x65
 800ad6a:	00db      	lsls	r3, r3, #3
 800ad6c:	18cb      	adds	r3, r1, r3
 800ad6e:	3308      	adds	r3, #8
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	1ad3      	subs	r3, r2, r3
 800ad74:	60bb      	str	r3, [r7, #8]
      SetpointRange = FlashConfiguration->AngularOutput.TablePoint[i].Point2 - FlashConfiguration->AngularOutput.TablePoint[i - 1].Point2;
 800ad76:	4b2c      	ldr	r3, [pc, #176]	; (800ae28 <AngularConversion+0x10c>)
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	183b      	adds	r3, r7, r0
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	3365      	adds	r3, #101	; 0x65
 800ad80:	00db      	lsls	r3, r3, #3
 800ad82:	18d3      	adds	r3, r2, r3
 800ad84:	330c      	adds	r3, #12
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	4b27      	ldr	r3, [pc, #156]	; (800ae28 <AngularConversion+0x10c>)
 800ad8a:	6819      	ldr	r1, [r3, #0]
 800ad8c:	183b      	adds	r3, r7, r0
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	3b01      	subs	r3, #1
 800ad92:	3365      	adds	r3, #101	; 0x65
 800ad94:	00db      	lsls	r3, r3, #3
 800ad96:	18cb      	adds	r3, r1, r3
 800ad98:	330c      	adds	r3, #12
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	607b      	str	r3, [r7, #4]
      if (IndexRange != 0) {
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d038      	beq.n	800ae18 <AngularConversion+0xfc>
        SysVars.SensorAngle = MultDivideWithRounding64(SysVars.SetpointIndex - FlashConfiguration->AngularOutput.TablePoint[i - 1].Point1,
 800ada6:	4b1f      	ldr	r3, [pc, #124]	; (800ae24 <AngularConversion+0x108>)
 800ada8:	22a8      	movs	r2, #168	; 0xa8
 800adaa:	589a      	ldr	r2, [r3, r2]
 800adac:	4b1e      	ldr	r3, [pc, #120]	; (800ae28 <AngularConversion+0x10c>)
 800adae:	6819      	ldr	r1, [r3, #0]
 800adb0:	250f      	movs	r5, #15
 800adb2:	197b      	adds	r3, r7, r5
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	3b01      	subs	r3, #1
 800adb8:	3365      	adds	r3, #101	; 0x65
 800adba:	00db      	lsls	r3, r3, #3
 800adbc:	18cb      	adds	r3, r1, r3
 800adbe:	3308      	adds	r3, #8
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	1ad0      	subs	r0, r2, r3
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	6879      	ldr	r1, [r7, #4]
 800adc8:	2302      	movs	r3, #2
 800adca:	f7fd f8d7 	bl	8007f7c <MultDivideWithRounding64>
 800adce:	0003      	movs	r3, r0
 800add0:	000c      	movs	r4, r1
                           SetpointRange, IndexRange, RESULT_32) + (FlashConfiguration->AngularOutput.TablePoint[i - 1].Point2);
 800add2:	b2da      	uxtb	r2, r3
 800add4:	4b14      	ldr	r3, [pc, #80]	; (800ae28 <AngularConversion+0x10c>)
 800add6:	6819      	ldr	r1, [r3, #0]
 800add8:	197b      	adds	r3, r7, r5
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	3b01      	subs	r3, #1
 800adde:	3365      	adds	r3, #101	; 0x65
 800ade0:	00db      	lsls	r3, r3, #3
 800ade2:	18cb      	adds	r3, r1, r3
 800ade4:	330c      	adds	r3, #12
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	18d3      	adds	r3, r2, r3
 800adec:	b2d9      	uxtb	r1, r3
        SysVars.SensorAngle = MultDivideWithRounding64(SysVars.SetpointIndex - FlashConfiguration->AngularOutput.TablePoint[i - 1].Point1,
 800adee:	4b0d      	ldr	r3, [pc, #52]	; (800ae24 <AngularConversion+0x108>)
 800adf0:	22f8      	movs	r2, #248	; 0xf8
 800adf2:	5499      	strb	r1, [r3, r2]
      }
      break;
 800adf4:	e010      	b.n	800ae18 <AngularConversion+0xfc>
  for (i = 1; i < FlashConfiguration->AngularOutput.TableLength; i++) {
 800adf6:	210f      	movs	r1, #15
 800adf8:	187b      	adds	r3, r7, r1
 800adfa:	781a      	ldrb	r2, [r3, #0]
 800adfc:	187b      	adds	r3, r7, r1
 800adfe:	3201      	adds	r2, #1
 800ae00:	701a      	strb	r2, [r3, #0]
 800ae02:	230f      	movs	r3, #15
 800ae04:	18fb      	adds	r3, r7, r3
 800ae06:	781a      	ldrb	r2, [r3, #0]
 800ae08:	4b07      	ldr	r3, [pc, #28]	; (800ae28 <AngularConversion+0x10c>)
 800ae0a:	6819      	ldr	r1, [r3, #0]
 800ae0c:	23cb      	movs	r3, #203	; 0xcb
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	58cb      	ldr	r3, [r1, r3]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	db8a      	blt.n	800ad2c <AngularConversion+0x10>
    }
  }

}
 800ae16:	e000      	b.n	800ae1a <AngularConversion+0xfe>
      break;
 800ae18:	46c0      	nop			; (mov r8, r8)
}
 800ae1a:	46c0      	nop			; (mov r8, r8)
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	b004      	add	sp, #16
 800ae20:	bdb0      	pop	{r4, r5, r7, pc}
 800ae22:	46c0      	nop			; (mov r8, r8)
 800ae24:	200020c0 	.word	0x200020c0
 800ae28:	20002f04 	.word	0x20002f04

0800ae2c <ProcessThrottle>:
//
// Returns:   None
//
// Requirement(s):
//
void ProcessThrottle(void) {
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	af00      	add	r7, sp, #0

  ExecutionStart(EXECUTION_PROCESS_THROTTLE);
 800ae30:	2019      	movs	r0, #25
 800ae32:	f7f9 fbeb 	bl	800460c <ExecutionStart>

  AngularConversion();
 800ae36:	f7ff ff71 	bl	800ad1c <AngularConversion>

  Noise();
 800ae3a:	f7ff fea1 	bl	800ab80 <Noise>
  ThrottleStatus();
 800ae3e:	f7ff fa6d 	bl	800a31c <ThrottleStatus>

  ExecutionEnd(EXECUTION_PROCESS_THROTTLE);
 800ae42:	2019      	movs	r0, #25
 800ae44:	f7f9 fbfc 	bl	8004640 <ExecutionEnd>
}
 800ae48:	46c0      	nop			; (mov r8, r8)
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
	...

0800ae50 <ProcessTickCounters>:
//
// Returns:   None
//
// Requirement(s):
//
void ProcessTickCounters(void) {
 800ae50:	b590      	push	{r4, r7, lr}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0

    static uint32_t OldTicks;
    uint32_t CurrentTicks, DeltaTicks;
    int16_t i;

    ExecutionStart(EXECUTION_PROCESS_TICK_COUNTERS);
 800ae56:	2003      	movs	r0, #3
 800ae58:	f7f9 fbd8 	bl	800460c <ExecutionStart>

    CurrentTicks = STM32_GetTick();
 800ae5c:	f7fa ff8a 	bl	8005d74 <STM32_GetTick>
 800ae60:	0003      	movs	r3, r0
 800ae62:	60bb      	str	r3, [r7, #8]
    if (CurrentTicks != OldTicks) {
 800ae64:	4b3b      	ldr	r3, [pc, #236]	; (800af54 <ProcessTickCounters+0x104>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	68ba      	ldr	r2, [r7, #8]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d06a      	beq.n	800af44 <ProcessTickCounters+0xf4>
        DeltaTicks = CurrentTicks - OldTicks;
 800ae6e:	4b39      	ldr	r3, [pc, #228]	; (800af54 <ProcessTickCounters+0x104>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	607b      	str	r3, [r7, #4]
        OldTicks = CurrentTicks;
 800ae78:	4b36      	ldr	r3, [pc, #216]	; (800af54 <ProcessTickCounters+0x104>)
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	601a      	str	r2, [r3, #0]
        Ticks1ms += DeltaTicks;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	4b35      	ldr	r3, [pc, #212]	; (800af58 <ProcessTickCounters+0x108>)
 800ae84:	2100      	movs	r1, #0
 800ae86:	5e5b      	ldrsh	r3, [r3, r1]
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	18d3      	adds	r3, r2, r3
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	b21a      	sxth	r2, r3
 800ae90:	4b31      	ldr	r3, [pc, #196]	; (800af58 <ProcessTickCounters+0x108>)
 800ae92:	801a      	strh	r2, [r3, #0]
        Ticks5ms += DeltaTicks;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	4b30      	ldr	r3, [pc, #192]	; (800af5c <ProcessTickCounters+0x10c>)
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	5e5b      	ldrsh	r3, [r3, r1]
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	18d3      	adds	r3, r2, r3
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	b21a      	sxth	r2, r3
 800aea6:	4b2d      	ldr	r3, [pc, #180]	; (800af5c <ProcessTickCounters+0x10c>)
 800aea8:	801a      	strh	r2, [r3, #0]
        Ticks10ms += DeltaTicks;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	b29a      	uxth	r2, r3
 800aeae:	4b2c      	ldr	r3, [pc, #176]	; (800af60 <ProcessTickCounters+0x110>)
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	5e5b      	ldrsh	r3, [r3, r1]
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	18d3      	adds	r3, r2, r3
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	b21a      	sxth	r2, r3
 800aebc:	4b28      	ldr	r3, [pc, #160]	; (800af60 <ProcessTickCounters+0x110>)
 800aebe:	801a      	strh	r2, [r3, #0]
        Ticks20ms += DeltaTicks;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	4b27      	ldr	r3, [pc, #156]	; (800af64 <ProcessTickCounters+0x114>)
 800aec6:	2100      	movs	r1, #0
 800aec8:	5e5b      	ldrsh	r3, [r3, r1]
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	18d3      	adds	r3, r2, r3
 800aece:	b29b      	uxth	r3, r3
 800aed0:	b21a      	sxth	r2, r3
 800aed2:	4b24      	ldr	r3, [pc, #144]	; (800af64 <ProcessTickCounters+0x114>)
 800aed4:	801a      	strh	r2, [r3, #0]
        Ticks1000ms += DeltaTicks;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	4b23      	ldr	r3, [pc, #140]	; (800af68 <ProcessTickCounters+0x118>)
 800aedc:	2100      	movs	r1, #0
 800aede:	5e5b      	ldrsh	r3, [r3, r1]
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	18d3      	adds	r3, r2, r3
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	b21a      	sxth	r2, r3
 800aee8:	4b1f      	ldr	r3, [pc, #124]	; (800af68 <ProcessTickCounters+0x118>)
 800aeea:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < 6; i++) {
 800aeec:	230e      	movs	r3, #14
 800aeee:	18fb      	adds	r3, r7, r3
 800aef0:	2200      	movs	r2, #0
 800aef2:	801a      	strh	r2, [r3, #0]
 800aef4:	e020      	b.n	800af38 <ProcessTickCounters+0xe8>
            DIG_HandleStruct[i].FreqInputTicks += DeltaTicks;
 800aef6:	240e      	movs	r4, #14
 800aef8:	193b      	adds	r3, r7, r4
 800aefa:	2200      	movs	r2, #0
 800aefc:	5e9a      	ldrsh	r2, [r3, r2]
 800aefe:	491b      	ldr	r1, [pc, #108]	; (800af6c <ProcessTickCounters+0x11c>)
 800af00:	0013      	movs	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	189b      	adds	r3, r3, r2
 800af06:	011b      	lsls	r3, r3, #4
 800af08:	18cb      	adds	r3, r1, r3
 800af0a:	334c      	adds	r3, #76	; 0x4c
 800af0c:	6819      	ldr	r1, [r3, #0]
 800af0e:	193b      	adds	r3, r7, r4
 800af10:	2200      	movs	r2, #0
 800af12:	5e9a      	ldrsh	r2, [r3, r2]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	18c9      	adds	r1, r1, r3
 800af18:	4814      	ldr	r0, [pc, #80]	; (800af6c <ProcessTickCounters+0x11c>)
 800af1a:	0013      	movs	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	189b      	adds	r3, r3, r2
 800af20:	011b      	lsls	r3, r3, #4
 800af22:	18c3      	adds	r3, r0, r3
 800af24:	334c      	adds	r3, #76	; 0x4c
 800af26:	6019      	str	r1, [r3, #0]
        for (i = 0; i < 6; i++) {
 800af28:	193b      	adds	r3, r7, r4
 800af2a:	2200      	movs	r2, #0
 800af2c:	5e9b      	ldrsh	r3, [r3, r2]
 800af2e:	b29b      	uxth	r3, r3
 800af30:	3301      	adds	r3, #1
 800af32:	b29a      	uxth	r2, r3
 800af34:	193b      	adds	r3, r7, r4
 800af36:	801a      	strh	r2, [r3, #0]
 800af38:	230e      	movs	r3, #14
 800af3a:	18fb      	adds	r3, r7, r3
 800af3c:	2200      	movs	r2, #0
 800af3e:	5e9b      	ldrsh	r3, [r3, r2]
 800af40:	2b05      	cmp	r3, #5
 800af42:	ddd8      	ble.n	800aef6 <ProcessTickCounters+0xa6>
        }
    }

    ExecutionEnd(EXECUTION_PROCESS_TICK_COUNTERS);
 800af44:	2003      	movs	r0, #3
 800af46:	f7f9 fb7b 	bl	8004640 <ExecutionEnd>
}
 800af4a:	46c0      	nop			; (mov r8, r8)
 800af4c:	46bd      	mov	sp, r7
 800af4e:	b005      	add	sp, #20
 800af50:	bd90      	pop	{r4, r7, pc}
 800af52:	46c0      	nop			; (mov r8, r8)
 800af54:	20000b00 	.word	0x20000b00
 800af58:	20002cf8 	.word	0x20002cf8
 800af5c:	20002f9c 	.word	0x20002f9c
 800af60:	20000c5c 	.word	0x20000c5c
 800af64:	20002a0a 	.word	0x20002a0a
 800af68:	20002a08 	.word	0x20002a08
 800af6c:	20002d24 	.word	0x20002d24

0800af70 <STM32_TIM_Base_Init>:
//
// Returns:   None
//
// Requirement(s):
//
void STM32_TIM_Base_Init(TIM_TypeDef *TIMx, uint32_t Prescaler, uint32_t Period, uint32_t AutoReloadPreload) {
 800af70:	b580      	push	{r7, lr}
 800af72:	b086      	sub	sp, #24
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	603b      	str	r3, [r7, #0]

    uint32_t TmpControlReg1;

    TmpControlReg1 = TIMx->CR1;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	617b      	str	r3, [r7, #20]
    if ((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3)) {
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	4a2c      	ldr	r2, [pc, #176]	; (800b038 <STM32_TIM_Base_Init+0xc8>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d008      	beq.n	800af9e <STM32_TIM_Base_Init+0x2e>
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	2380      	movs	r3, #128	; 0x80
 800af90:	05db      	lsls	r3, r3, #23
 800af92:	429a      	cmp	r2, r3
 800af94:	d003      	beq.n	800af9e <STM32_TIM_Base_Init+0x2e>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	4a28      	ldr	r2, [pc, #160]	; (800b03c <STM32_TIM_Base_Init+0xcc>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d103      	bne.n	800afa6 <STM32_TIM_Base_Init+0x36>
        TmpControlReg1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	2270      	movs	r2, #112	; 0x70
 800afa2:	4393      	bics	r3, r2
 800afa4:	617b      	str	r3, [r7, #20]
        TmpControlReg1 |= TIM_COUNTERMODE_UP;
    }
    if ((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3) || (TIMx == TIM14) || (TIMx == TIM15) ||
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	4a23      	ldr	r2, [pc, #140]	; (800b038 <STM32_TIM_Base_Init+0xc8>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d018      	beq.n	800afe0 <STM32_TIM_Base_Init+0x70>
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	2380      	movs	r3, #128	; 0x80
 800afb2:	05db      	lsls	r3, r3, #23
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d013      	beq.n	800afe0 <STM32_TIM_Base_Init+0x70>
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	4a20      	ldr	r2, [pc, #128]	; (800b03c <STM32_TIM_Base_Init+0xcc>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d00f      	beq.n	800afe0 <STM32_TIM_Base_Init+0x70>
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4a1f      	ldr	r2, [pc, #124]	; (800b040 <STM32_TIM_Base_Init+0xd0>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d00b      	beq.n	800afe0 <STM32_TIM_Base_Init+0x70>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	4a1e      	ldr	r2, [pc, #120]	; (800b044 <STM32_TIM_Base_Init+0xd4>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d007      	beq.n	800afe0 <STM32_TIM_Base_Init+0x70>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	4a1d      	ldr	r2, [pc, #116]	; (800b048 <STM32_TIM_Base_Init+0xd8>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d003      	beq.n	800afe0 <STM32_TIM_Base_Init+0x70>
        (TIMx == TIM16) || (TIMx == TIM17)) {
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	4a1c      	ldr	r2, [pc, #112]	; (800b04c <STM32_TIM_Base_Init+0xdc>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d103      	bne.n	800afe8 <STM32_TIM_Base_Init+0x78>
        TmpControlReg1 &= ~TIM_CR1_CKD;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	4a1b      	ldr	r2, [pc, #108]	; (800b050 <STM32_TIM_Base_Init+0xe0>)
 800afe4:	4013      	ands	r3, r2
 800afe6:	617b      	str	r3, [r7, #20]
        TmpControlReg1 |= TIM_CLOCKDIVISION_DIV1;
    }
    TIMx->CR1 = (TmpControlReg1 & ~TIM_CR1_ARPE) | AutoReloadPreload;
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	2280      	movs	r2, #128	; 0x80
 800afec:	4393      	bics	r3, r2
 800afee:	001a      	movs	r2, r3
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	431a      	orrs	r2, r3
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	601a      	str	r2, [r3, #0]
    TIMx->ARR = Period;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	62da      	str	r2, [r3, #44]	; 0x2c
    TIMx->PSC = Prescaler;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	629a      	str	r2, [r3, #40]	; 0x28
    if ((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17)) {
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	4a0c      	ldr	r2, [pc, #48]	; (800b038 <STM32_TIM_Base_Init+0xc8>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d00b      	beq.n	800b024 <STM32_TIM_Base_Init+0xb4>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	4a0d      	ldr	r2, [pc, #52]	; (800b044 <STM32_TIM_Base_Init+0xd4>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d007      	beq.n	800b024 <STM32_TIM_Base_Init+0xb4>
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	4a0c      	ldr	r2, [pc, #48]	; (800b048 <STM32_TIM_Base_Init+0xd8>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d003      	beq.n	800b024 <STM32_TIM_Base_Init+0xb4>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	4a0b      	ldr	r2, [pc, #44]	; (800b04c <STM32_TIM_Base_Init+0xdc>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d102      	bne.n	800b02a <STM32_TIM_Base_Init+0xba>
        TIMx->RCR = 0;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2200      	movs	r2, #0
 800b028:	631a      	str	r2, [r3, #48]	; 0x30
    }
    TIMx->EGR = TIM_EGR_UG;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2201      	movs	r2, #1
 800b02e:	615a      	str	r2, [r3, #20]
}
 800b030:	46c0      	nop			; (mov r8, r8)
 800b032:	46bd      	mov	sp, r7
 800b034:	b006      	add	sp, #24
 800b036:	bd80      	pop	{r7, pc}
 800b038:	40012c00 	.word	0x40012c00
 800b03c:	40000400 	.word	0x40000400
 800b040:	40002000 	.word	0x40002000
 800b044:	40014000 	.word	0x40014000
 800b048:	40014400 	.word	0x40014400
 800b04c:	40014800 	.word	0x40014800
 800b050:	fffffcff 	.word	0xfffffcff

0800b054 <STM32_TIM_OC1_SetConfig>:
//
// Returns:   None
//
// Requirement(s):
//
static void STM32_TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]

    uint32_t TmpCaptureCompareModeRegx, TmpCaptureCompareEnableReg, TmpControlReg2;

    TIMx->CCER &= ~TIM_CCER_CC1E;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a1b      	ldr	r3, [r3, #32]
 800b062:	2201      	movs	r2, #1
 800b064:	4393      	bics	r3, r2
 800b066:	001a      	movs	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	621a      	str	r2, [r3, #32]
    TmpCaptureCompareEnableReg = TIMx->CCER;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a1b      	ldr	r3, [r3, #32]
 800b070:	617b      	str	r3, [r7, #20]
    TmpControlReg2 = TIMx->CR2;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	613b      	str	r3, [r7, #16]
    TmpCaptureCompareModeRegx = TIMx->CCMR1;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	60fb      	str	r3, [r7, #12]
    TmpCaptureCompareModeRegx &= ~TIM_CCMR1_OC1M;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2270      	movs	r2, #112	; 0x70
 800b082:	4393      	bics	r3, r2
 800b084:	60fb      	str	r3, [r7, #12]
    TmpCaptureCompareModeRegx &= ~TIM_CCMR1_CC1S;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2203      	movs	r2, #3
 800b08a:	4393      	bics	r3, r2
 800b08c:	60fb      	str	r3, [r7, #12]
    TmpCaptureCompareModeRegx |= OC_Config->OCMode;
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	4313      	orrs	r3, r2
 800b096:	60fb      	str	r3, [r7, #12]
    TmpCaptureCompareEnableReg &= ~TIM_CCER_CC1P;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	2202      	movs	r2, #2
 800b09c:	4393      	bics	r3, r2
 800b09e:	617b      	str	r3, [r7, #20]
    TmpCaptureCompareEnableReg |= OC_Config->OCPolarity;
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	617b      	str	r3, [r7, #20]

    if ((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17)) {
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a1f      	ldr	r2, [pc, #124]	; (800b12c <STM32_TIM_OC1_SetConfig+0xd8>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d00b      	beq.n	800b0ca <STM32_TIM_OC1_SetConfig+0x76>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a1e      	ldr	r2, [pc, #120]	; (800b130 <STM32_TIM_OC1_SetConfig+0xdc>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d007      	beq.n	800b0ca <STM32_TIM_OC1_SetConfig+0x76>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4a1d      	ldr	r2, [pc, #116]	; (800b134 <STM32_TIM_OC1_SetConfig+0xe0>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d003      	beq.n	800b0ca <STM32_TIM_OC1_SetConfig+0x76>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	4a1c      	ldr	r2, [pc, #112]	; (800b138 <STM32_TIM_OC1_SetConfig+0xe4>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d11e      	bne.n	800b108 <STM32_TIM_OC1_SetConfig+0xb4>
        TmpCaptureCompareEnableReg &= ~TIM_CCER_CC1NP;
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	2208      	movs	r2, #8
 800b0ce:	4393      	bics	r3, r2
 800b0d0:	617b      	str	r3, [r7, #20]
        TmpCaptureCompareEnableReg |= OC_Config->OCNPolarity;
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	617b      	str	r3, [r7, #20]
        TmpCaptureCompareEnableReg &= ~TIM_CCER_CC1NE;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	2204      	movs	r2, #4
 800b0e0:	4393      	bics	r3, r2
 800b0e2:	617b      	str	r3, [r7, #20]

        TmpControlReg2 &= ~TIM_CR2_OIS1;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	4a15      	ldr	r2, [pc, #84]	; (800b13c <STM32_TIM_OC1_SetConfig+0xe8>)
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	613b      	str	r3, [r7, #16]
        TmpControlReg2 &= ~TIM_CR2_OIS1N;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	4a14      	ldr	r2, [pc, #80]	; (800b140 <STM32_TIM_OC1_SetConfig+0xec>)
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	613b      	str	r3, [r7, #16]
        TmpControlReg2 |= OC_Config->OCIdleState;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	695b      	ldr	r3, [r3, #20]
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	613b      	str	r3, [r7, #16]
        TmpControlReg2 |= OC_Config->OCNIdleState;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	4313      	orrs	r3, r2
 800b106:	613b      	str	r3, [r7, #16]
    }

    TIMx->CR2 = TmpControlReg2;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	693a      	ldr	r2, [r7, #16]
 800b10c:	605a      	str	r2, [r3, #4]
    TIMx->CCMR1 = TmpCaptureCompareModeRegx;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	619a      	str	r2, [r3, #24]
    TIMx->CCR1 = OC_Config->Pulse;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	685a      	ldr	r2, [r3, #4]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	635a      	str	r2, [r3, #52]	; 0x34
    TIMx->CCER = TmpCaptureCompareEnableReg;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	697a      	ldr	r2, [r7, #20]
 800b120:	621a      	str	r2, [r3, #32]
}
 800b122:	46c0      	nop			; (mov r8, r8)
 800b124:	46bd      	mov	sp, r7
 800b126:	b006      	add	sp, #24
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	46c0      	nop			; (mov r8, r8)
 800b12c:	40012c00 	.word	0x40012c00
 800b130:	40014000 	.word	0x40014000
 800b134:	40014400 	.word	0x40014400
 800b138:	40014800 	.word	0x40014800
 800b13c:	fffffeff 	.word	0xfffffeff
 800b140:	fffffdff 	.word	0xfffffdff

0800b144 <STM32_TIM_OC2_SetConfig>:
//
// Returns:   None
//
// Requirement(s):
//
static void STM32_TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 800b144:	b580      	push	{r7, lr}
 800b146:	b086      	sub	sp, #24
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]

    uint32_t TmpCaptureCompareModeRegx = 0u;
 800b14e:	2300      	movs	r3, #0
 800b150:	613b      	str	r3, [r7, #16]
    uint32_t TmpCaptureCompareEnableReg = 0u;
 800b152:	2300      	movs	r3, #0
 800b154:	60fb      	str	r3, [r7, #12]
    uint32_t TmpControlReg2 = 0u;
 800b156:	2300      	movs	r3, #0
 800b158:	617b      	str	r3, [r7, #20]

    TIMx->CCER &= ~TIM_CCER_CC2E;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a1b      	ldr	r3, [r3, #32]
 800b15e:	2210      	movs	r2, #16
 800b160:	4393      	bics	r3, r2
 800b162:	001a      	movs	r2, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	621a      	str	r2, [r3, #32]

    TmpCaptureCompareEnableReg = TIMx->CCER;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a1b      	ldr	r3, [r3, #32]
 800b16c:	60fb      	str	r3, [r7, #12]
    TmpControlReg2 = TIMx->CR2;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	617b      	str	r3, [r7, #20]

    TmpCaptureCompareModeRegx = TIMx->CCMR1;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	613b      	str	r3, [r7, #16]
    TmpCaptureCompareModeRegx &= ~TIM_CCMR1_OC2M;
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	4a25      	ldr	r2, [pc, #148]	; (800b214 <STM32_TIM_OC2_SetConfig+0xd0>)
 800b17e:	4013      	ands	r3, r2
 800b180:	613b      	str	r3, [r7, #16]
    TmpCaptureCompareModeRegx &= ~TIM_CCMR1_CC2S;
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	4a24      	ldr	r2, [pc, #144]	; (800b218 <STM32_TIM_OC2_SetConfig+0xd4>)
 800b186:	4013      	ands	r3, r2
 800b188:	613b      	str	r3, [r7, #16]
    TmpCaptureCompareModeRegx |= (OC_Config->OCMode << 8u);
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	021b      	lsls	r3, r3, #8
 800b190:	693a      	ldr	r2, [r7, #16]
 800b192:	4313      	orrs	r3, r2
 800b194:	613b      	str	r3, [r7, #16]

    TmpCaptureCompareEnableReg &= ~TIM_CCER_CC2P;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2220      	movs	r2, #32
 800b19a:	4393      	bics	r3, r2
 800b19c:	60fb      	str	r3, [r7, #12]
    TmpCaptureCompareEnableReg |= (OC_Config->OCPolarity << 4u);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	011b      	lsls	r3, r3, #4
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	60fb      	str	r3, [r7, #12]

    if ((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17)) {
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a1b      	ldr	r2, [pc, #108]	; (800b21c <STM32_TIM_OC2_SetConfig+0xd8>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d00b      	beq.n	800b1ca <STM32_TIM_OC2_SetConfig+0x86>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a1a      	ldr	r2, [pc, #104]	; (800b220 <STM32_TIM_OC2_SetConfig+0xdc>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d007      	beq.n	800b1ca <STM32_TIM_OC2_SetConfig+0x86>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4a19      	ldr	r2, [pc, #100]	; (800b224 <STM32_TIM_OC2_SetConfig+0xe0>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d003      	beq.n	800b1ca <STM32_TIM_OC2_SetConfig+0x86>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4a18      	ldr	r2, [pc, #96]	; (800b228 <STM32_TIM_OC2_SetConfig+0xe4>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d113      	bne.n	800b1f2 <STM32_TIM_OC2_SetConfig+0xae>
        TmpControlReg2 &= ~TIM_CR2_OIS2;
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	4a17      	ldr	r2, [pc, #92]	; (800b22c <STM32_TIM_OC2_SetConfig+0xe8>)
 800b1ce:	4013      	ands	r3, r2
 800b1d0:	617b      	str	r3, [r7, #20]
        TmpControlReg2 &= ~TIM_CR2_OIS2N;
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	4a16      	ldr	r2, [pc, #88]	; (800b230 <STM32_TIM_OC2_SetConfig+0xec>)
 800b1d6:	4013      	ands	r3, r2
 800b1d8:	617b      	str	r3, [r7, #20]
        TmpControlReg2 |= (OC_Config->OCIdleState << 2u);
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	695b      	ldr	r3, [r3, #20]
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	697a      	ldr	r2, [r7, #20]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	617b      	str	r3, [r7, #20]
        TmpControlReg2 |= (OC_Config->OCNIdleState << 2u);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	617b      	str	r3, [r7, #20]
    }
    TIMx->CR2 = TmpControlReg2;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	697a      	ldr	r2, [r7, #20]
 800b1f6:	605a      	str	r2, [r3, #4]
    TIMx->CCMR1 = TmpCaptureCompareModeRegx;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	619a      	str	r2, [r3, #24]
    TIMx->CCR2 = OC_Config->Pulse;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	639a      	str	r2, [r3, #56]	; 0x38
    TIMx->CCER = TmpCaptureCompareEnableReg;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	621a      	str	r2, [r3, #32]
}
 800b20c:	46c0      	nop			; (mov r8, r8)
 800b20e:	46bd      	mov	sp, r7
 800b210:	b006      	add	sp, #24
 800b212:	bd80      	pop	{r7, pc}
 800b214:	ffff8fff 	.word	0xffff8fff
 800b218:	fffffcff 	.word	0xfffffcff
 800b21c:	40012c00 	.word	0x40012c00
 800b220:	40014000 	.word	0x40014000
 800b224:	40014400 	.word	0x40014400
 800b228:	40014800 	.word	0x40014800
 800b22c:	fffffbff 	.word	0xfffffbff
 800b230:	fffff7ff 	.word	0xfffff7ff

0800b234 <STM32_TIM_PWM_ConfigChannel>:
//
// Returns:   None
//
// Requirement(s):
//
void STM32_TIM_PWM_ConfigChannel(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *sConfig, uint32_t Channel) {
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]

    switch (Channel) {
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d002      	beq.n	800b24c <STM32_TIM_PWM_ConfigChannel+0x18>
 800b246:	2b04      	cmp	r3, #4
 800b248:	d01b      	beq.n	800b282 <STM32_TIM_PWM_ConfigChannel+0x4e>
 800b24a:	e036      	b.n	800b2ba <STM32_TIM_PWM_ConfigChannel+0x86>
    case TIM_CHANNEL_1:
        STM32_TIM_OC1_SetConfig(TIMx, sConfig);
 800b24c:	68ba      	ldr	r2, [r7, #8]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	0011      	movs	r1, r2
 800b252:	0018      	movs	r0, r3
 800b254:	f7ff fefe 	bl	800b054 <STM32_TIM_OC1_SetConfig>
        TIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	2208      	movs	r2, #8
 800b25e:	431a      	orrs	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	619a      	str	r2, [r3, #24]
        TIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	699b      	ldr	r3, [r3, #24]
 800b268:	2204      	movs	r2, #4
 800b26a:	4393      	bics	r3, r2
 800b26c:	001a      	movs	r2, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	619a      	str	r2, [r3, #24]
        TIMx->CCMR1 |= sConfig->OCFastMode;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	699a      	ldr	r2, [r3, #24]
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	431a      	orrs	r2, r3
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	619a      	str	r2, [r3, #24]
        break;
 800b280:	e020      	b.n	800b2c4 <STM32_TIM_PWM_ConfigChannel+0x90>

    case TIM_CHANNEL_2:
        STM32_TIM_OC2_SetConfig(TIMx, sConfig);
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	0011      	movs	r1, r2
 800b288:	0018      	movs	r0, r3
 800b28a:	f7ff ff5b 	bl	800b144 <STM32_TIM_OC2_SetConfig>
        TIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	2280      	movs	r2, #128	; 0x80
 800b294:	0112      	lsls	r2, r2, #4
 800b296:	431a      	orrs	r2, r3
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	619a      	str	r2, [r3, #24]
        TIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	4a0a      	ldr	r2, [pc, #40]	; (800b2cc <STM32_TIM_PWM_ConfigChannel+0x98>)
 800b2a2:	401a      	ands	r2, r3
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	619a      	str	r2, [r3, #24]
        TIMx->CCMR1 |= sConfig->OCFastMode << 8u;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	699a      	ldr	r2, [r3, #24]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	021b      	lsls	r3, r3, #8
 800b2b2:	431a      	orrs	r2, r3
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	619a      	str	r2, [r3, #24]
        break;
 800b2b8:	e004      	b.n	800b2c4 <STM32_TIM_PWM_ConfigChannel+0x90>
    default:
        Error_Handler(FILE_TIMER, __LINE__);
 800b2ba:	21c6      	movs	r1, #198	; 0xc6
 800b2bc:	201f      	movs	r0, #31
 800b2be:	f7f9 f889 	bl	80043d4 <Error_Handler>
        break;
 800b2c2:	46c0      	nop			; (mov r8, r8)
    }
}
 800b2c4:	46c0      	nop			; (mov r8, r8)
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	b004      	add	sp, #16
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	fffffbff 	.word	0xfffffbff

0800b2d0 <STM32_TIM_MspPostInit>:
//
// Returns:   None
//
// Requirement(s):
//
void STM32_TIM_MspPostInit(TIM_TypeDef *TIMx) {
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af04      	add	r7, sp, #16
 800b2d6:	6078      	str	r0, [r7, #4]

    if (TIMx == TIM1) {
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a30      	ldr	r2, [pc, #192]	; (800b39c <STM32_TIM_MspPostInit+0xcc>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d10e      	bne.n	800b2fe <STM32_TIM_MspPostInit+0x2e>
        STM32_GPIO_Init(DIG_IO6_GPIO_Port, DIG_IO6_Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF2_TIM1, 0);
 800b2e0:	2380      	movs	r3, #128	; 0x80
 800b2e2:	0059      	lsls	r1, r3, #1
 800b2e4:	2390      	movs	r3, #144	; 0x90
 800b2e6:	05d8      	lsls	r0, r3, #23
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	9302      	str	r3, [sp, #8]
 800b2ec:	2302      	movs	r3, #2
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	f7fa fb4e 	bl	8005998 <STM32_GPIO_Init>
    } else if (TIMx == TIM17) {
        STM32_GPIO_Init(DIG_IO3_GPIO_Port, DIG_IO3_Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF2_TIM17, 0);
    } else {
        Error_Handler(FILE_TIMER, __LINE__);
    }
}
 800b2fc:	e04a      	b.n	800b394 <STM32_TIM_MspPostInit+0xc4>
    } else if (TIMx == TIM3) {
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a27      	ldr	r2, [pc, #156]	; (800b3a0 <STM32_TIM_MspPostInit+0xd0>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d10c      	bne.n	800b320 <STM32_TIM_MspPostInit+0x50>
        STM32_GPIO_Init(DIG_IO4_GPIO_Port, DIG_IO4_Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF1_TIM3, 0);
 800b306:	4827      	ldr	r0, [pc, #156]	; (800b3a4 <STM32_TIM_MspPostInit+0xd4>)
 800b308:	2300      	movs	r3, #0
 800b30a:	9302      	str	r3, [sp, #8]
 800b30c:	2301      	movs	r3, #1
 800b30e:	9301      	str	r3, [sp, #4]
 800b310:	2300      	movs	r3, #0
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	2300      	movs	r3, #0
 800b316:	2202      	movs	r2, #2
 800b318:	2110      	movs	r1, #16
 800b31a:	f7fa fb3d 	bl	8005998 <STM32_GPIO_Init>
}
 800b31e:	e039      	b.n	800b394 <STM32_TIM_MspPostInit+0xc4>
    } else if (TIMx == TIM15) {
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a21      	ldr	r2, [pc, #132]	; (800b3a8 <STM32_TIM_MspPostInit+0xd8>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d10d      	bne.n	800b344 <STM32_TIM_MspPostInit+0x74>
        STM32_GPIO_Init(DIG_IO1_GPIO_Port, DIG_IO1_Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF0_TIM15, 0);
 800b328:	2390      	movs	r3, #144	; 0x90
 800b32a:	05d8      	lsls	r0, r3, #23
 800b32c:	2300      	movs	r3, #0
 800b32e:	9302      	str	r3, [sp, #8]
 800b330:	2300      	movs	r3, #0
 800b332:	9301      	str	r3, [sp, #4]
 800b334:	2300      	movs	r3, #0
 800b336:	9300      	str	r3, [sp, #0]
 800b338:	2300      	movs	r3, #0
 800b33a:	2202      	movs	r2, #2
 800b33c:	2108      	movs	r1, #8
 800b33e:	f7fa fb2b 	bl	8005998 <STM32_GPIO_Init>
}
 800b342:	e027      	b.n	800b394 <STM32_TIM_MspPostInit+0xc4>
    } else if (TIMx == TIM16) {
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a19      	ldr	r2, [pc, #100]	; (800b3ac <STM32_TIM_MspPostInit+0xdc>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d10d      	bne.n	800b368 <STM32_TIM_MspPostInit+0x98>
        STM32_GPIO_Init(DIG_IO2_GPIO_Port, DIG_IO2_Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF2_TIM16, 0);
 800b34c:	2380      	movs	r3, #128	; 0x80
 800b34e:	0059      	lsls	r1, r3, #1
 800b350:	4814      	ldr	r0, [pc, #80]	; (800b3a4 <STM32_TIM_MspPostInit+0xd4>)
 800b352:	2300      	movs	r3, #0
 800b354:	9302      	str	r3, [sp, #8]
 800b356:	2302      	movs	r3, #2
 800b358:	9301      	str	r3, [sp, #4]
 800b35a:	2300      	movs	r3, #0
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	2300      	movs	r3, #0
 800b360:	2202      	movs	r2, #2
 800b362:	f7fa fb19 	bl	8005998 <STM32_GPIO_Init>
}
 800b366:	e015      	b.n	800b394 <STM32_TIM_MspPostInit+0xc4>
    } else if (TIMx == TIM17) {
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a11      	ldr	r2, [pc, #68]	; (800b3b0 <STM32_TIM_MspPostInit+0xe0>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d10d      	bne.n	800b38c <STM32_TIM_MspPostInit+0xbc>
        STM32_GPIO_Init(DIG_IO3_GPIO_Port, DIG_IO3_Pin, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF2_TIM17, 0);
 800b370:	2380      	movs	r3, #128	; 0x80
 800b372:	0099      	lsls	r1, r3, #2
 800b374:	480b      	ldr	r0, [pc, #44]	; (800b3a4 <STM32_TIM_MspPostInit+0xd4>)
 800b376:	2300      	movs	r3, #0
 800b378:	9302      	str	r3, [sp, #8]
 800b37a:	2302      	movs	r3, #2
 800b37c:	9301      	str	r3, [sp, #4]
 800b37e:	2300      	movs	r3, #0
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	2300      	movs	r3, #0
 800b384:	2202      	movs	r2, #2
 800b386:	f7fa fb07 	bl	8005998 <STM32_GPIO_Init>
}
 800b38a:	e003      	b.n	800b394 <STM32_TIM_MspPostInit+0xc4>
        Error_Handler(FILE_TIMER, __LINE__);
 800b38c:	21e2      	movs	r1, #226	; 0xe2
 800b38e:	201f      	movs	r0, #31
 800b390:	f7f9 f820 	bl	80043d4 <Error_Handler>
}
 800b394:	46c0      	nop			; (mov r8, r8)
 800b396:	46bd      	mov	sp, r7
 800b398:	b002      	add	sp, #8
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	40012c00 	.word	0x40012c00
 800b3a0:	40000400 	.word	0x40000400
 800b3a4:	48000400 	.word	0x48000400
 800b3a8:	40014000 	.word	0x40014000
 800b3ac:	40014400 	.word	0x40014400
 800b3b0:	40014800 	.word	0x40014800

0800b3b4 <STM32_TIM_PWM_Start>:
//
// Returns:   None
//
// Requirement(s):
//
void STM32_TIM_PWM_Start(TIM_TypeDef *TIMx, uint32_t Channel) {
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]

    uint32_t Tmp;

    Tmp = TIM_CCER_CC1E << Channel;
 800b3be:	2201      	movs	r2, #1
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	409a      	lsls	r2, r3
 800b3c4:	0013      	movs	r3, r2
 800b3c6:	60fb      	str	r3, [r7, #12]
    TIMx->CCER &= ~Tmp;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6a1b      	ldr	r3, [r3, #32]
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	43d2      	mvns	r2, r2
 800b3d0:	401a      	ands	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	621a      	str	r2, [r3, #32]
    TIMx->CCER |= TIM_CCx_ENABLE << Channel;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a1a      	ldr	r2, [r3, #32]
 800b3da:	2101      	movs	r1, #1
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	4099      	lsls	r1, r3
 800b3e0:	000b      	movs	r3, r1
 800b3e2:	431a      	orrs	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	621a      	str	r2, [r3, #32]

    if ((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17)) {
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a10      	ldr	r2, [pc, #64]	; (800b42c <STM32_TIM_PWM_Start+0x78>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d00b      	beq.n	800b408 <STM32_TIM_PWM_Start+0x54>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a0f      	ldr	r2, [pc, #60]	; (800b430 <STM32_TIM_PWM_Start+0x7c>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d007      	beq.n	800b408 <STM32_TIM_PWM_Start+0x54>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a0e      	ldr	r2, [pc, #56]	; (800b434 <STM32_TIM_PWM_Start+0x80>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d003      	beq.n	800b408 <STM32_TIM_PWM_Start+0x54>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a0d      	ldr	r2, [pc, #52]	; (800b438 <STM32_TIM_PWM_Start+0x84>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d106      	bne.n	800b416 <STM32_TIM_PWM_Start+0x62>
        TIMx->BDTR |= TIM_BDTR_MOE;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b40c:	2280      	movs	r2, #128	; 0x80
 800b40e:	0212      	lsls	r2, r2, #8
 800b410:	431a      	orrs	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	645a      	str	r2, [r3, #68]	; 0x44
    }
    TIMx->CR1 |= TIM_CR1_CEN;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2201      	movs	r2, #1
 800b41c:	431a      	orrs	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	601a      	str	r2, [r3, #0]
}
 800b422:	46c0      	nop			; (mov r8, r8)
 800b424:	46bd      	mov	sp, r7
 800b426:	b004      	add	sp, #16
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	46c0      	nop			; (mov r8, r8)
 800b42c:	40012c00 	.word	0x40012c00
 800b430:	40014000 	.word	0x40014000
 800b434:	40014400 	.word	0x40014400
 800b438:	40014800 	.word	0x40014800

0800b43c <STM32_TIM_Base_DeInit>:
//
// Returns:   None
//
// Requirement(s):
//
void STM32_TIM_Base_DeInit(TIM_TypeDef *TIMx) {
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]

    if ((TIMx->CCER & TIM_CCER_CCxE_MASK) == 0) {
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a1b      	ldr	r3, [r3, #32]
 800b448:	4a09      	ldr	r2, [pc, #36]	; (800b470 <STM32_TIM_Base_DeInit+0x34>)
 800b44a:	4013      	ands	r3, r2
 800b44c:	d10b      	bne.n	800b466 <STM32_TIM_Base_DeInit+0x2a>
        if ((TIMx->CCER & TIM_CCER_CCxNE_MASK) == 0) {
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	4a08      	ldr	r2, [pc, #32]	; (800b474 <STM32_TIM_Base_DeInit+0x38>)
 800b454:	4013      	ands	r3, r2
 800b456:	d106      	bne.n	800b466 <STM32_TIM_Base_DeInit+0x2a>
            TIMx->CR1 &= ~TIM_CR1_CEN;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2201      	movs	r2, #1
 800b45e:	4393      	bics	r3, r2
 800b460:	001a      	movs	r2, r3
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	601a      	str	r2, [r3, #0]
        }
    }
}
 800b466:	46c0      	nop			; (mov r8, r8)
 800b468:	46bd      	mov	sp, r7
 800b46a:	b002      	add	sp, #8
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	46c0      	nop			; (mov r8, r8)
 800b470:	00001111 	.word	0x00001111
 800b474:	00000444 	.word	0x00000444

0800b478 <STM32_TIM_Base_Start>:
//
// Returns:   None
//
// Requirement(s):
//
void STM32_TIM_Base_Start(TIM_TypeDef *TIMx) {
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]

    TIMx->CR1 |= TIM_CR1_CEN;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2201      	movs	r2, #1
 800b486:	431a      	orrs	r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	601a      	str	r2, [r3, #0]
}
 800b48c:	46c0      	nop			; (mov r8, r8)
 800b48e:	46bd      	mov	sp, r7
 800b490:	b002      	add	sp, #8
 800b492:	bd80      	pop	{r7, pc}

0800b494 <MX_TIM2_Init>:
//
// Returns:   None
//
// Requirement(s):
//
void MX_TIM2_Init(void) {
 800b494:	b580      	push	{r7, lr}
 800b496:	af00      	add	r7, sp, #0
    STM32_TIM_Base_Init(TIM2, 3 - 1, 0xFFFFFFFF, TIM_AUTORELOAD_PRELOAD_ENABLE);
 800b498:	2301      	movs	r3, #1
 800b49a:	425a      	negs	r2, r3
 800b49c:	2380      	movs	r3, #128	; 0x80
 800b49e:	05d8      	lsls	r0, r3, #23
 800b4a0:	2380      	movs	r3, #128	; 0x80
 800b4a2:	2102      	movs	r1, #2
 800b4a4:	f7ff fd64 	bl	800af70 <STM32_TIM_Base_Init>
}
 800b4a8:	46c0      	nop			; (mov r8, r8)
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
	...

0800b4b0 <HAL_UART_TxCpltCallback>:
//
// Returns:   None
//
// Requirement(s):
//
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]

    if (huart->Instance == USART1) {
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a11      	ldr	r2, [pc, #68]	; (800b504 <HAL_UART_TxCpltCallback+0x54>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d106      	bne.n	800b4d0 <HAL_UART_TxCpltCallback+0x20>
        STM32_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);            // Turn off RS422/485 Driver
 800b4c2:	2380      	movs	r3, #128	; 0x80
 800b4c4:	01db      	lsls	r3, r3, #7
 800b4c6:	4810      	ldr	r0, [pc, #64]	; (800b508 <HAL_UART_TxCpltCallback+0x58>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	0019      	movs	r1, r3
 800b4cc:	f7fa fa1e 	bl	800590c <STM32_GPIO_WritePin>
    }
    if (huart->Instance == USART2) {
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a0d      	ldr	r2, [pc, #52]	; (800b50c <HAL_UART_TxCpltCallback+0x5c>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d10f      	bne.n	800b4fa <HAL_UART_TxCpltCallback+0x4a>
        if (DIG_HandleStruct[0].DIG_InitStruct.Mode == DIG_SERIAL_INOUT) {
 800b4da:	4b0d      	ldr	r3, [pc, #52]	; (800b510 <HAL_UART_TxCpltCallback+0x60>)
 800b4dc:	7a1b      	ldrb	r3, [r3, #8]
 800b4de:	2b08      	cmp	r3, #8
 800b4e0:	d108      	bne.n	800b4f4 <HAL_UART_TxCpltCallback+0x44>
            STM32_GPIO_WritePin(DIG_HandleStruct[0].Dir_Port, DIG_HandleStruct[0].Dir_Pin, GPIO_PIN_RESET);  // Switch Digital I/O #1 Buffer back to an Input
 800b4e2:	4b0b      	ldr	r3, [pc, #44]	; (800b510 <HAL_UART_TxCpltCallback+0x60>)
 800b4e4:	6918      	ldr	r0, [r3, #16]
 800b4e6:	4b0a      	ldr	r3, [pc, #40]	; (800b510 <HAL_UART_TxCpltCallback+0x60>)
 800b4e8:	2240      	movs	r2, #64	; 0x40
 800b4ea:	5a9b      	ldrh	r3, [r3, r2]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	0019      	movs	r1, r3
 800b4f0:	f7fa fa0c 	bl	800590c <STM32_GPIO_WritePin>
        }
        bSendingMessage = FALSE;
 800b4f4:	4b07      	ldr	r3, [pc, #28]	; (800b514 <HAL_UART_TxCpltCallback+0x64>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	701a      	strb	r2, [r3, #0]
    }
}
 800b4fa:	46c0      	nop			; (mov r8, r8)
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	b002      	add	sp, #8
 800b500:	bd80      	pop	{r7, pc}
 800b502:	46c0      	nop			; (mov r8, r8)
 800b504:	40013800 	.word	0x40013800
 800b508:	48000400 	.word	0x48000400
 800b50c:	40004400 	.word	0x40004400
 800b510:	20002d24 	.word	0x20002d24
 800b514:	20002cf4 	.word	0x20002cf4

0800b518 <UART_DMATransmitCplt>:
//
// Returns:   None
//
// Requirement(s):
//
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma) {
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]

    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a1b      	ldr	r3, [r3, #32]
 800b524:	60fb      	str	r3, [r7, #12]

    huart->Instance->CR3 &= ~USART_CR3_DMAT;        /* Disable the DMA transfer */
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	689a      	ldr	r2, [r3, #8]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2180      	movs	r1, #128	; 0x80
 800b532:	438a      	bics	r2, r1
 800b534:	609a      	str	r2, [r3, #8]
    huart->Instance->CR1 |= USART_CR1_TCIE;          /* Enable the UART Transmit Complete Interrupt */
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2140      	movs	r1, #64	; 0x40
 800b542:	430a      	orrs	r2, r1
 800b544:	601a      	str	r2, [r3, #0]
}
 800b546:	46c0      	nop			; (mov r8, r8)
 800b548:	46bd      	mov	sp, r7
 800b54a:	b004      	add	sp, #16
 800b54c:	bd80      	pop	{r7, pc}
	...

0800b550 <STM32_UART_Transmit_DMA>:
//
// Returns:   None
//
// Requirement(s):
//
void STM32_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size) {
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	1dbb      	adds	r3, r7, #6
 800b55c:	801a      	strh	r2, [r3, #0]

    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	4a2b      	ldr	r2, [pc, #172]	; (800b610 <STM32_UART_Transmit_DMA+0xc0>)
 800b564:	625a      	str	r2, [r3, #36]	; 0x24
    huart->hdmatx->Instance->CCR &= ~DMA_CCR_EN;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2101      	movs	r1, #1
 800b576:	438a      	bics	r2, r1
 800b578:	601a      	str	r2, [r3, #0]
    huart->hdmatx->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << huart->hdmatx->ChannelIndex);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b586:	2101      	movs	r1, #1
 800b588:	4091      	lsls	r1, r2
 800b58a:	000a      	movs	r2, r1
 800b58c:	605a      	str	r2, [r3, #4]
    huart->hdmatx->Instance->CNDTR = Size;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	1dba      	adds	r2, r7, #6
 800b596:	8812      	ldrh	r2, [r2, #0]
 800b598:	605a      	str	r2, [r3, #4]
    huart->hdmatx->Instance->CPAR = (uint32_t)&huart->Instance->TDR;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3328      	adds	r3, #40	; 0x28
 800b5a0:	001a      	movs	r2, r3
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	609a      	str	r2, [r3, #8]
    huart->hdmatx->Instance->CMAR = (uint32_t)pData;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	60da      	str	r2, [r3, #12]
    huart->hdmatx->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	210a      	movs	r1, #10
 800b5c4:	430a      	orrs	r2, r1
 800b5c6:	601a      	str	r2, [r3, #0]
    huart->hdmatx->Instance->CCR &= ~DMA_IT_HT;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2104      	movs	r1, #4
 800b5d8:	438a      	bics	r2, r1
 800b5da:	601a      	str	r2, [r3, #0]
    huart->hdmatx->Instance->CCR |= DMA_CCR_EN;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2101      	movs	r1, #1
 800b5ec:	430a      	orrs	r2, r1
 800b5ee:	601a      	str	r2, [r3, #0]
    huart->Instance->ICR = UART_CLEAR_TCF;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2240      	movs	r2, #64	; 0x40
 800b5f6:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	689a      	ldr	r2, [r3, #8]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2180      	movs	r1, #128	; 0x80
 800b604:	430a      	orrs	r2, r1
 800b606:	609a      	str	r2, [r3, #8]
}
 800b608:	46c0      	nop			; (mov r8, r8)
 800b60a:	46bd      	mov	sp, r7
 800b60c:	b004      	add	sp, #16
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	0800b519 	.word	0x0800b519

0800b614 <UART_EndTransmit_IT>:
//
// Returns:   None
//
// Requirement(s):
//
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]

    huart->Instance->CR1 &= ~USART_CR1_TCIE;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2140      	movs	r1, #64	; 0x40
 800b628:	438a      	bics	r2, r1
 800b62a:	601a      	str	r2, [r3, #0]
    HAL_UART_TxCpltCallback(huart);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	0018      	movs	r0, r3
 800b630:	f7ff ff3e 	bl	800b4b0 <HAL_UART_TxCpltCallback>
}
 800b634:	46c0      	nop			; (mov r8, r8)
 800b636:	46bd      	mov	sp, r7
 800b638:	b002      	add	sp, #8
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <STM32_UART_IRQHandler>:
//
// Returns:   None
//
// Requirement(s):
//
void STM32_UART_IRQHandler(UART_HandleTypeDef *huart) {
 800b63c:	b590      	push	{r4, r7, lr}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]

    uint32_t ISRFlags;
    uint32_t ControlReg1its;

    ISRFlags = huart->Instance->ISR;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	69db      	ldr	r3, [r3, #28]
 800b64a:	60fb      	str	r3, [r7, #12]
    ControlReg1its = huart->Instance->CR1;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	60bb      	str	r3, [r7, #8]

    //
    // Clear Errors - even if there aren't any
    //
    huart->Instance->ICR = UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	220f      	movs	r2, #15
 800b65a:	621a      	str	r2, [r3, #32]

    /* UART in mode Receiver */
    if (huart->Instance == USART1) {
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a27      	ldr	r2, [pc, #156]	; (800b700 <STM32_UART_IRQHandler+0xc4>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d11b      	bne.n	800b69e <STM32_UART_IRQHandler+0x62>
        if (((ISRFlags & USART_ISR_RXNE) != 0) && ((ControlReg1its & USART_CR1_RXNEIE) != 0)) {
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2220      	movs	r2, #32
 800b66a:	4013      	ands	r3, r2
 800b66c:	d017      	beq.n	800b69e <STM32_UART_IRQHandler+0x62>
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	2220      	movs	r2, #32
 800b672:	4013      	ands	r3, r2
 800b674:	d013      	beq.n	800b69e <STM32_UART_IRQHandler+0x62>
            SerialUsart1.DmaRingBuffer[SerialUsart1.RingBufferIn++] = (uint8_t)huart->Instance->RDR;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b67c:	b298      	uxth	r0, r3
 800b67e:	4a21      	ldr	r2, [pc, #132]	; (800b704 <STM32_UART_IRQHandler+0xc8>)
 800b680:	2386      	movs	r3, #134	; 0x86
 800b682:	005b      	lsls	r3, r3, #1
 800b684:	5cd3      	ldrb	r3, [r2, r3]
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	b2d4      	uxtb	r4, r2
 800b68a:	491e      	ldr	r1, [pc, #120]	; (800b704 <STM32_UART_IRQHandler+0xc8>)
 800b68c:	2286      	movs	r2, #134	; 0x86
 800b68e:	0052      	lsls	r2, r2, #1
 800b690:	548c      	strb	r4, [r1, r2]
 800b692:	0019      	movs	r1, r3
 800b694:	b2c2      	uxtb	r2, r0
 800b696:	4b1b      	ldr	r3, [pc, #108]	; (800b704 <STM32_UART_IRQHandler+0xc8>)
 800b698:	185b      	adds	r3, r3, r1
 800b69a:	729a      	strb	r2, [r3, #10]
            return;
 800b69c:	e02c      	b.n	800b6f8 <STM32_UART_IRQHandler+0xbc>
        }
    }
    if (huart->Instance == USART2) {
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a19      	ldr	r2, [pc, #100]	; (800b708 <STM32_UART_IRQHandler+0xcc>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d11b      	bne.n	800b6e0 <STM32_UART_IRQHandler+0xa4>
        if (((ISRFlags & USART_ISR_RXNE) != 0) && ((ControlReg1its & USART_CR1_RXNEIE) != 0)) {
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2220      	movs	r2, #32
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	d017      	beq.n	800b6e0 <STM32_UART_IRQHandler+0xa4>
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	2220      	movs	r2, #32
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	d013      	beq.n	800b6e0 <STM32_UART_IRQHandler+0xa4>
            SerialUsart2.DmaRingBuffer[SerialUsart2.RingBufferIn++] = (uint8_t)huart->Instance->RDR;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b6be:	b298      	uxth	r0, r3
 800b6c0:	4a12      	ldr	r2, [pc, #72]	; (800b70c <STM32_UART_IRQHandler+0xd0>)
 800b6c2:	2386      	movs	r3, #134	; 0x86
 800b6c4:	005b      	lsls	r3, r3, #1
 800b6c6:	5cd3      	ldrb	r3, [r2, r3]
 800b6c8:	1c5a      	adds	r2, r3, #1
 800b6ca:	b2d4      	uxtb	r4, r2
 800b6cc:	490f      	ldr	r1, [pc, #60]	; (800b70c <STM32_UART_IRQHandler+0xd0>)
 800b6ce:	2286      	movs	r2, #134	; 0x86
 800b6d0:	0052      	lsls	r2, r2, #1
 800b6d2:	548c      	strb	r4, [r1, r2]
 800b6d4:	0019      	movs	r1, r3
 800b6d6:	b2c2      	uxtb	r2, r0
 800b6d8:	4b0c      	ldr	r3, [pc, #48]	; (800b70c <STM32_UART_IRQHandler+0xd0>)
 800b6da:	185b      	adds	r3, r3, r1
 800b6dc:	729a      	strb	r2, [r3, #10]
            return;
 800b6de:	e00b      	b.n	800b6f8 <STM32_UART_IRQHandler+0xbc>
        }
    }

    /* UART in mode Transmitter (transmission end) -----------------------------*/
    if (((ISRFlags & USART_ISR_TC) != 0) && ((ControlReg1its & USART_CR1_TCIE) != 0)) {
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2240      	movs	r2, #64	; 0x40
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	d007      	beq.n	800b6f8 <STM32_UART_IRQHandler+0xbc>
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	2240      	movs	r2, #64	; 0x40
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	d003      	beq.n	800b6f8 <STM32_UART_IRQHandler+0xbc>
        UART_EndTransmit_IT(huart);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	0018      	movs	r0, r3
 800b6f4:	f7ff ff8e 	bl	800b614 <UART_EndTransmit_IT>
    }
}
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	b005      	add	sp, #20
 800b6fc:	bd90      	pop	{r4, r7, pc}
 800b6fe:	46c0      	nop			; (mov r8, r8)
 800b700:	40013800 	.word	0x40013800
 800b704:	20001588 	.word	0x20001588
 800b708:	40004400 	.word	0x40004400
 800b70c:	200018b4 	.word	0x200018b4

0800b710 <MX_USART1_UART_Init>:
//
// Returns:   None
//
// Requirement(s):
//
void MX_USART1_UART_Init(void) {
 800b710:	b580      	push	{r7, lr}
 800b712:	b086      	sub	sp, #24
 800b714:	af04      	add	r7, sp, #16

    uint32_t Tmp;

    huart1.Instance = USART1;
 800b716:	4b41      	ldr	r3, [pc, #260]	; (800b81c <MX_USART1_UART_Init+0x10c>)
 800b718:	4a41      	ldr	r2, [pc, #260]	; (800b820 <MX_USART1_UART_Init+0x110>)
 800b71a:	601a      	str	r2, [r3, #0]

    STM32_GPIO_Init(RS485_TXD_GPIO_Port, RS485_TXD_Pin, GPIO_MODE_AF_PP, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_AF1_USART1, 0);
 800b71c:	2380      	movs	r3, #128	; 0x80
 800b71e:	0099      	lsls	r1, r3, #2
 800b720:	2390      	movs	r3, #144	; 0x90
 800b722:	05d8      	lsls	r0, r3, #23
 800b724:	2300      	movs	r3, #0
 800b726:	9302      	str	r3, [sp, #8]
 800b728:	2301      	movs	r3, #1
 800b72a:	9301      	str	r3, [sp, #4]
 800b72c:	2303      	movs	r3, #3
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	2301      	movs	r3, #1
 800b732:	2202      	movs	r2, #2
 800b734:	f7fa f930 	bl	8005998 <STM32_GPIO_Init>
    STM32_GPIO_Init(RS485_RXD_GPIO_Port, RS485_RXD_Pin, GPIO_MODE_AF_PP, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_AF1_USART1, 0);
 800b738:	2380      	movs	r3, #128	; 0x80
 800b73a:	00d9      	lsls	r1, r3, #3
 800b73c:	2390      	movs	r3, #144	; 0x90
 800b73e:	05d8      	lsls	r0, r3, #23
 800b740:	2300      	movs	r3, #0
 800b742:	9302      	str	r3, [sp, #8]
 800b744:	2301      	movs	r3, #1
 800b746:	9301      	str	r3, [sp, #4]
 800b748:	2303      	movs	r3, #3
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	2301      	movs	r3, #1
 800b74e:	2202      	movs	r2, #2
 800b750:	f7fa f922 	bl	8005998 <STM32_GPIO_Init>

    hdma_usart1_tx.Instance = DMA1_Channel2;
 800b754:	4b33      	ldr	r3, [pc, #204]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b756:	4a34      	ldr	r2, [pc, #208]	; (800b828 <MX_USART1_UART_Init+0x118>)
 800b758:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b75a:	4b32      	ldr	r3, [pc, #200]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b75c:	2210      	movs	r2, #16
 800b75e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b760:	4b30      	ldr	r3, [pc, #192]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b762:	2200      	movs	r2, #0
 800b764:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b766:	4b2f      	ldr	r3, [pc, #188]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b768:	2280      	movs	r2, #128	; 0x80
 800b76a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b76c:	4b2d      	ldr	r3, [pc, #180]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b76e:	2200      	movs	r2, #0
 800b770:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b772:	4b2c      	ldr	r3, [pc, #176]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b774:	2200      	movs	r2, #0
 800b776:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800b778:	4b2a      	ldr	r3, [pc, #168]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b77e:	4b29      	ldr	r3, [pc, #164]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b780:	2200      	movs	r2, #0
 800b782:	61da      	str	r2, [r3, #28]

    Tmp = hdma_usart1_tx.Instance->CCR;
 800b784:	4b27      	ldr	r3, [pc, #156]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	607b      	str	r3, [r7, #4]
    Tmp &= ((uint32_t)~(DMA_CCR_PL | DMA_CCR_MSIZE | DMA_CCR_PSIZE | DMA_CCR_MINC | DMA_CCR_PINC | DMA_CCR_CIRC | DMA_CCR_DIR));
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a27      	ldr	r2, [pc, #156]	; (800b82c <MX_USART1_UART_Init+0x11c>)
 800b790:	4013      	ands	r3, r2
 800b792:	607b      	str	r3, [r7, #4]
    Tmp |= DMA_MEMORY_TO_PERIPH | DMA_PINC_DISABLE | DMA_MINC_ENABLE |
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2290      	movs	r2, #144	; 0x90
 800b798:	4313      	orrs	r3, r2
 800b79a:	607b      	str	r3, [r7, #4]
        DMA_PDATAALIGN_BYTE | DMA_MDATAALIGN_BYTE | DMA_NORMAL | DMA_PRIORITY_LOW;
    hdma_usart1_tx.Instance->CCR = Tmp;
 800b79c:	4b21      	ldr	r3, [pc, #132]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.ChannelIndex = (((uint32_t)hdma_usart1_tx.Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2u;
 800b7a4:	4b1f      	ldr	r3, [pc, #124]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a21      	ldr	r2, [pc, #132]	; (800b830 <MX_USART1_UART_Init+0x120>)
 800b7aa:	4694      	mov	ip, r2
 800b7ac:	4463      	add	r3, ip
 800b7ae:	2114      	movs	r1, #20
 800b7b0:	0018      	movs	r0, r3
 800b7b2:	f7f4 fd0d 	bl	80001d0 <__udivsi3>
 800b7b6:	0003      	movs	r3, r0
 800b7b8:	009a      	lsls	r2, r3, #2
 800b7ba:	4b1a      	ldr	r3, [pc, #104]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b7bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_tx.DmaBaseAddress = DMA1;
 800b7be:	4b19      	ldr	r3, [pc, #100]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b7c0:	4a1c      	ldr	r2, [pc, #112]	; (800b834 <MX_USART1_UART_Init+0x124>)
 800b7c2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_tx.XferCpltCallback = NULL;
 800b7c4:	4b17      	ldr	r3, [pc, #92]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	625a      	str	r2, [r3, #36]	; 0x24

    huart1.hdmatx = &hdma_usart1_tx;
 800b7ca:	4b14      	ldr	r3, [pc, #80]	; (800b81c <MX_USART1_UART_Init+0x10c>)
 800b7cc:	4a15      	ldr	r2, [pc, #84]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b7ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Parent = &huart1;
 800b7d0:	4b14      	ldr	r3, [pc, #80]	; (800b824 <MX_USART1_UART_Init+0x114>)
 800b7d2:	4a12      	ldr	r2, [pc, #72]	; (800b81c <MX_USART1_UART_Init+0x10c>)
 800b7d4:	621a      	str	r2, [r3, #32]

    STM32_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	2100      	movs	r1, #0
 800b7da:	201b      	movs	r0, #27
 800b7dc:	f7fa faec 	bl	8005db8 <STM32_NVIC_SetPriority>
    STM32_NVIC_EnableIRQ(USART1_IRQn);
 800b7e0:	201b      	movs	r0, #27
 800b7e2:	f7fa fb4b 	bl	8005e7c <STM32_NVIC_EnableIRQ>

    USART1->CR1 &= ~USART_CR1_UE;
 800b7e6:	4b0e      	ldr	r3, [pc, #56]	; (800b820 <MX_USART1_UART_Init+0x110>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	4b0d      	ldr	r3, [pc, #52]	; (800b820 <MX_USART1_UART_Init+0x110>)
 800b7ec:	2101      	movs	r1, #1
 800b7ee:	438a      	bics	r2, r1
 800b7f0:	601a      	str	r2, [r3, #0]
    USART1->CR1 = 0x0C;
 800b7f2:	4b0b      	ldr	r3, [pc, #44]	; (800b820 <MX_USART1_UART_Init+0x110>)
 800b7f4:	220c      	movs	r2, #12
 800b7f6:	601a      	str	r2, [r3, #0]
    USART1->CR2 = 0x00;
 800b7f8:	4b09      	ldr	r3, [pc, #36]	; (800b820 <MX_USART1_UART_Init+0x110>)
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	605a      	str	r2, [r3, #4]
    USART1->CR3 = 0x3000;
 800b7fe:	4b08      	ldr	r3, [pc, #32]	; (800b820 <MX_USART1_UART_Init+0x110>)
 800b800:	22c0      	movs	r2, #192	; 0xc0
 800b802:	0192      	lsls	r2, r2, #6
 800b804:	609a      	str	r2, [r3, #8]
    USART1->BRR = 417;
 800b806:	4b06      	ldr	r3, [pc, #24]	; (800b820 <MX_USART1_UART_Init+0x110>)
 800b808:	22a2      	movs	r2, #162	; 0xa2
 800b80a:	32ff      	adds	r2, #255	; 0xff
 800b80c:	60da      	str	r2, [r3, #12]
    USART1->CR1 = 0x2D;
 800b80e:	4b04      	ldr	r3, [pc, #16]	; (800b820 <MX_USART1_UART_Init+0x110>)
 800b810:	222d      	movs	r2, #45	; 0x2d
 800b812:	601a      	str	r2, [r3, #0]
}
 800b814:	46c0      	nop			; (mov r8, r8)
 800b816:	46bd      	mov	sp, r7
 800b818:	b002      	add	sp, #8
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	200029fc 	.word	0x200029fc
 800b820:	40013800 	.word	0x40013800
 800b824:	20001ef0 	.word	0x20001ef0
 800b828:	4002001c 	.word	0x4002001c
 800b82c:	ffffc00f 	.word	0xffffc00f
 800b830:	bffdfff8 	.word	0xbffdfff8
 800b834:	40020000 	.word	0x40020000

0800b838 <MX_USART2_UART_Init>:
// DIG I/O #1 TX/RX
// DIG I/O #2 TX
//
//
//
void MX_USART2_UART_Init(void) {
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af04      	add	r7, sp, #16

    uint32_t Tmp;

    huart2.Instance = USART2;
 800b83e:	4b40      	ldr	r3, [pc, #256]	; (800b940 <MX_USART2_UART_Init+0x108>)
 800b840:	4a40      	ldr	r2, [pc, #256]	; (800b944 <MX_USART2_UART_Init+0x10c>)
 800b842:	601a      	str	r2, [r3, #0]

    STM32_GPIO_Init(DIG_TX_GPIO_Port, DIG_TX_Pin, GPIO_MODE_AF_PP, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_AF1_USART2, 0);
 800b844:	2390      	movs	r3, #144	; 0x90
 800b846:	05d8      	lsls	r0, r3, #23
 800b848:	2300      	movs	r3, #0
 800b84a:	9302      	str	r3, [sp, #8]
 800b84c:	2301      	movs	r3, #1
 800b84e:	9301      	str	r3, [sp, #4]
 800b850:	2303      	movs	r3, #3
 800b852:	9300      	str	r3, [sp, #0]
 800b854:	2301      	movs	r3, #1
 800b856:	2202      	movs	r2, #2
 800b858:	2104      	movs	r1, #4
 800b85a:	f7fa f89d 	bl	8005998 <STM32_GPIO_Init>
    STM32_GPIO_Init(DIG_RX_GPIO_Port, DIG_RX_Pin, GPIO_MODE_AF_PP, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_AF1_USART2, 0);
 800b85e:	2390      	movs	r3, #144	; 0x90
 800b860:	05d8      	lsls	r0, r3, #23
 800b862:	2300      	movs	r3, #0
 800b864:	9302      	str	r3, [sp, #8]
 800b866:	2301      	movs	r3, #1
 800b868:	9301      	str	r3, [sp, #4]
 800b86a:	2303      	movs	r3, #3
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	2301      	movs	r3, #1
 800b870:	2202      	movs	r2, #2
 800b872:	2108      	movs	r1, #8
 800b874:	f7fa f890 	bl	8005998 <STM32_GPIO_Init>

    hdma_usart2_tx.Instance = DMA1_Channel4;
 800b878:	4b33      	ldr	r3, [pc, #204]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b87a:	4a34      	ldr	r2, [pc, #208]	; (800b94c <MX_USART2_UART_Init+0x114>)
 800b87c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b87e:	4b32      	ldr	r3, [pc, #200]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b880:	2210      	movs	r2, #16
 800b882:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b884:	4b30      	ldr	r3, [pc, #192]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b886:	2200      	movs	r2, #0
 800b888:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b88a:	4b2f      	ldr	r3, [pc, #188]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b88c:	2280      	movs	r2, #128	; 0x80
 800b88e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b890:	4b2d      	ldr	r3, [pc, #180]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b892:	2200      	movs	r2, #0
 800b894:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b896:	4b2c      	ldr	r3, [pc, #176]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b898:	2200      	movs	r2, #0
 800b89a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800b89c:	4b2a      	ldr	r3, [pc, #168]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b89e:	2200      	movs	r2, #0
 800b8a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b8a2:	4b29      	ldr	r3, [pc, #164]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	61da      	str	r2, [r3, #28]

    Tmp = hdma_usart2_tx.Instance->CCR;
 800b8a8:	4b27      	ldr	r3, [pc, #156]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	607b      	str	r3, [r7, #4]
    Tmp &= ((uint32_t)~(DMA_CCR_PL | DMA_CCR_MSIZE | DMA_CCR_PSIZE | DMA_CCR_MINC | DMA_CCR_PINC | DMA_CCR_CIRC | DMA_CCR_DIR));
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a27      	ldr	r2, [pc, #156]	; (800b950 <MX_USART2_UART_Init+0x118>)
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	607b      	str	r3, [r7, #4]
    Tmp |= DMA_MEMORY_TO_PERIPH | DMA_PINC_DISABLE | DMA_MINC_ENABLE |
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2290      	movs	r2, #144	; 0x90
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	607b      	str	r3, [r7, #4]
        DMA_PDATAALIGN_BYTE | DMA_MDATAALIGN_BYTE | DMA_NORMAL | DMA_PRIORITY_LOW;
    hdma_usart2_tx.Instance->CCR = Tmp;
 800b8c0:	4b21      	ldr	r3, [pc, #132]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.ChannelIndex = (((uint32_t)hdma_usart2_tx.Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2u;
 800b8c8:	4b1f      	ldr	r3, [pc, #124]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a21      	ldr	r2, [pc, #132]	; (800b954 <MX_USART2_UART_Init+0x11c>)
 800b8ce:	4694      	mov	ip, r2
 800b8d0:	4463      	add	r3, ip
 800b8d2:	2114      	movs	r1, #20
 800b8d4:	0018      	movs	r0, r3
 800b8d6:	f7f4 fc7b 	bl	80001d0 <__udivsi3>
 800b8da:	0003      	movs	r3, r0
 800b8dc:	009a      	lsls	r2, r3, #2
 800b8de:	4b1a      	ldr	r3, [pc, #104]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b8e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_tx.DmaBaseAddress = DMA1;
 800b8e2:	4b19      	ldr	r3, [pc, #100]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b8e4:	4a1c      	ldr	r2, [pc, #112]	; (800b958 <MX_USART2_UART_Init+0x120>)
 800b8e6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.XferCpltCallback = NULL;
 800b8e8:	4b17      	ldr	r3, [pc, #92]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	625a      	str	r2, [r3, #36]	; 0x24

    huart2.hdmatx = &hdma_usart2_tx;
 800b8ee:	4b14      	ldr	r3, [pc, #80]	; (800b940 <MX_USART2_UART_Init+0x108>)
 800b8f0:	4a15      	ldr	r2, [pc, #84]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b8f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Parent = &huart2;
 800b8f4:	4b14      	ldr	r3, [pc, #80]	; (800b948 <MX_USART2_UART_Init+0x110>)
 800b8f6:	4a12      	ldr	r2, [pc, #72]	; (800b940 <MX_USART2_UART_Init+0x108>)
 800b8f8:	621a      	str	r2, [r3, #32]

    STM32_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	201c      	movs	r0, #28
 800b900:	f7fa fa5a 	bl	8005db8 <STM32_NVIC_SetPriority>
    STM32_NVIC_EnableIRQ(USART2_IRQn);
 800b904:	201c      	movs	r0, #28
 800b906:	f7fa fab9 	bl	8005e7c <STM32_NVIC_EnableIRQ>

    USART2->CR1 &= ~USART_CR1_UE;
 800b90a:	4b0e      	ldr	r3, [pc, #56]	; (800b944 <MX_USART2_UART_Init+0x10c>)
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	4b0d      	ldr	r3, [pc, #52]	; (800b944 <MX_USART2_UART_Init+0x10c>)
 800b910:	2101      	movs	r1, #1
 800b912:	438a      	bics	r2, r1
 800b914:	601a      	str	r2, [r3, #0]
    USART2->CR1 = 0x0C;
 800b916:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <MX_USART2_UART_Init+0x10c>)
 800b918:	220c      	movs	r2, #12
 800b91a:	601a      	str	r2, [r3, #0]
    USART2->CR2 = 0x00;
 800b91c:	4b09      	ldr	r3, [pc, #36]	; (800b944 <MX_USART2_UART_Init+0x10c>)
 800b91e:	2200      	movs	r2, #0
 800b920:	605a      	str	r2, [r3, #4]
    USART2->CR3 = 0x3000;
 800b922:	4b08      	ldr	r3, [pc, #32]	; (800b944 <MX_USART2_UART_Init+0x10c>)
 800b924:	22c0      	movs	r2, #192	; 0xc0
 800b926:	0192      	lsls	r2, r2, #6
 800b928:	609a      	str	r2, [r3, #8]
    USART2->BRR = 417;
 800b92a:	4b06      	ldr	r3, [pc, #24]	; (800b944 <MX_USART2_UART_Init+0x10c>)
 800b92c:	22a2      	movs	r2, #162	; 0xa2
 800b92e:	32ff      	adds	r2, #255	; 0xff
 800b930:	60da      	str	r2, [r3, #12]
    USART2->CR1 = 0x2D;
 800b932:	4b04      	ldr	r3, [pc, #16]	; (800b944 <MX_USART2_UART_Init+0x10c>)
 800b934:	222d      	movs	r2, #45	; 0x2d
 800b936:	601a      	str	r2, [r3, #0]
}
 800b938:	46c0      	nop			; (mov r8, r8)
 800b93a:	46bd      	mov	sp, r7
 800b93c:	b002      	add	sp, #8
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	20002f34 	.word	0x20002f34
 800b944:	40004400 	.word	0x40004400
 800b948:	2000208c 	.word	0x2000208c
 800b94c:	40020044 	.word	0x40020044
 800b950:	ffffc00f 	.word	0xffffc00f
 800b954:	bffdfff8 	.word	0xbffdfff8
 800b958:	40020000 	.word	0x40020000

0800b95c <ProcessVerifyStack>:
//
// Returns:   None
//
// Requirement(s):
//
void ProcessVerifyStack(void) {
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0

    uint32_t *Ptr;

    Ptr = &_ebss;
 800b962:	4b17      	ldr	r3, [pc, #92]	; (800b9c0 <ProcessVerifyStack+0x64>)
 800b964:	607b      	str	r3, [r7, #4]
    SysVars.Slack = 0;
 800b966:	4b17      	ldr	r3, [pc, #92]	; (800b9c4 <ProcessVerifyStack+0x68>)
 800b968:	22c8      	movs	r2, #200	; 0xc8
 800b96a:	2100      	movs	r1, #0
 800b96c:	5099      	str	r1, [r3, r2]
    while (1) {
        if ((Ptr == &_estack) || (*Ptr != 0x12345678)) {
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	4b15      	ldr	r3, [pc, #84]	; (800b9c8 <ProcessVerifyStack+0x6c>)
 800b972:	429a      	cmp	r2, r3
 800b974:	d00f      	beq.n	800b996 <ProcessVerifyStack+0x3a>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a14      	ldr	r2, [pc, #80]	; (800b9cc <ProcessVerifyStack+0x70>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d10a      	bne.n	800b996 <ProcessVerifyStack+0x3a>
            break;
        }
        SysVars.Slack++;
 800b980:	4b10      	ldr	r3, [pc, #64]	; (800b9c4 <ProcessVerifyStack+0x68>)
 800b982:	22c8      	movs	r2, #200	; 0xc8
 800b984:	589b      	ldr	r3, [r3, r2]
 800b986:	1c5a      	adds	r2, r3, #1
 800b988:	4b0e      	ldr	r3, [pc, #56]	; (800b9c4 <ProcessVerifyStack+0x68>)
 800b98a:	21c8      	movs	r1, #200	; 0xc8
 800b98c:	505a      	str	r2, [r3, r1]
        Ptr++;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	3304      	adds	r3, #4
 800b992:	607b      	str	r3, [r7, #4]
        if ((Ptr == &_estack) || (*Ptr != 0x12345678)) {
 800b994:	e7eb      	b.n	800b96e <ProcessVerifyStack+0x12>
    }
    SysVars.StackUsed = (int32_t)(&_estack - Ptr);
 800b996:	4a0c      	ldr	r2, [pc, #48]	; (800b9c8 <ProcessVerifyStack+0x6c>)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	109b      	asrs	r3, r3, #2
 800b99e:	0019      	movs	r1, r3
 800b9a0:	4b08      	ldr	r3, [pc, #32]	; (800b9c4 <ProcessVerifyStack+0x68>)
 800b9a2:	22cc      	movs	r2, #204	; 0xcc
 800b9a4:	5099      	str	r1, [r3, r2]
    if (SysVars.Slack < STACK_SLACK) {
 800b9a6:	4b07      	ldr	r3, [pc, #28]	; (800b9c4 <ProcessVerifyStack+0x68>)
 800b9a8:	22c8      	movs	r2, #200	; 0xc8
 800b9aa:	589b      	ldr	r3, [r3, r2]
 800b9ac:	2b63      	cmp	r3, #99	; 0x63
 800b9ae:	dc03      	bgt.n	800b9b8 <ProcessVerifyStack+0x5c>
        Error_Handler(FILE_VERIFY, __LINE__);
 800b9b0:	215b      	movs	r1, #91	; 0x5b
 800b9b2:	2021      	movs	r0, #33	; 0x21
 800b9b4:	f7f8 fd0e 	bl	80043d4 <Error_Handler>
    }
}
 800b9b8:	46c0      	nop			; (mov r8, r8)
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	b002      	add	sp, #8
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	200037fc 	.word	0x200037fc
 800b9c4:	200020c0 	.word	0x200020c0
 800b9c8:	20004000 	.word	0x20004000
 800b9cc:	12345678 	.word	0x12345678

0800b9d0 <SetGeneralError>:
//
// Returns:   None
//
// Requirement(s):
//
static void SetGeneralError(uint32_t ErrorId, uint8_t bError, int16_t DebounceTime, int32_t Value1, int32_t Value2) {
 800b9d0:	b590      	push	{r4, r7, lr}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	0008      	movs	r0, r1
 800b9da:	0011      	movs	r1, r2
 800b9dc:	607b      	str	r3, [r7, #4]
 800b9de:	240b      	movs	r4, #11
 800b9e0:	193b      	adds	r3, r7, r4
 800b9e2:	1c02      	adds	r2, r0, #0
 800b9e4:	701a      	strb	r2, [r3, #0]
 800b9e6:	2308      	movs	r3, #8
 800b9e8:	18fb      	adds	r3, r7, r3
 800b9ea:	1c0a      	adds	r2, r1, #0
 800b9ec:	801a      	strh	r2, [r3, #0]

    //
    // If No Current Error, then reset ErrorTimer back to 0.
    //
    if (bError == 0) {
 800b9ee:	193b      	adds	r3, r7, r4
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10b      	bne.n	800ba0e <SetGeneralError+0x3e>
        SignalStatus.GeneralErrorTimer[ErrorId] = 0;
 800b9f6:	4b1e      	ldr	r3, [pc, #120]	; (800ba70 <SetGeneralError+0xa0>)
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	0052      	lsls	r2, r2, #1
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	52d1      	strh	r1, [r2, r3]
        SignalStatus.bErrorPresent[ErrorId] = 0;
 800ba00:	4b1b      	ldr	r3, [pc, #108]	; (800ba70 <SetGeneralError+0xa0>)
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	3238      	adds	r2, #56	; 0x38
 800ba06:	0052      	lsls	r2, r2, #1
 800ba08:	2100      	movs	r1, #0
 800ba0a:	52d1      	strh	r1, [r2, r3]
                SignalStatus.bErrorPresent[ErrorId] = 1;
                LogEvent(EVENT_MESSAGE_ID_7 + ErrorId, Value1, Value2);
            }
        }
    }
}
 800ba0c:	e02c      	b.n	800ba68 <SetGeneralError+0x98>
        if (SignalStatus.GeneralErrorTimer[ErrorId] < DebounceTime) {
 800ba0e:	4b18      	ldr	r3, [pc, #96]	; (800ba70 <SetGeneralError+0xa0>)
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	0052      	lsls	r2, r2, #1
 800ba14:	5ad3      	ldrh	r3, [r2, r3]
 800ba16:	001a      	movs	r2, r3
 800ba18:	2308      	movs	r3, #8
 800ba1a:	18fb      	adds	r3, r7, r3
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	5e5b      	ldrsh	r3, [r3, r1]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	da21      	bge.n	800ba68 <SetGeneralError+0x98>
            SignalStatus.GeneralErrorTimer[ErrorId]++;
 800ba24:	4b12      	ldr	r3, [pc, #72]	; (800ba70 <SetGeneralError+0xa0>)
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	0052      	lsls	r2, r2, #1
 800ba2a:	5ad3      	ldrh	r3, [r2, r3]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	b299      	uxth	r1, r3
 800ba30:	4b0f      	ldr	r3, [pc, #60]	; (800ba70 <SetGeneralError+0xa0>)
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	0052      	lsls	r2, r2, #1
 800ba36:	52d1      	strh	r1, [r2, r3]
            if (SignalStatus.GeneralErrorTimer[ErrorId] == DebounceTime) {
 800ba38:	4b0d      	ldr	r3, [pc, #52]	; (800ba70 <SetGeneralError+0xa0>)
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	0052      	lsls	r2, r2, #1
 800ba3e:	5ad3      	ldrh	r3, [r2, r3]
 800ba40:	001a      	movs	r2, r3
 800ba42:	2308      	movs	r3, #8
 800ba44:	18fb      	adds	r3, r7, r3
 800ba46:	2100      	movs	r1, #0
 800ba48:	5e5b      	ldrsh	r3, [r3, r1]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d10c      	bne.n	800ba68 <SetGeneralError+0x98>
                SignalStatus.bErrorPresent[ErrorId] = 1;
 800ba4e:	4b08      	ldr	r3, [pc, #32]	; (800ba70 <SetGeneralError+0xa0>)
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	3238      	adds	r2, #56	; 0x38
 800ba54:	0052      	lsls	r2, r2, #1
 800ba56:	2101      	movs	r1, #1
 800ba58:	52d1      	strh	r1, [r2, r3]
                LogEvent(EVENT_MESSAGE_ID_7 + ErrorId, Value1, Value2);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	3307      	adds	r3, #7
 800ba5e:	6a3a      	ldr	r2, [r7, #32]
 800ba60:	6879      	ldr	r1, [r7, #4]
 800ba62:	0018      	movs	r0, r3
 800ba64:	f7fc f900 	bl	8007c68 <LogEvent>
}
 800ba68:	46c0      	nop			; (mov r8, r8)
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	b005      	add	sp, #20
 800ba6e:	bd90      	pop	{r4, r7, pc}
 800ba70:	20002c14 	.word	0x20002c14

0800ba74 <ProcessSignalStatus>:
//
// Returns:   None
//
// Requirement(s):
//
void ProcessSignalStatus(void) {
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b088      	sub	sp, #32
 800ba78:	af02      	add	r7, sp, #8

  int32_t   Diff, MinSetpoint, MaxSetpoint;
  uint8_t   bRvOutputEnabled, bKmaEnabled, bTemperatureEnabled;

  ExecutionStart(EXECUTION_PROCESS_SIGNAL_STATUS);
 800ba7a:	2004      	movs	r0, #4
 800ba7c:	f7f8 fdc6 	bl	800460c <ExecutionStart>
  //
  // Delay for 10 seconds before looking for errors
  //
  if (PowerupDelay < 500 || SysVars.bStartupComplete == 0) {
 800ba80:	4bbd      	ldr	r3, [pc, #756]	; (800bd78 <ProcessSignalStatus+0x304>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	5e9a      	ldrsh	r2, [r3, r2]
 800ba86:	23f4      	movs	r3, #244	; 0xf4
 800ba88:	33ff      	adds	r3, #255	; 0xff
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	dd07      	ble.n	800ba9e <ProcessSignalStatus+0x2a>
 800ba8e:	4bbb      	ldr	r3, [pc, #748]	; (800bd7c <ProcessSignalStatus+0x308>)
 800ba90:	22fa      	movs	r2, #250	; 0xfa
 800ba92:	5c9b      	ldrb	r3, [r3, r2]
 800ba94:	2201      	movs	r2, #1
 800ba96:	4013      	ands	r3, r2
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10a      	bne.n	800bab4 <ProcessSignalStatus+0x40>
    PowerupDelay++;
 800ba9e:	4bb6      	ldr	r3, [pc, #728]	; (800bd78 <ProcessSignalStatus+0x304>)
 800baa0:	2200      	movs	r2, #0
 800baa2:	5e9b      	ldrsh	r3, [r3, r2]
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	3301      	adds	r3, #1
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	b21a      	sxth	r2, r3
 800baac:	4bb2      	ldr	r3, [pc, #712]	; (800bd78 <ProcessSignalStatus+0x304>)
 800baae:	801a      	strh	r2, [r3, #0]
    goto ExitHere;
 800bab0:	f000 fc44 	bl	800c33c <ProcessSignalStatus+0x8c8>
  }

  bRvOutputEnabled = ((bFlashConfigurationValid != 0) && (bFactoryConfigurationValid != 0) && (FactoryConfiguration->RVOutputPresent != 0) && (FlashConfiguration->RVOutputMode != CONFIG_RV_OUTPUT_MODE_DISABLED));
 800bab4:	4bb2      	ldr	r3, [pc, #712]	; (800bd80 <ProcessSignalStatus+0x30c>)
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d017      	beq.n	800baec <ProcessSignalStatus+0x78>
 800babc:	4bb1      	ldr	r3, [pc, #708]	; (800bd84 <ProcessSignalStatus+0x310>)
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d013      	beq.n	800baec <ProcessSignalStatus+0x78>
 800bac4:	4bb0      	ldr	r3, [pc, #704]	; (800bd88 <ProcessSignalStatus+0x314>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	7f1b      	ldrb	r3, [r3, #28]
 800baca:	2220      	movs	r2, #32
 800bacc:	4013      	ands	r3, r2
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00b      	beq.n	800baec <ProcessSignalStatus+0x78>
 800bad4:	4bad      	ldr	r3, [pc, #692]	; (800bd8c <ProcessSignalStatus+0x318>)
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	2382      	movs	r3, #130	; 0x82
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	5cd3      	ldrb	r3, [r2, r3]
 800bade:	2203      	movs	r2, #3
 800bae0:	4013      	ands	r3, r2
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d001      	beq.n	800baec <ProcessSignalStatus+0x78>
 800bae8:	2201      	movs	r2, #1
 800baea:	e000      	b.n	800baee <ProcessSignalStatus+0x7a>
 800baec:	2200      	movs	r2, #0
 800baee:	230f      	movs	r3, #15
 800baf0:	18fb      	adds	r3, r7, r3
 800baf2:	701a      	strb	r2, [r3, #0]
  bKmaEnabled = ((bFactoryConfigurationValid != 0) && (FactoryConfiguration->KmaPresent != 0));
 800baf4:	4ba3      	ldr	r3, [pc, #652]	; (800bd84 <ProcessSignalStatus+0x310>)
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d009      	beq.n	800bb10 <ProcessSignalStatus+0x9c>
 800bafc:	4ba2      	ldr	r3, [pc, #648]	; (800bd88 <ProcessSignalStatus+0x314>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	7f5b      	ldrb	r3, [r3, #29]
 800bb02:	2202      	movs	r2, #2
 800bb04:	4013      	ands	r3, r2
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <ProcessSignalStatus+0x9c>
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	e000      	b.n	800bb12 <ProcessSignalStatus+0x9e>
 800bb10:	2200      	movs	r2, #0
 800bb12:	230e      	movs	r3, #14
 800bb14:	18fb      	adds	r3, r7, r3
 800bb16:	701a      	strb	r2, [r3, #0]
  bTemperatureEnabled = ((bFactoryConfigurationValid != 0) && (FactoryConfiguration->TempSensorPresent != 0));
 800bb18:	4b9a      	ldr	r3, [pc, #616]	; (800bd84 <ProcessSignalStatus+0x310>)
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d009      	beq.n	800bb34 <ProcessSignalStatus+0xc0>
 800bb20:	4b99      	ldr	r3, [pc, #612]	; (800bd88 <ProcessSignalStatus+0x314>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	7f5b      	ldrb	r3, [r3, #29]
 800bb26:	2201      	movs	r2, #1
 800bb28:	4013      	ands	r3, r2
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d001      	beq.n	800bb34 <ProcessSignalStatus+0xc0>
 800bb30:	2201      	movs	r2, #1
 800bb32:	e000      	b.n	800bb36 <ProcessSignalStatus+0xc2>
 800bb34:	2200      	movs	r2, #0
 800bb36:	230d      	movs	r3, #13
 800bb38:	18fb      	adds	r3, r7, r3
 800bb3a:	701a      	strb	r2, [r3, #0]

  // If using CAN Bus, calculate min and max setpoint
  if (FlashConfiguration->CanUse != 0) {
 800bb3c:	4b93      	ldr	r3, [pc, #588]	; (800bd8c <ProcessSignalStatus+0x318>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a93      	ldr	r2, [pc, #588]	; (800bd90 <ProcessSignalStatus+0x31c>)
 800bb42:	5c9b      	ldrb	r3, [r3, r2]
 800bb44:	2202      	movs	r2, #2
 800bb46:	4013      	ands	r3, r2
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d02d      	beq.n	800bbaa <ProcessSignalStatus+0x136>
    MinSetpoint = Min(FlashConfiguration->CanTable.TablePoint[FlashConfiguration->CanTable.TableLength - 1].Point2,
 800bb4e:	4b8f      	ldr	r3, [pc, #572]	; (800bd8c <ProcessSignalStatus+0x318>)
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	4b8e      	ldr	r3, [pc, #568]	; (800bd8c <ProcessSignalStatus+0x318>)
 800bb54:	6819      	ldr	r1, [r3, #0]
 800bb56:	238a      	movs	r3, #138	; 0x8a
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	58cb      	ldr	r3, [r1, r3]
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	3345      	adds	r3, #69	; 0x45
 800bb60:	00db      	lsls	r3, r3, #3
 800bb62:	18d3      	adds	r3, r2, r3
 800bb64:	3308      	adds	r3, #8
 800bb66:	6818      	ldr	r0, [r3, #0]
                      FlashConfiguration->CanTable.TablePoint[0].Point2);
 800bb68:	4b88      	ldr	r3, [pc, #544]	; (800bd8c <ProcessSignalStatus+0x318>)
 800bb6a:	681a      	ldr	r2, [r3, #0]
    MinSetpoint = Min(FlashConfiguration->CanTable.TablePoint[FlashConfiguration->CanTable.TableLength - 1].Point2,
 800bb6c:	238c      	movs	r3, #140	; 0x8c
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	58d3      	ldr	r3, [r2, r3]
 800bb72:	0019      	movs	r1, r3
 800bb74:	f7f9 f8d6 	bl	8004d24 <Min>
 800bb78:	0003      	movs	r3, r0
 800bb7a:	617b      	str	r3, [r7, #20]

    MaxSetpoint = Max(FlashConfiguration->CanTable.TablePoint[FlashConfiguration->CanTable.TableLength - 1].Point2,
 800bb7c:	4b83      	ldr	r3, [pc, #524]	; (800bd8c <ProcessSignalStatus+0x318>)
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	4b82      	ldr	r3, [pc, #520]	; (800bd8c <ProcessSignalStatus+0x318>)
 800bb82:	6819      	ldr	r1, [r3, #0]
 800bb84:	238a      	movs	r3, #138	; 0x8a
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	58cb      	ldr	r3, [r1, r3]
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	3345      	adds	r3, #69	; 0x45
 800bb8e:	00db      	lsls	r3, r3, #3
 800bb90:	18d3      	adds	r3, r2, r3
 800bb92:	3308      	adds	r3, #8
 800bb94:	6818      	ldr	r0, [r3, #0]
                      FlashConfiguration->CanTable.TablePoint[0].Point2);
 800bb96:	4b7d      	ldr	r3, [pc, #500]	; (800bd8c <ProcessSignalStatus+0x318>)
 800bb98:	681a      	ldr	r2, [r3, #0]
    MaxSetpoint = Max(FlashConfiguration->CanTable.TablePoint[FlashConfiguration->CanTable.TableLength - 1].Point2,
 800bb9a:	238c      	movs	r3, #140	; 0x8c
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	58d3      	ldr	r3, [r2, r3]
 800bba0:	0019      	movs	r1, r3
 800bba2:	f7f9 f8cf 	bl	8004d44 <Max>
 800bba6:	0003      	movs	r3, r0
 800bba8:	613b      	str	r3, [r7, #16]
  }
  //
  // Verify Setpoint A is in bounds - CanUse must be 1 or 3, but not 0 or 2 which will be TRUE when bitwuse AND with 0x01
  //
  if (FlashConfiguration->CanUse != 0) {
 800bbaa:	4b78      	ldr	r3, [pc, #480]	; (800bd8c <ProcessSignalStatus+0x318>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a78      	ldr	r2, [pc, #480]	; (800bd90 <ProcessSignalStatus+0x31c>)
 800bbb0:	5c9b      	ldrb	r3, [r3, r2]
 800bbb2:	2202      	movs	r2, #2
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d060      	beq.n	800bc7e <ProcessSignalStatus+0x20a>
    if (SysVars.SensorLetter == 0) {
 800bbbc:	4b6f      	ldr	r3, [pc, #444]	; (800bd7c <ProcessSignalStatus+0x308>)
 800bbbe:	22e4      	movs	r2, #228	; 0xe4
 800bbc0:	5c9b      	ldrb	r3, [r3, r2]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	4013      	ands	r3, r2
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d12c      	bne.n	800bc26 <ProcessSignalStatus+0x1b2>

      SetGeneralError(GENERAL_CAN_SETPOINT_A_LOW_LIMIT, SysVars.CanSetpoint < MinSetpoint, 100, SysVars.CanSetpoint, MinSetpoint);
 800bbcc:	4b6b      	ldr	r3, [pc, #428]	; (800bd7c <ProcessSignalStatus+0x308>)
 800bbce:	22d8      	movs	r2, #216	; 0xd8
 800bbd0:	589b      	ldr	r3, [r3, r2]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	1c11      	adds	r1, r2, #0
 800bbd6:	697a      	ldr	r2, [r7, #20]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	dc01      	bgt.n	800bbe0 <ProcessSignalStatus+0x16c>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	1c19      	adds	r1, r3, #0
 800bbe0:	b2cb      	uxtb	r3, r1
 800bbe2:	0019      	movs	r1, r3
 800bbe4:	4b65      	ldr	r3, [pc, #404]	; (800bd7c <ProcessSignalStatus+0x308>)
 800bbe6:	22d8      	movs	r2, #216	; 0xd8
 800bbe8:	589a      	ldr	r2, [r3, r2]
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	0013      	movs	r3, r2
 800bbf0:	2264      	movs	r2, #100	; 0x64
 800bbf2:	200c      	movs	r0, #12
 800bbf4:	f7ff feec 	bl	800b9d0 <SetGeneralError>
      SetGeneralError(GENERAL_CAN_SETPOINT_A_HIGH_LIMIT, SysVars.CanSetpoint > MaxSetpoint, 100, SysVars.CanSetpoint, MaxSetpoint);
 800bbf8:	4b60      	ldr	r3, [pc, #384]	; (800bd7c <ProcessSignalStatus+0x308>)
 800bbfa:	22d8      	movs	r2, #216	; 0xd8
 800bbfc:	589b      	ldr	r3, [r3, r2]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	1c11      	adds	r1, r2, #0
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	db01      	blt.n	800bc0c <ProcessSignalStatus+0x198>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	1c19      	adds	r1, r3, #0
 800bc0c:	b2cb      	uxtb	r3, r1
 800bc0e:	0019      	movs	r1, r3
 800bc10:	4b5a      	ldr	r3, [pc, #360]	; (800bd7c <ProcessSignalStatus+0x308>)
 800bc12:	22d8      	movs	r2, #216	; 0xd8
 800bc14:	589a      	ldr	r2, [r3, r2]
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	0013      	movs	r3, r2
 800bc1c:	2264      	movs	r2, #100	; 0x64
 800bc1e:	200d      	movs	r0, #13
 800bc20:	f7ff fed6 	bl	800b9d0 <SetGeneralError>
 800bc24:	e02b      	b.n	800bc7e <ProcessSignalStatus+0x20a>
    }
    else {
      SetGeneralError(GENERAL_CAN_SETPOINT_A_LOW_LIMIT, ForeignSysVars.CanSetpoint < MinSetpoint, 100, ForeignSysVars.CanSetpoint, MinSetpoint);
 800bc26:	4b5b      	ldr	r3, [pc, #364]	; (800bd94 <ProcessSignalStatus+0x320>)
 800bc28:	22d8      	movs	r2, #216	; 0xd8
 800bc2a:	589b      	ldr	r3, [r3, r2]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	1c11      	adds	r1, r2, #0
 800bc30:	697a      	ldr	r2, [r7, #20]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	dc01      	bgt.n	800bc3a <ProcessSignalStatus+0x1c6>
 800bc36:	2300      	movs	r3, #0
 800bc38:	1c19      	adds	r1, r3, #0
 800bc3a:	b2cb      	uxtb	r3, r1
 800bc3c:	0019      	movs	r1, r3
 800bc3e:	4b55      	ldr	r3, [pc, #340]	; (800bd94 <ProcessSignalStatus+0x320>)
 800bc40:	22d8      	movs	r2, #216	; 0xd8
 800bc42:	589a      	ldr	r2, [r3, r2]
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	0013      	movs	r3, r2
 800bc4a:	2264      	movs	r2, #100	; 0x64
 800bc4c:	200c      	movs	r0, #12
 800bc4e:	f7ff febf 	bl	800b9d0 <SetGeneralError>
      SetGeneralError(GENERAL_CAN_SETPOINT_A_HIGH_LIMIT, ForeignSysVars.CanSetpoint > MaxSetpoint, 100, ForeignSysVars.CanSetpoint, MaxSetpoint);
 800bc52:	4b50      	ldr	r3, [pc, #320]	; (800bd94 <ProcessSignalStatus+0x320>)
 800bc54:	22d8      	movs	r2, #216	; 0xd8
 800bc56:	589b      	ldr	r3, [r3, r2]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	1c11      	adds	r1, r2, #0
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	db01      	blt.n	800bc66 <ProcessSignalStatus+0x1f2>
 800bc62:	2300      	movs	r3, #0
 800bc64:	1c19      	adds	r1, r3, #0
 800bc66:	b2cb      	uxtb	r3, r1
 800bc68:	0019      	movs	r1, r3
 800bc6a:	4b4a      	ldr	r3, [pc, #296]	; (800bd94 <ProcessSignalStatus+0x320>)
 800bc6c:	22d8      	movs	r2, #216	; 0xd8
 800bc6e:	589a      	ldr	r2, [r3, r2]
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	0013      	movs	r3, r2
 800bc76:	2264      	movs	r2, #100	; 0x64
 800bc78:	200d      	movs	r0, #13
 800bc7a:	f7ff fea9 	bl	800b9d0 <SetGeneralError>
    }
  }
  //
  // Verify Setpoint B is in bounds is using CAN B
  //
  if (FlashConfiguration->CanUse != 0) {
 800bc7e:	4b43      	ldr	r3, [pc, #268]	; (800bd8c <ProcessSignalStatus+0x318>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a43      	ldr	r2, [pc, #268]	; (800bd90 <ProcessSignalStatus+0x31c>)
 800bc84:	5c9b      	ldrb	r3, [r3, r2]
 800bc86:	2202      	movs	r2, #2
 800bc88:	4013      	ands	r3, r2
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d060      	beq.n	800bd52 <ProcessSignalStatus+0x2de>
    if (SysVars.SensorLetter == 0) {
 800bc90:	4b3a      	ldr	r3, [pc, #232]	; (800bd7c <ProcessSignalStatus+0x308>)
 800bc92:	22e4      	movs	r2, #228	; 0xe4
 800bc94:	5c9b      	ldrb	r3, [r3, r2]
 800bc96:	2201      	movs	r2, #1
 800bc98:	4013      	ands	r3, r2
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d12c      	bne.n	800bcfa <ProcessSignalStatus+0x286>
      SetGeneralError(GENERAL_CAN_SETPOINT_B_LOW_LIMIT, ForeignSysVars.CanSetpoint < MinSetpoint, 100, ForeignSysVars.CanSetpoint, MinSetpoint);
 800bca0:	4b3c      	ldr	r3, [pc, #240]	; (800bd94 <ProcessSignalStatus+0x320>)
 800bca2:	22d8      	movs	r2, #216	; 0xd8
 800bca4:	589b      	ldr	r3, [r3, r2]
 800bca6:	2201      	movs	r2, #1
 800bca8:	1c11      	adds	r1, r2, #0
 800bcaa:	697a      	ldr	r2, [r7, #20]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	dc01      	bgt.n	800bcb4 <ProcessSignalStatus+0x240>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	1c19      	adds	r1, r3, #0
 800bcb4:	b2cb      	uxtb	r3, r1
 800bcb6:	0019      	movs	r1, r3
 800bcb8:	4b36      	ldr	r3, [pc, #216]	; (800bd94 <ProcessSignalStatus+0x320>)
 800bcba:	22d8      	movs	r2, #216	; 0xd8
 800bcbc:	589a      	ldr	r2, [r3, r2]
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	0013      	movs	r3, r2
 800bcc4:	2264      	movs	r2, #100	; 0x64
 800bcc6:	200e      	movs	r0, #14
 800bcc8:	f7ff fe82 	bl	800b9d0 <SetGeneralError>
      SetGeneralError(GENERAL_CAN_SETPOINT_B_HIGH_LIMIT, ForeignSysVars.CanSetpoint > MaxSetpoint, 100, ForeignSysVars.CanSetpoint, MaxSetpoint);
 800bccc:	4b31      	ldr	r3, [pc, #196]	; (800bd94 <ProcessSignalStatus+0x320>)
 800bcce:	22d8      	movs	r2, #216	; 0xd8
 800bcd0:	589b      	ldr	r3, [r3, r2]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	1c11      	adds	r1, r2, #0
 800bcd6:	693a      	ldr	r2, [r7, #16]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	db01      	blt.n	800bce0 <ProcessSignalStatus+0x26c>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	1c19      	adds	r1, r3, #0
 800bce0:	b2cb      	uxtb	r3, r1
 800bce2:	0019      	movs	r1, r3
 800bce4:	4b2b      	ldr	r3, [pc, #172]	; (800bd94 <ProcessSignalStatus+0x320>)
 800bce6:	22d8      	movs	r2, #216	; 0xd8
 800bce8:	589a      	ldr	r2, [r3, r2]
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	0013      	movs	r3, r2
 800bcf0:	2264      	movs	r2, #100	; 0x64
 800bcf2:	200f      	movs	r0, #15
 800bcf4:	f7ff fe6c 	bl	800b9d0 <SetGeneralError>
 800bcf8:	e02b      	b.n	800bd52 <ProcessSignalStatus+0x2de>
    }
    else {
      SetGeneralError(GENERAL_CAN_SETPOINT_B_LOW_LIMIT, SysVars.CanSetpoint < MinSetpoint, 100, SysVars.CanSetpoint, MinSetpoint);
 800bcfa:	4b20      	ldr	r3, [pc, #128]	; (800bd7c <ProcessSignalStatus+0x308>)
 800bcfc:	22d8      	movs	r2, #216	; 0xd8
 800bcfe:	589b      	ldr	r3, [r3, r2]
 800bd00:	2201      	movs	r2, #1
 800bd02:	1c11      	adds	r1, r2, #0
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	dc01      	bgt.n	800bd0e <ProcessSignalStatus+0x29a>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	1c19      	adds	r1, r3, #0
 800bd0e:	b2cb      	uxtb	r3, r1
 800bd10:	0019      	movs	r1, r3
 800bd12:	4b1a      	ldr	r3, [pc, #104]	; (800bd7c <ProcessSignalStatus+0x308>)
 800bd14:	22d8      	movs	r2, #216	; 0xd8
 800bd16:	589a      	ldr	r2, [r3, r2]
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	0013      	movs	r3, r2
 800bd1e:	2264      	movs	r2, #100	; 0x64
 800bd20:	200e      	movs	r0, #14
 800bd22:	f7ff fe55 	bl	800b9d0 <SetGeneralError>
      SetGeneralError(GENERAL_CAN_SETPOINT_B_HIGH_LIMIT, SysVars.CanSetpoint > MaxSetpoint, 100, SysVars.CanSetpoint, MaxSetpoint);
 800bd26:	4b15      	ldr	r3, [pc, #84]	; (800bd7c <ProcessSignalStatus+0x308>)
 800bd28:	22d8      	movs	r2, #216	; 0xd8
 800bd2a:	589b      	ldr	r3, [r3, r2]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	1c11      	adds	r1, r2, #0
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	db01      	blt.n	800bd3a <ProcessSignalStatus+0x2c6>
 800bd36:	2300      	movs	r3, #0
 800bd38:	1c19      	adds	r1, r3, #0
 800bd3a:	b2cb      	uxtb	r3, r1
 800bd3c:	0019      	movs	r1, r3
 800bd3e:	4b0f      	ldr	r3, [pc, #60]	; (800bd7c <ProcessSignalStatus+0x308>)
 800bd40:	22d8      	movs	r2, #216	; 0xd8
 800bd42:	589a      	ldr	r2, [r3, r2]
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	0013      	movs	r3, r2
 800bd4a:	2264      	movs	r2, #100	; 0x64
 800bd4c:	200f      	movs	r0, #15
 800bd4e:	f7ff fe3f 	bl	800b9d0 <SetGeneralError>
  }
  //
  //
  // Verify RS485 Counter is Updating
  //
  SetGeneralError(GENERAL_RS485_NOT_UPDATING, (SysVars.RS485Counter == Old_RS485_Counter) && (FlashConfiguration->RS485MessageMode == 2), 100, Old_RS485_Counter, Old_RS485_Counter + 1);
 800bd52:	4b0a      	ldr	r3, [pc, #40]	; (800bd7c <ProcessSignalStatus+0x308>)
 800bd54:	22f1      	movs	r2, #241	; 0xf1
 800bd56:	5c9a      	ldrb	r2, [r3, r2]
 800bd58:	4b0f      	ldr	r3, [pc, #60]	; (800bd98 <ProcessSignalStatus+0x324>)
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d11f      	bne.n	800bda0 <ProcessSignalStatus+0x32c>
 800bd60:	4b0a      	ldr	r3, [pc, #40]	; (800bd8c <ProcessSignalStatus+0x318>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a0d      	ldr	r2, [pc, #52]	; (800bd9c <ProcessSignalStatus+0x328>)
 800bd66:	5c9b      	ldrb	r3, [r3, r2]
 800bd68:	221e      	movs	r2, #30
 800bd6a:	4013      	ands	r3, r2
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	2b04      	cmp	r3, #4
 800bd70:	d116      	bne.n	800bda0 <ProcessSignalStatus+0x32c>
 800bd72:	2301      	movs	r3, #1
 800bd74:	e015      	b.n	800bda2 <ProcessSignalStatus+0x32e>
 800bd76:	46c0      	nop			; (mov r8, r8)
 800bd78:	20000b06 	.word	0x20000b06
 800bd7c:	200020c0 	.word	0x200020c0
 800bd80:	20002cf6 	.word	0x20002cf6
 800bd84:	20002f9e 	.word	0x20002f9e
 800bd88:	20001eec 	.word	0x20001eec
 800bd8c:	20002f04 	.word	0x20002f04
 800bd90:	00000225 	.word	0x00000225
 800bd94:	20001f20 	.word	0x20001f20
 800bd98:	20000b04 	.word	0x20000b04
 800bd9c:	00000474 	.word	0x00000474
 800bda0:	2300      	movs	r3, #0
 800bda2:	b2d9      	uxtb	r1, r3
 800bda4:	4bdc      	ldr	r3, [pc, #880]	; (800c118 <ProcessSignalStatus+0x6a4>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	001a      	movs	r2, r3
 800bdaa:	4bdb      	ldr	r3, [pc, #876]	; (800c118 <ProcessSignalStatus+0x6a4>)
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	0013      	movs	r3, r2
 800bdb4:	2264      	movs	r2, #100	; 0x64
 800bdb6:	2010      	movs	r0, #16
 800bdb8:	f7ff fe0a 	bl	800b9d0 <SetGeneralError>
  Old_RS485_Counter = SysVars.RS485Counter;
 800bdbc:	4bd7      	ldr	r3, [pc, #860]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800bdbe:	22f1      	movs	r2, #241	; 0xf1
 800bdc0:	5c9a      	ldrb	r2, [r3, r2]
 800bdc2:	4bd5      	ldr	r3, [pc, #852]	; (800c118 <ProcessSignalStatus+0x6a4>)
 800bdc4:	701a      	strb	r2, [r3, #0]
  //
  // Verify Kma Indices match
  //
  Diff = abs(SysVars.ThrottleSetpoint - ForeignSysVars.ThrottleSetpoint);
 800bdc6:	4bd5      	ldr	r3, [pc, #852]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800bdc8:	22e8      	movs	r2, #232	; 0xe8
 800bdca:	589a      	ldr	r2, [r3, r2]
 800bdcc:	4bd4      	ldr	r3, [pc, #848]	; (800c120 <ProcessSignalStatus+0x6ac>)
 800bdce:	21e8      	movs	r1, #232	; 0xe8
 800bdd0:	585b      	ldr	r3, [r3, r1]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	17da      	asrs	r2, r3, #31
 800bdd6:	189b      	adds	r3, r3, r2
 800bdd8:	4053      	eors	r3, r2
 800bdda:	60bb      	str	r3, [r7, #8]
  SetGeneralError(GENERAL_SENSOR_MISMATCH, Diff > SETPOINT_TOLERANCE, 300, SETPOINT_TOLERANCE, Diff);
 800bddc:	2301      	movs	r3, #1
 800bdde:	1c19      	adds	r1, r3, #0
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	23c0      	movs	r3, #192	; 0xc0
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	429a      	cmp	r2, r3
 800bde8:	dc01      	bgt.n	800bdee <ProcessSignalStatus+0x37a>
 800bdea:	2300      	movs	r3, #0
 800bdec:	1c19      	adds	r1, r3, #0
 800bdee:	b2cb      	uxtb	r3, r1
 800bdf0:	0018      	movs	r0, r3
 800bdf2:	23c0      	movs	r3, #192	; 0xc0
 800bdf4:	0099      	lsls	r1, r3, #2
 800bdf6:	2396      	movs	r3, #150	; 0x96
 800bdf8:	005a      	lsls	r2, r3, #1
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	000b      	movs	r3, r1
 800be00:	0001      	movs	r1, r0
 800be02:	2011      	movs	r0, #17
 800be04:	f7ff fde4 	bl	800b9d0 <SetGeneralError>
  //
  // Verify quality scores if sensors do not match
  //
  if (ForeignSysVars.Quality1 > 0 && SysVars.Quality1 > 0) { // Means that throttle_x has sent over its quality1 value
 800be08:	4bc5      	ldr	r3, [pc, #788]	; (800c120 <ProcessSignalStatus+0x6ac>)
 800be0a:	22fc      	movs	r2, #252	; 0xfc
 800be0c:	589b      	ldr	r3, [r3, r2]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	dc00      	bgt.n	800be14 <ProcessSignalStatus+0x3a0>
 800be12:	e082      	b.n	800bf1a <ProcessSignalStatus+0x4a6>
 800be14:	4bc1      	ldr	r3, [pc, #772]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800be16:	22fc      	movs	r2, #252	; 0xfc
 800be18:	589b      	ldr	r3, [r3, r2]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	dc00      	bgt.n	800be20 <ProcessSignalStatus+0x3ac>
 800be1e:	e07c      	b.n	800bf1a <ProcessSignalStatus+0x4a6>
    if (SysVars.SensorLetter == 0) {
 800be20:	4bbe      	ldr	r3, [pc, #760]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800be22:	22e4      	movs	r2, #228	; 0xe4
 800be24:	5c9b      	ldrb	r3, [r3, r2]
 800be26:	2201      	movs	r2, #1
 800be28:	4013      	ands	r3, r2
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d13a      	bne.n	800bea6 <ProcessSignalStatus+0x432>
      // If sensor A quality is less than or equal to B, then B becomes the default
      SetGeneralError(GENERAL_SENSOR_A_QUALITY, (SysVars.Quality1 <= ForeignSysVars.Quality1) && (Diff > SETPOINT_TOLERANCE), 10, SysVars.Quality1, ForeignSysVars.Quality1);
 800be30:	4bba      	ldr	r3, [pc, #744]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800be32:	22fc      	movs	r2, #252	; 0xfc
 800be34:	589a      	ldr	r2, [r3, r2]
 800be36:	4bba      	ldr	r3, [pc, #744]	; (800c120 <ProcessSignalStatus+0x6ac>)
 800be38:	21fc      	movs	r1, #252	; 0xfc
 800be3a:	585b      	ldr	r3, [r3, r1]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	dc06      	bgt.n	800be4e <ProcessSignalStatus+0x3da>
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	23c0      	movs	r3, #192	; 0xc0
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	429a      	cmp	r2, r3
 800be48:	dd01      	ble.n	800be4e <ProcessSignalStatus+0x3da>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e000      	b.n	800be50 <ProcessSignalStatus+0x3dc>
 800be4e:	2300      	movs	r3, #0
 800be50:	b2d9      	uxtb	r1, r3
 800be52:	4bb2      	ldr	r3, [pc, #712]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800be54:	22fc      	movs	r2, #252	; 0xfc
 800be56:	5898      	ldr	r0, [r3, r2]
 800be58:	4bb1      	ldr	r3, [pc, #708]	; (800c120 <ProcessSignalStatus+0x6ac>)
 800be5a:	22fc      	movs	r2, #252	; 0xfc
 800be5c:	589b      	ldr	r3, [r3, r2]
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	0003      	movs	r3, r0
 800be62:	220a      	movs	r2, #10
 800be64:	201a      	movs	r0, #26
 800be66:	f7ff fdb3 	bl	800b9d0 <SetGeneralError>
      SetGeneralError(GENERAL_SENSOR_B_QUALITY, (SysVars.Quality1 > ForeignSysVars.Quality1) && (Diff > SETPOINT_TOLERANCE), 10, ForeignSysVars.Quality1, SysVars.Quality1);
 800be6a:	4bac      	ldr	r3, [pc, #688]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800be6c:	22fc      	movs	r2, #252	; 0xfc
 800be6e:	589a      	ldr	r2, [r3, r2]
 800be70:	4bab      	ldr	r3, [pc, #684]	; (800c120 <ProcessSignalStatus+0x6ac>)
 800be72:	21fc      	movs	r1, #252	; 0xfc
 800be74:	585b      	ldr	r3, [r3, r1]
 800be76:	429a      	cmp	r2, r3
 800be78:	dd06      	ble.n	800be88 <ProcessSignalStatus+0x414>
 800be7a:	68ba      	ldr	r2, [r7, #8]
 800be7c:	23c0      	movs	r3, #192	; 0xc0
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	429a      	cmp	r2, r3
 800be82:	dd01      	ble.n	800be88 <ProcessSignalStatus+0x414>
 800be84:	2301      	movs	r3, #1
 800be86:	e000      	b.n	800be8a <ProcessSignalStatus+0x416>
 800be88:	2300      	movs	r3, #0
 800be8a:	b2d9      	uxtb	r1, r3
 800be8c:	4ba4      	ldr	r3, [pc, #656]	; (800c120 <ProcessSignalStatus+0x6ac>)
 800be8e:	22fc      	movs	r2, #252	; 0xfc
 800be90:	5898      	ldr	r0, [r3, r2]
 800be92:	4ba2      	ldr	r3, [pc, #648]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800be94:	22fc      	movs	r2, #252	; 0xfc
 800be96:	589b      	ldr	r3, [r3, r2]
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	0003      	movs	r3, r0
 800be9c:	220a      	movs	r2, #10
 800be9e:	201b      	movs	r0, #27
 800bea0:	f7ff fd96 	bl	800b9d0 <SetGeneralError>
 800bea4:	e039      	b.n	800bf1a <ProcessSignalStatus+0x4a6>
    }
    else {
      SetGeneralError(GENERAL_SENSOR_B_QUALITY, (SysVars.Quality1 < ForeignSysVars.Quality1) && (Diff > SETPOINT_TOLERANCE), 10, ForeignSysVars.Quality1, SysVars.Quality1);
 800bea6:	4b9d      	ldr	r3, [pc, #628]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800bea8:	22fc      	movs	r2, #252	; 0xfc
 800beaa:	589a      	ldr	r2, [r3, r2]
 800beac:	4b9c      	ldr	r3, [pc, #624]	; (800c120 <ProcessSignalStatus+0x6ac>)
 800beae:	21fc      	movs	r1, #252	; 0xfc
 800beb0:	585b      	ldr	r3, [r3, r1]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	da06      	bge.n	800bec4 <ProcessSignalStatus+0x450>
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	23c0      	movs	r3, #192	; 0xc0
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	429a      	cmp	r2, r3
 800bebe:	dd01      	ble.n	800bec4 <ProcessSignalStatus+0x450>
 800bec0:	2301      	movs	r3, #1
 800bec2:	e000      	b.n	800bec6 <ProcessSignalStatus+0x452>
 800bec4:	2300      	movs	r3, #0
 800bec6:	b2d9      	uxtb	r1, r3
 800bec8:	4b95      	ldr	r3, [pc, #596]	; (800c120 <ProcessSignalStatus+0x6ac>)
 800beca:	22fc      	movs	r2, #252	; 0xfc
 800becc:	5898      	ldr	r0, [r3, r2]
 800bece:	4b93      	ldr	r3, [pc, #588]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800bed0:	22fc      	movs	r2, #252	; 0xfc
 800bed2:	589b      	ldr	r3, [r3, r2]
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	0003      	movs	r3, r0
 800bed8:	220a      	movs	r2, #10
 800beda:	201b      	movs	r0, #27
 800bedc:	f7ff fd78 	bl	800b9d0 <SetGeneralError>
      SetGeneralError(GENERAL_SENSOR_A_QUALITY, (SysVars.Quality1 >= ForeignSysVars.Quality1) && (Diff > SETPOINT_TOLERANCE), 10, SysVars.Quality1, ForeignSysVars.Quality1);
 800bee0:	4b8e      	ldr	r3, [pc, #568]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800bee2:	22fc      	movs	r2, #252	; 0xfc
 800bee4:	589a      	ldr	r2, [r3, r2]
 800bee6:	4b8e      	ldr	r3, [pc, #568]	; (800c120 <ProcessSignalStatus+0x6ac>)
 800bee8:	21fc      	movs	r1, #252	; 0xfc
 800beea:	585b      	ldr	r3, [r3, r1]
 800beec:	429a      	cmp	r2, r3
 800beee:	db06      	blt.n	800befe <ProcessSignalStatus+0x48a>
 800bef0:	68ba      	ldr	r2, [r7, #8]
 800bef2:	23c0      	movs	r3, #192	; 0xc0
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	429a      	cmp	r2, r3
 800bef8:	dd01      	ble.n	800befe <ProcessSignalStatus+0x48a>
 800befa:	2301      	movs	r3, #1
 800befc:	e000      	b.n	800bf00 <ProcessSignalStatus+0x48c>
 800befe:	2300      	movs	r3, #0
 800bf00:	b2d9      	uxtb	r1, r3
 800bf02:	4b86      	ldr	r3, [pc, #536]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800bf04:	22fc      	movs	r2, #252	; 0xfc
 800bf06:	5898      	ldr	r0, [r3, r2]
 800bf08:	4b85      	ldr	r3, [pc, #532]	; (800c120 <ProcessSignalStatus+0x6ac>)
 800bf0a:	22fc      	movs	r2, #252	; 0xfc
 800bf0c:	589b      	ldr	r3, [r3, r2]
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	0003      	movs	r3, r0
 800bf12:	220a      	movs	r2, #10
 800bf14:	201a      	movs	r0, #26
 800bf16:	f7ff fd5b 	bl	800b9d0 <SetGeneralError>
    }
  }
  //
  // Verify CAN Bus Is Functioning
  //
  SetGeneralError(GENERAL_CAN_RECEPTION_ERROR, CanBus.Status & 0x01u, 1, 0, 1);
 800bf1a:	4b82      	ldr	r3, [pc, #520]	; (800c124 <ProcessSignalStatus+0x6b0>)
 800bf1c:	2256      	movs	r2, #86	; 0x56
 800bf1e:	5c9b      	ldrb	r3, [r3, r2]
 800bf20:	2201      	movs	r2, #1
 800bf22:	4013      	ands	r3, r2
 800bf24:	b2d9      	uxtb	r1, r3
 800bf26:	2301      	movs	r3, #1
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	2012      	movs	r0, #18
 800bf30:	f7ff fd4e 	bl	800b9d0 <SetGeneralError>
  SetGeneralError(GENERAL_CAN_TRANSMISSION_EEROR, CanBus.Status & 0x02u, 100, 0, 1);
 800bf34:	4b7b      	ldr	r3, [pc, #492]	; (800c124 <ProcessSignalStatus+0x6b0>)
 800bf36:	2256      	movs	r2, #86	; 0x56
 800bf38:	5c9b      	ldrb	r3, [r3, r2]
 800bf3a:	2202      	movs	r2, #2
 800bf3c:	4013      	ands	r3, r2
 800bf3e:	b2d9      	uxtb	r1, r3
 800bf40:	2301      	movs	r3, #1
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	2300      	movs	r3, #0
 800bf46:	2264      	movs	r2, #100	; 0x64
 800bf48:	2013      	movs	r0, #19
 800bf4a:	f7ff fd41 	bl	800b9d0 <SetGeneralError>
  SetGeneralError(GENERAL_CAN_ECHO_ERROR, CanBus.Status & 0x04u, 100, 0, 1);
 800bf4e:	4b75      	ldr	r3, [pc, #468]	; (800c124 <ProcessSignalStatus+0x6b0>)
 800bf50:	2256      	movs	r2, #86	; 0x56
 800bf52:	5c9b      	ldrb	r3, [r3, r2]
 800bf54:	2204      	movs	r2, #4
 800bf56:	4013      	ands	r3, r2
 800bf58:	b2d9      	uxtb	r1, r3
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	2300      	movs	r3, #0
 800bf60:	2264      	movs	r2, #100	; 0x64
 800bf62:	2014      	movs	r0, #20
 800bf64:	f7ff fd34 	bl	800b9d0 <SetGeneralError>
  SetGeneralError(GENERAL_CAN_CRC_ERROR, CanBus.Status & 0x08u, 100, 0, 1);
 800bf68:	4b6e      	ldr	r3, [pc, #440]	; (800c124 <ProcessSignalStatus+0x6b0>)
 800bf6a:	2256      	movs	r2, #86	; 0x56
 800bf6c:	5c9b      	ldrb	r3, [r3, r2]
 800bf6e:	2208      	movs	r2, #8
 800bf70:	4013      	ands	r3, r2
 800bf72:	b2d9      	uxtb	r1, r3
 800bf74:	2301      	movs	r3, #1
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	2300      	movs	r3, #0
 800bf7a:	2264      	movs	r2, #100	; 0x64
 800bf7c:	2015      	movs	r0, #21
 800bf7e:	f7ff fd27 	bl	800b9d0 <SetGeneralError>

  //
  // Verify +5VDC Power Supply is within Limits
  //
  SetGeneralError(GENERAL_5VDC_LOW_LIMIT, SysVars.PowerRail5VDC < POWERRAIL5VDC_LOWLIMIT, 10, SysVars.PowerRail5VDC, POWERRAIL5VDC_LOWLIMIT);
 800bf82:	4b66      	ldr	r3, [pc, #408]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800bf84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf86:	4a68      	ldr	r2, [pc, #416]	; (800c128 <ProcessSignalStatus+0x6b4>)
 800bf88:	0fd8      	lsrs	r0, r3, #31
 800bf8a:	17d1      	asrs	r1, r2, #31
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	4148      	adcs	r0, r1
 800bf90:	0003      	movs	r3, r0
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	0019      	movs	r1, r3
 800bf96:	4b61      	ldr	r3, [pc, #388]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800bf98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf9a:	4b64      	ldr	r3, [pc, #400]	; (800c12c <ProcessSignalStatus+0x6b8>)
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	0013      	movs	r3, r2
 800bfa0:	220a      	movs	r2, #10
 800bfa2:	2001      	movs	r0, #1
 800bfa4:	f7ff fd14 	bl	800b9d0 <SetGeneralError>
  SetGeneralError(GENERAL_5VDC_HIGH_LIMIT, SysVars.PowerRail5VDC > POWERRAIL5VDC_HIGHLIMIT, 10, SysVars.PowerRail5VDC, POWERRAIL5VDC_HIGHLIMIT);
 800bfa8:	4b5c      	ldr	r3, [pc, #368]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800bfaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfac:	2201      	movs	r2, #1
 800bfae:	1c11      	adds	r1, r2, #0
 800bfb0:	4a5f      	ldr	r2, [pc, #380]	; (800c130 <ProcessSignalStatus+0x6bc>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	dc01      	bgt.n	800bfba <ProcessSignalStatus+0x546>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	1c19      	adds	r1, r3, #0
 800bfba:	b2cb      	uxtb	r3, r1
 800bfbc:	0019      	movs	r1, r3
 800bfbe:	4b57      	ldr	r3, [pc, #348]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800bfc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfc2:	4b5b      	ldr	r3, [pc, #364]	; (800c130 <ProcessSignalStatus+0x6bc>)
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	0013      	movs	r3, r2
 800bfc8:	220a      	movs	r2, #10
 800bfca:	2002      	movs	r0, #2
 800bfcc:	f7ff fd00 	bl	800b9d0 <SetGeneralError>
  //
  // Verify Internal Reference Counts are within limits
  //
  SetGeneralError(GENERAL_LOW_INTERNAL_REFERENCE_LIMIT, SysVars.IntRefCounts < INTERNALREF_LOWLIMIT, 10, SysVars.IntRefCounts, INTERNALREF_LOWLIMIT);
 800bfd0:	4b52      	ldr	r3, [pc, #328]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800bfd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfd4:	4a57      	ldr	r2, [pc, #348]	; (800c134 <ProcessSignalStatus+0x6c0>)
 800bfd6:	0fd8      	lsrs	r0, r3, #31
 800bfd8:	17d1      	asrs	r1, r2, #31
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	4148      	adcs	r0, r1
 800bfde:	0003      	movs	r3, r0
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	0019      	movs	r1, r3
 800bfe4:	4b4d      	ldr	r3, [pc, #308]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800bfe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bfe8:	4b53      	ldr	r3, [pc, #332]	; (800c138 <ProcessSignalStatus+0x6c4>)
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	0013      	movs	r3, r2
 800bfee:	220a      	movs	r2, #10
 800bff0:	2003      	movs	r0, #3
 800bff2:	f7ff fced 	bl	800b9d0 <SetGeneralError>
  SetGeneralError(GENERAL_HIGH_INTERNAL_REFERENCE_LIMIT, SysVars.IntRefCounts > INTERNALREF_HIGHLIMIT, 10, SysVars.IntRefCounts, INTERNALREF_HIGHLIMIT);
 800bff6:	4b49      	ldr	r3, [pc, #292]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800bff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bffa:	2201      	movs	r2, #1
 800bffc:	1c11      	adds	r1, r2, #0
 800bffe:	4a4f      	ldr	r2, [pc, #316]	; (800c13c <ProcessSignalStatus+0x6c8>)
 800c000:	4293      	cmp	r3, r2
 800c002:	dc01      	bgt.n	800c008 <ProcessSignalStatus+0x594>
 800c004:	2300      	movs	r3, #0
 800c006:	1c19      	adds	r1, r3, #0
 800c008:	b2cb      	uxtb	r3, r1
 800c00a:	0019      	movs	r1, r3
 800c00c:	4b43      	ldr	r3, [pc, #268]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800c00e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c010:	4b4a      	ldr	r3, [pc, #296]	; (800c13c <ProcessSignalStatus+0x6c8>)
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	0013      	movs	r3, r2
 800c016:	220a      	movs	r2, #10
 800c018:	2004      	movs	r0, #4
 800c01a:	f7ff fcd9 	bl	800b9d0 <SetGeneralError>
  //
  // Verify MOSFET Power
  //
  SetGeneralError(GENERAL_MOSFET_POWER, (bRvOutputEnabled != 0) && (SysVars.MosfetPower > MOSFET_MAXPOWER), 10, SysVars.MosfetPower, MOSFET_MAXPOWER);
 800c01e:	230f      	movs	r3, #15
 800c020:	18fb      	adds	r3, r7, r3
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d008      	beq.n	800c03a <ProcessSignalStatus+0x5c6>
 800c028:	4b3c      	ldr	r3, [pc, #240]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800c02a:	22c0      	movs	r2, #192	; 0xc0
 800c02c:	589a      	ldr	r2, [r3, r2]
 800c02e:	2396      	movs	r3, #150	; 0x96
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	429a      	cmp	r2, r3
 800c034:	dd01      	ble.n	800c03a <ProcessSignalStatus+0x5c6>
 800c036:	2301      	movs	r3, #1
 800c038:	e000      	b.n	800c03c <ProcessSignalStatus+0x5c8>
 800c03a:	2300      	movs	r3, #0
 800c03c:	b2d9      	uxtb	r1, r3
 800c03e:	4b37      	ldr	r3, [pc, #220]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800c040:	22c0      	movs	r2, #192	; 0xc0
 800c042:	589a      	ldr	r2, [r3, r2]
 800c044:	2396      	movs	r3, #150	; 0x96
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	9300      	str	r3, [sp, #0]
 800c04a:	0013      	movs	r3, r2
 800c04c:	220a      	movs	r2, #10
 800c04e:	2000      	movs	r0, #0
 800c050:	f7ff fcbe 	bl	800b9d0 <SetGeneralError>
  //
  // Verify Power Input Voltage is within limits
  //
  SetGeneralError(GENERAL_POWER_INPUT_LOW_LIMIT, SysVars.PowerInputVoltage < POWERINPUT_LOWLIMIT, 100, SysVars.PowerInputVoltage, POWERINPUT_LOWLIMIT);
 800c054:	4b31      	ldr	r3, [pc, #196]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800c056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c058:	4a39      	ldr	r2, [pc, #228]	; (800c140 <ProcessSignalStatus+0x6cc>)
 800c05a:	0fd8      	lsrs	r0, r3, #31
 800c05c:	17d1      	asrs	r1, r2, #31
 800c05e:	429a      	cmp	r2, r3
 800c060:	4148      	adcs	r0, r1
 800c062:	0003      	movs	r3, r0
 800c064:	b2db      	uxtb	r3, r3
 800c066:	0019      	movs	r1, r3
 800c068:	4b2c      	ldr	r3, [pc, #176]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800c06a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c06c:	4b35      	ldr	r3, [pc, #212]	; (800c144 <ProcessSignalStatus+0x6d0>)
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	0013      	movs	r3, r2
 800c072:	2264      	movs	r2, #100	; 0x64
 800c074:	2005      	movs	r0, #5
 800c076:	f7ff fcab 	bl	800b9d0 <SetGeneralError>
  SetGeneralError(GENERAL_POWER_INPUT_HIGH_LIMIT, SysVars.PowerInputVoltage > POWERINPUT_HIGHLIMIT, 100, SysVars.PowerInputVoltage, POWERINPUT_HIGHLIMIT);
 800c07a:	4b28      	ldr	r3, [pc, #160]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800c07c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c07e:	2201      	movs	r2, #1
 800c080:	1c11      	adds	r1, r2, #0
 800c082:	4a31      	ldr	r2, [pc, #196]	; (800c148 <ProcessSignalStatus+0x6d4>)
 800c084:	4293      	cmp	r3, r2
 800c086:	dc01      	bgt.n	800c08c <ProcessSignalStatus+0x618>
 800c088:	2300      	movs	r3, #0
 800c08a:	1c19      	adds	r1, r3, #0
 800c08c:	b2cb      	uxtb	r3, r1
 800c08e:	0019      	movs	r1, r3
 800c090:	4b22      	ldr	r3, [pc, #136]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800c092:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c094:	4b2c      	ldr	r3, [pc, #176]	; (800c148 <ProcessSignalStatus+0x6d4>)
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	0013      	movs	r3, r2
 800c09a:	2264      	movs	r2, #100	; 0x64
 800c09c:	2006      	movs	r0, #6
 800c09e:	f7ff fc97 	bl	800b9d0 <SetGeneralError>
  //
  // Verify KMA Percentage is within limits
  //
  SetGeneralError(GENERAL_KMA_LOW_LIMIT, (bKmaEnabled != 0) && (SysVars.KmaPercentage < KMA_LOWLIMIT), 100, SysVars.KmaPercentage, KMA_LOWLIMIT);
 800c0a2:	230e      	movs	r3, #14
 800c0a4:	18fb      	adds	r3, r7, r3
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d006      	beq.n	800c0ba <ProcessSignalStatus+0x646>
 800c0ac:	4b1b      	ldr	r3, [pc, #108]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800c0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b0:	4a26      	ldr	r2, [pc, #152]	; (800c14c <ProcessSignalStatus+0x6d8>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	dc01      	bgt.n	800c0ba <ProcessSignalStatus+0x646>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e000      	b.n	800c0bc <ProcessSignalStatus+0x648>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	b2d9      	uxtb	r1, r3
 800c0be:	4b17      	ldr	r3, [pc, #92]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800c0c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0c2:	23fa      	movs	r3, #250	; 0xfa
 800c0c4:	011b      	lsls	r3, r3, #4
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	0013      	movs	r3, r2
 800c0ca:	2264      	movs	r2, #100	; 0x64
 800c0cc:	2007      	movs	r0, #7
 800c0ce:	f7ff fc7f 	bl	800b9d0 <SetGeneralError>
  SetGeneralError(GENERAL_KMA_HIGH_LIMIT, (bKmaEnabled != 0) && (SysVars.KmaPercentage > KMA_HIGHLIMIT), 100, SysVars.KmaPercentage, KMA_HIGHLIMIT);
 800c0d2:	230e      	movs	r3, #14
 800c0d4:	18fb      	adds	r3, r7, r3
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d006      	beq.n	800c0ea <ProcessSignalStatus+0x676>
 800c0dc:	4b0f      	ldr	r3, [pc, #60]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800c0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e0:	4a1b      	ldr	r2, [pc, #108]	; (800c150 <ProcessSignalStatus+0x6dc>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	dd01      	ble.n	800c0ea <ProcessSignalStatus+0x676>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e000      	b.n	800c0ec <ProcessSignalStatus+0x678>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	b2d9      	uxtb	r1, r3
 800c0ee:	4b0b      	ldr	r3, [pc, #44]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800c0f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0f2:	4b17      	ldr	r3, [pc, #92]	; (800c150 <ProcessSignalStatus+0x6dc>)
 800c0f4:	9300      	str	r3, [sp, #0]
 800c0f6:	0013      	movs	r3, r2
 800c0f8:	2264      	movs	r2, #100	; 0x64
 800c0fa:	2008      	movs	r0, #8
 800c0fc:	f7ff fc68 	bl	800b9d0 <SetGeneralError>
  //
  // Verify Temperature is within Limits
  //
  SetGeneralError(GENERAL_TEMPERATURE_LOW_LIMIT, (bTemperatureEnabled != 0) && (SysVars.TemperatureCelsius < TEMPERATURE_LOWLIMIT), 10, SysVars.TemperatureCelsius, TEMPERATURE_LOWLIMIT);
 800c100:	230d      	movs	r3, #13
 800c102:	18fb      	adds	r3, r7, r3
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d026      	beq.n	800c158 <ProcessSignalStatus+0x6e4>
 800c10a:	4b04      	ldr	r3, [pc, #16]	; (800c11c <ProcessSignalStatus+0x6a8>)
 800c10c:	691b      	ldr	r3, [r3, #16]
 800c10e:	4a11      	ldr	r2, [pc, #68]	; (800c154 <ProcessSignalStatus+0x6e0>)
 800c110:	4293      	cmp	r3, r2
 800c112:	da21      	bge.n	800c158 <ProcessSignalStatus+0x6e4>
 800c114:	2301      	movs	r3, #1
 800c116:	e020      	b.n	800c15a <ProcessSignalStatus+0x6e6>
 800c118:	20000b04 	.word	0x20000b04
 800c11c:	200020c0 	.word	0x200020c0
 800c120:	20001f20 	.word	0x20001f20
 800c124:	200014a4 	.word	0x200014a4
 800c128:	0000133c 	.word	0x0000133c
 800c12c:	0000133d 	.word	0x0000133d
 800c130:	000013d3 	.word	0x000013d3
 800c134:	000005d1 	.word	0x000005d1
 800c138:	000005d2 	.word	0x000005d2
 800c13c:	00000613 	.word	0x00000613
 800c140:	00002327 	.word	0x00002327
 800c144:	00002328 	.word	0x00002328
 800c148:	000080e8 	.word	0x000080e8
 800c14c:	00000f9f 	.word	0x00000f9f
 800c150:	00017700 	.word	0x00017700
 800c154:	ffffe890 	.word	0xffffe890
 800c158:	2300      	movs	r3, #0
 800c15a:	b2d9      	uxtb	r1, r3
 800c15c:	4b7b      	ldr	r3, [pc, #492]	; (800c34c <ProcessSignalStatus+0x8d8>)
 800c15e:	691a      	ldr	r2, [r3, #16]
 800c160:	4b7b      	ldr	r3, [pc, #492]	; (800c350 <ProcessSignalStatus+0x8dc>)
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	0013      	movs	r3, r2
 800c166:	220a      	movs	r2, #10
 800c168:	2009      	movs	r0, #9
 800c16a:	f7ff fc31 	bl	800b9d0 <SetGeneralError>
  SetGeneralError(GENERAL_TEMPERATURE_HIGH_LIMIT, (bTemperatureEnabled != 0) && (SysVars.TemperatureCelsius > TEMPERATURE_HIGHLIMIT), 10, SysVars.TemperatureCelsius, TEMPERATURE_HIGHLIMIT);
 800c16e:	230d      	movs	r3, #13
 800c170:	18fb      	adds	r3, r7, r3
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d006      	beq.n	800c186 <ProcessSignalStatus+0x712>
 800c178:	4b74      	ldr	r3, [pc, #464]	; (800c34c <ProcessSignalStatus+0x8d8>)
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	4a75      	ldr	r2, [pc, #468]	; (800c354 <ProcessSignalStatus+0x8e0>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	dd01      	ble.n	800c186 <ProcessSignalStatus+0x712>
 800c182:	2301      	movs	r3, #1
 800c184:	e000      	b.n	800c188 <ProcessSignalStatus+0x714>
 800c186:	2300      	movs	r3, #0
 800c188:	b2d9      	uxtb	r1, r3
 800c18a:	4b70      	ldr	r3, [pc, #448]	; (800c34c <ProcessSignalStatus+0x8d8>)
 800c18c:	691a      	ldr	r2, [r3, #16]
 800c18e:	4b71      	ldr	r3, [pc, #452]	; (800c354 <ProcessSignalStatus+0x8e0>)
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	0013      	movs	r3, r2
 800c194:	220a      	movs	r2, #10
 800c196:	200a      	movs	r0, #10
 800c198:	f7ff fc1a 	bl	800b9d0 <SetGeneralError>
  //
  // Check that Setpoint and Feedback are within limits
  //
  int32_t MinOutput = ((SysVars.RVOutputCurrent * CURRENT_SHUNT_RESISTANCE) / 100000) + 2;
 800c19c:	4b6b      	ldr	r3, [pc, #428]	; (800c34c <ProcessSignalStatus+0x8d8>)
 800c19e:	2294      	movs	r2, #148	; 0x94
 800c1a0:	589b      	ldr	r3, [r3, r2]
 800c1a2:	2264      	movs	r2, #100	; 0x64
 800c1a4:	4353      	muls	r3, r2
 800c1a6:	496c      	ldr	r1, [pc, #432]	; (800c358 <ProcessSignalStatus+0x8e4>)
 800c1a8:	0018      	movs	r0, r3
 800c1aa:	f7f4 f89b 	bl	80002e4 <__divsi3>
 800c1ae:	0003      	movs	r3, r0
 800c1b0:	3302      	adds	r3, #2
 800c1b2:	607b      	str	r3, [r7, #4]

  if (FlashConfiguration->RVOutputMode == CONFIG_RV_OUTPUT_MODE_VOLTAGE) {
 800c1b4:	4b69      	ldr	r3, [pc, #420]	; (800c35c <ProcessSignalStatus+0x8e8>)
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	2382      	movs	r3, #130	; 0x82
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	5cd3      	ldrb	r3, [r2, r3]
 800c1be:	2203      	movs	r2, #3
 800c1c0:	4013      	ands	r3, r2
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d129      	bne.n	800c21c <ProcessSignalStatus+0x7a8>
    Diff = abs(SysVars.RVSetpoint - SysVars.RVFeedback);
 800c1c8:	4b60      	ldr	r3, [pc, #384]	; (800c34c <ProcessSignalStatus+0x8d8>)
 800c1ca:	22b0      	movs	r2, #176	; 0xb0
 800c1cc:	589a      	ldr	r2, [r3, r2]
 800c1ce:	4b5f      	ldr	r3, [pc, #380]	; (800c34c <ProcessSignalStatus+0x8d8>)
 800c1d0:	21b4      	movs	r1, #180	; 0xb4
 800c1d2:	585b      	ldr	r3, [r3, r1]
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	17da      	asrs	r2, r3, #31
 800c1d8:	189b      	adds	r3, r3, r2
 800c1da:	4053      	eors	r3, r2
 800c1dc:	60bb      	str	r3, [r7, #8]
    SetGeneralError(GENERAL_SP_FB_DIFF, (bRvOutputEnabled != 0) && (Diff > 20) && (SysVars.RVFeedback > MinOutput), 500, SysVars.RVSetpoint, SysVars.RVFeedback);
 800c1de:	230f      	movs	r3, #15
 800c1e0:	18fb      	adds	r3, r7, r3
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00a      	beq.n	800c1fe <ProcessSignalStatus+0x78a>
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	2b14      	cmp	r3, #20
 800c1ec:	dd07      	ble.n	800c1fe <ProcessSignalStatus+0x78a>
 800c1ee:	4b57      	ldr	r3, [pc, #348]	; (800c34c <ProcessSignalStatus+0x8d8>)
 800c1f0:	22b4      	movs	r2, #180	; 0xb4
 800c1f2:	589b      	ldr	r3, [r3, r2]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	da01      	bge.n	800c1fe <ProcessSignalStatus+0x78a>
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e000      	b.n	800c200 <ProcessSignalStatus+0x78c>
 800c1fe:	2300      	movs	r3, #0
 800c200:	b2d9      	uxtb	r1, r3
 800c202:	4b52      	ldr	r3, [pc, #328]	; (800c34c <ProcessSignalStatus+0x8d8>)
 800c204:	22b0      	movs	r2, #176	; 0xb0
 800c206:	5898      	ldr	r0, [r3, r2]
 800c208:	4b50      	ldr	r3, [pc, #320]	; (800c34c <ProcessSignalStatus+0x8d8>)
 800c20a:	22b4      	movs	r2, #180	; 0xb4
 800c20c:	589b      	ldr	r3, [r3, r2]
 800c20e:	22fa      	movs	r2, #250	; 0xfa
 800c210:	0052      	lsls	r2, r2, #1
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	0003      	movs	r3, r0
 800c216:	200b      	movs	r0, #11
 800c218:	f7ff fbda 	bl	800b9d0 <SetGeneralError>
  }
    //
    // Verify CRC's
    //
    bFlashConfigurationValid = (FlashConfiguration->Crc16 == CalculatedCrc.FlashConfiguration);
 800c21c:	4b4f      	ldr	r3, [pc, #316]	; (800c35c <ProcessSignalStatus+0x8e8>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a4f      	ldr	r2, [pc, #316]	; (800c360 <ProcessSignalStatus+0x8ec>)
 800c222:	5a9a      	ldrh	r2, [r3, r2]
 800c224:	4b4f      	ldr	r3, [pc, #316]	; (800c364 <ProcessSignalStatus+0x8f0>)
 800c226:	885b      	ldrh	r3, [r3, #2]
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	425a      	negs	r2, r3
 800c22c:	4153      	adcs	r3, r2
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	001a      	movs	r2, r3
 800c232:	4b4d      	ldr	r3, [pc, #308]	; (800c368 <ProcessSignalStatus+0x8f4>)
 800c234:	701a      	strb	r2, [r3, #0]
    if ((bFlashConfigurationValid == 0) && (bDefaultProfileLoaded == 0)) {
 800c236:	4b4c      	ldr	r3, [pc, #304]	; (800c368 <ProcessSignalStatus+0x8f4>)
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d106      	bne.n	800c24c <ProcessSignalStatus+0x7d8>
 800c23e:	4b4b      	ldr	r3, [pc, #300]	; (800c36c <ProcessSignalStatus+0x8f8>)
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d102      	bne.n	800c24c <ProcessSignalStatus+0x7d8>
      bGetDefaultProfile = 1; // Set flag to load in default Flash Configuration
 800c246:	4b4a      	ldr	r3, [pc, #296]	; (800c370 <ProcessSignalStatus+0x8fc>)
 800c248:	2201      	movs	r2, #1
 800c24a:	701a      	strb	r2, [r3, #0]
    }
    bFuzzyPageValid = bUseDefaultFuzzy || (FuzzyPage->Fuzzy2.Crc16 == CalculatedCrc.FuzzyConfiguration);
 800c24c:	4b49      	ldr	r3, [pc, #292]	; (800c374 <ProcessSignalStatus+0x900>)
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d107      	bne.n	800c264 <ProcessSignalStatus+0x7f0>
 800c254:	4b48      	ldr	r3, [pc, #288]	; (800c378 <ProcessSignalStatus+0x904>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a41      	ldr	r2, [pc, #260]	; (800c360 <ProcessSignalStatus+0x8ec>)
 800c25a:	5a9a      	ldrh	r2, [r3, r2]
 800c25c:	4b41      	ldr	r3, [pc, #260]	; (800c364 <ProcessSignalStatus+0x8f0>)
 800c25e:	88db      	ldrh	r3, [r3, #6]
 800c260:	429a      	cmp	r2, r3
 800c262:	d101      	bne.n	800c268 <ProcessSignalStatus+0x7f4>
 800c264:	2301      	movs	r3, #1
 800c266:	e000      	b.n	800c26a <ProcessSignalStatus+0x7f6>
 800c268:	2300      	movs	r3, #0
 800c26a:	b2da      	uxtb	r2, r3
 800c26c:	4b43      	ldr	r3, [pc, #268]	; (800c37c <ProcessSignalStatus+0x908>)
 800c26e:	701a      	strb	r2, [r3, #0]
    bFactoryConfigurationValid = (FactoryConfiguration->Crc16 == CalculatedCrc.FactoryConfiguration);
 800c270:	4b43      	ldr	r3, [pc, #268]	; (800c380 <ProcessSignalStatus+0x90c>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a3a      	ldr	r2, [pc, #232]	; (800c360 <ProcessSignalStatus+0x8ec>)
 800c276:	5a9a      	ldrh	r2, [r3, r2]
 800c278:	4b3a      	ldr	r3, [pc, #232]	; (800c364 <ProcessSignalStatus+0x8f0>)
 800c27a:	889b      	ldrh	r3, [r3, #4]
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	425a      	negs	r2, r3
 800c280:	4153      	adcs	r3, r2
 800c282:	b2db      	uxtb	r3, r3
 800c284:	001a      	movs	r2, r3
 800c286:	4b3f      	ldr	r3, [pc, #252]	; (800c384 <ProcessSignalStatus+0x910>)
 800c288:	701a      	strb	r2, [r3, #0]
    bFirmwareValid = (FactoryConfiguration->FirmwareCrc16 == CalculatedCrc.Firmware);
 800c28a:	4b3d      	ldr	r3, [pc, #244]	; (800c380 <ProcessSignalStatus+0x90c>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a3e      	ldr	r2, [pc, #248]	; (800c388 <ProcessSignalStatus+0x914>)
 800c290:	5a9a      	ldrh	r2, [r3, r2]
 800c292:	4b34      	ldr	r3, [pc, #208]	; (800c364 <ProcessSignalStatus+0x8f0>)
 800c294:	881b      	ldrh	r3, [r3, #0]
 800c296:	1ad3      	subs	r3, r2, r3
 800c298:	425a      	negs	r2, r3
 800c29a:	4153      	adcs	r3, r2
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	001a      	movs	r2, r3
 800c2a0:	4b3a      	ldr	r3, [pc, #232]	; (800c38c <ProcessSignalStatus+0x918>)
 800c2a2:	701a      	strb	r2, [r3, #0]

    SetGeneralError(GENERAL_BAD_FIRMWARE_CRC, bFirmwareValid == 0, 10, CalculatedCrc.Firmware, FactoryConfiguration->FirmwareCrc16);
 800c2a4:	4b39      	ldr	r3, [pc, #228]	; (800c38c <ProcessSignalStatus+0x918>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	425a      	negs	r2, r3
 800c2aa:	4153      	adcs	r3, r2
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	0019      	movs	r1, r3
 800c2b0:	4b2c      	ldr	r3, [pc, #176]	; (800c364 <ProcessSignalStatus+0x8f0>)
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	0018      	movs	r0, r3
 800c2b6:	4b32      	ldr	r3, [pc, #200]	; (800c380 <ProcessSignalStatus+0x90c>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a33      	ldr	r2, [pc, #204]	; (800c388 <ProcessSignalStatus+0x914>)
 800c2bc:	5a9b      	ldrh	r3, [r3, r2]
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	0003      	movs	r3, r0
 800c2c2:	220a      	movs	r2, #10
 800c2c4:	2016      	movs	r0, #22
 800c2c6:	f7ff fb83 	bl	800b9d0 <SetGeneralError>
    SetGeneralError(GENERAL_BAD_CONFIGURATION_CRC, bFlashConfigurationValid == 0, 10, CalculatedCrc.FlashConfiguration, FlashConfiguration->Crc16);
 800c2ca:	4b27      	ldr	r3, [pc, #156]	; (800c368 <ProcessSignalStatus+0x8f4>)
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	425a      	negs	r2, r3
 800c2d0:	4153      	adcs	r3, r2
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	0019      	movs	r1, r3
 800c2d6:	4b23      	ldr	r3, [pc, #140]	; (800c364 <ProcessSignalStatus+0x8f0>)
 800c2d8:	885b      	ldrh	r3, [r3, #2]
 800c2da:	0018      	movs	r0, r3
 800c2dc:	4b1f      	ldr	r3, [pc, #124]	; (800c35c <ProcessSignalStatus+0x8e8>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a1f      	ldr	r2, [pc, #124]	; (800c360 <ProcessSignalStatus+0x8ec>)
 800c2e2:	5a9b      	ldrh	r3, [r3, r2]
 800c2e4:	9300      	str	r3, [sp, #0]
 800c2e6:	0003      	movs	r3, r0
 800c2e8:	220a      	movs	r2, #10
 800c2ea:	2017      	movs	r0, #23
 800c2ec:	f7ff fb70 	bl	800b9d0 <SetGeneralError>
    SetGeneralError(GENERAL_BAD_FACTORY_CRC, bFactoryConfigurationValid == 0, 10, CalculatedCrc.FactoryConfiguration, FactoryConfiguration->Crc16);
 800c2f0:	4b24      	ldr	r3, [pc, #144]	; (800c384 <ProcessSignalStatus+0x910>)
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	425a      	negs	r2, r3
 800c2f6:	4153      	adcs	r3, r2
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	0019      	movs	r1, r3
 800c2fc:	4b19      	ldr	r3, [pc, #100]	; (800c364 <ProcessSignalStatus+0x8f0>)
 800c2fe:	889b      	ldrh	r3, [r3, #4]
 800c300:	0018      	movs	r0, r3
 800c302:	4b1f      	ldr	r3, [pc, #124]	; (800c380 <ProcessSignalStatus+0x90c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a16      	ldr	r2, [pc, #88]	; (800c360 <ProcessSignalStatus+0x8ec>)
 800c308:	5a9b      	ldrh	r3, [r3, r2]
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	0003      	movs	r3, r0
 800c30e:	220a      	movs	r2, #10
 800c310:	2018      	movs	r0, #24
 800c312:	f7ff fb5d 	bl	800b9d0 <SetGeneralError>
    SetGeneralError(GENERAL_BAD_FUZZY_CRC, bFuzzyPageValid == 0, 10, CalculatedCrc.FuzzyConfiguration, FuzzyPage->Fuzzy2.Crc16);
 800c316:	4b19      	ldr	r3, [pc, #100]	; (800c37c <ProcessSignalStatus+0x908>)
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	425a      	negs	r2, r3
 800c31c:	4153      	adcs	r3, r2
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	0019      	movs	r1, r3
 800c322:	4b10      	ldr	r3, [pc, #64]	; (800c364 <ProcessSignalStatus+0x8f0>)
 800c324:	88db      	ldrh	r3, [r3, #6]
 800c326:	0018      	movs	r0, r3
 800c328:	4b13      	ldr	r3, [pc, #76]	; (800c378 <ProcessSignalStatus+0x904>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a0c      	ldr	r2, [pc, #48]	; (800c360 <ProcessSignalStatus+0x8ec>)
 800c32e:	5a9b      	ldrh	r3, [r3, r2]
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	0003      	movs	r3, r0
 800c334:	220a      	movs	r2, #10
 800c336:	2019      	movs	r0, #25
 800c338:	f7ff fb4a 	bl	800b9d0 <SetGeneralError>

ExitHere:
  ExecutionEnd(EXECUTION_PROCESS_SIGNAL_STATUS);
 800c33c:	2004      	movs	r0, #4
 800c33e:	f7f8 f97f 	bl	8004640 <ExecutionEnd>
}
 800c342:	46c0      	nop			; (mov r8, r8)
 800c344:	46bd      	mov	sp, r7
 800c346:	b006      	add	sp, #24
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	46c0      	nop			; (mov r8, r8)
 800c34c:	200020c0 	.word	0x200020c0
 800c350:	ffffe890 	.word	0xffffe890
 800c354:	00002ee0 	.word	0x00002ee0
 800c358:	000186a0 	.word	0x000186a0
 800c35c:	20002f04 	.word	0x20002f04
 800c360:	000007fe 	.word	0x000007fe
 800c364:	20000b18 	.word	0x20000b18
 800c368:	20002cf6 	.word	0x20002cf6
 800c36c:	200020bc 	.word	0x200020bc
 800c370:	20001584 	.word	0x20001584
 800c374:	20000c24 	.word	0x20000c24
 800c378:	20002f2c 	.word	0x20002f2c
 800c37c:	20002cf5 	.word	0x20002cf5
 800c380:	20001eec 	.word	0x20001eec
 800c384:	20002f9e 	.word	0x20002f9e
 800c388:	00000216 	.word	0x00000216
 800c38c:	20002f68 	.word	0x20002f68

0800c390 <InitializeWatchDog>:
// Returns:   None
//
// Requirement(s):
//

void InitializeWatchDog (void) {
 800c390:	b580      	push	{r7, lr}
 800c392:	af00      	add	r7, sp, #0
    //
    // Configure Watchdog for a 0.75 to 1.25 second window
    //
    IWDG->KR = IWDG_KEY_ENABLE;
 800c394:	4b0f      	ldr	r3, [pc, #60]	; (800c3d4 <InitializeWatchDog+0x44>)
 800c396:	4a10      	ldr	r2, [pc, #64]	; (800c3d8 <InitializeWatchDog+0x48>)
 800c398:	601a      	str	r2, [r3, #0]
    IWDG->KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 800c39a:	4b0e      	ldr	r3, [pc, #56]	; (800c3d4 <InitializeWatchDog+0x44>)
 800c39c:	4a0f      	ldr	r2, [pc, #60]	; (800c3dc <InitializeWatchDog+0x4c>)
 800c39e:	601a      	str	r2, [r3, #0]
    IWDG->PR = IWDG_PRESCALER_256;
 800c3a0:	4b0c      	ldr	r3, [pc, #48]	; (800c3d4 <InitializeWatchDog+0x44>)
 800c3a2:	2206      	movs	r2, #6
 800c3a4:	605a      	str	r2, [r3, #4]
    IWDG->RLR = (1250 * 10) / 64;
 800c3a6:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <InitializeWatchDog+0x44>)
 800c3a8:	22c3      	movs	r2, #195	; 0xc3
 800c3aa:	609a      	str	r2, [r3, #8]
    do {
    } while ((IWDG->SR & 0x7) != RESET);
 800c3ac:	4b09      	ldr	r3, [pc, #36]	; (800c3d4 <InitializeWatchDog+0x44>)
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	2207      	movs	r2, #7
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	d1fa      	bne.n	800c3ac <InitializeWatchDog+0x1c>
    IWDG->WINR = (750 * 10) / 64;
 800c3b6:	4b07      	ldr	r3, [pc, #28]	; (800c3d4 <InitializeWatchDog+0x44>)
 800c3b8:	2275      	movs	r2, #117	; 0x75
 800c3ba:	611a      	str	r2, [r3, #16]
    LastTicks = STM32_GetTick();
 800c3bc:	f7f9 fcda 	bl	8005d74 <STM32_GetTick>
 800c3c0:	0002      	movs	r2, r0
 800c3c2:	4b07      	ldr	r3, [pc, #28]	; (800c3e0 <InitializeWatchDog+0x50>)
 800c3c4:	601a      	str	r2, [r3, #0]
    AccumTicks = 0;
 800c3c6:	4b07      	ldr	r3, [pc, #28]	; (800c3e4 <InitializeWatchDog+0x54>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	601a      	str	r2, [r3, #0]
}
 800c3cc:	46c0      	nop			; (mov r8, r8)
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	46c0      	nop			; (mov r8, r8)
 800c3d4:	40003000 	.word	0x40003000
 800c3d8:	0000cccc 	.word	0x0000cccc
 800c3dc:	00005555 	.word	0x00005555
 800c3e0:	20000b08 	.word	0x20000b08
 800c3e4:	20000b0c 	.word	0x20000b0c

0800c3e8 <IWDG_TriggerWatchdog>:

//************************************************************************************************************************
//************************************************************************************************************************

void IWDG_TriggerWatchdog(void) {
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
    static uint8_t    BadCounter;
    uint8_t           bGood;
    uint32_t          Ticks;


    Ticks = STM32_GetTick();
 800c3ee:	f7f9 fcc1 	bl	8005d74 <STM32_GetTick>
 800c3f2:	0003      	movs	r3, r0
 800c3f4:	603b      	str	r3, [r7, #0]
    AccumTicks += Ticks - LastTicks;
 800c3f6:	4b8f      	ldr	r3, [pc, #572]	; (800c634 <IWDG_TriggerWatchdog+0x24c>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	683a      	ldr	r2, [r7, #0]
 800c3fc:	1ad2      	subs	r2, r2, r3
 800c3fe:	4b8e      	ldr	r3, [pc, #568]	; (800c638 <IWDG_TriggerWatchdog+0x250>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	18d2      	adds	r2, r2, r3
 800c404:	4b8c      	ldr	r3, [pc, #560]	; (800c638 <IWDG_TriggerWatchdog+0x250>)
 800c406:	601a      	str	r2, [r3, #0]
    LastTicks = Ticks;
 800c408:	4b8a      	ldr	r3, [pc, #552]	; (800c634 <IWDG_TriggerWatchdog+0x24c>)
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	601a      	str	r2, [r3, #0]

    if (AccumTicks < 1000) {
 800c40e:	4b8a      	ldr	r3, [pc, #552]	; (800c638 <IWDG_TriggerWatchdog+0x250>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a8a      	ldr	r2, [pc, #552]	; (800c63c <IWDG_TriggerWatchdog+0x254>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d800      	bhi.n	800c41a <IWDG_TriggerWatchdog+0x32>
 800c418:	e108      	b.n	800c62c <IWDG_TriggerWatchdog+0x244>
        return;
    }
    AccumTicks = 0;
 800c41a:	4b87      	ldr	r3, [pc, #540]	; (800c638 <IWDG_TriggerWatchdog+0x250>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	601a      	str	r2, [r3, #0]

    bGood =  (ExecutionTimeReport[EXECUTION_PROCESS_ADC_FILTER].CallsPerSecond == 200);
 800c420:	4b87      	ldr	r3, [pc, #540]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c422:	695b      	ldr	r3, [r3, #20]
 800c424:	3bc8      	subs	r3, #200	; 0xc8
 800c426:	425a      	negs	r2, r3
 800c428:	4153      	adcs	r3, r2
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	1dfb      	adds	r3, r7, #7
 800c42e:	701a      	strb	r2, [r3, #0]
    bGood &= (ExecutionTimeReport[EXECUTION_PROCESS_ANALOG_READINGS].CallsPerSecond == 100);
 800c430:	4b83      	ldr	r3, [pc, #524]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c434:	3b64      	subs	r3, #100	; 0x64
 800c436:	425a      	negs	r2, r3
 800c438:	4153      	adcs	r3, r2
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	b25b      	sxtb	r3, r3
 800c43e:	1dfa      	adds	r2, r7, #7
 800c440:	7812      	ldrb	r2, [r2, #0]
 800c442:	b252      	sxtb	r2, r2
 800c444:	4013      	ands	r3, r2
 800c446:	b25a      	sxtb	r2, r3
 800c448:	1dfb      	adds	r3, r7, #7
 800c44a:	701a      	strb	r2, [r3, #0]
    bGood &= (ExecutionTimeReport[EXECUTION_PROCESS_SIGNAL_STATUS].CallsPerSecond == 100);
 800c44c:	4b7c      	ldr	r3, [pc, #496]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c44e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c450:	3b64      	subs	r3, #100	; 0x64
 800c452:	425a      	negs	r2, r3
 800c454:	4153      	adcs	r3, r2
 800c456:	b2db      	uxtb	r3, r3
 800c458:	b25b      	sxtb	r3, r3
 800c45a:	1dfa      	adds	r2, r7, #7
 800c45c:	7812      	ldrb	r2, [r2, #0]
 800c45e:	b252      	sxtb	r2, r2
 800c460:	4013      	ands	r3, r2
 800c462:	b25a      	sxtb	r2, r3
 800c464:	1dfb      	adds	r3, r7, #7
 800c466:	701a      	strb	r2, [r3, #0]
    bGood &= (ExecutionTimeReport[EXECUTION_PROCESS_MASTER_INDEX].CallsPerSecond == 100);
 800c468:	4b75      	ldr	r3, [pc, #468]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c46a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c46c:	3b64      	subs	r3, #100	; 0x64
 800c46e:	425a      	negs	r2, r3
 800c470:	4153      	adcs	r3, r2
 800c472:	b2db      	uxtb	r3, r3
 800c474:	b25b      	sxtb	r3, r3
 800c476:	1dfa      	adds	r2, r7, #7
 800c478:	7812      	ldrb	r2, [r2, #0]
 800c47a:	b252      	sxtb	r2, r2
 800c47c:	4013      	ands	r3, r2
 800c47e:	b25a      	sxtb	r2, r3
 800c480:	1dfb      	adds	r3, r7, #7
 800c482:	701a      	strb	r2, [r3, #0]
    bGood &= (ExecutionTimeReport[EXECUTION_PROCESS_FREQUENCY_OUTPUTS].CallsPerSecond == 50);
 800c484:	4b6e      	ldr	r3, [pc, #440]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c486:	2284      	movs	r2, #132	; 0x84
 800c488:	589b      	ldr	r3, [r3, r2]
 800c48a:	3b32      	subs	r3, #50	; 0x32
 800c48c:	425a      	negs	r2, r3
 800c48e:	4153      	adcs	r3, r2
 800c490:	b2db      	uxtb	r3, r3
 800c492:	b25b      	sxtb	r3, r3
 800c494:	1dfa      	adds	r2, r7, #7
 800c496:	7812      	ldrb	r2, [r2, #0]
 800c498:	b252      	sxtb	r2, r2
 800c49a:	4013      	ands	r3, r2
 800c49c:	b25a      	sxtb	r2, r3
 800c49e:	1dfb      	adds	r3, r7, #7
 800c4a0:	701a      	strb	r2, [r3, #0]
    bGood &= (ExecutionTimeReport[EXECUTION_PROCESS_MASTER_FREQUENCY_OUTPUT].CallsPerSecond == 50);
 800c4a2:	4b67      	ldr	r3, [pc, #412]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c4a4:	2294      	movs	r2, #148	; 0x94
 800c4a6:	589b      	ldr	r3, [r3, r2]
 800c4a8:	3b32      	subs	r3, #50	; 0x32
 800c4aa:	425a      	negs	r2, r3
 800c4ac:	4153      	adcs	r3, r2
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	b25b      	sxtb	r3, r3
 800c4b2:	1dfa      	adds	r2, r7, #7
 800c4b4:	7812      	ldrb	r2, [r2, #0]
 800c4b6:	b252      	sxtb	r2, r2
 800c4b8:	4013      	ands	r3, r2
 800c4ba:	b25a      	sxtb	r2, r3
 800c4bc:	1dfb      	adds	r3, r7, #7
 800c4be:	701a      	strb	r2, [r3, #0]
    bGood &= (ExecutionTimeReport[EXECUTION_PROCESS_ERROR_CONDITION].CallsPerSecond == 50);
 800c4c0:	4b5f      	ldr	r3, [pc, #380]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c4c2:	22d4      	movs	r2, #212	; 0xd4
 800c4c4:	589b      	ldr	r3, [r3, r2]
 800c4c6:	3b32      	subs	r3, #50	; 0x32
 800c4c8:	425a      	negs	r2, r3
 800c4ca:	4153      	adcs	r3, r2
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	b25b      	sxtb	r3, r3
 800c4d0:	1dfa      	adds	r2, r7, #7
 800c4d2:	7812      	ldrb	r2, [r2, #0]
 800c4d4:	b252      	sxtb	r2, r2
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	b25a      	sxtb	r2, r3
 800c4da:	1dfb      	adds	r3, r7, #7
 800c4dc:	701a      	strb	r2, [r3, #0]
    bGood &= (ExecutionTimeReport[EXECUTION_PROCESS_ADC].CallsPerSecond == 1000);
 800c4de:	4a58      	ldr	r2, [pc, #352]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c4e0:	2392      	movs	r3, #146	; 0x92
 800c4e2:	005b      	lsls	r3, r3, #1
 800c4e4:	58d3      	ldr	r3, [r2, r3]
 800c4e6:	4a57      	ldr	r2, [pc, #348]	; (800c644 <IWDG_TriggerWatchdog+0x25c>)
 800c4e8:	4694      	mov	ip, r2
 800c4ea:	4463      	add	r3, ip
 800c4ec:	425a      	negs	r2, r3
 800c4ee:	4153      	adcs	r3, r2
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	b25b      	sxtb	r3, r3
 800c4f4:	1dfa      	adds	r2, r7, #7
 800c4f6:	7812      	ldrb	r2, [r2, #0]
 800c4f8:	b252      	sxtb	r2, r2
 800c4fa:	4013      	ands	r3, r2
 800c4fc:	b25a      	sxtb	r2, r3
 800c4fe:	1dfb      	adds	r3, r7, #7
 800c500:	701a      	strb	r2, [r3, #0]
    bGood &= (ExecutionTimeReport[EXECUTION_PROCESS_ACCELEROMETER].CallsPerSecond == 1000);
 800c502:	4a4f      	ldr	r2, [pc, #316]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c504:	239a      	movs	r3, #154	; 0x9a
 800c506:	005b      	lsls	r3, r3, #1
 800c508:	58d3      	ldr	r3, [r2, r3]
 800c50a:	4a4e      	ldr	r2, [pc, #312]	; (800c644 <IWDG_TriggerWatchdog+0x25c>)
 800c50c:	4694      	mov	ip, r2
 800c50e:	4463      	add	r3, ip
 800c510:	425a      	negs	r2, r3
 800c512:	4153      	adcs	r3, r2
 800c514:	b2db      	uxtb	r3, r3
 800c516:	b25b      	sxtb	r3, r3
 800c518:	1dfa      	adds	r2, r7, #7
 800c51a:	7812      	ldrb	r2, [r2, #0]
 800c51c:	b252      	sxtb	r2, r2
 800c51e:	4013      	ands	r3, r2
 800c520:	b25a      	sxtb	r2, r3
 800c522:	1dfb      	adds	r3, r7, #7
 800c524:	701a      	strb	r2, [r3, #0]
    bGood &= (ExecutionTimeReport[EXECUTION_PROCESS_TEST_INPUT].CallsPerSecond == 50);
 800c526:	4a46      	ldr	r2, [pc, #280]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c528:	23a2      	movs	r3, #162	; 0xa2
 800c52a:	005b      	lsls	r3, r3, #1
 800c52c:	58d3      	ldr	r3, [r2, r3]
 800c52e:	3b32      	subs	r3, #50	; 0x32
 800c530:	425a      	negs	r2, r3
 800c532:	4153      	adcs	r3, r2
 800c534:	b2db      	uxtb	r3, r3
 800c536:	b25b      	sxtb	r3, r3
 800c538:	1dfa      	adds	r2, r7, #7
 800c53a:	7812      	ldrb	r2, [r2, #0]
 800c53c:	b252      	sxtb	r2, r2
 800c53e:	4013      	ands	r3, r2
 800c540:	b25a      	sxtb	r2, r3
 800c542:	1dfb      	adds	r3, r7, #7
 800c544:	701a      	strb	r2, [r3, #0]
    bGood &= (ExecutionTimeReport[EXECUTION_PROCESS_PWM_OUT].CallsPerSecond == 100);
 800c546:	4a3e      	ldr	r2, [pc, #248]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c548:	23aa      	movs	r3, #170	; 0xaa
 800c54a:	005b      	lsls	r3, r3, #1
 800c54c:	58d3      	ldr	r3, [r2, r3]
 800c54e:	3b64      	subs	r3, #100	; 0x64
 800c550:	425a      	negs	r2, r3
 800c552:	4153      	adcs	r3, r2
 800c554:	b2db      	uxtb	r3, r3
 800c556:	b25b      	sxtb	r3, r3
 800c558:	1dfa      	adds	r2, r7, #7
 800c55a:	7812      	ldrb	r2, [r2, #0]
 800c55c:	b252      	sxtb	r2, r2
 800c55e:	4013      	ands	r3, r2
 800c560:	b25a      	sxtb	r2, r3
 800c562:	1dfb      	adds	r3, r7, #7
 800c564:	701a      	strb	r2, [r3, #0]
    bGood &= (ExecutionTimeReport[EXECUTION_PROCESS_CLEAR_LOG].CallsPerSecond == 100);
 800c566:	4a36      	ldr	r2, [pc, #216]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c568:	23b2      	movs	r3, #178	; 0xb2
 800c56a:	005b      	lsls	r3, r3, #1
 800c56c:	58d3      	ldr	r3, [r2, r3]
 800c56e:	3b64      	subs	r3, #100	; 0x64
 800c570:	425a      	negs	r2, r3
 800c572:	4153      	adcs	r3, r2
 800c574:	b2db      	uxtb	r3, r3
 800c576:	b25b      	sxtb	r3, r3
 800c578:	1dfa      	adds	r2, r7, #7
 800c57a:	7812      	ldrb	r2, [r2, #0]
 800c57c:	b252      	sxtb	r2, r2
 800c57e:	4013      	ands	r3, r2
 800c580:	b25a      	sxtb	r2, r3
 800c582:	1dfb      	adds	r3, r7, #7
 800c584:	701a      	strb	r2, [r3, #0]
    bGood &= (ExecutionTimeReport[EXECUTION_PROCESS_MESSAGE_QUEUE].CallsPerSecond == 100);
 800c586:	4a2e      	ldr	r2, [pc, #184]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c588:	23ba      	movs	r3, #186	; 0xba
 800c58a:	005b      	lsls	r3, r3, #1
 800c58c:	58d3      	ldr	r3, [r2, r3]
 800c58e:	3b64      	subs	r3, #100	; 0x64
 800c590:	425a      	negs	r2, r3
 800c592:	4153      	adcs	r3, r2
 800c594:	b2db      	uxtb	r3, r3
 800c596:	b25b      	sxtb	r3, r3
 800c598:	1dfa      	adds	r2, r7, #7
 800c59a:	7812      	ldrb	r2, [r2, #0]
 800c59c:	b252      	sxtb	r2, r2
 800c59e:	4013      	ands	r3, r2
 800c5a0:	b25a      	sxtb	r2, r3
 800c5a2:	1dfb      	adds	r3, r7, #7
 800c5a4:	701a      	strb	r2, [r3, #0]
    bGood &= (ExecutionTimeReport[EXECUTION_PROCESS_THROTTLE].CallsPerSecond == 100);
 800c5a6:	4a26      	ldr	r2, [pc, #152]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c5a8:	23ca      	movs	r3, #202	; 0xca
 800c5aa:	005b      	lsls	r3, r3, #1
 800c5ac:	58d3      	ldr	r3, [r2, r3]
 800c5ae:	3b64      	subs	r3, #100	; 0x64
 800c5b0:	425a      	negs	r2, r3
 800c5b2:	4153      	adcs	r3, r2
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	b25b      	sxtb	r3, r3
 800c5b8:	1dfa      	adds	r2, r7, #7
 800c5ba:	7812      	ldrb	r2, [r2, #0]
 800c5bc:	b252      	sxtb	r2, r2
 800c5be:	4013      	ands	r3, r2
 800c5c0:	b25a      	sxtb	r2, r3
 800c5c2:	1dfb      	adds	r3, r7, #7
 800c5c4:	701a      	strb	r2, [r3, #0]
    bGood &= (ExecutionTimeReport[EXECUTION_PROCESS_CAN].CallsPerSecond == 100);
 800c5c6:	4a1e      	ldr	r2, [pc, #120]	; (800c640 <IWDG_TriggerWatchdog+0x258>)
 800c5c8:	23d2      	movs	r3, #210	; 0xd2
 800c5ca:	005b      	lsls	r3, r3, #1
 800c5cc:	58d3      	ldr	r3, [r2, r3]
 800c5ce:	3b64      	subs	r3, #100	; 0x64
 800c5d0:	425a      	negs	r2, r3
 800c5d2:	4153      	adcs	r3, r2
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	b25b      	sxtb	r3, r3
 800c5d8:	1dfa      	adds	r2, r7, #7
 800c5da:	7812      	ldrb	r2, [r2, #0]
 800c5dc:	b252      	sxtb	r2, r2
 800c5de:	4013      	ands	r3, r2
 800c5e0:	b25a      	sxtb	r2, r3
 800c5e2:	1dfb      	adds	r3, r7, #7
 800c5e4:	701a      	strb	r2, [r3, #0]
    //
    // If execution times are all good, reset BadCounter.  If not, then increment BadCounter.  Once BadCounter
    //    reaches 5, then don't retrigger Watchdog.  This will allow Watchdog Timer to time-out and reset
    //    the processor.  This is basically debounce logic.
    //
    if (bGood != 0) {
 800c5e6:	1dfb      	adds	r3, r7, #7
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d003      	beq.n	800c5f6 <IWDG_TriggerWatchdog+0x20e>
        BadCounter = 0;
 800c5ee:	4b16      	ldr	r3, [pc, #88]	; (800c648 <IWDG_TriggerWatchdog+0x260>)
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	701a      	strb	r2, [r3, #0]
 800c5f4:	e00c      	b.n	800c610 <IWDG_TriggerWatchdog+0x228>
    } else {
        if (++BadCounter < 5) {
 800c5f6:	4b14      	ldr	r3, [pc, #80]	; (800c648 <IWDG_TriggerWatchdog+0x260>)
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	b2da      	uxtb	r2, r3
 800c5fe:	4b12      	ldr	r3, [pc, #72]	; (800c648 <IWDG_TriggerWatchdog+0x260>)
 800c600:	701a      	strb	r2, [r3, #0]
 800c602:	4b11      	ldr	r3, [pc, #68]	; (800c648 <IWDG_TriggerWatchdog+0x260>)
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	2b04      	cmp	r3, #4
 800c608:	d802      	bhi.n	800c610 <IWDG_TriggerWatchdog+0x228>
            bGood = 1;
 800c60a:	1dfb      	adds	r3, r7, #7
 800c60c:	2201      	movs	r2, #1
 800c60e:	701a      	strb	r2, [r3, #0]
        }
    }
    //
    // Before Resetting
    //
    if (bGood != 0) {
 800c610:	1dfb      	adds	r3, r7, #7
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d003      	beq.n	800c620 <IWDG_TriggerWatchdog+0x238>
        IWDG->KR = IWDG_KEY_RELOAD;
 800c618:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <IWDG_TriggerWatchdog+0x264>)
 800c61a:	4a0d      	ldr	r2, [pc, #52]	; (800c650 <IWDG_TriggerWatchdog+0x268>)
 800c61c:	601a      	str	r2, [r3, #0]
 800c61e:	e006      	b.n	800c62e <IWDG_TriggerWatchdog+0x246>
        //    This will log a message to the EEPROM about the reset.  As the reset won't actually happen
        //    for another .25 seconds, that should be plenty of time for message to actually be written
        //    into the EEPROM.  Therefore, there is no need to call ProcessEventMessageQueue() and
        //    ProcessI2C2 as was needed when updating firmware (see serial.c, command 0xCC)
        //
        LogEvent(EVENT_MESSAGE_ID_2, 0, 0);
 800c620:	2200      	movs	r2, #0
 800c622:	2100      	movs	r1, #0
 800c624:	2002      	movs	r0, #2
 800c626:	f7fb fb1f 	bl	8007c68 <LogEvent>
 800c62a:	e000      	b.n	800c62e <IWDG_TriggerWatchdog+0x246>
        return;
 800c62c:	46c0      	nop			; (mov r8, r8)
    }
}
 800c62e:	46bd      	mov	sp, r7
 800c630:	b002      	add	sp, #8
 800c632:	bd80      	pop	{r7, pc}
 800c634:	20000b08 	.word	0x20000b08
 800c638:	20000b0c 	.word	0x20000b0c
 800c63c:	000003e7 	.word	0x000003e7
 800c640:	20002a44 	.word	0x20002a44
 800c644:	fffffc18 	.word	0xfffffc18
 800c648:	20000b10 	.word	0x20000b10
 800c64c:	40003000 	.word	0x40003000
 800c650:	0000aaaa 	.word	0x0000aaaa

0800c654 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800c654:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800c656:	e003      	b.n	800c660 <LoopCopyDataInit>

0800c658 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800c658:	4b0e      	ldr	r3, [pc, #56]	; (800c694 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 800c65a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800c65c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800c65e:	3104      	adds	r1, #4

0800c660 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800c660:	480d      	ldr	r0, [pc, #52]	; (800c698 <LoopForever+0x6>)
	ldr	r3, =_edata
 800c662:	4b0e      	ldr	r3, [pc, #56]	; (800c69c <LoopForever+0xa>)
	adds	r2, r0, r1
 800c664:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800c666:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800c668:	d3f6      	bcc.n	800c658 <CopyDataInit>
	ldr	r2, =_sbss
 800c66a:	4a0d      	ldr	r2, [pc, #52]	; (800c6a0 <LoopForever+0xe>)
	b	LoopFillZerobss
 800c66c:	e002      	b.n	800c674 <LoopFillZerobss>

0800c66e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 800c66e:	2300      	movs	r3, #0
 	str  r3, [r2]
 800c670:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 800c672:	3204      	adds	r2, #4

0800c674 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800c674:	4b0b      	ldr	r3, [pc, #44]	; (800c6a4 <LoopForever+0x12>)
	cmp	r2, r3
 800c676:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800c678:	d3f9      	bcc.n	800c66e <FillZerobss>

  ldr r2, =_ebss
 800c67a:	4a0a      	ldr	r2, [pc, #40]	; (800c6a4 <LoopForever+0x12>)
  b LoopFillPattern
 800c67c:	e002      	b.n	800c684 <LoopFillPattern>

0800c67e <FillPattern>:
FillPattern:
  ldr  r3, =0x12345678
 800c67e:	4b0a      	ldr	r3, [pc, #40]	; (800c6a8 <LoopForever+0x16>)
  str  r3, [r2]
 800c680:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c682:	3204      	adds	r2, #4

0800c684 <LoopFillPattern>:
LoopFillPattern:
  ldr r3, = _estack
 800c684:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <LoopForever+0x1a>)
  cmp r2, r3
 800c686:	429a      	cmp	r2, r3
  bcc FillPattern
 800c688:	d3f9      	bcc.n	800c67e <FillPattern>

    bl __libc_init_array
 800c68a:	f000 f813 	bl	800c6b4 <__libc_init_array>
	bl	main
 800c68e:	f7fb fbd7 	bl	8007e40 <main>

0800c692 <LoopForever>:

LoopForever:
    b LoopForever
 800c692:	e7fe      	b.n	800c692 <LoopForever>
	ldr	r3, =_sidata
 800c694:	0800cd18 	.word	0x0800cd18
	ldr	r0, =_sdata
 800c698:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800c69c:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 800c6a0:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 800c6a4:	200037fc 	.word	0x200037fc
  ldr  r3, =0x12345678
 800c6a8:	12345678 	.word	0x12345678
  ldr r3, = _estack
 800c6ac:	20004000 	.word	0x20004000

0800c6b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c6b0:	e7fe      	b.n	800c6b0 <ADC1_COMP_IRQHandler>
	...

0800c6b4 <__libc_init_array>:
 800c6b4:	b570      	push	{r4, r5, r6, lr}
 800c6b6:	2600      	movs	r6, #0
 800c6b8:	4d0c      	ldr	r5, [pc, #48]	; (800c6ec <__libc_init_array+0x38>)
 800c6ba:	4c0d      	ldr	r4, [pc, #52]	; (800c6f0 <__libc_init_array+0x3c>)
 800c6bc:	1b64      	subs	r4, r4, r5
 800c6be:	10a4      	asrs	r4, r4, #2
 800c6c0:	42a6      	cmp	r6, r4
 800c6c2:	d109      	bne.n	800c6d8 <__libc_init_array+0x24>
 800c6c4:	2600      	movs	r6, #0
 800c6c6:	f000 f83d 	bl	800c744 <_init>
 800c6ca:	4d0a      	ldr	r5, [pc, #40]	; (800c6f4 <__libc_init_array+0x40>)
 800c6cc:	4c0a      	ldr	r4, [pc, #40]	; (800c6f8 <__libc_init_array+0x44>)
 800c6ce:	1b64      	subs	r4, r4, r5
 800c6d0:	10a4      	asrs	r4, r4, #2
 800c6d2:	42a6      	cmp	r6, r4
 800c6d4:	d105      	bne.n	800c6e2 <__libc_init_array+0x2e>
 800c6d6:	bd70      	pop	{r4, r5, r6, pc}
 800c6d8:	00b3      	lsls	r3, r6, #2
 800c6da:	58eb      	ldr	r3, [r5, r3]
 800c6dc:	4798      	blx	r3
 800c6de:	3601      	adds	r6, #1
 800c6e0:	e7ee      	b.n	800c6c0 <__libc_init_array+0xc>
 800c6e2:	00b3      	lsls	r3, r6, #2
 800c6e4:	58eb      	ldr	r3, [r5, r3]
 800c6e6:	4798      	blx	r3
 800c6e8:	3601      	adds	r6, #1
 800c6ea:	e7f2      	b.n	800c6d2 <__libc_init_array+0x1e>
 800c6ec:	0800cd10 	.word	0x0800cd10
 800c6f0:	0800cd10 	.word	0x0800cd10
 800c6f4:	0800cd10 	.word	0x0800cd10
 800c6f8:	0800cd14 	.word	0x0800cd14

0800c6fc <memcpy>:
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	b510      	push	{r4, lr}
 800c700:	429a      	cmp	r2, r3
 800c702:	d100      	bne.n	800c706 <memcpy+0xa>
 800c704:	bd10      	pop	{r4, pc}
 800c706:	5ccc      	ldrb	r4, [r1, r3]
 800c708:	54c4      	strb	r4, [r0, r3]
 800c70a:	3301      	adds	r3, #1
 800c70c:	e7f8      	b.n	800c700 <memcpy+0x4>

0800c70e <memmove>:
 800c70e:	b510      	push	{r4, lr}
 800c710:	4288      	cmp	r0, r1
 800c712:	d902      	bls.n	800c71a <memmove+0xc>
 800c714:	188b      	adds	r3, r1, r2
 800c716:	4298      	cmp	r0, r3
 800c718:	d303      	bcc.n	800c722 <memmove+0x14>
 800c71a:	2300      	movs	r3, #0
 800c71c:	e007      	b.n	800c72e <memmove+0x20>
 800c71e:	5c8b      	ldrb	r3, [r1, r2]
 800c720:	5483      	strb	r3, [r0, r2]
 800c722:	3a01      	subs	r2, #1
 800c724:	d2fb      	bcs.n	800c71e <memmove+0x10>
 800c726:	bd10      	pop	{r4, pc}
 800c728:	5ccc      	ldrb	r4, [r1, r3]
 800c72a:	54c4      	strb	r4, [r0, r3]
 800c72c:	3301      	adds	r3, #1
 800c72e:	429a      	cmp	r2, r3
 800c730:	d1fa      	bne.n	800c728 <memmove+0x1a>
 800c732:	e7f8      	b.n	800c726 <memmove+0x18>

0800c734 <memset>:
 800c734:	0003      	movs	r3, r0
 800c736:	1812      	adds	r2, r2, r0
 800c738:	4293      	cmp	r3, r2
 800c73a:	d100      	bne.n	800c73e <memset+0xa>
 800c73c:	4770      	bx	lr
 800c73e:	7019      	strb	r1, [r3, #0]
 800c740:	3301      	adds	r3, #1
 800c742:	e7f9      	b.n	800c738 <memset+0x4>

0800c744 <_init>:
 800c744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c746:	46c0      	nop			; (mov r8, r8)
 800c748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c74a:	bc08      	pop	{r3}
 800c74c:	469e      	mov	lr, r3
 800c74e:	4770      	bx	lr

0800c750 <_fini>:
 800c750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c752:	46c0      	nop			; (mov r8, r8)
 800c754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c756:	bc08      	pop	{r3}
 800c758:	469e      	mov	lr, r3
 800c75a:	4770      	bx	lr

Disassembly of section .reflash_text:

0801b800 <WaitForLastOperation>:
//
// Returns:   None
//
// Requirement(s):
//
void WaitForLastOperation(void) {
 801b800:	b580      	push	{r7, lr}
 801b802:	af00      	add	r7, sp, #0

    do {
    } while ((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY);
 801b804:	4b08      	ldr	r3, [pc, #32]	; (801b828 <WaitForLastOperation+0x28>)
 801b806:	68db      	ldr	r3, [r3, #12]
 801b808:	2201      	movs	r2, #1
 801b80a:	4013      	ands	r3, r2
 801b80c:	2b01      	cmp	r3, #1
 801b80e:	d0f9      	beq.n	801b804 <WaitForLastOperation+0x4>
    if ((FLASH->SR & FLASH_FLAG_EOP) == FLASH_FLAG_EOP) {
 801b810:	4b05      	ldr	r3, [pc, #20]	; (801b828 <WaitForLastOperation+0x28>)
 801b812:	68db      	ldr	r3, [r3, #12]
 801b814:	2220      	movs	r2, #32
 801b816:	4013      	ands	r3, r2
 801b818:	2b20      	cmp	r3, #32
 801b81a:	d102      	bne.n	801b822 <WaitForLastOperation+0x22>
        FLASH->SR = FLASH_FLAG_EOP;
 801b81c:	4b02      	ldr	r3, [pc, #8]	; (801b828 <WaitForLastOperation+0x28>)
 801b81e:	2220      	movs	r2, #32
 801b820:	60da      	str	r2, [r3, #12]
    }
}
 801b822:	46c0      	nop			; (mov r8, r8)
 801b824:	46bd      	mov	sp, r7
 801b826:	bd80      	pop	{r7, pc}
 801b828:	40022000 	.word	0x40022000

0801b82c <CalculateCrcArray>:
//
// Returns:   None
//
// Requirement(s):
//
uint16_t CalculateCrcArray(uint8_t *Buffer, int32_t Length) {
 801b82c:	b580      	push	{r7, lr}
 801b82e:	b084      	sub	sp, #16
 801b830:	af00      	add	r7, sp, #0
 801b832:	6078      	str	r0, [r7, #4]
 801b834:	6039      	str	r1, [r7, #0]

    int32_t i;

    CRC->INIT = 0x0000;
 801b836:	4b10      	ldr	r3, [pc, #64]	; (801b878 <CalculateCrcArray+0x4c>)
 801b838:	2200      	movs	r2, #0
 801b83a:	611a      	str	r2, [r3, #16]
    CRC->POL = 0x1021;
 801b83c:	4b0e      	ldr	r3, [pc, #56]	; (801b878 <CalculateCrcArray+0x4c>)
 801b83e:	4a0f      	ldr	r2, [pc, #60]	; (801b87c <CalculateCrcArray+0x50>)
 801b840:	615a      	str	r2, [r3, #20]
    CRC->CR = (1u << 3) | (1u << 0);          // 16-bit poly, reset
 801b842:	4b0d      	ldr	r3, [pc, #52]	; (801b878 <CalculateCrcArray+0x4c>)
 801b844:	2209      	movs	r2, #9
 801b846:	609a      	str	r2, [r3, #8]

    for (i = 0; i < Length; i++) {
 801b848:	2300      	movs	r3, #0
 801b84a:	60fb      	str	r3, [r7, #12]
 801b84c:	e008      	b.n	801b860 <CalculateCrcArray+0x34>
        *(uint8_t *)(&CRC->DR) = Buffer[i];
 801b84e:	68fb      	ldr	r3, [r7, #12]
 801b850:	687a      	ldr	r2, [r7, #4]
 801b852:	18d3      	adds	r3, r2, r3
 801b854:	4a08      	ldr	r2, [pc, #32]	; (801b878 <CalculateCrcArray+0x4c>)
 801b856:	781b      	ldrb	r3, [r3, #0]
 801b858:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < Length; i++) {
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	3301      	adds	r3, #1
 801b85e:	60fb      	str	r3, [r7, #12]
 801b860:	68fa      	ldr	r2, [r7, #12]
 801b862:	683b      	ldr	r3, [r7, #0]
 801b864:	429a      	cmp	r2, r3
 801b866:	dbf2      	blt.n	801b84e <CalculateCrcArray+0x22>
    }
    return (CRC->DR & 0xFFFF);
 801b868:	4b03      	ldr	r3, [pc, #12]	; (801b878 <CalculateCrcArray+0x4c>)
 801b86a:	681b      	ldr	r3, [r3, #0]
 801b86c:	b29b      	uxth	r3, r3
}
 801b86e:	0018      	movs	r0, r3
 801b870:	46bd      	mov	sp, r7
 801b872:	b004      	add	sp, #16
 801b874:	bd80      	pop	{r7, pc}
 801b876:	46c0      	nop			; (mov r8, r8)
 801b878:	40023000 	.word	0x40023000
 801b87c:	00001021 	.word	0x00001021

0801b880 <ReflashSerialSend>:
//
// Returns:   None
//
// Requirement(s):
//
void ReflashSerialSend(stSerial *SerialStruct) {
 801b880:	b5b0      	push	{r4, r5, r7, lr}
 801b882:	b084      	sub	sp, #16
 801b884:	af00      	add	r7, sp, #0
 801b886:	6078      	str	r0, [r7, #4]

    uint16_t Crc, i;

    SerialBuffer.ByByte[0] = 0xAA;                    // Sync
 801b888:	4b5e      	ldr	r3, [pc, #376]	; (801ba04 <ReflashSerialSend+0x184>)
 801b88a:	22aa      	movs	r2, #170	; 0xaa
 801b88c:	701a      	strb	r2, [r3, #0]
    SerialBuffer.ByByte[1] = 0xAA;
 801b88e:	4b5d      	ldr	r3, [pc, #372]	; (801ba04 <ReflashSerialSend+0x184>)
 801b890:	22aa      	movs	r2, #170	; 0xaa
 801b892:	705a      	strb	r2, [r3, #1]
    SerialBuffer.ByByte[2] = 0xAA;
 801b894:	4b5b      	ldr	r3, [pc, #364]	; (801ba04 <ReflashSerialSend+0x184>)
 801b896:	22aa      	movs	r2, #170	; 0xaa
 801b898:	709a      	strb	r2, [r3, #2]
    SerialBuffer.ByByte[3] = 0xAA;
 801b89a:	4b5a      	ldr	r3, [pc, #360]	; (801ba04 <ReflashSerialSend+0x184>)
 801b89c:	22aa      	movs	r2, #170	; 0xaa
 801b89e:	70da      	strb	r2, [r3, #3]
    SerialBuffer.ByByte[4] = 0xAA;
 801b8a0:	4b58      	ldr	r3, [pc, #352]	; (801ba04 <ReflashSerialSend+0x184>)
 801b8a2:	22aa      	movs	r2, #170	; 0xaa
 801b8a4:	711a      	strb	r2, [r3, #4]
    SerialBuffer.ByByte[5] = 0x00;
 801b8a6:	4b57      	ldr	r3, [pc, #348]	; (801ba04 <ReflashSerialSend+0x184>)
 801b8a8:	2200      	movs	r2, #0
 801b8aa:	715a      	strb	r2, [r3, #5]
    SerialBuffer.ByByte[6] = SerialStruct->Command;                // Command
 801b8ac:	687a      	ldr	r2, [r7, #4]
 801b8ae:	238a      	movs	r3, #138	; 0x8a
 801b8b0:	005b      	lsls	r3, r3, #1
 801b8b2:	5cd2      	ldrb	r2, [r2, r3]
 801b8b4:	4b53      	ldr	r3, [pc, #332]	; (801ba04 <ReflashSerialSend+0x184>)
 801b8b6:	719a      	strb	r2, [r3, #6]
    SerialBuffer.ByByte[7] = (uint8_t)(SerialStruct->Length & 0xFF);          // Length
 801b8b8:	687a      	ldr	r2, [r7, #4]
 801b8ba:	238b      	movs	r3, #139	; 0x8b
 801b8bc:	005b      	lsls	r3, r3, #1
 801b8be:	5ad3      	ldrh	r3, [r2, r3]
 801b8c0:	b2da      	uxtb	r2, r3
 801b8c2:	4b50      	ldr	r3, [pc, #320]	; (801ba04 <ReflashSerialSend+0x184>)
 801b8c4:	71da      	strb	r2, [r3, #7]
    SerialBuffer.ByByte[8] = (uint8_t)(SerialStruct->Length >> 8);
 801b8c6:	687a      	ldr	r2, [r7, #4]
 801b8c8:	238b      	movs	r3, #139	; 0x8b
 801b8ca:	005b      	lsls	r3, r3, #1
 801b8cc:	5ad3      	ldrh	r3, [r2, r3]
 801b8ce:	0a1b      	lsrs	r3, r3, #8
 801b8d0:	b29b      	uxth	r3, r3
 801b8d2:	b2da      	uxtb	r2, r3
 801b8d4:	4b4b      	ldr	r3, [pc, #300]	; (801ba04 <ReflashSerialSend+0x184>)
 801b8d6:	721a      	strb	r2, [r3, #8]
    //
    //  Calculate CRC
    //
    Crc = CalculateCrcArray(&SerialBuffer.ByByte[6], SerialStruct->Length + 3);
 801b8d8:	687a      	ldr	r2, [r7, #4]
 801b8da:	238b      	movs	r3, #139	; 0x8b
 801b8dc:	005b      	lsls	r3, r3, #1
 801b8de:	5ad3      	ldrh	r3, [r2, r3]
 801b8e0:	1cda      	adds	r2, r3, #3
 801b8e2:	250c      	movs	r5, #12
 801b8e4:	197c      	adds	r4, r7, r5
 801b8e6:	4b48      	ldr	r3, [pc, #288]	; (801ba08 <ReflashSerialSend+0x188>)
 801b8e8:	0011      	movs	r1, r2
 801b8ea:	0018      	movs	r0, r3
 801b8ec:	f7ff ff9e 	bl	801b82c <CalculateCrcArray>
 801b8f0:	0003      	movs	r3, r0
 801b8f2:	8023      	strh	r3, [r4, #0]
    SerialBuffer.ByByte[SerialStruct->Length + 9] = (uint8_t)(Crc & 0xFF);
 801b8f4:	687a      	ldr	r2, [r7, #4]
 801b8f6:	238b      	movs	r3, #139	; 0x8b
 801b8f8:	005b      	lsls	r3, r3, #1
 801b8fa:	5ad3      	ldrh	r3, [r2, r3]
 801b8fc:	3309      	adds	r3, #9
 801b8fe:	197a      	adds	r2, r7, r5
 801b900:	8812      	ldrh	r2, [r2, #0]
 801b902:	b2d1      	uxtb	r1, r2
 801b904:	4a3f      	ldr	r2, [pc, #252]	; (801ba04 <ReflashSerialSend+0x184>)
 801b906:	54d1      	strb	r1, [r2, r3]
    SerialBuffer.ByByte[SerialStruct->Length + 10] = (uint8_t)(Crc >> 8);
 801b908:	197b      	adds	r3, r7, r5
 801b90a:	881b      	ldrh	r3, [r3, #0]
 801b90c:	0a1b      	lsrs	r3, r3, #8
 801b90e:	b299      	uxth	r1, r3
 801b910:	687a      	ldr	r2, [r7, #4]
 801b912:	238b      	movs	r3, #139	; 0x8b
 801b914:	005b      	lsls	r3, r3, #1
 801b916:	5ad3      	ldrh	r3, [r2, r3]
 801b918:	330a      	adds	r3, #10
 801b91a:	b2c9      	uxtb	r1, r1
 801b91c:	4a39      	ldr	r2, [pc, #228]	; (801ba04 <ReflashSerialSend+0x184>)
 801b91e:	54d1      	strb	r1, [r2, r3]
    //
    // Send Message via selected SerialMode Mode.
    //
    if (SerialStruct == &SerialUsart1) {
 801b920:	687a      	ldr	r2, [r7, #4]
 801b922:	4b3a      	ldr	r3, [pc, #232]	; (801ba0c <ReflashSerialSend+0x18c>)
 801b924:	429a      	cmp	r2, r3
 801b926:	d103      	bne.n	801b930 <ReflashSerialSend+0xb0>
        RS485_EN_GPIO_Port->BSRR = (uint32_t)RS485_EN_Pin;                         // Turn on RS422/485 Driver
 801b928:	4b39      	ldr	r3, [pc, #228]	; (801ba10 <ReflashSerialSend+0x190>)
 801b92a:	2280      	movs	r2, #128	; 0x80
 801b92c:	01d2      	lsls	r2, r2, #7
 801b92e:	619a      	str	r2, [r3, #24]
    }
    if (SerialStruct == &SerialUsart2) {
 801b930:	687a      	ldr	r2, [r7, #4]
 801b932:	4b38      	ldr	r3, [pc, #224]	; (801ba14 <ReflashSerialSend+0x194>)
 801b934:	429a      	cmp	r2, r3
 801b936:	d102      	bne.n	801b93e <ReflashSerialSend+0xbe>
        DIR1_GPIO_Port->BSRR = (uint32_t)DIR1_Pin;                         // Set DIG_IO as output
 801b938:	4b35      	ldr	r3, [pc, #212]	; (801ba10 <ReflashSerialSend+0x190>)
 801b93a:	2204      	movs	r2, #4
 801b93c:	619a      	str	r2, [r3, #24]
    }

    for (i = 0; i < 20000; i++) {
 801b93e:	230e      	movs	r3, #14
 801b940:	18fb      	adds	r3, r7, r3
 801b942:	2200      	movs	r2, #0
 801b944:	801a      	strh	r2, [r3, #0]
 801b946:	e00a      	b.n	801b95e <ReflashSerialSend+0xde>
        Dummy32++;
 801b948:	4b33      	ldr	r3, [pc, #204]	; (801ba18 <ReflashSerialSend+0x198>)
 801b94a:	681b      	ldr	r3, [r3, #0]
 801b94c:	1c5a      	adds	r2, r3, #1
 801b94e:	4b32      	ldr	r3, [pc, #200]	; (801ba18 <ReflashSerialSend+0x198>)
 801b950:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 20000; i++) {
 801b952:	210e      	movs	r1, #14
 801b954:	187b      	adds	r3, r7, r1
 801b956:	881a      	ldrh	r2, [r3, #0]
 801b958:	187b      	adds	r3, r7, r1
 801b95a:	3201      	adds	r2, #1
 801b95c:	801a      	strh	r2, [r3, #0]
 801b95e:	230e      	movs	r3, #14
 801b960:	18fb      	adds	r3, r7, r3
 801b962:	881b      	ldrh	r3, [r3, #0]
 801b964:	4a2d      	ldr	r2, [pc, #180]	; (801ba1c <ReflashSerialSend+0x19c>)
 801b966:	4293      	cmp	r3, r2
 801b968:	d9ee      	bls.n	801b948 <ReflashSerialSend+0xc8>
    }

    for (i = 0; i < SerialStruct->Length + 11; i++) {
 801b96a:	230e      	movs	r3, #14
 801b96c:	18fb      	adds	r3, r7, r3
 801b96e:	2200      	movs	r2, #0
 801b970:	801a      	strh	r2, [r3, #0]
 801b972:	e029      	b.n	801b9c8 <ReflashSerialSend+0x148>
        if (SerialStruct == &SerialUsart1) {
 801b974:	687a      	ldr	r2, [r7, #4]
 801b976:	4b25      	ldr	r3, [pc, #148]	; (801ba0c <ReflashSerialSend+0x18c>)
 801b978:	429a      	cmp	r2, r3
 801b97a:	d10d      	bne.n	801b998 <ReflashSerialSend+0x118>
            USART1->TDR = SerialBuffer.ByByte[i];                                                      // Send Data
 801b97c:	230e      	movs	r3, #14
 801b97e:	18fb      	adds	r3, r7, r3
 801b980:	881b      	ldrh	r3, [r3, #0]
 801b982:	4a20      	ldr	r2, [pc, #128]	; (801ba04 <ReflashSerialSend+0x184>)
 801b984:	5cd2      	ldrb	r2, [r2, r3]
 801b986:	4b26      	ldr	r3, [pc, #152]	; (801ba20 <ReflashSerialSend+0x1a0>)
 801b988:	b292      	uxth	r2, r2
 801b98a:	851a      	strh	r2, [r3, #40]	; 0x28
            while ((USART1->ISR & (1u << 6)) == 0) {                                   // Wait for Byte to be sent (Transmission Complete)
 801b98c:	46c0      	nop			; (mov r8, r8)
 801b98e:	4b24      	ldr	r3, [pc, #144]	; (801ba20 <ReflashSerialSend+0x1a0>)
 801b990:	69db      	ldr	r3, [r3, #28]
 801b992:	2240      	movs	r2, #64	; 0x40
 801b994:	4013      	ands	r3, r2
 801b996:	d0fa      	beq.n	801b98e <ReflashSerialSend+0x10e>
            }
        }
        if (SerialStruct == &SerialUsart2) {
 801b998:	687a      	ldr	r2, [r7, #4]
 801b99a:	4b1e      	ldr	r3, [pc, #120]	; (801ba14 <ReflashSerialSend+0x194>)
 801b99c:	429a      	cmp	r2, r3
 801b99e:	d10d      	bne.n	801b9bc <ReflashSerialSend+0x13c>
            USART2->TDR = SerialBuffer.ByByte[i];                                                     // Send Data
 801b9a0:	230e      	movs	r3, #14
 801b9a2:	18fb      	adds	r3, r7, r3
 801b9a4:	881b      	ldrh	r3, [r3, #0]
 801b9a6:	4a17      	ldr	r2, [pc, #92]	; (801ba04 <ReflashSerialSend+0x184>)
 801b9a8:	5cd2      	ldrb	r2, [r2, r3]
 801b9aa:	4b1e      	ldr	r3, [pc, #120]	; (801ba24 <ReflashSerialSend+0x1a4>)
 801b9ac:	b292      	uxth	r2, r2
 801b9ae:	851a      	strh	r2, [r3, #40]	; 0x28
            while ((USART2->ISR & (1u << 6)) == 0) {                               // Transmission Complete
 801b9b0:	46c0      	nop			; (mov r8, r8)
 801b9b2:	4b1c      	ldr	r3, [pc, #112]	; (801ba24 <ReflashSerialSend+0x1a4>)
 801b9b4:	69db      	ldr	r3, [r3, #28]
 801b9b6:	2240      	movs	r2, #64	; 0x40
 801b9b8:	4013      	ands	r3, r2
 801b9ba:	d0fa      	beq.n	801b9b2 <ReflashSerialSend+0x132>
    for (i = 0; i < SerialStruct->Length + 11; i++) {
 801b9bc:	210e      	movs	r1, #14
 801b9be:	187b      	adds	r3, r7, r1
 801b9c0:	881a      	ldrh	r2, [r3, #0]
 801b9c2:	187b      	adds	r3, r7, r1
 801b9c4:	3201      	adds	r2, #1
 801b9c6:	801a      	strh	r2, [r3, #0]
 801b9c8:	230e      	movs	r3, #14
 801b9ca:	18fb      	adds	r3, r7, r3
 801b9cc:	881a      	ldrh	r2, [r3, #0]
 801b9ce:	6879      	ldr	r1, [r7, #4]
 801b9d0:	238b      	movs	r3, #139	; 0x8b
 801b9d2:	005b      	lsls	r3, r3, #1
 801b9d4:	5acb      	ldrh	r3, [r1, r3]
 801b9d6:	330b      	adds	r3, #11
 801b9d8:	429a      	cmp	r2, r3
 801b9da:	dbcb      	blt.n	801b974 <ReflashSerialSend+0xf4>
            }
        }
    }
    if (SerialStruct == &SerialUsart1) {
 801b9dc:	687a      	ldr	r2, [r7, #4]
 801b9de:	4b0b      	ldr	r3, [pc, #44]	; (801ba0c <ReflashSerialSend+0x18c>)
 801b9e0:	429a      	cmp	r2, r3
 801b9e2:	d103      	bne.n	801b9ec <ReflashSerialSend+0x16c>
        RS485_EN_GPIO_Port->BRR = (uint32_t)RS485_EN_Pin;                         // Turn off RS422/485 Driver
 801b9e4:	4b0a      	ldr	r3, [pc, #40]	; (801ba10 <ReflashSerialSend+0x190>)
 801b9e6:	2280      	movs	r2, #128	; 0x80
 801b9e8:	01d2      	lsls	r2, r2, #7
 801b9ea:	629a      	str	r2, [r3, #40]	; 0x28
    }
    if (SerialStruct == &SerialUsart2) {
 801b9ec:	687a      	ldr	r2, [r7, #4]
 801b9ee:	4b09      	ldr	r3, [pc, #36]	; (801ba14 <ReflashSerialSend+0x194>)
 801b9f0:	429a      	cmp	r2, r3
 801b9f2:	d102      	bne.n	801b9fa <ReflashSerialSend+0x17a>
        DIR1_GPIO_Port->BRR = (uint32_t)DIR1_Pin;                         // Set DIG_IO as input
 801b9f4:	4b06      	ldr	r3, [pc, #24]	; (801ba10 <ReflashSerialSend+0x190>)
 801b9f6:	2204      	movs	r2, #4
 801b9f8:	629a      	str	r2, [r3, #40]	; 0x28
    }
}
 801b9fa:	46c0      	nop			; (mov r8, r8)
 801b9fc:	46bd      	mov	sp, r7
 801b9fe:	b004      	add	sp, #16
 801ba00:	bdb0      	pop	{r4, r5, r7, pc}
 801ba02:	46c0      	nop			; (mov r8, r8)
 801ba04:	20002fa8 	.word	0x20002fa8
 801ba08:	20002fae 	.word	0x20002fae
 801ba0c:	20001588 	.word	0x20001588
 801ba10:	48000400 	.word	0x48000400
 801ba14:	200018b4 	.word	0x200018b4
 801ba18:	200037e4 	.word	0x200037e4
 801ba1c:	00004e1f 	.word	0x00004e1f
 801ba20:	40013800 	.word	0x40013800
 801ba24:	40004400 	.word	0x40004400

0801ba28 <GetSerialMessage>:
//
// Returns:   0 - if data was well received, 1 - if data contains errors or timeout occurred
//
// Requirement(s):
//
int32_t GetSerialMessage(stSerial *SerialStruct) {
 801ba28:	b580      	push	{r7, lr}
 801ba2a:	b08a      	sub	sp, #40	; 0x28
 801ba2c:	af00      	add	r7, sp, #0
 801ba2e:	6078      	str	r0, [r7, #4]

    uint32_t  State, Data, SyncCount, InitialCount;
    uint32_t  CmdLen, Offset, CmdCrc;

    State = 0;
 801ba30:	2300      	movs	r3, #0
 801ba32:	627b      	str	r3, [r7, #36]	; 0x24
    SyncCount = 0;
 801ba34:	2300      	movs	r3, #0
 801ba36:	61fb      	str	r3, [r7, #28]
    CRC->INIT = 0x0000;
 801ba38:	4b6a      	ldr	r3, [pc, #424]	; (801bbe4 <GetSerialMessage+0x1bc>)
 801ba3a:	2200      	movs	r2, #0
 801ba3c:	611a      	str	r2, [r3, #16]
    CRC->POL = 0x1021;
 801ba3e:	4b69      	ldr	r3, [pc, #420]	; (801bbe4 <GetSerialMessage+0x1bc>)
 801ba40:	4a69      	ldr	r2, [pc, #420]	; (801bbe8 <GetSerialMessage+0x1c0>)
 801ba42:	615a      	str	r2, [r3, #20]
    CRC->CR = (1u << 3) | (1u << 0);          // 16-bit poly, reset
 801ba44:	4b67      	ldr	r3, [pc, #412]	; (801bbe4 <GetSerialMessage+0x1bc>)
 801ba46:	2209      	movs	r2, #9
 801ba48:	609a      	str	r2, [r3, #8]
    Data = 0;
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	623b      	str	r3, [r7, #32]
    CmdCrc = 0;
 801ba4e:	2300      	movs	r3, #0
 801ba50:	60fb      	str	r3, [r7, #12]
    Offset = 0;
 801ba52:	2300      	movs	r3, #0
 801ba54:	613b      	str	r3, [r7, #16]
    CmdLen = 0;
 801ba56:	2300      	movs	r3, #0
 801ba58:	617b      	str	r3, [r7, #20]
    while (TRUE) {
        //
        // Wait for Data
        //
        if (SerialStruct == &SerialUsart1) {
 801ba5a:	687a      	ldr	r2, [r7, #4]
 801ba5c:	4b63      	ldr	r3, [pc, #396]	; (801bbec <GetSerialMessage+0x1c4>)
 801ba5e:	429a      	cmp	r2, r3
 801ba60:	d11d      	bne.n	801ba9e <GetSerialMessage+0x76>
            USART1->ICR = UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF;
 801ba62:	4b63      	ldr	r3, [pc, #396]	; (801bbf0 <GetSerialMessage+0x1c8>)
 801ba64:	220f      	movs	r2, #15
 801ba66:	621a      	str	r2, [r3, #32]
            //
            // Loop Waiting for data from Host.  Return FALSE if we timeout
            //
            InitialCount = 0;
 801ba68:	2300      	movs	r3, #0
 801ba6a:	61bb      	str	r3, [r7, #24]
            while ((USART1->ISR & (1u << 5)) == 0) {
 801ba6c:	e00b      	b.n	801ba86 <GetSerialMessage+0x5e>
                IWDG->KR = IWDG_KEY_RELOAD;                // Reset Watchdog
 801ba6e:	4b61      	ldr	r3, [pc, #388]	; (801bbf4 <GetSerialMessage+0x1cc>)
 801ba70:	4a61      	ldr	r2, [pc, #388]	; (801bbf8 <GetSerialMessage+0x1d0>)
 801ba72:	601a      	str	r2, [r3, #0]
                InitialCount++;
 801ba74:	69bb      	ldr	r3, [r7, #24]
 801ba76:	3301      	adds	r3, #1
 801ba78:	61bb      	str	r3, [r7, #24]
                if (InitialCount > 2000000) {
 801ba7a:	69bb      	ldr	r3, [r7, #24]
 801ba7c:	4a5f      	ldr	r2, [pc, #380]	; (801bbfc <GetSerialMessage+0x1d4>)
 801ba7e:	4293      	cmp	r3, r2
 801ba80:	d901      	bls.n	801ba86 <GetSerialMessage+0x5e>
                    return 1;
 801ba82:	2301      	movs	r3, #1
 801ba84:	e0a9      	b.n	801bbda <GetSerialMessage+0x1b2>
            while ((USART1->ISR & (1u << 5)) == 0) {
 801ba86:	4b5a      	ldr	r3, [pc, #360]	; (801bbf0 <GetSerialMessage+0x1c8>)
 801ba88:	69db      	ldr	r3, [r3, #28]
 801ba8a:	2220      	movs	r2, #32
 801ba8c:	4013      	ands	r3, r2
 801ba8e:	d0ee      	beq.n	801ba6e <GetSerialMessage+0x46>
                }
            }
            Data = (uint32_t)USART1->RDR & 0xFFU;
 801ba90:	4b57      	ldr	r3, [pc, #348]	; (801bbf0 <GetSerialMessage+0x1c8>)
 801ba92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ba94:	b29b      	uxth	r3, r3
 801ba96:	001a      	movs	r2, r3
 801ba98:	23ff      	movs	r3, #255	; 0xff
 801ba9a:	4013      	ands	r3, r2
 801ba9c:	623b      	str	r3, [r7, #32]
        }
        if (SerialStruct == &SerialUsart2) {
 801ba9e:	687a      	ldr	r2, [r7, #4]
 801baa0:	4b57      	ldr	r3, [pc, #348]	; (801bc00 <GetSerialMessage+0x1d8>)
 801baa2:	429a      	cmp	r2, r3
 801baa4:	d11d      	bne.n	801bae2 <GetSerialMessage+0xba>
            USART2->ICR = UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF;
 801baa6:	4b57      	ldr	r3, [pc, #348]	; (801bc04 <GetSerialMessage+0x1dc>)
 801baa8:	220f      	movs	r2, #15
 801baaa:	621a      	str	r2, [r3, #32]
            //
            // Loop Waiting for data from Host.  Return FALSE if we timeout
            //
            InitialCount = 0;
 801baac:	2300      	movs	r3, #0
 801baae:	61bb      	str	r3, [r7, #24]
            while ((USART2->ISR & (1u << 5)) == 0) {
 801bab0:	e00b      	b.n	801baca <GetSerialMessage+0xa2>
                IWDG->KR = IWDG_KEY_RELOAD;                // Reset Watchdog
 801bab2:	4b50      	ldr	r3, [pc, #320]	; (801bbf4 <GetSerialMessage+0x1cc>)
 801bab4:	4a50      	ldr	r2, [pc, #320]	; (801bbf8 <GetSerialMessage+0x1d0>)
 801bab6:	601a      	str	r2, [r3, #0]
                InitialCount++;
 801bab8:	69bb      	ldr	r3, [r7, #24]
 801baba:	3301      	adds	r3, #1
 801babc:	61bb      	str	r3, [r7, #24]
                if (InitialCount > 2000000) {
 801babe:	69bb      	ldr	r3, [r7, #24]
 801bac0:	4a4e      	ldr	r2, [pc, #312]	; (801bbfc <GetSerialMessage+0x1d4>)
 801bac2:	4293      	cmp	r3, r2
 801bac4:	d901      	bls.n	801baca <GetSerialMessage+0xa2>
                    return 1;
 801bac6:	2301      	movs	r3, #1
 801bac8:	e087      	b.n	801bbda <GetSerialMessage+0x1b2>
            while ((USART2->ISR & (1u << 5)) == 0) {
 801baca:	4b4e      	ldr	r3, [pc, #312]	; (801bc04 <GetSerialMessage+0x1dc>)
 801bacc:	69db      	ldr	r3, [r3, #28]
 801bace:	2220      	movs	r2, #32
 801bad0:	4013      	ands	r3, r2
 801bad2:	d0ee      	beq.n	801bab2 <GetSerialMessage+0x8a>
                }
            }
            Data = (uint32_t)USART2->RDR & 0xFFu;
 801bad4:	4b4b      	ldr	r3, [pc, #300]	; (801bc04 <GetSerialMessage+0x1dc>)
 801bad6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801bad8:	b29b      	uxth	r3, r3
 801bada:	001a      	movs	r2, r3
 801badc:	23ff      	movs	r3, #255	; 0xff
 801bade:	4013      	ands	r3, r2
 801bae0:	623b      	str	r3, [r7, #32]
        }

        if ((State > 0) && (State < 5)) {
 801bae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d006      	beq.n	801baf6 <GetSerialMessage+0xce>
 801bae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801baea:	2b04      	cmp	r3, #4
 801baec:	d803      	bhi.n	801baf6 <GetSerialMessage+0xce>
            *(uint8_t *)(&CRC->DR) = Data;
 801baee:	4b3d      	ldr	r3, [pc, #244]	; (801bbe4 <GetSerialMessage+0x1bc>)
 801baf0:	6a3a      	ldr	r2, [r7, #32]
 801baf2:	b2d2      	uxtb	r2, r2
 801baf4:	701a      	strb	r2, [r3, #0]
        }

        if (State == 0) {
 801baf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d115      	bne.n	801bb28 <GetSerialMessage+0x100>
            if (Data == 0xAA) {
 801bafc:	6a3b      	ldr	r3, [r7, #32]
 801bafe:	2baa      	cmp	r3, #170	; 0xaa
 801bb00:	d103      	bne.n	801bb0a <GetSerialMessage+0xe2>
                SyncCount++;
 801bb02:	69fb      	ldr	r3, [r7, #28]
 801bb04:	3301      	adds	r3, #1
 801bb06:	61fb      	str	r3, [r7, #28]
 801bb08:	e7a7      	b.n	801ba5a <GetSerialMessage+0x32>
            } else {
                if ((Data == 0x00) && (SyncCount >= 3)) {
 801bb0a:	6a3b      	ldr	r3, [r7, #32]
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d108      	bne.n	801bb22 <GetSerialMessage+0xfa>
 801bb10:	69fb      	ldr	r3, [r7, #28]
 801bb12:	2b02      	cmp	r3, #2
 801bb14:	d905      	bls.n	801bb22 <GetSerialMessage+0xfa>
                    CRC->CR = (1u << 3) | (1u << 0);          // 16-bit poly, reset - Initialize CRC Generator
 801bb16:	4b33      	ldr	r3, [pc, #204]	; (801bbe4 <GetSerialMessage+0x1bc>)
 801bb18:	2209      	movs	r2, #9
 801bb1a:	609a      	str	r2, [r3, #8]
                    State++;  // Must have received at least 3 of the 5 0xAA's
 801bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb1e:	3301      	adds	r3, #1
 801bb20:	627b      	str	r3, [r7, #36]	; 0x24
                }
                SyncCount = 0;
 801bb22:	2300      	movs	r3, #0
 801bb24:	61fb      	str	r3, [r7, #28]
 801bb26:	e798      	b.n	801ba5a <GetSerialMessage+0x32>
            }
        } else if (State == 1) {
 801bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb2a:	2b01      	cmp	r3, #1
 801bb2c:	d109      	bne.n	801bb42 <GetSerialMessage+0x11a>
            SerialStruct->Command = Data;                              // Command
 801bb2e:	6a3b      	ldr	r3, [r7, #32]
 801bb30:	b2d9      	uxtb	r1, r3
 801bb32:	687a      	ldr	r2, [r7, #4]
 801bb34:	238a      	movs	r3, #138	; 0x8a
 801bb36:	005b      	lsls	r3, r3, #1
 801bb38:	54d1      	strb	r1, [r2, r3]
            State++;
 801bb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb3c:	3301      	adds	r3, #1
 801bb3e:	627b      	str	r3, [r7, #36]	; 0x24
 801bb40:	e78b      	b.n	801ba5a <GetSerialMessage+0x32>
        } else if (State == 2) {
 801bb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb44:	2b02      	cmp	r3, #2
 801bb46:	d105      	bne.n	801bb54 <GetSerialMessage+0x12c>
            CmdLen = Data;                              // LSB
 801bb48:	6a3b      	ldr	r3, [r7, #32]
 801bb4a:	617b      	str	r3, [r7, #20]
            State++;
 801bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb4e:	3301      	adds	r3, #1
 801bb50:	627b      	str	r3, [r7, #36]	; 0x24
 801bb52:	e782      	b.n	801ba5a <GetSerialMessage+0x32>
        } else if (State == 3) {
 801bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb56:	2b03      	cmp	r3, #3
 801bb58:	d10a      	bne.n	801bb70 <GetSerialMessage+0x148>
            CmdLen += Data << 8;              // MSB
 801bb5a:	6a3b      	ldr	r3, [r7, #32]
 801bb5c:	021b      	lsls	r3, r3, #8
 801bb5e:	697a      	ldr	r2, [r7, #20]
 801bb60:	18d3      	adds	r3, r2, r3
 801bb62:	617b      	str	r3, [r7, #20]
            State++;
 801bb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb66:	3301      	adds	r3, #1
 801bb68:	627b      	str	r3, [r7, #36]	; 0x24
            Offset = 0;
 801bb6a:	2300      	movs	r3, #0
 801bb6c:	613b      	str	r3, [r7, #16]
 801bb6e:	e774      	b.n	801ba5a <GetSerialMessage+0x32>
        } else if (State == 4) {
 801bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb72:	2b04      	cmp	r3, #4
 801bb74:	d111      	bne.n	801bb9a <GetSerialMessage+0x172>
            SerialBuffer.ByByte[Offset++] = (uint8_t)Data;
 801bb76:	693b      	ldr	r3, [r7, #16]
 801bb78:	1c5a      	adds	r2, r3, #1
 801bb7a:	613a      	str	r2, [r7, #16]
 801bb7c:	6a3a      	ldr	r2, [r7, #32]
 801bb7e:	b2d1      	uxtb	r1, r2
 801bb80:	4a21      	ldr	r2, [pc, #132]	; (801bc08 <GetSerialMessage+0x1e0>)
 801bb82:	54d1      	strb	r1, [r2, r3]
            CmdLen--;
 801bb84:	697b      	ldr	r3, [r7, #20]
 801bb86:	3b01      	subs	r3, #1
 801bb88:	617b      	str	r3, [r7, #20]
            if (CmdLen == 0) {
 801bb8a:	697b      	ldr	r3, [r7, #20]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d000      	beq.n	801bb92 <GetSerialMessage+0x16a>
 801bb90:	e763      	b.n	801ba5a <GetSerialMessage+0x32>
                State++;
 801bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb94:	3301      	adds	r3, #1
 801bb96:	627b      	str	r3, [r7, #36]	; 0x24
 801bb98:	e75f      	b.n	801ba5a <GetSerialMessage+0x32>
            }
        } else if (State == 5) {
 801bb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb9c:	2b05      	cmp	r3, #5
 801bb9e:	d105      	bne.n	801bbac <GetSerialMessage+0x184>
            CmdCrc = Data;                          // LSB
 801bba0:	6a3b      	ldr	r3, [r7, #32]
 801bba2:	60fb      	str	r3, [r7, #12]
            State++;
 801bba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bba6:	3301      	adds	r3, #1
 801bba8:	627b      	str	r3, [r7, #36]	; 0x24
 801bbaa:	e756      	b.n	801ba5a <GetSerialMessage+0x32>
        } else if (State == 6) {
 801bbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbae:	2b06      	cmp	r3, #6
 801bbb0:	d110      	bne.n	801bbd4 <GetSerialMessage+0x1ac>
            State = 0;
 801bbb2:	2300      	movs	r3, #0
 801bbb4:	627b      	str	r3, [r7, #36]	; 0x24
            CmdCrc += Data << 8;          // MSB
 801bbb6:	6a3b      	ldr	r3, [r7, #32]
 801bbb8:	021b      	lsls	r3, r3, #8
 801bbba:	68fa      	ldr	r2, [r7, #12]
 801bbbc:	18d3      	adds	r3, r2, r3
 801bbbe:	60fb      	str	r3, [r7, #12]
            if (CmdCrc == (CRC->DR & 0xFFFF)) {
 801bbc0:	4b08      	ldr	r3, [pc, #32]	; (801bbe4 <GetSerialMessage+0x1bc>)
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	041b      	lsls	r3, r3, #16
 801bbc6:	0c1b      	lsrs	r3, r3, #16
 801bbc8:	68fa      	ldr	r2, [r7, #12]
 801bbca:	429a      	cmp	r2, r3
 801bbcc:	d000      	beq.n	801bbd0 <GetSerialMessage+0x1a8>
 801bbce:	e744      	b.n	801ba5a <GetSerialMessage+0x32>
                return 0;
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	e002      	b.n	801bbda <GetSerialMessage+0x1b2>
            }
        } else {
            State = 0;
 801bbd4:	2300      	movs	r3, #0
 801bbd6:	627b      	str	r3, [r7, #36]	; 0x24
        if (SerialStruct == &SerialUsart1) {
 801bbd8:	e73f      	b.n	801ba5a <GetSerialMessage+0x32>
        }
    }
}
 801bbda:	0018      	movs	r0, r3
 801bbdc:	46bd      	mov	sp, r7
 801bbde:	b00a      	add	sp, #40	; 0x28
 801bbe0:	bd80      	pop	{r7, pc}
 801bbe2:	46c0      	nop			; (mov r8, r8)
 801bbe4:	40023000 	.word	0x40023000
 801bbe8:	00001021 	.word	0x00001021
 801bbec:	20001588 	.word	0x20001588
 801bbf0:	40013800 	.word	0x40013800
 801bbf4:	40003000 	.word	0x40003000
 801bbf8:	0000aaaa 	.word	0x0000aaaa
 801bbfc:	001e8480 	.word	0x001e8480
 801bc00:	200018b4 	.word	0x200018b4
 801bc04:	40004400 	.word	0x40004400
 801bc08:	20002fa8 	.word	0x20002fa8

0801bc0c <reflash>:
//
// Returns:   None
//
// Requirement(s):
//
void reflash(stSerial *SerialStruct, uint16_t Crc, uint16_t Version) {
 801bc0c:	b590      	push	{r4, r7, lr}
 801bc0e:	b087      	sub	sp, #28
 801bc10:	af00      	add	r7, sp, #0
 801bc12:	6078      	str	r0, [r7, #4]
 801bc14:	0008      	movs	r0, r1
 801bc16:	0011      	movs	r1, r2
 801bc18:	1cbb      	adds	r3, r7, #2
 801bc1a:	1c02      	adds	r2, r0, #0
 801bc1c:	801a      	strh	r2, [r3, #0]
 801bc1e:	003b      	movs	r3, r7
 801bc20:	1c0a      	adds	r2, r1, #0
 801bc22:	801a      	strh	r2, [r3, #0]

    uint16_t  PageNumber;
    int32_t   ResponseCode;
    uint8_t   i, FirmwarePageNumber;

    DisableInterrupts();
 801bc24:	f7ea f8a0 	bl	8005d68 <DisableInterrupts>
    IWDG->KR = IWDG_KEY_ENABLE;
 801bc28:	4b5d      	ldr	r3, [pc, #372]	; (801bda0 <reflash+0x194>)
 801bc2a:	4a5e      	ldr	r2, [pc, #376]	; (801bda4 <reflash+0x198>)
 801bc2c:	601a      	str	r2, [r3, #0]
    IWDG->KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 801bc2e:	4b5c      	ldr	r3, [pc, #368]	; (801bda0 <reflash+0x194>)
 801bc30:	4a5d      	ldr	r2, [pc, #372]	; (801bda8 <reflash+0x19c>)
 801bc32:	601a      	str	r2, [r3, #0]
    IWDG->PR = IWDG_PRESCALER_256;
 801bc34:	4b5a      	ldr	r3, [pc, #360]	; (801bda0 <reflash+0x194>)
 801bc36:	2206      	movs	r2, #6
 801bc38:	605a      	str	r2, [r3, #4]
    IWDG->RLR = (2000 * 10) / 64;
 801bc3a:	4b59      	ldr	r3, [pc, #356]	; (801bda0 <reflash+0x194>)
 801bc3c:	229c      	movs	r2, #156	; 0x9c
 801bc3e:	0052      	lsls	r2, r2, #1
 801bc40:	609a      	str	r2, [r3, #8]
    do {
    } while (IWDG->SR != RESET);
 801bc42:	4b57      	ldr	r3, [pc, #348]	; (801bda0 <reflash+0x194>)
 801bc44:	68db      	ldr	r3, [r3, #12]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d1fb      	bne.n	801bc42 <reflash+0x36>
    IWDG->WINR = 0xFFF;           // Disable Windowing
 801bc4a:	4b55      	ldr	r3, [pc, #340]	; (801bda0 <reflash+0x194>)
 801bc4c:	4a57      	ldr	r2, [pc, #348]	; (801bdac <reflash+0x1a0>)
 801bc4e:	611a      	str	r2, [r3, #16]
    //
    // Unlock FLASH
    //
    if ((FLASH->CR & FLASH_CR_LOCK) != 0) {     // Macro
 801bc50:	4b57      	ldr	r3, [pc, #348]	; (801bdb0 <reflash+0x1a4>)
 801bc52:	691b      	ldr	r3, [r3, #16]
 801bc54:	2280      	movs	r2, #128	; 0x80
 801bc56:	4013      	ands	r3, r2
 801bc58:	d005      	beq.n	801bc66 <reflash+0x5a>
        FLASH->KEYR = FLASH_KEY1;
 801bc5a:	4b55      	ldr	r3, [pc, #340]	; (801bdb0 <reflash+0x1a4>)
 801bc5c:	4a55      	ldr	r2, [pc, #340]	; (801bdb4 <reflash+0x1a8>)
 801bc5e:	605a      	str	r2, [r3, #4]
        FLASH->KEYR = FLASH_KEY2;
 801bc60:	4b53      	ldr	r3, [pc, #332]	; (801bdb0 <reflash+0x1a4>)
 801bc62:	4a55      	ldr	r2, [pc, #340]	; (801bdb8 <reflash+0x1ac>)
 801bc64:	605a      	str	r2, [r3, #4]
    }
    //
    // Clear Error Flags
    //
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR); // Macro - Clear all FLASH flags
 801bc66:	4b52      	ldr	r3, [pc, #328]	; (801bdb0 <reflash+0x1a4>)
 801bc68:	2214      	movs	r2, #20
 801bc6a:	60da      	str	r2, [r3, #12]
    for (i = 0; i < 56; i++) {
 801bc6c:	2315      	movs	r3, #21
 801bc6e:	18fb      	adds	r3, r7, r3
 801bc70:	2200      	movs	r2, #0
 801bc72:	701a      	strb	r2, [r3, #0]
 801bc74:	e04d      	b.n	801bd12 <reflash+0x106>

        //
        // Loop Here sending request for Firmware until we get a response with the correct page number
        //
        while (1) {
            IWDG->KR = IWDG_KEY_RELOAD;                // Reset Watchdog
 801bc76:	4b4a      	ldr	r3, [pc, #296]	; (801bda0 <reflash+0x194>)
 801bc78:	4a50      	ldr	r2, [pc, #320]	; (801bdbc <reflash+0x1b0>)
 801bc7a:	601a      	str	r2, [r3, #0]
            //
            // Send command to Host requesting a Page of Data
            //
            SerialBuffer.ByByte[9] = i;
 801bc7c:	4b50      	ldr	r3, [pc, #320]	; (801bdc0 <reflash+0x1b4>)
 801bc7e:	2215      	movs	r2, #21
 801bc80:	18ba      	adds	r2, r7, r2
 801bc82:	7812      	ldrb	r2, [r2, #0]
 801bc84:	725a      	strb	r2, [r3, #9]
            SerialStruct->Command = 0xEE;
 801bc86:	687a      	ldr	r2, [r7, #4]
 801bc88:	238a      	movs	r3, #138	; 0x8a
 801bc8a:	005b      	lsls	r3, r3, #1
 801bc8c:	21ee      	movs	r1, #238	; 0xee
 801bc8e:	54d1      	strb	r1, [r2, r3]
            SerialStruct->Length = 1;
 801bc90:	687a      	ldr	r2, [r7, #4]
 801bc92:	238b      	movs	r3, #139	; 0x8b
 801bc94:	005b      	lsls	r3, r3, #1
 801bc96:	2101      	movs	r1, #1
 801bc98:	52d1      	strh	r1, [r2, r3]
            ReflashSerialSend(SerialStruct);
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	0018      	movs	r0, r3
 801bc9e:	f7ff fdef 	bl	801b880 <ReflashSerialSend>
            ResponseCode = GetSerialMessage(SerialStruct);
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	0018      	movs	r0, r3
 801bca6:	f7ff febf 	bl	801ba28 <GetSerialMessage>
 801bcaa:	0003      	movs	r3, r0
 801bcac:	613b      	str	r3, [r7, #16]
            FirmwarePageNumber = SerialBuffer.ByByte[0];
 801bcae:	230f      	movs	r3, #15
 801bcb0:	18fb      	adds	r3, r7, r3
 801bcb2:	4a43      	ldr	r2, [pc, #268]	; (801bdc0 <reflash+0x1b4>)
 801bcb4:	7812      	ldrb	r2, [r2, #0]
 801bcb6:	701a      	strb	r2, [r3, #0]
            if ((ResponseCode == 0) && (i == FirmwarePageNumber)) {
 801bcb8:	693b      	ldr	r3, [r7, #16]
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d1db      	bne.n	801bc76 <reflash+0x6a>
 801bcbe:	2315      	movs	r3, #21
 801bcc0:	18fa      	adds	r2, r7, r3
 801bcc2:	230f      	movs	r3, #15
 801bcc4:	18fb      	adds	r3, r7, r3
 801bcc6:	7812      	ldrb	r2, [r2, #0]
 801bcc8:	781b      	ldrb	r3, [r3, #0]
 801bcca:	429a      	cmp	r2, r3
 801bccc:	d1d3      	bne.n	801bc76 <reflash+0x6a>
                PageNumber = i;
 801bcce:	2116      	movs	r1, #22
 801bcd0:	187b      	adds	r3, r7, r1
 801bcd2:	2215      	movs	r2, #21
 801bcd4:	18ba      	adds	r2, r7, r2
 801bcd6:	7812      	ldrb	r2, [r2, #0]
 801bcd8:	801a      	strh	r2, [r3, #0]
                //
                // As we are executing from Page 55, Page 55 can not be reprogrammed, so move page 55 code to page 56.
                // In initsystem, there is code that will check if page 56 should be moved back to page 55 on the next power-up
                //
                if (PageNumber == 55) {
 801bcda:	187b      	adds	r3, r7, r1
 801bcdc:	881b      	ldrh	r3, [r3, #0]
 801bcde:	2b37      	cmp	r3, #55	; 0x37
 801bce0:	d103      	bne.n	801bcea <reflash+0xde>
                    PageNumber = 56;
 801bce2:	2316      	movs	r3, #22
 801bce4:	18fb      	adds	r3, r7, r3
 801bce6:	2238      	movs	r2, #56	; 0x38
 801bce8:	801a      	strh	r2, [r3, #0]
                }
                Flash_Program(0x08000000u + (PageNumber * FLASH_PAGE_SIZE), (uint16_t *)&SerialBuffer.ByByte[4]);
 801bcea:	2316      	movs	r3, #22
 801bcec:	18fb      	adds	r3, r7, r3
 801bcee:	881b      	ldrh	r3, [r3, #0]
 801bcf0:	02db      	lsls	r3, r3, #11
 801bcf2:	2280      	movs	r2, #128	; 0x80
 801bcf4:	0512      	lsls	r2, r2, #20
 801bcf6:	4694      	mov	ip, r2
 801bcf8:	4463      	add	r3, ip
 801bcfa:	4a32      	ldr	r2, [pc, #200]	; (801bdc4 <reflash+0x1b8>)
 801bcfc:	0011      	movs	r1, r2
 801bcfe:	0018      	movs	r0, r3
 801bd00:	f000 f86a 	bl	801bdd8 <Flash_Program>
                break;
 801bd04:	46c0      	nop			; (mov r8, r8)
    for (i = 0; i < 56; i++) {
 801bd06:	2115      	movs	r1, #21
 801bd08:	187b      	adds	r3, r7, r1
 801bd0a:	781a      	ldrb	r2, [r3, #0]
 801bd0c:	187b      	adds	r3, r7, r1
 801bd0e:	3201      	adds	r2, #1
 801bd10:	701a      	strb	r2, [r3, #0]
 801bd12:	2315      	movs	r3, #21
 801bd14:	18fb      	adds	r3, r7, r3
 801bd16:	781b      	ldrb	r3, [r3, #0]
 801bd18:	2b37      	cmp	r3, #55	; 0x37
 801bd1a:	d9ac      	bls.n	801bc76 <reflash+0x6a>
        }
    }
    //
    // Send command to Host that we are done
    //
    SerialBuffer.ByByte[9] = 99;
 801bd1c:	4b28      	ldr	r3, [pc, #160]	; (801bdc0 <reflash+0x1b4>)
 801bd1e:	2263      	movs	r2, #99	; 0x63
 801bd20:	725a      	strb	r2, [r3, #9]
    SerialStruct->Command = 0xEE;
 801bd22:	687a      	ldr	r2, [r7, #4]
 801bd24:	238a      	movs	r3, #138	; 0x8a
 801bd26:	005b      	lsls	r3, r3, #1
 801bd28:	21ee      	movs	r1, #238	; 0xee
 801bd2a:	54d1      	strb	r1, [r2, r3]
    SerialStruct->Length = 3;
 801bd2c:	687a      	ldr	r2, [r7, #4]
 801bd2e:	238b      	movs	r3, #139	; 0x8b
 801bd30:	005b      	lsls	r3, r3, #1
 801bd32:	2103      	movs	r1, #3
 801bd34:	52d1      	strh	r1, [r2, r3]
    ReflashSerialSend(SerialStruct);
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	0018      	movs	r0, r3
 801bd3a:	f7ff fda1 	bl	801b880 <ReflashSerialSend>

    MoveMem((uint8_t *)&SerialBuffer.ByByte[0], (uint8_t *)(0x08000000u + (63 * FLASH_PAGE_SIZE)), 2048);
 801bd3e:	2380      	movs	r3, #128	; 0x80
 801bd40:	011a      	lsls	r2, r3, #4
 801bd42:	4921      	ldr	r1, [pc, #132]	; (801bdc8 <reflash+0x1bc>)
 801bd44:	4b1e      	ldr	r3, [pc, #120]	; (801bdc0 <reflash+0x1b4>)
 801bd46:	0018      	movs	r0, r3
 801bd48:	f000 f890 	bl	801be6c <MoveMem>
    FactoryConfiguration = (stFactoryConfiguration *)&SerialBuffer.ByByte[0];
 801bd4c:	4b1f      	ldr	r3, [pc, #124]	; (801bdcc <reflash+0x1c0>)
 801bd4e:	4a1c      	ldr	r2, [pc, #112]	; (801bdc0 <reflash+0x1b4>)
 801bd50:	601a      	str	r2, [r3, #0]
    FactoryConfiguration->FirmwareVersion = Version;
 801bd52:	4b1e      	ldr	r3, [pc, #120]	; (801bdcc <reflash+0x1c0>)
 801bd54:	681a      	ldr	r2, [r3, #0]
 801bd56:	0039      	movs	r1, r7
 801bd58:	2385      	movs	r3, #133	; 0x85
 801bd5a:	009b      	lsls	r3, r3, #2
 801bd5c:	8809      	ldrh	r1, [r1, #0]
 801bd5e:	52d1      	strh	r1, [r2, r3]
    FactoryConfiguration->FirmwareCrc16 = Crc;
 801bd60:	4b1a      	ldr	r3, [pc, #104]	; (801bdcc <reflash+0x1c0>)
 801bd62:	6819      	ldr	r1, [r3, #0]
 801bd64:	1cba      	adds	r2, r7, #2
 801bd66:	2385      	movs	r3, #133	; 0x85
 801bd68:	009b      	lsls	r3, r3, #2
 801bd6a:	18cb      	adds	r3, r1, r3
 801bd6c:	8812      	ldrh	r2, [r2, #0]
 801bd6e:	805a      	strh	r2, [r3, #2]
    FactoryConfiguration->Crc16 = CalcCrc16Array((uint8_t *)FactoryConfiguration, 2046);
 801bd70:	4b16      	ldr	r3, [pc, #88]	; (801bdcc <reflash+0x1c0>)
 801bd72:	681a      	ldr	r2, [r3, #0]
 801bd74:	4b15      	ldr	r3, [pc, #84]	; (801bdcc <reflash+0x1c0>)
 801bd76:	681c      	ldr	r4, [r3, #0]
 801bd78:	4b15      	ldr	r3, [pc, #84]	; (801bdd0 <reflash+0x1c4>)
 801bd7a:	0019      	movs	r1, r3
 801bd7c:	0010      	movs	r0, r2
 801bd7e:	f7e6 fecd 	bl	8002b1c <CalcCrc16Array>
 801bd82:	0003      	movs	r3, r0
 801bd84:	001a      	movs	r2, r3
 801bd86:	4b13      	ldr	r3, [pc, #76]	; (801bdd4 <reflash+0x1c8>)
 801bd88:	18e3      	adds	r3, r4, r3
 801bd8a:	805a      	strh	r2, [r3, #2]
    Flash_Program(0x08000000u + (63 * FLASH_PAGE_SIZE), (uint16_t *)&SerialBuffer.ByByte[0]);
 801bd8c:	4b0c      	ldr	r3, [pc, #48]	; (801bdc0 <reflash+0x1b4>)
 801bd8e:	4a0e      	ldr	r2, [pc, #56]	; (801bdc8 <reflash+0x1bc>)
 801bd90:	0019      	movs	r1, r3
 801bd92:	0010      	movs	r0, r2
 801bd94:	f000 f820 	bl	801bdd8 <Flash_Program>

    while (1) {
        IWDG->KR = IWDG_KEY_RELOAD;                // Reset Watchdog
 801bd98:	4b01      	ldr	r3, [pc, #4]	; (801bda0 <reflash+0x194>)
 801bd9a:	4a08      	ldr	r2, [pc, #32]	; (801bdbc <reflash+0x1b0>)
 801bd9c:	601a      	str	r2, [r3, #0]
 801bd9e:	e7fb      	b.n	801bd98 <reflash+0x18c>
 801bda0:	40003000 	.word	0x40003000
 801bda4:	0000cccc 	.word	0x0000cccc
 801bda8:	00005555 	.word	0x00005555
 801bdac:	00000fff 	.word	0x00000fff
 801bdb0:	40022000 	.word	0x40022000
 801bdb4:	45670123 	.word	0x45670123
 801bdb8:	cdef89ab 	.word	0xcdef89ab
 801bdbc:	0000aaaa 	.word	0x0000aaaa
 801bdc0:	20002fa8 	.word	0x20002fa8
 801bdc4:	20002fac 	.word	0x20002fac
 801bdc8:	0801f800 	.word	0x0801f800
 801bdcc:	20001eec 	.word	0x20001eec
 801bdd0:	000007fe 	.word	0x000007fe
 801bdd4:	000007fc 	.word	0x000007fc

0801bdd8 <Flash_Program>:
//
// Returns:   None
//
// Requirement(s):
//
void Flash_Program(uint32_t Address, uint16_t *WordPtr) {
 801bdd8:	b580      	push	{r7, lr}
 801bdda:	b084      	sub	sp, #16
 801bddc:	af00      	add	r7, sp, #0
 801bdde:	6078      	str	r0, [r7, #4]
 801bde0:	6039      	str	r1, [r7, #0]

    WaitForLastOperation();
 801bde2:	f7ff fd0d 	bl	801b800 <WaitForLastOperation>
    FLASH->CR |= FLASH_CR_PER;           // Erase current page
 801bde6:	4b1f      	ldr	r3, [pc, #124]	; (801be64 <Flash_Program+0x8c>)
 801bde8:	691a      	ldr	r2, [r3, #16]
 801bdea:	4b1e      	ldr	r3, [pc, #120]	; (801be64 <Flash_Program+0x8c>)
 801bdec:	2102      	movs	r1, #2
 801bdee:	430a      	orrs	r2, r1
 801bdf0:	611a      	str	r2, [r3, #16]
    FLASH->AR = Address;
 801bdf2:	4b1c      	ldr	r3, [pc, #112]	; (801be64 <Flash_Program+0x8c>)
 801bdf4:	687a      	ldr	r2, [r7, #4]
 801bdf6:	615a      	str	r2, [r3, #20]
    FLASH->CR |= FLASH_CR_STRT;
 801bdf8:	4b1a      	ldr	r3, [pc, #104]	; (801be64 <Flash_Program+0x8c>)
 801bdfa:	691a      	ldr	r2, [r3, #16]
 801bdfc:	4b19      	ldr	r3, [pc, #100]	; (801be64 <Flash_Program+0x8c>)
 801bdfe:	2140      	movs	r1, #64	; 0x40
 801be00:	430a      	orrs	r2, r1
 801be02:	611a      	str	r2, [r3, #16]
    WaitForLastOperation(); /* Wait for last operation to be completed */
 801be04:	f7ff fcfc 	bl	801b800 <WaitForLastOperation>
    FLASH->CR &= ~FLASH_CR_PER;
 801be08:	4b16      	ldr	r3, [pc, #88]	; (801be64 <Flash_Program+0x8c>)
 801be0a:	691a      	ldr	r2, [r3, #16]
 801be0c:	4b15      	ldr	r3, [pc, #84]	; (801be64 <Flash_Program+0x8c>)
 801be0e:	2102      	movs	r1, #2
 801be10:	438a      	bics	r2, r1
 801be12:	611a      	str	r2, [r3, #16]
    WaitForLastOperation(); /* Wait for last operation to be completed */
 801be14:	f7ff fcf4 	bl	801b800 <WaitForLastOperation>
    for (uint32_t Index = 0; Index < (2048 / 2); Index++) {
 801be18:	2300      	movs	r3, #0
 801be1a:	60fb      	str	r3, [r7, #12]
 801be1c:	e01a      	b.n	801be54 <Flash_Program+0x7c>
        FLASH->CR |= FLASH_CR_PG; /* Proceed to program the new data */
 801be1e:	4b11      	ldr	r3, [pc, #68]	; (801be64 <Flash_Program+0x8c>)
 801be20:	691a      	ldr	r2, [r3, #16]
 801be22:	4b10      	ldr	r3, [pc, #64]	; (801be64 <Flash_Program+0x8c>)
 801be24:	2101      	movs	r1, #1
 801be26:	430a      	orrs	r2, r1
 801be28:	611a      	str	r2, [r3, #16]
        *(volatile uint16_t *)Address = WordPtr[Index]; /* Write data in the address */
 801be2a:	68fb      	ldr	r3, [r7, #12]
 801be2c:	005b      	lsls	r3, r3, #1
 801be2e:	683a      	ldr	r2, [r7, #0]
 801be30:	18d2      	adds	r2, r2, r3
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	8812      	ldrh	r2, [r2, #0]
 801be36:	801a      	strh	r2, [r3, #0]
        Address += 2;
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	3302      	adds	r3, #2
 801be3c:	607b      	str	r3, [r7, #4]
        WaitForLastOperation(); /* Wait for last operation to be completed */
 801be3e:	f7ff fcdf 	bl	801b800 <WaitForLastOperation>
        FLASH->CR &= ~FLASH_CR_PG; /* If the program operation is completed, disable the PG Bit */
 801be42:	4b08      	ldr	r3, [pc, #32]	; (801be64 <Flash_Program+0x8c>)
 801be44:	691a      	ldr	r2, [r3, #16]
 801be46:	4b07      	ldr	r3, [pc, #28]	; (801be64 <Flash_Program+0x8c>)
 801be48:	2101      	movs	r1, #1
 801be4a:	438a      	bics	r2, r1
 801be4c:	611a      	str	r2, [r3, #16]
    for (uint32_t Index = 0; Index < (2048 / 2); Index++) {
 801be4e:	68fb      	ldr	r3, [r7, #12]
 801be50:	3301      	adds	r3, #1
 801be52:	60fb      	str	r3, [r7, #12]
 801be54:	68fb      	ldr	r3, [r7, #12]
 801be56:	4a04      	ldr	r2, [pc, #16]	; (801be68 <Flash_Program+0x90>)
 801be58:	4293      	cmp	r3, r2
 801be5a:	d9e0      	bls.n	801be1e <Flash_Program+0x46>
        }
}
 801be5c:	46c0      	nop			; (mov r8, r8)
 801be5e:	46bd      	mov	sp, r7
 801be60:	b004      	add	sp, #16
 801be62:	bd80      	pop	{r7, pc}
 801be64:	40022000 	.word	0x40022000
 801be68:	000003ff 	.word	0x000003ff

0801be6c <MoveMem>:
void MoveMem (uint8_t *dst, uint8_t *src, uint32_t len) {
 801be6c:	b580      	push	{r7, lr}
 801be6e:	b084      	sub	sp, #16
 801be70:	af00      	add	r7, sp, #0
 801be72:	60f8      	str	r0, [r7, #12]
 801be74:	60b9      	str	r1, [r7, #8]
 801be76:	607a      	str	r2, [r7, #4]
    while (len--) {
 801be78:	e007      	b.n	801be8a <MoveMem+0x1e>
        *dst++ = *src++;
 801be7a:	68ba      	ldr	r2, [r7, #8]
 801be7c:	1c53      	adds	r3, r2, #1
 801be7e:	60bb      	str	r3, [r7, #8]
 801be80:	68fb      	ldr	r3, [r7, #12]
 801be82:	1c59      	adds	r1, r3, #1
 801be84:	60f9      	str	r1, [r7, #12]
 801be86:	7812      	ldrb	r2, [r2, #0]
 801be88:	701a      	strb	r2, [r3, #0]
    while (len--) {
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	1e5a      	subs	r2, r3, #1
 801be8e:	607a      	str	r2, [r7, #4]
 801be90:	2b00      	cmp	r3, #0
 801be92:	d1f2      	bne.n	801be7a <MoveMem+0xe>
}
 801be94:	46c0      	nop			; (mov r8, r8)
 801be96:	46bd      	mov	sp, r7
 801be98:	b004      	add	sp, #16
 801be9a:	bd80      	pop	{r7, pc}
